
TrashBoiz_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002934  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000158  20000068  0000299c  00020068  2**2
                  ALLOC
  3 .stack        00002000  200001c0  00002af4  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023b3a  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034bc  00000000  00000000  00043c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000507c  00000000  00000000  000470df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004a8  00000000  00000000  0004c15b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005b0  00000000  00000000  0004c603  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000061d8  00000000  00000000  0004cbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b56d  00000000  00000000  00052d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000878f5  00000000  00000000  0005e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012a0  00000000  00000000  000e5bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 21 00 20 69 12 00 00 65 12 00 00 65 12 00 00     .!. i...e...e...
	...
      2c:	65 12 00 00 00 00 00 00 00 00 00 00 65 12 00 00     e...........e...
      3c:	65 12 00 00 65 12 00 00 65 12 00 00 65 12 00 00     e...e...e...e...
      4c:	65 12 00 00 65 12 00 00 65 12 00 00 65 12 00 00     e...e...e...e...
      5c:	65 12 00 00 65 12 00 00 6d 06 00 00 7d 06 00 00     e...e...m...}...
      6c:	8d 06 00 00 9d 06 00 00 ad 06 00 00 bd 06 00 00     ................
      7c:	65 12 00 00 65 12 00 00 65 12 00 00 65 12 00 00     e...e...e...e...
      8c:	65 12 00 00 65 12 00 00 00 00 00 00 00 00 00 00     e...e...........
      9c:	65 12 00 00 65 12 00 00 65 12 00 00 65 12 00 00     e...e...e...e...
      ac:	65 12 00 00 00 00 00 00                             e.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002934 	.word	0x00002934

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002934 	.word	0x00002934
     10c:	00002934 	.word	0x00002934
     110:	00000000 	.word	0x00000000

00000114 <nvm_set_config>:
	}

	*((uint32_t *)NVMCTRL_AUX0_ADDRESS) = fusebits[0];
    *(((uint32_t *)NVMCTRL_AUX0_ADDRESS) + 1) = fusebits[1];

	error_code = nvm_execute_command(NVM_COMMAND_WRITE_AUX_ROW,NVMCTRL_AUX0_ADDRESS,0);
     114:	b510      	push	{r4, lr}
     116:	4a1f      	ldr	r2, [pc, #124]	; (194 <nvm_set_config+0x80>)
     118:	69d3      	ldr	r3, [r2, #28]
     11a:	2104      	movs	r1, #4
     11c:	430b      	orrs	r3, r1
     11e:	61d3      	str	r3, [r2, #28]
     120:	4b1d      	ldr	r3, [pc, #116]	; (198 <nvm_set_config+0x84>)
     122:	8b1a      	ldrh	r2, [r3, #24]
     124:	2120      	movs	r1, #32
     126:	31ff      	adds	r1, #255	; 0xff
     128:	430a      	orrs	r2, r1
     12a:	831a      	strh	r2, [r3, #24]
     12c:	7d1a      	ldrb	r2, [r3, #20]
     12e:	2305      	movs	r3, #5
     130:	07d2      	lsls	r2, r2, #31
     132:	d401      	bmi.n	138 <nvm_set_config+0x24>
     134:	0018      	movs	r0, r3
     136:	bd10      	pop	{r4, pc}
     138:	7803      	ldrb	r3, [r0, #0]
     13a:	021b      	lsls	r3, r3, #8
     13c:	22c0      	movs	r2, #192	; 0xc0
     13e:	0092      	lsls	r2, r2, #2
     140:	4013      	ands	r3, r2
     142:	7841      	ldrb	r1, [r0, #1]
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     144:	01c9      	lsls	r1, r1, #7
     146:	22ff      	movs	r2, #255	; 0xff
     148:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     14a:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     14c:	7881      	ldrb	r1, [r0, #2]
     14e:	0049      	lsls	r1, r1, #1
     150:	221e      	movs	r2, #30
     152:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     154:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     156:	78c2      	ldrb	r2, [r0, #3]
     158:	0492      	lsls	r2, r2, #18
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	02c9      	lsls	r1, r1, #11
     15e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     160:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     162:	7902      	ldrb	r2, [r0, #4]
     164:	0412      	lsls	r2, r2, #16
     166:	21c0      	movs	r1, #192	; 0xc0
     168:	0289      	lsls	r1, r1, #10
     16a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     16c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     16e:	4a0a      	ldr	r2, [pc, #40]	; (198 <nvm_set_config+0x84>)
     170:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     172:	6893      	ldr	r3, [r2, #8]
     174:	035b      	lsls	r3, r3, #13
     176:	0f5b      	lsrs	r3, r3, #29
     178:	4908      	ldr	r1, [pc, #32]	; (19c <nvm_set_config+0x88>)
     17a:	2408      	movs	r4, #8
     17c:	409c      	lsls	r4, r3
     17e:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     180:	6893      	ldr	r3, [r2, #8]
     182:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     184:	7843      	ldrb	r3, [r0, #1]
     186:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     188:	8b13      	ldrh	r3, [r2, #24]
     18a:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     18c:	0fdb      	lsrs	r3, r3, #31
     18e:	011b      	lsls	r3, r3, #4
     190:	e7d0      	b.n	134 <nvm_set_config+0x20>
     192:	46c0      	nop			; (mov r8, r8)
     194:	40000400 	.word	0x40000400
     198:	41004000 	.word	0x41004000
     19c:	20000084 	.word	0x20000084

000001a0 <nvm_read_buffer>:
{
     1a0:	b570      	push	{r4, r5, r6, lr}
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     1a2:	4b19      	ldr	r3, [pc, #100]	; (208 <nvm_read_buffer+0x68>)
     1a4:	881d      	ldrh	r5, [r3, #0]
     1a6:	885b      	ldrh	r3, [r3, #2]
     1a8:	436b      	muls	r3, r5
		return STATUS_ERR_BAD_ADDRESS;
     1aa:	2418      	movs	r4, #24
	if (source_address >
     1ac:	4283      	cmp	r3, r0
     1ae:	d201      	bcs.n	1b4 <nvm_read_buffer+0x14>
}
     1b0:	0020      	movs	r0, r4
     1b2:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
     1b4:	1e6b      	subs	r3, r5, #1
     1b6:	4218      	tst	r0, r3
     1b8:	d1fa      	bne.n	1b0 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     1ba:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     1bc:	4295      	cmp	r5, r2
     1be:	d3f7      	bcc.n	1b0 <nvm_read_buffer+0x10>
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     1c0:	4b12      	ldr	r3, [pc, #72]	; (20c <nvm_read_buffer+0x6c>)
     1c2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     1c4:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     1c6:	07db      	lsls	r3, r3, #31
     1c8:	d5f2      	bpl.n	1b0 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     1ca:	4c10      	ldr	r4, [pc, #64]	; (20c <nvm_read_buffer+0x6c>)
     1cc:	8b23      	ldrh	r3, [r4, #24]
     1ce:	2520      	movs	r5, #32
     1d0:	35ff      	adds	r5, #255	; 0xff
     1d2:	432b      	orrs	r3, r5
     1d4:	8323      	strh	r3, [r4, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     1d6:	2a00      	cmp	r2, #0
     1d8:	d014      	beq.n	204 <nvm_read_buffer+0x64>
     1da:	2301      	movs	r3, #1
     1dc:	4398      	bics	r0, r3
     1de:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     1e0:	1e56      	subs	r6, r2, #1
     1e2:	e004      	b.n	1ee <nvm_read_buffer+0x4e>
	for (uint16_t i = 0; i < length; i += 2) {
     1e4:	3302      	adds	r3, #2
     1e6:	b29b      	uxth	r3, r3
     1e8:	3002      	adds	r0, #2
     1ea:	429a      	cmp	r2, r3
     1ec:	d908      	bls.n	200 <nvm_read_buffer+0x60>
		uint16_t data = NVM_MEMORY[page_address++];
     1ee:	8804      	ldrh	r4, [r0, #0]
     1f0:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     1f2:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     1f4:	42b3      	cmp	r3, r6
     1f6:	daf5      	bge.n	1e4 <nvm_read_buffer+0x44>
			buffer[i + 1] = (data >> 8);
     1f8:	18cd      	adds	r5, r1, r3
     1fa:	0a24      	lsrs	r4, r4, #8
     1fc:	706c      	strb	r4, [r5, #1]
     1fe:	e7f1      	b.n	1e4 <nvm_read_buffer+0x44>
	return STATUS_OK;
     200:	2400      	movs	r4, #0
     202:	e7d5      	b.n	1b0 <nvm_read_buffer+0x10>
     204:	2400      	movs	r4, #0
     206:	e7d3      	b.n	1b0 <nvm_read_buffer+0x10>
     208:	20000084 	.word	0x20000084
     20c:	41004000 	.word	0x41004000

00000210 <nvm_erase_row>:
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     210:	4b11      	ldr	r3, [pc, #68]	; (258 <nvm_erase_row+0x48>)
     212:	881a      	ldrh	r2, [r3, #0]
     214:	885b      	ldrh	r3, [r3, #2]
     216:	4353      	muls	r3, r2
		return STATUS_ERR_BAD_ADDRESS;
     218:	2118      	movs	r1, #24
	if (row_address >
     21a:	4283      	cmp	r3, r0
     21c:	d201      	bcs.n	222 <nvm_erase_row+0x12>
}
     21e:	0008      	movs	r0, r1
     220:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     222:	0092      	lsls	r2, r2, #2
     224:	3a01      	subs	r2, #1
     226:	4210      	tst	r0, r2
     228:	d1f9      	bne.n	21e <nvm_erase_row+0xe>
     22a:	4b0c      	ldr	r3, [pc, #48]	; (25c <nvm_erase_row+0x4c>)
     22c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     22e:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     230:	07db      	lsls	r3, r3, #31
     232:	d5f4      	bpl.n	21e <nvm_erase_row+0xe>
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     234:	4b09      	ldr	r3, [pc, #36]	; (25c <nvm_erase_row+0x4c>)
     236:	8b1a      	ldrh	r2, [r3, #24]
     238:	2120      	movs	r1, #32
     23a:	31ff      	adds	r1, #255	; 0xff
     23c:	430a      	orrs	r2, r1
     23e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     240:	0880      	lsrs	r0, r0, #2
     242:	0040      	lsls	r0, r0, #1
     244:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     246:	4a06      	ldr	r2, [pc, #24]	; (260 <nvm_erase_row+0x50>)
     248:	801a      	strh	r2, [r3, #0]
     24a:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     24c:	2201      	movs	r2, #1
     24e:	7d0b      	ldrb	r3, [r1, #20]
     250:	4213      	tst	r3, r2
     252:	d0fc      	beq.n	24e <nvm_erase_row+0x3e>
	return STATUS_OK;
     254:	2100      	movs	r1, #0
     256:	e7e2      	b.n	21e <nvm_erase_row+0xe>
     258:	20000084 	.word	0x20000084
     25c:	41004000 	.word	0x41004000
     260:	ffffa502 	.word	0xffffa502

00000264 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     264:	b500      	push	{lr}
     266:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     268:	ab01      	add	r3, sp, #4
     26a:	2280      	movs	r2, #128	; 0x80
     26c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     26e:	780a      	ldrb	r2, [r1, #0]
     270:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     272:	784a      	ldrb	r2, [r1, #1]
     274:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     276:	788a      	ldrb	r2, [r1, #2]
     278:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     27a:	0019      	movs	r1, r3
     27c:	4b01      	ldr	r3, [pc, #4]	; (284 <port_pin_set_config+0x20>)
     27e:	4798      	blx	r3
}
     280:	b003      	add	sp, #12
     282:	bd00      	pop	{pc}
     284:	00001205 	.word	0x00001205

00000288 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     288:	b5f0      	push	{r4, r5, r6, r7, lr}
     28a:	46de      	mov	lr, fp
     28c:	4657      	mov	r7, sl
     28e:	464e      	mov	r6, r9
     290:	4645      	mov	r5, r8
     292:	b5e0      	push	{r5, r6, r7, lr}
     294:	b087      	sub	sp, #28
     296:	4680      	mov	r8, r0
     298:	9104      	str	r1, [sp, #16]
     29a:	0016      	movs	r6, r2
     29c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     29e:	2200      	movs	r2, #0
     2a0:	2300      	movs	r3, #0
     2a2:	2100      	movs	r1, #0
     2a4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     2a6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     2a8:	2001      	movs	r0, #1
     2aa:	0021      	movs	r1, r4
     2ac:	9600      	str	r6, [sp, #0]
     2ae:	9701      	str	r7, [sp, #4]
     2b0:	465c      	mov	r4, fp
     2b2:	9403      	str	r4, [sp, #12]
     2b4:	4644      	mov	r4, r8
     2b6:	9405      	str	r4, [sp, #20]
     2b8:	e013      	b.n	2e2 <long_division+0x5a>
     2ba:	2420      	movs	r4, #32
     2bc:	1a64      	subs	r4, r4, r1
     2be:	0005      	movs	r5, r0
     2c0:	40e5      	lsrs	r5, r4
     2c2:	46a8      	mov	r8, r5
     2c4:	e014      	b.n	2f0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     2c6:	9c00      	ldr	r4, [sp, #0]
     2c8:	9d01      	ldr	r5, [sp, #4]
     2ca:	1b12      	subs	r2, r2, r4
     2cc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     2ce:	465c      	mov	r4, fp
     2d0:	464d      	mov	r5, r9
     2d2:	432c      	orrs	r4, r5
     2d4:	46a3      	mov	fp, r4
     2d6:	9c03      	ldr	r4, [sp, #12]
     2d8:	4645      	mov	r5, r8
     2da:	432c      	orrs	r4, r5
     2dc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     2de:	3901      	subs	r1, #1
     2e0:	d325      	bcc.n	32e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     2e2:	2420      	movs	r4, #32
     2e4:	4264      	negs	r4, r4
     2e6:	190c      	adds	r4, r1, r4
     2e8:	d4e7      	bmi.n	2ba <long_division+0x32>
     2ea:	0005      	movs	r5, r0
     2ec:	40a5      	lsls	r5, r4
     2ee:	46a8      	mov	r8, r5
     2f0:	0004      	movs	r4, r0
     2f2:	408c      	lsls	r4, r1
     2f4:	46a1      	mov	r9, r4
		r = r << 1;
     2f6:	1892      	adds	r2, r2, r2
     2f8:	415b      	adcs	r3, r3
     2fa:	0014      	movs	r4, r2
     2fc:	001d      	movs	r5, r3
		if (n & bit_shift) {
     2fe:	9e05      	ldr	r6, [sp, #20]
     300:	464f      	mov	r7, r9
     302:	403e      	ands	r6, r7
     304:	46b4      	mov	ip, r6
     306:	9e04      	ldr	r6, [sp, #16]
     308:	4647      	mov	r7, r8
     30a:	403e      	ands	r6, r7
     30c:	46b2      	mov	sl, r6
     30e:	4666      	mov	r6, ip
     310:	4657      	mov	r7, sl
     312:	433e      	orrs	r6, r7
     314:	d003      	beq.n	31e <long_division+0x96>
			r |= 0x01;
     316:	0006      	movs	r6, r0
     318:	4326      	orrs	r6, r4
     31a:	0032      	movs	r2, r6
     31c:	002b      	movs	r3, r5
		if (r >= d) {
     31e:	9c00      	ldr	r4, [sp, #0]
     320:	9d01      	ldr	r5, [sp, #4]
     322:	429d      	cmp	r5, r3
     324:	d8db      	bhi.n	2de <long_division+0x56>
     326:	d1ce      	bne.n	2c6 <long_division+0x3e>
     328:	4294      	cmp	r4, r2
     32a:	d8d8      	bhi.n	2de <long_division+0x56>
     32c:	e7cb      	b.n	2c6 <long_division+0x3e>
     32e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     330:	4658      	mov	r0, fp
     332:	0019      	movs	r1, r3
     334:	b007      	add	sp, #28
     336:	bc3c      	pop	{r2, r3, r4, r5}
     338:	4690      	mov	r8, r2
     33a:	4699      	mov	r9, r3
     33c:	46a2      	mov	sl, r4
     33e:	46ab      	mov	fp, r5
     340:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000342 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     342:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     344:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     346:	2340      	movs	r3, #64	; 0x40
     348:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     34a:	4281      	cmp	r1, r0
     34c:	d202      	bcs.n	354 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     34e:	0018      	movs	r0, r3
     350:	bd10      	pop	{r4, pc}
		baud_calculated++;
     352:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     354:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     356:	1c63      	adds	r3, r4, #1
     358:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     35a:	4288      	cmp	r0, r1
     35c:	d9f9      	bls.n	352 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     35e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     360:	2cff      	cmp	r4, #255	; 0xff
     362:	d8f4      	bhi.n	34e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     364:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     366:	2300      	movs	r3, #0
     368:	e7f1      	b.n	34e <_sercom_get_sync_baud_val+0xc>
	...

0000036c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     36c:	b5f0      	push	{r4, r5, r6, r7, lr}
     36e:	b083      	sub	sp, #12
     370:	000f      	movs	r7, r1
     372:	0016      	movs	r6, r2
     374:	aa08      	add	r2, sp, #32
     376:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     378:	0004      	movs	r4, r0
     37a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     37c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     37e:	42bc      	cmp	r4, r7
     380:	d902      	bls.n	388 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     382:	0010      	movs	r0, r2
     384:	b003      	add	sp, #12
     386:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     388:	2b00      	cmp	r3, #0
     38a:	d114      	bne.n	3b6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     38c:	0002      	movs	r2, r0
     38e:	0008      	movs	r0, r1
     390:	2100      	movs	r1, #0
     392:	4c19      	ldr	r4, [pc, #100]	; (3f8 <_sercom_get_async_baud_val+0x8c>)
     394:	47a0      	blx	r4
     396:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     398:	003a      	movs	r2, r7
     39a:	2300      	movs	r3, #0
     39c:	2000      	movs	r0, #0
     39e:	4c17      	ldr	r4, [pc, #92]	; (3fc <_sercom_get_async_baud_val+0x90>)
     3a0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     3a2:	2200      	movs	r2, #0
     3a4:	2301      	movs	r3, #1
     3a6:	1a12      	subs	r2, r2, r0
     3a8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     3aa:	0c12      	lsrs	r2, r2, #16
     3ac:	041b      	lsls	r3, r3, #16
     3ae:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     3b0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     3b2:	2200      	movs	r2, #0
     3b4:	e7e5      	b.n	382 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     3b6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3b8:	2b01      	cmp	r3, #1
     3ba:	d1f9      	bne.n	3b0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     3bc:	000a      	movs	r2, r1
     3be:	2300      	movs	r3, #0
     3c0:	2100      	movs	r1, #0
     3c2:	4c0d      	ldr	r4, [pc, #52]	; (3f8 <_sercom_get_async_baud_val+0x8c>)
     3c4:	47a0      	blx	r4
     3c6:	0002      	movs	r2, r0
     3c8:	000b      	movs	r3, r1
     3ca:	9200      	str	r2, [sp, #0]
     3cc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     3ce:	0038      	movs	r0, r7
     3d0:	2100      	movs	r1, #0
     3d2:	4c0a      	ldr	r4, [pc, #40]	; (3fc <_sercom_get_async_baud_val+0x90>)
     3d4:	47a0      	blx	r4
     3d6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     3d8:	2380      	movs	r3, #128	; 0x80
     3da:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3dc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     3de:	4298      	cmp	r0, r3
     3e0:	d8cf      	bhi.n	382 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     3e2:	0f79      	lsrs	r1, r7, #29
     3e4:	00f8      	lsls	r0, r7, #3
     3e6:	9a00      	ldr	r2, [sp, #0]
     3e8:	9b01      	ldr	r3, [sp, #4]
     3ea:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     3ec:	00ea      	lsls	r2, r5, #3
     3ee:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     3f0:	b2d2      	uxtb	r2, r2
     3f2:	0352      	lsls	r2, r2, #13
     3f4:	432a      	orrs	r2, r5
     3f6:	e7db      	b.n	3b0 <_sercom_get_async_baud_val+0x44>
     3f8:	00001781 	.word	0x00001781
     3fc:	00000289 	.word	0x00000289

00000400 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     400:	b510      	push	{r4, lr}
     402:	b082      	sub	sp, #8
     404:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     406:	4b0e      	ldr	r3, [pc, #56]	; (440 <sercom_set_gclk_generator+0x40>)
     408:	781b      	ldrb	r3, [r3, #0]
     40a:	2b00      	cmp	r3, #0
     40c:	d007      	beq.n	41e <sercom_set_gclk_generator+0x1e>
     40e:	2900      	cmp	r1, #0
     410:	d105      	bne.n	41e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     412:	4b0b      	ldr	r3, [pc, #44]	; (440 <sercom_set_gclk_generator+0x40>)
     414:	785b      	ldrb	r3, [r3, #1]
     416:	4283      	cmp	r3, r0
     418:	d010      	beq.n	43c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     41a:	201d      	movs	r0, #29
     41c:	e00c      	b.n	438 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     41e:	a901      	add	r1, sp, #4
     420:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     422:	2013      	movs	r0, #19
     424:	4b07      	ldr	r3, [pc, #28]	; (444 <sercom_set_gclk_generator+0x44>)
     426:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     428:	2013      	movs	r0, #19
     42a:	4b07      	ldr	r3, [pc, #28]	; (448 <sercom_set_gclk_generator+0x48>)
     42c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     42e:	4b04      	ldr	r3, [pc, #16]	; (440 <sercom_set_gclk_generator+0x40>)
     430:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     432:	2201      	movs	r2, #1
     434:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     436:	2000      	movs	r0, #0
}
     438:	b002      	add	sp, #8
     43a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     43c:	2000      	movs	r0, #0
     43e:	e7fb      	b.n	438 <sercom_set_gclk_generator+0x38>
     440:	2000008c 	.word	0x2000008c
     444:	0000110d 	.word	0x0000110d
     448:	00001081 	.word	0x00001081

0000044c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     44c:	4b40      	ldr	r3, [pc, #256]	; (550 <_sercom_get_default_pad+0x104>)
     44e:	4298      	cmp	r0, r3
     450:	d031      	beq.n	4b6 <_sercom_get_default_pad+0x6a>
     452:	d90a      	bls.n	46a <_sercom_get_default_pad+0x1e>
     454:	4b3f      	ldr	r3, [pc, #252]	; (554 <_sercom_get_default_pad+0x108>)
     456:	4298      	cmp	r0, r3
     458:	d04d      	beq.n	4f6 <_sercom_get_default_pad+0xaa>
     45a:	4b3f      	ldr	r3, [pc, #252]	; (558 <_sercom_get_default_pad+0x10c>)
     45c:	4298      	cmp	r0, r3
     45e:	d05a      	beq.n	516 <_sercom_get_default_pad+0xca>
     460:	4b3e      	ldr	r3, [pc, #248]	; (55c <_sercom_get_default_pad+0x110>)
     462:	4298      	cmp	r0, r3
     464:	d037      	beq.n	4d6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     466:	2000      	movs	r0, #0
}
     468:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     46a:	4b3d      	ldr	r3, [pc, #244]	; (560 <_sercom_get_default_pad+0x114>)
     46c:	4298      	cmp	r0, r3
     46e:	d00c      	beq.n	48a <_sercom_get_default_pad+0x3e>
     470:	4b3c      	ldr	r3, [pc, #240]	; (564 <_sercom_get_default_pad+0x118>)
     472:	4298      	cmp	r0, r3
     474:	d1f7      	bne.n	466 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     476:	2901      	cmp	r1, #1
     478:	d017      	beq.n	4aa <_sercom_get_default_pad+0x5e>
     47a:	2900      	cmp	r1, #0
     47c:	d05d      	beq.n	53a <_sercom_get_default_pad+0xee>
     47e:	2902      	cmp	r1, #2
     480:	d015      	beq.n	4ae <_sercom_get_default_pad+0x62>
     482:	2903      	cmp	r1, #3
     484:	d015      	beq.n	4b2 <_sercom_get_default_pad+0x66>
	return 0;
     486:	2000      	movs	r0, #0
     488:	e7ee      	b.n	468 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     48a:	2901      	cmp	r1, #1
     48c:	d007      	beq.n	49e <_sercom_get_default_pad+0x52>
     48e:	2900      	cmp	r1, #0
     490:	d051      	beq.n	536 <_sercom_get_default_pad+0xea>
     492:	2902      	cmp	r1, #2
     494:	d005      	beq.n	4a2 <_sercom_get_default_pad+0x56>
     496:	2903      	cmp	r1, #3
     498:	d005      	beq.n	4a6 <_sercom_get_default_pad+0x5a>
	return 0;
     49a:	2000      	movs	r0, #0
     49c:	e7e4      	b.n	468 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     49e:	4832      	ldr	r0, [pc, #200]	; (568 <_sercom_get_default_pad+0x11c>)
     4a0:	e7e2      	b.n	468 <_sercom_get_default_pad+0x1c>
     4a2:	4832      	ldr	r0, [pc, #200]	; (56c <_sercom_get_default_pad+0x120>)
     4a4:	e7e0      	b.n	468 <_sercom_get_default_pad+0x1c>
     4a6:	4832      	ldr	r0, [pc, #200]	; (570 <_sercom_get_default_pad+0x124>)
     4a8:	e7de      	b.n	468 <_sercom_get_default_pad+0x1c>
     4aa:	4832      	ldr	r0, [pc, #200]	; (574 <_sercom_get_default_pad+0x128>)
     4ac:	e7dc      	b.n	468 <_sercom_get_default_pad+0x1c>
     4ae:	4832      	ldr	r0, [pc, #200]	; (578 <_sercom_get_default_pad+0x12c>)
     4b0:	e7da      	b.n	468 <_sercom_get_default_pad+0x1c>
     4b2:	4832      	ldr	r0, [pc, #200]	; (57c <_sercom_get_default_pad+0x130>)
     4b4:	e7d8      	b.n	468 <_sercom_get_default_pad+0x1c>
     4b6:	2901      	cmp	r1, #1
     4b8:	d007      	beq.n	4ca <_sercom_get_default_pad+0x7e>
     4ba:	2900      	cmp	r1, #0
     4bc:	d03f      	beq.n	53e <_sercom_get_default_pad+0xf2>
     4be:	2902      	cmp	r1, #2
     4c0:	d005      	beq.n	4ce <_sercom_get_default_pad+0x82>
     4c2:	2903      	cmp	r1, #3
     4c4:	d005      	beq.n	4d2 <_sercom_get_default_pad+0x86>
	return 0;
     4c6:	2000      	movs	r0, #0
     4c8:	e7ce      	b.n	468 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ca:	482d      	ldr	r0, [pc, #180]	; (580 <_sercom_get_default_pad+0x134>)
     4cc:	e7cc      	b.n	468 <_sercom_get_default_pad+0x1c>
     4ce:	482d      	ldr	r0, [pc, #180]	; (584 <_sercom_get_default_pad+0x138>)
     4d0:	e7ca      	b.n	468 <_sercom_get_default_pad+0x1c>
     4d2:	482d      	ldr	r0, [pc, #180]	; (588 <_sercom_get_default_pad+0x13c>)
     4d4:	e7c8      	b.n	468 <_sercom_get_default_pad+0x1c>
     4d6:	2901      	cmp	r1, #1
     4d8:	d007      	beq.n	4ea <_sercom_get_default_pad+0x9e>
     4da:	2900      	cmp	r1, #0
     4dc:	d031      	beq.n	542 <_sercom_get_default_pad+0xf6>
     4de:	2902      	cmp	r1, #2
     4e0:	d005      	beq.n	4ee <_sercom_get_default_pad+0xa2>
     4e2:	2903      	cmp	r1, #3
     4e4:	d005      	beq.n	4f2 <_sercom_get_default_pad+0xa6>
	return 0;
     4e6:	2000      	movs	r0, #0
     4e8:	e7be      	b.n	468 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ea:	4828      	ldr	r0, [pc, #160]	; (58c <_sercom_get_default_pad+0x140>)
     4ec:	e7bc      	b.n	468 <_sercom_get_default_pad+0x1c>
     4ee:	4828      	ldr	r0, [pc, #160]	; (590 <_sercom_get_default_pad+0x144>)
     4f0:	e7ba      	b.n	468 <_sercom_get_default_pad+0x1c>
     4f2:	4828      	ldr	r0, [pc, #160]	; (594 <_sercom_get_default_pad+0x148>)
     4f4:	e7b8      	b.n	468 <_sercom_get_default_pad+0x1c>
     4f6:	2901      	cmp	r1, #1
     4f8:	d007      	beq.n	50a <_sercom_get_default_pad+0xbe>
     4fa:	2900      	cmp	r1, #0
     4fc:	d023      	beq.n	546 <_sercom_get_default_pad+0xfa>
     4fe:	2902      	cmp	r1, #2
     500:	d005      	beq.n	50e <_sercom_get_default_pad+0xc2>
     502:	2903      	cmp	r1, #3
     504:	d005      	beq.n	512 <_sercom_get_default_pad+0xc6>
	return 0;
     506:	2000      	movs	r0, #0
     508:	e7ae      	b.n	468 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     50a:	4823      	ldr	r0, [pc, #140]	; (598 <_sercom_get_default_pad+0x14c>)
     50c:	e7ac      	b.n	468 <_sercom_get_default_pad+0x1c>
     50e:	4823      	ldr	r0, [pc, #140]	; (59c <_sercom_get_default_pad+0x150>)
     510:	e7aa      	b.n	468 <_sercom_get_default_pad+0x1c>
     512:	4823      	ldr	r0, [pc, #140]	; (5a0 <_sercom_get_default_pad+0x154>)
     514:	e7a8      	b.n	468 <_sercom_get_default_pad+0x1c>
     516:	2901      	cmp	r1, #1
     518:	d007      	beq.n	52a <_sercom_get_default_pad+0xde>
     51a:	2900      	cmp	r1, #0
     51c:	d015      	beq.n	54a <_sercom_get_default_pad+0xfe>
     51e:	2902      	cmp	r1, #2
     520:	d005      	beq.n	52e <_sercom_get_default_pad+0xe2>
     522:	2903      	cmp	r1, #3
     524:	d005      	beq.n	532 <_sercom_get_default_pad+0xe6>
	return 0;
     526:	2000      	movs	r0, #0
     528:	e79e      	b.n	468 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     52a:	481e      	ldr	r0, [pc, #120]	; (5a4 <_sercom_get_default_pad+0x158>)
     52c:	e79c      	b.n	468 <_sercom_get_default_pad+0x1c>
     52e:	481e      	ldr	r0, [pc, #120]	; (5a8 <_sercom_get_default_pad+0x15c>)
     530:	e79a      	b.n	468 <_sercom_get_default_pad+0x1c>
     532:	481e      	ldr	r0, [pc, #120]	; (5ac <_sercom_get_default_pad+0x160>)
     534:	e798      	b.n	468 <_sercom_get_default_pad+0x1c>
     536:	481e      	ldr	r0, [pc, #120]	; (5b0 <_sercom_get_default_pad+0x164>)
     538:	e796      	b.n	468 <_sercom_get_default_pad+0x1c>
     53a:	2003      	movs	r0, #3
     53c:	e794      	b.n	468 <_sercom_get_default_pad+0x1c>
     53e:	481d      	ldr	r0, [pc, #116]	; (5b4 <_sercom_get_default_pad+0x168>)
     540:	e792      	b.n	468 <_sercom_get_default_pad+0x1c>
     542:	481d      	ldr	r0, [pc, #116]	; (5b8 <_sercom_get_default_pad+0x16c>)
     544:	e790      	b.n	468 <_sercom_get_default_pad+0x1c>
     546:	481d      	ldr	r0, [pc, #116]	; (5bc <_sercom_get_default_pad+0x170>)
     548:	e78e      	b.n	468 <_sercom_get_default_pad+0x1c>
     54a:	481d      	ldr	r0, [pc, #116]	; (5c0 <_sercom_get_default_pad+0x174>)
     54c:	e78c      	b.n	468 <_sercom_get_default_pad+0x1c>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	42001000 	.word	0x42001000
     554:	42001800 	.word	0x42001800
     558:	42001c00 	.word	0x42001c00
     55c:	42001400 	.word	0x42001400
     560:	42000800 	.word	0x42000800
     564:	42000c00 	.word	0x42000c00
     568:	00050003 	.word	0x00050003
     56c:	00060003 	.word	0x00060003
     570:	00070003 	.word	0x00070003
     574:	00010003 	.word	0x00010003
     578:	001e0003 	.word	0x001e0003
     57c:	001f0003 	.word	0x001f0003
     580:	00090003 	.word	0x00090003
     584:	000a0003 	.word	0x000a0003
     588:	000b0003 	.word	0x000b0003
     58c:	00110003 	.word	0x00110003
     590:	00120003 	.word	0x00120003
     594:	00130003 	.word	0x00130003
     598:	000d0003 	.word	0x000d0003
     59c:	000e0003 	.word	0x000e0003
     5a0:	000f0003 	.word	0x000f0003
     5a4:	00170003 	.word	0x00170003
     5a8:	00180003 	.word	0x00180003
     5ac:	00190003 	.word	0x00190003
     5b0:	00040003 	.word	0x00040003
     5b4:	00080003 	.word	0x00080003
     5b8:	00100003 	.word	0x00100003
     5bc:	000c0003 	.word	0x000c0003
     5c0:	00160003 	.word	0x00160003

000005c4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     5c4:	b530      	push	{r4, r5, lr}
     5c6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     5c8:	4b0b      	ldr	r3, [pc, #44]	; (5f8 <_sercom_get_sercom_inst_index+0x34>)
     5ca:	466a      	mov	r2, sp
     5cc:	cb32      	ldmia	r3!, {r1, r4, r5}
     5ce:	c232      	stmia	r2!, {r1, r4, r5}
     5d0:	cb32      	ldmia	r3!, {r1, r4, r5}
     5d2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5d4:	9b00      	ldr	r3, [sp, #0]
     5d6:	4283      	cmp	r3, r0
     5d8:	d00b      	beq.n	5f2 <_sercom_get_sercom_inst_index+0x2e>
     5da:	2301      	movs	r3, #1
     5dc:	009a      	lsls	r2, r3, #2
     5de:	4669      	mov	r1, sp
     5e0:	5852      	ldr	r2, [r2, r1]
     5e2:	4282      	cmp	r2, r0
     5e4:	d006      	beq.n	5f4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5e6:	3301      	adds	r3, #1
     5e8:	2b06      	cmp	r3, #6
     5ea:	d1f7      	bne.n	5dc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     5ec:	2000      	movs	r0, #0
}
     5ee:	b007      	add	sp, #28
     5f0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5f2:	2300      	movs	r3, #0
			return i;
     5f4:	b2d8      	uxtb	r0, r3
     5f6:	e7fa      	b.n	5ee <_sercom_get_sercom_inst_index+0x2a>
     5f8:	00002810 	.word	0x00002810

000005fc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     5fc:	4770      	bx	lr
	...

00000600 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     600:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     602:	4b0a      	ldr	r3, [pc, #40]	; (62c <_sercom_set_handler+0x2c>)
     604:	781b      	ldrb	r3, [r3, #0]
     606:	2b00      	cmp	r3, #0
     608:	d10c      	bne.n	624 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     60a:	4f09      	ldr	r7, [pc, #36]	; (630 <_sercom_set_handler+0x30>)
     60c:	4e09      	ldr	r6, [pc, #36]	; (634 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     60e:	4d0a      	ldr	r5, [pc, #40]	; (638 <_sercom_set_handler+0x38>)
     610:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     612:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     614:	195a      	adds	r2, r3, r5
     616:	6014      	str	r4, [r2, #0]
     618:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     61a:	2b18      	cmp	r3, #24
     61c:	d1f9      	bne.n	612 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     61e:	2201      	movs	r2, #1
     620:	4b02      	ldr	r3, [pc, #8]	; (62c <_sercom_set_handler+0x2c>)
     622:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     624:	0080      	lsls	r0, r0, #2
     626:	4b02      	ldr	r3, [pc, #8]	; (630 <_sercom_set_handler+0x30>)
     628:	50c1      	str	r1, [r0, r3]
}
     62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     62c:	2000008e 	.word	0x2000008e
     630:	20000090 	.word	0x20000090
     634:	000005fd 	.word	0x000005fd
     638:	200000d4 	.word	0x200000d4

0000063c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     63c:	b500      	push	{lr}
     63e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     640:	2309      	movs	r3, #9
     642:	466a      	mov	r2, sp
     644:	7013      	strb	r3, [r2, #0]
     646:	3301      	adds	r3, #1
     648:	7053      	strb	r3, [r2, #1]
     64a:	3301      	adds	r3, #1
     64c:	7093      	strb	r3, [r2, #2]
     64e:	3301      	adds	r3, #1
     650:	70d3      	strb	r3, [r2, #3]
     652:	3301      	adds	r3, #1
     654:	7113      	strb	r3, [r2, #4]
     656:	3301      	adds	r3, #1
     658:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     65a:	4b03      	ldr	r3, [pc, #12]	; (668 <_sercom_get_interrupt_vector+0x2c>)
     65c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     65e:	466b      	mov	r3, sp
     660:	5618      	ldrsb	r0, [r3, r0]
}
     662:	b003      	add	sp, #12
     664:	bd00      	pop	{pc}
     666:	46c0      	nop			; (mov r8, r8)
     668:	000005c5 	.word	0x000005c5

0000066c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     66c:	b510      	push	{r4, lr}
     66e:	4b02      	ldr	r3, [pc, #8]	; (678 <SERCOM0_Handler+0xc>)
     670:	681b      	ldr	r3, [r3, #0]
     672:	2000      	movs	r0, #0
     674:	4798      	blx	r3
     676:	bd10      	pop	{r4, pc}
     678:	20000090 	.word	0x20000090

0000067c <SERCOM1_Handler>:
     67c:	b510      	push	{r4, lr}
     67e:	4b02      	ldr	r3, [pc, #8]	; (688 <SERCOM1_Handler+0xc>)
     680:	685b      	ldr	r3, [r3, #4]
     682:	2001      	movs	r0, #1
     684:	4798      	blx	r3
     686:	bd10      	pop	{r4, pc}
     688:	20000090 	.word	0x20000090

0000068c <SERCOM2_Handler>:
     68c:	b510      	push	{r4, lr}
     68e:	4b02      	ldr	r3, [pc, #8]	; (698 <SERCOM2_Handler+0xc>)
     690:	689b      	ldr	r3, [r3, #8]
     692:	2002      	movs	r0, #2
     694:	4798      	blx	r3
     696:	bd10      	pop	{r4, pc}
     698:	20000090 	.word	0x20000090

0000069c <SERCOM3_Handler>:
     69c:	b510      	push	{r4, lr}
     69e:	4b02      	ldr	r3, [pc, #8]	; (6a8 <SERCOM3_Handler+0xc>)
     6a0:	68db      	ldr	r3, [r3, #12]
     6a2:	2003      	movs	r0, #3
     6a4:	4798      	blx	r3
     6a6:	bd10      	pop	{r4, pc}
     6a8:	20000090 	.word	0x20000090

000006ac <SERCOM4_Handler>:
     6ac:	b510      	push	{r4, lr}
     6ae:	4b02      	ldr	r3, [pc, #8]	; (6b8 <SERCOM4_Handler+0xc>)
     6b0:	691b      	ldr	r3, [r3, #16]
     6b2:	2004      	movs	r0, #4
     6b4:	4798      	blx	r3
     6b6:	bd10      	pop	{r4, pc}
     6b8:	20000090 	.word	0x20000090

000006bc <SERCOM5_Handler>:
     6bc:	b510      	push	{r4, lr}
     6be:	4b02      	ldr	r3, [pc, #8]	; (6c8 <SERCOM5_Handler+0xc>)
     6c0:	695b      	ldr	r3, [r3, #20]
     6c2:	2005      	movs	r0, #5
     6c4:	4798      	blx	r3
     6c6:	bd10      	pop	{r4, pc}
     6c8:	20000090 	.word	0x20000090

000006cc <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     6cc:	4770      	bx	lr
	...

000006d0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     6d0:	4b0c      	ldr	r3, [pc, #48]	; (704 <cpu_irq_enter_critical+0x34>)
     6d2:	681b      	ldr	r3, [r3, #0]
     6d4:	2b00      	cmp	r3, #0
     6d6:	d106      	bne.n	6e6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     6d8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     6dc:	2b00      	cmp	r3, #0
     6de:	d007      	beq.n	6f0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     6e0:	2200      	movs	r2, #0
     6e2:	4b09      	ldr	r3, [pc, #36]	; (708 <cpu_irq_enter_critical+0x38>)
     6e4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     6e6:	4a07      	ldr	r2, [pc, #28]	; (704 <cpu_irq_enter_critical+0x34>)
     6e8:	6813      	ldr	r3, [r2, #0]
     6ea:	3301      	adds	r3, #1
     6ec:	6013      	str	r3, [r2, #0]
}
     6ee:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     6f0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     6f2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     6f6:	2200      	movs	r2, #0
     6f8:	4b04      	ldr	r3, [pc, #16]	; (70c <cpu_irq_enter_critical+0x3c>)
     6fa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     6fc:	3201      	adds	r2, #1
     6fe:	4b02      	ldr	r3, [pc, #8]	; (708 <cpu_irq_enter_critical+0x38>)
     700:	701a      	strb	r2, [r3, #0]
     702:	e7f0      	b.n	6e6 <cpu_irq_enter_critical+0x16>
     704:	200000a8 	.word	0x200000a8
     708:	200000ac 	.word	0x200000ac
     70c:	20000000 	.word	0x20000000

00000710 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     710:	4b08      	ldr	r3, [pc, #32]	; (734 <cpu_irq_leave_critical+0x24>)
     712:	681a      	ldr	r2, [r3, #0]
     714:	3a01      	subs	r2, #1
     716:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     718:	681b      	ldr	r3, [r3, #0]
     71a:	2b00      	cmp	r3, #0
     71c:	d109      	bne.n	732 <cpu_irq_leave_critical+0x22>
     71e:	4b06      	ldr	r3, [pc, #24]	; (738 <cpu_irq_leave_critical+0x28>)
     720:	781b      	ldrb	r3, [r3, #0]
     722:	2b00      	cmp	r3, #0
     724:	d005      	beq.n	732 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     726:	2201      	movs	r2, #1
     728:	4b04      	ldr	r3, [pc, #16]	; (73c <cpu_irq_leave_critical+0x2c>)
     72a:	701a      	strb	r2, [r3, #0]
     72c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     730:	b662      	cpsie	i
	}
}
     732:	4770      	bx	lr
     734:	200000a8 	.word	0x200000a8
     738:	200000ac 	.word	0x200000ac
     73c:	20000000 	.word	0x20000000

00000740 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	46de      	mov	lr, fp
     744:	4657      	mov	r7, sl
     746:	464e      	mov	r6, r9
     748:	4645      	mov	r5, r8
     74a:	b5e0      	push	{r5, r6, r7, lr}
     74c:	b091      	sub	sp, #68	; 0x44
     74e:	0005      	movs	r5, r0
     750:	000c      	movs	r4, r1
     752:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     754:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     756:	0008      	movs	r0, r1
     758:	4bba      	ldr	r3, [pc, #744]	; (a44 <usart_init+0x304>)
     75a:	4798      	blx	r3
     75c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     75e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     760:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     762:	07db      	lsls	r3, r3, #31
     764:	d506      	bpl.n	774 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     766:	b011      	add	sp, #68	; 0x44
     768:	bc3c      	pop	{r2, r3, r4, r5}
     76a:	4690      	mov	r8, r2
     76c:	4699      	mov	r9, r3
     76e:	46a2      	mov	sl, r4
     770:	46ab      	mov	fp, r5
     772:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     774:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     776:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     778:	079b      	lsls	r3, r3, #30
     77a:	d4f4      	bmi.n	766 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     77c:	49b2      	ldr	r1, [pc, #712]	; (a48 <usart_init+0x308>)
     77e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     780:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     782:	2301      	movs	r3, #1
     784:	40bb      	lsls	r3, r7
     786:	4303      	orrs	r3, r0
     788:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     78a:	a90f      	add	r1, sp, #60	; 0x3c
     78c:	272d      	movs	r7, #45	; 0x2d
     78e:	5df3      	ldrb	r3, [r6, r7]
     790:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     792:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     794:	b2d3      	uxtb	r3, r2
     796:	9303      	str	r3, [sp, #12]
     798:	0018      	movs	r0, r3
     79a:	4bac      	ldr	r3, [pc, #688]	; (a4c <usart_init+0x30c>)
     79c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     79e:	9803      	ldr	r0, [sp, #12]
     7a0:	4bab      	ldr	r3, [pc, #684]	; (a50 <usart_init+0x310>)
     7a2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     7a4:	5df0      	ldrb	r0, [r6, r7]
     7a6:	2100      	movs	r1, #0
     7a8:	4baa      	ldr	r3, [pc, #680]	; (a54 <usart_init+0x314>)
     7aa:	4798      	blx	r3
	module->character_size = config->character_size;
     7ac:	7af3      	ldrb	r3, [r6, #11]
     7ae:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     7b0:	2324      	movs	r3, #36	; 0x24
     7b2:	5cf3      	ldrb	r3, [r6, r3]
     7b4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     7b6:	2325      	movs	r3, #37	; 0x25
     7b8:	5cf3      	ldrb	r3, [r6, r3]
     7ba:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     7bc:	7ef3      	ldrb	r3, [r6, #27]
     7be:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     7c0:	7f33      	ldrb	r3, [r6, #28]
     7c2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7c4:	682b      	ldr	r3, [r5, #0]
     7c6:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7c8:	0018      	movs	r0, r3
     7ca:	4b9e      	ldr	r3, [pc, #632]	; (a44 <usart_init+0x304>)
     7cc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7ce:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     7d0:	2200      	movs	r2, #0
     7d2:	230e      	movs	r3, #14
     7d4:	a906      	add	r1, sp, #24
     7d6:	468c      	mov	ip, r1
     7d8:	4463      	add	r3, ip
     7da:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     7dc:	8a33      	ldrh	r3, [r6, #16]
     7de:	4698      	mov	r8, r3
     7e0:	2380      	movs	r3, #128	; 0x80
     7e2:	01db      	lsls	r3, r3, #7
     7e4:	4598      	cmp	r8, r3
     7e6:	d100      	bne.n	7ea <usart_init+0xaa>
     7e8:	e09b      	b.n	922 <usart_init+0x1e2>
     7ea:	d90e      	bls.n	80a <usart_init+0xca>
     7ec:	23c0      	movs	r3, #192	; 0xc0
     7ee:	01db      	lsls	r3, r3, #7
     7f0:	4598      	cmp	r8, r3
     7f2:	d100      	bne.n	7f6 <usart_init+0xb6>
     7f4:	e090      	b.n	918 <usart_init+0x1d8>
     7f6:	2380      	movs	r3, #128	; 0x80
     7f8:	021b      	lsls	r3, r3, #8
     7fa:	4598      	cmp	r8, r3
     7fc:	d000      	beq.n	800 <usart_init+0xc0>
     7fe:	e11b      	b.n	a38 <usart_init+0x2f8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     800:	2303      	movs	r3, #3
     802:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     804:	2300      	movs	r3, #0
     806:	9307      	str	r3, [sp, #28]
     808:	e008      	b.n	81c <usart_init+0xdc>
	switch (config->sample_rate) {
     80a:	2380      	movs	r3, #128	; 0x80
     80c:	019b      	lsls	r3, r3, #6
     80e:	4598      	cmp	r8, r3
     810:	d000      	beq.n	814 <usart_init+0xd4>
     812:	e111      	b.n	a38 <usart_init+0x2f8>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     814:	2310      	movs	r3, #16
     816:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     818:	3b0f      	subs	r3, #15
     81a:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     81c:	6833      	ldr	r3, [r6, #0]
     81e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     820:	68f3      	ldr	r3, [r6, #12]
     822:	4699      	mov	r9, r3
		config->sample_adjustment |
     824:	6973      	ldr	r3, [r6, #20]
     826:	469b      	mov	fp, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     828:	7e33      	ldrb	r3, [r6, #24]
     82a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     82c:	2326      	movs	r3, #38	; 0x26
     82e:	5cf3      	ldrb	r3, [r6, r3]
     830:	469a      	mov	sl, r3
	switch (config->transfer_mode)
     832:	6873      	ldr	r3, [r6, #4]
     834:	2b00      	cmp	r3, #0
     836:	d100      	bne.n	83a <usart_init+0xfa>
     838:	e09e      	b.n	978 <usart_init+0x238>
     83a:	2280      	movs	r2, #128	; 0x80
     83c:	0552      	lsls	r2, r2, #21
     83e:	4293      	cmp	r3, r2
     840:	d100      	bne.n	844 <usart_init+0x104>
     842:	e082      	b.n	94a <usart_init+0x20a>
	if(config->encoding_format_enable) {
     844:	7e73      	ldrb	r3, [r6, #25]
     846:	2b00      	cmp	r3, #0
     848:	d002      	beq.n	850 <usart_init+0x110>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     84a:	7eb3      	ldrb	r3, [r6, #26]
     84c:	9a03      	ldr	r2, [sp, #12]
     84e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     850:	682a      	ldr	r2, [r5, #0]
     852:	9f03      	ldr	r7, [sp, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     854:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     856:	2b00      	cmp	r3, #0
     858:	d1fc      	bne.n	854 <usart_init+0x114>
     85a:	9703      	str	r7, [sp, #12]
	usart_hw->BAUD.reg = baud;
     85c:	330e      	adds	r3, #14
     85e:	a906      	add	r1, sp, #24
     860:	468c      	mov	ip, r1
     862:	4463      	add	r3, ip
     864:	881b      	ldrh	r3, [r3, #0]
     866:	81bb      	strh	r3, [r7, #12]
	ctrla |= config->transfer_mode;
     868:	9a05      	ldr	r2, [sp, #20]
     86a:	464b      	mov	r3, r9
     86c:	431a      	orrs	r2, r3
     86e:	465b      	mov	r3, fp
     870:	431a      	orrs	r2, r3
     872:	6873      	ldr	r3, [r6, #4]
     874:	431a      	orrs	r2, r3
     876:	4643      	mov	r3, r8
     878:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     87a:	9b04      	ldr	r3, [sp, #16]
     87c:	021b      	lsls	r3, r3, #8
	ctrla |= config->transfer_mode;
     87e:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     880:	4653      	mov	r3, sl
     882:	075b      	lsls	r3, r3, #29
	ctrla |= config->transfer_mode;
     884:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
     886:	2327      	movs	r3, #39	; 0x27
     888:	5cf3      	ldrb	r3, [r6, r3]
     88a:	2b00      	cmp	r3, #0
     88c:	d101      	bne.n	892 <usart_init+0x152>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     88e:	3304      	adds	r3, #4
     890:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     892:	7e71      	ldrb	r1, [r6, #25]
     894:	0289      	lsls	r1, r1, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     896:	7f33      	ldrb	r3, [r6, #28]
     898:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     89a:	4319      	orrs	r1, r3
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     89c:	7ab3      	ldrb	r3, [r6, #10]
     89e:	7af0      	ldrb	r0, [r6, #11]
     8a0:	4303      	orrs	r3, r0
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     8a2:	4319      	orrs	r1, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     8a4:	7f73      	ldrb	r3, [r6, #29]
     8a6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     8a8:	4319      	orrs	r1, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     8aa:	2324      	movs	r3, #36	; 0x24
     8ac:	5cf3      	ldrb	r3, [r6, r3]
     8ae:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     8b0:	4319      	orrs	r1, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     8b2:	2325      	movs	r3, #37	; 0x25
     8b4:	5cf3      	ldrb	r3, [r6, r3]
     8b6:	041b      	lsls	r3, r3, #16
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     8b8:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     8ba:	8933      	ldrh	r3, [r6, #8]
     8bc:	2bff      	cmp	r3, #255	; 0xff
     8be:	d07f      	beq.n	9c0 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     8c0:	2080      	movs	r0, #128	; 0x80
     8c2:	0440      	lsls	r0, r0, #17
     8c4:	4302      	orrs	r2, r0
		ctrlb |= config->parity;
     8c6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     8c8:	232c      	movs	r3, #44	; 0x2c
     8ca:	5cf3      	ldrb	r3, [r6, r3]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d103      	bne.n	8d8 <usart_init+0x198>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8d0:	4b61      	ldr	r3, [pc, #388]	; (a58 <usart_init+0x318>)
     8d2:	789b      	ldrb	r3, [r3, #2]
     8d4:	079b      	lsls	r3, r3, #30
     8d6:	d501      	bpl.n	8dc <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     8d8:	2380      	movs	r3, #128	; 0x80
     8da:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     8dc:	6828      	ldr	r0, [r5, #0]
     8de:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->SYNCBUSY.reg);
     8e0:	69c3      	ldr	r3, [r0, #28]
	while (usart_is_syncing(module)) {
     8e2:	2b00      	cmp	r3, #0
     8e4:	d1fc      	bne.n	8e0 <usart_init+0x1a0>
	usart_hw->CTRLB.reg = ctrlb;
     8e6:	6079      	str	r1, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     8e8:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     8ea:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     8ec:	2b00      	cmp	r3, #0
     8ee:	d1fc      	bne.n	8ea <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
     8f0:	603a      	str	r2, [r7, #0]
     8f2:	ab0e      	add	r3, sp, #56	; 0x38
     8f4:	2280      	movs	r2, #128	; 0x80
     8f6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8f8:	2200      	movs	r2, #0
     8fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     8fc:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     8fe:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     900:	6b33      	ldr	r3, [r6, #48]	; 0x30
     902:	930a      	str	r3, [sp, #40]	; 0x28
     904:	6b73      	ldr	r3, [r6, #52]	; 0x34
     906:	930b      	str	r3, [sp, #44]	; 0x2c
     908:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     90a:	930c      	str	r3, [sp, #48]	; 0x30
     90c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     90e:	9303      	str	r3, [sp, #12]
     910:	930d      	str	r3, [sp, #52]	; 0x34
     912:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     914:	ae0a      	add	r6, sp, #40	; 0x28
     916:	e061      	b.n	9dc <usart_init+0x29c>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     918:	2308      	movs	r3, #8
     91a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     91c:	3b07      	subs	r3, #7
     91e:	9307      	str	r3, [sp, #28]
     920:	e77c      	b.n	81c <usart_init+0xdc>
	ctrla = (uint32_t)config->data_order |
     922:	6833      	ldr	r3, [r6, #0]
     924:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     926:	68f3      	ldr	r3, [r6, #12]
     928:	4699      	mov	r9, r3
		config->sample_adjustment |
     92a:	6973      	ldr	r3, [r6, #20]
     92c:	469b      	mov	fp, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     92e:	7e33      	ldrb	r3, [r6, #24]
     930:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     932:	2326      	movs	r3, #38	; 0x26
     934:	5cf3      	ldrb	r3, [r6, r3]
     936:	469a      	mov	sl, r3
	switch (config->transfer_mode)
     938:	6873      	ldr	r3, [r6, #4]
     93a:	2b00      	cmp	r3, #0
     93c:	d018      	beq.n	970 <usart_init+0x230>
     93e:	2280      	movs	r2, #128	; 0x80
     940:	0552      	lsls	r2, r2, #21
     942:	4293      	cmp	r3, r2
     944:	d001      	beq.n	94a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     946:	2000      	movs	r0, #0
     948:	e025      	b.n	996 <usart_init+0x256>
			if (!config->use_external_clock) {
     94a:	2327      	movs	r3, #39	; 0x27
     94c:	5cf3      	ldrb	r3, [r6, r3]
     94e:	2b00      	cmp	r3, #0
     950:	d000      	beq.n	954 <usart_init+0x214>
     952:	e777      	b.n	844 <usart_init+0x104>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     954:	6a33      	ldr	r3, [r6, #32]
     956:	001f      	movs	r7, r3
     958:	b2c0      	uxtb	r0, r0
     95a:	4b40      	ldr	r3, [pc, #256]	; (a5c <usart_init+0x31c>)
     95c:	4798      	blx	r3
     95e:	0001      	movs	r1, r0
     960:	220e      	movs	r2, #14
     962:	ab06      	add	r3, sp, #24
     964:	469c      	mov	ip, r3
     966:	4462      	add	r2, ip
     968:	0038      	movs	r0, r7
     96a:	4b3d      	ldr	r3, [pc, #244]	; (a60 <usart_init+0x320>)
     96c:	4798      	blx	r3
     96e:	e012      	b.n	996 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     970:	2308      	movs	r3, #8
     972:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     974:	2300      	movs	r3, #0
     976:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     978:	2327      	movs	r3, #39	; 0x27
     97a:	5cf3      	ldrb	r3, [r6, r3]
     97c:	2b00      	cmp	r3, #0
     97e:	d00e      	beq.n	99e <usart_init+0x25e>
				status_code =
     980:	9b06      	ldr	r3, [sp, #24]
     982:	9300      	str	r3, [sp, #0]
     984:	9b07      	ldr	r3, [sp, #28]
     986:	220e      	movs	r2, #14
     988:	a906      	add	r1, sp, #24
     98a:	468c      	mov	ip, r1
     98c:	4462      	add	r2, ip
     98e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     990:	6a30      	ldr	r0, [r6, #32]
     992:	4f34      	ldr	r7, [pc, #208]	; (a64 <usart_init+0x324>)
     994:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     996:	2800      	cmp	r0, #0
     998:	d000      	beq.n	99c <usart_init+0x25c>
     99a:	e6e4      	b.n	766 <usart_init+0x26>
     99c:	e752      	b.n	844 <usart_init+0x104>
						_sercom_get_async_baud_val(config->baudrate,
     99e:	6a33      	ldr	r3, [r6, #32]
     9a0:	001f      	movs	r7, r3
     9a2:	b2c0      	uxtb	r0, r0
     9a4:	4b2d      	ldr	r3, [pc, #180]	; (a5c <usart_init+0x31c>)
     9a6:	4798      	blx	r3
     9a8:	0001      	movs	r1, r0
				status_code =
     9aa:	9b06      	ldr	r3, [sp, #24]
     9ac:	9300      	str	r3, [sp, #0]
     9ae:	9b07      	ldr	r3, [sp, #28]
     9b0:	220e      	movs	r2, #14
     9b2:	a806      	add	r0, sp, #24
     9b4:	4684      	mov	ip, r0
     9b6:	4462      	add	r2, ip
     9b8:	0038      	movs	r0, r7
     9ba:	4f2a      	ldr	r7, [pc, #168]	; (a64 <usart_init+0x324>)
     9bc:	47b8      	blx	r7
     9be:	e7ea      	b.n	996 <usart_init+0x256>
		if(config->lin_slave_enable) {
     9c0:	7ef3      	ldrb	r3, [r6, #27]
     9c2:	2b00      	cmp	r3, #0
     9c4:	d080      	beq.n	8c8 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     9c6:	2380      	movs	r3, #128	; 0x80
     9c8:	04db      	lsls	r3, r3, #19
     9ca:	431a      	orrs	r2, r3
     9cc:	e77c      	b.n	8c8 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9ce:	0020      	movs	r0, r4
     9d0:	4b25      	ldr	r3, [pc, #148]	; (a68 <usart_init+0x328>)
     9d2:	4798      	blx	r3
     9d4:	e007      	b.n	9e6 <usart_init+0x2a6>
     9d6:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     9d8:	2f04      	cmp	r7, #4
     9da:	d00d      	beq.n	9f8 <usart_init+0x2b8>
     9dc:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9de:	00bb      	lsls	r3, r7, #2
     9e0:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     9e2:	2800      	cmp	r0, #0
     9e4:	d0f3      	beq.n	9ce <usart_init+0x28e>
		if (current_pinmux != PINMUX_UNUSED) {
     9e6:	1c43      	adds	r3, r0, #1
     9e8:	d0f5      	beq.n	9d6 <usart_init+0x296>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     9ea:	a90e      	add	r1, sp, #56	; 0x38
     9ec:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     9ee:	0c00      	lsrs	r0, r0, #16
     9f0:	b2c0      	uxtb	r0, r0
     9f2:	4b1e      	ldr	r3, [pc, #120]	; (a6c <usart_init+0x32c>)
     9f4:	4798      	blx	r3
     9f6:	e7ee      	b.n	9d6 <usart_init+0x296>
		module->callback[i]            = NULL;
     9f8:	2300      	movs	r3, #0
     9fa:	60eb      	str	r3, [r5, #12]
     9fc:	612b      	str	r3, [r5, #16]
     9fe:	616b      	str	r3, [r5, #20]
     a00:	61ab      	str	r3, [r5, #24]
     a02:	61eb      	str	r3, [r5, #28]
     a04:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     a06:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     a08:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     a0a:	2200      	movs	r2, #0
     a0c:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     a0e:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     a10:	3330      	adds	r3, #48	; 0x30
     a12:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     a14:	3301      	adds	r3, #1
     a16:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     a18:	3301      	adds	r3, #1
     a1a:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     a1c:	3301      	adds	r3, #1
     a1e:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a20:	6828      	ldr	r0, [r5, #0]
     a22:	4b08      	ldr	r3, [pc, #32]	; (a44 <usart_init+0x304>)
     a24:	4798      	blx	r3
     a26:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     a28:	4911      	ldr	r1, [pc, #68]	; (a70 <usart_init+0x330>)
     a2a:	4b12      	ldr	r3, [pc, #72]	; (a74 <usart_init+0x334>)
     a2c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a2e:	00a4      	lsls	r4, r4, #2
     a30:	4b11      	ldr	r3, [pc, #68]	; (a78 <usart_init+0x338>)
     a32:	50e5      	str	r5, [r4, r3]
	return status_code;
     a34:	2000      	movs	r0, #0
     a36:	e696      	b.n	766 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a38:	2310      	movs	r3, #16
     a3a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a3c:	2300      	movs	r3, #0
     a3e:	9307      	str	r3, [sp, #28]
     a40:	e6ec      	b.n	81c <usart_init+0xdc>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	000005c5 	.word	0x000005c5
     a48:	40000400 	.word	0x40000400
     a4c:	0000110d 	.word	0x0000110d
     a50:	00001081 	.word	0x00001081
     a54:	00000401 	.word	0x00000401
     a58:	41002000 	.word	0x41002000
     a5c:	00001129 	.word	0x00001129
     a60:	00000343 	.word	0x00000343
     a64:	0000036d 	.word	0x0000036d
     a68:	0000044d 	.word	0x0000044d
     a6c:	00001205 	.word	0x00001205
     a70:	00000b21 	.word	0x00000b21
     a74:	00000601 	.word	0x00000601
     a78:	200000d4 	.word	0x200000d4

00000a7c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a7c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     a7e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     a80:	2a00      	cmp	r2, #0
     a82:	d101      	bne.n	a88 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     a84:	0018      	movs	r0, r3
     a86:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     a88:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     a8a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     a8c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     a8e:	2a00      	cmp	r2, #0
     a90:	d1f8      	bne.n	a84 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     a92:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     a94:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     a96:	2a00      	cmp	r2, #0
     a98:	d1fc      	bne.n	a94 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     a9a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     a9c:	2102      	movs	r1, #2
     a9e:	7e1a      	ldrb	r2, [r3, #24]
     aa0:	420a      	tst	r2, r1
     aa2:	d0fc      	beq.n	a9e <usart_write_wait+0x22>
	return STATUS_OK;
     aa4:	2300      	movs	r3, #0
     aa6:	e7ed      	b.n	a84 <usart_write_wait+0x8>

00000aa8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     aa8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     aaa:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     aac:	2a00      	cmp	r2, #0
     aae:	d101      	bne.n	ab4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     ab0:	0018      	movs	r0, r3
     ab2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     ab4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     ab6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     ab8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     aba:	2a00      	cmp	r2, #0
     abc:	d1f8      	bne.n	ab0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     abe:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     ac0:	7e10      	ldrb	r0, [r2, #24]
     ac2:	0740      	lsls	r0, r0, #29
     ac4:	d5f4      	bpl.n	ab0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     ac6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     ac8:	2b00      	cmp	r3, #0
     aca:	d1fc      	bne.n	ac6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     acc:	8b53      	ldrh	r3, [r2, #26]
     ace:	b2db      	uxtb	r3, r3
	if (error_code) {
     ad0:	0698      	lsls	r0, r3, #26
     ad2:	d021      	beq.n	b18 <usart_read_wait+0x70>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     ad4:	0798      	lsls	r0, r3, #30
     ad6:	d503      	bpl.n	ae0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ad8:	2302      	movs	r3, #2
     ada:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     adc:	3318      	adds	r3, #24
     ade:	e7e7      	b.n	ab0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ae0:	0758      	lsls	r0, r3, #29
     ae2:	d503      	bpl.n	aec <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ae4:	2304      	movs	r3, #4
     ae6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     ae8:	331a      	adds	r3, #26
     aea:	e7e1      	b.n	ab0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     aec:	07d8      	lsls	r0, r3, #31
     aee:	d503      	bpl.n	af8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     af0:	2301      	movs	r3, #1
     af2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     af4:	3312      	adds	r3, #18
     af6:	e7db      	b.n	ab0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     af8:	06d8      	lsls	r0, r3, #27
     afa:	d505      	bpl.n	b08 <usart_read_wait+0x60>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     afc:	8b53      	ldrh	r3, [r2, #26]
     afe:	2110      	movs	r1, #16
     b00:	430b      	orrs	r3, r1
     b02:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     b04:	2342      	movs	r3, #66	; 0x42
     b06:	e7d3      	b.n	ab0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     b08:	069b      	lsls	r3, r3, #26
     b0a:	d505      	bpl.n	b18 <usart_read_wait+0x70>
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     b0c:	8b53      	ldrh	r3, [r2, #26]
     b0e:	2120      	movs	r1, #32
     b10:	430b      	orrs	r3, r1
     b12:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     b14:	2341      	movs	r3, #65	; 0x41
     b16:	e7cb      	b.n	ab0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     b18:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     b1a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     b1c:	2300      	movs	r3, #0
     b1e:	e7c7      	b.n	ab0 <usart_read_wait+0x8>

00000b20 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     b22:	0080      	lsls	r0, r0, #2
     b24:	4b67      	ldr	r3, [pc, #412]	; (cc4 <_usart_interrupt_handler+0x1a4>)
     b26:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     b28:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     b2a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     b2c:	2b00      	cmp	r3, #0
     b2e:	d1fc      	bne.n	b2a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     b30:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     b32:	7da6      	ldrb	r6, [r4, #22]
     b34:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     b36:	2330      	movs	r3, #48	; 0x30
     b38:	5ceb      	ldrb	r3, [r5, r3]
     b3a:	2231      	movs	r2, #49	; 0x31
     b3c:	5caf      	ldrb	r7, [r5, r2]
     b3e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     b40:	07f3      	lsls	r3, r6, #31
     b42:	d522      	bpl.n	b8a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     b44:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b46:	b29b      	uxth	r3, r3
     b48:	2b00      	cmp	r3, #0
     b4a:	d01c      	beq.n	b86 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b4c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     b4e:	7813      	ldrb	r3, [r2, #0]
     b50:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     b52:	1c51      	adds	r1, r2, #1
     b54:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b56:	7969      	ldrb	r1, [r5, #5]
     b58:	2901      	cmp	r1, #1
     b5a:	d00e      	beq.n	b7a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b5c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     b5e:	05db      	lsls	r3, r3, #23
     b60:	0ddb      	lsrs	r3, r3, #23
     b62:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     b64:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b66:	3b01      	subs	r3, #1
     b68:	b29b      	uxth	r3, r3
     b6a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     b6c:	2b00      	cmp	r3, #0
     b6e:	d10c      	bne.n	b8a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b70:	3301      	adds	r3, #1
     b72:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     b74:	3301      	adds	r3, #1
     b76:	75a3      	strb	r3, [r4, #22]
     b78:	e007      	b.n	b8a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b7a:	7851      	ldrb	r1, [r2, #1]
     b7c:	0209      	lsls	r1, r1, #8
     b7e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     b80:	3202      	adds	r2, #2
     b82:	62aa      	str	r2, [r5, #40]	; 0x28
     b84:	e7eb      	b.n	b5e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b86:	2301      	movs	r3, #1
     b88:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b8a:	07b3      	lsls	r3, r6, #30
     b8c:	d506      	bpl.n	b9c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b8e:	2302      	movs	r3, #2
     b90:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     b92:	2200      	movs	r2, #0
     b94:	3331      	adds	r3, #49	; 0x31
     b96:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b98:	07fb      	lsls	r3, r7, #31
     b9a:	d41c      	bmi.n	bd6 <_usart_interrupt_handler+0xb6>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b9c:	0773      	lsls	r3, r6, #29
     b9e:	d56f      	bpl.n	c80 <_usart_interrupt_handler+0x160>

		if (module->remaining_rx_buffer_length) {
     ba0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ba2:	b29b      	uxth	r3, r3
     ba4:	2b00      	cmp	r3, #0
     ba6:	d069      	beq.n	c7c <_usart_interrupt_handler+0x15c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ba8:	8b63      	ldrh	r3, [r4, #26]
     baa:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     bac:	071a      	lsls	r2, r3, #28
     bae:	d416      	bmi.n	bde <_usart_interrupt_handler+0xbe>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     bb0:	223f      	movs	r2, #63	; 0x3f
     bb2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     bb4:	2b00      	cmp	r3, #0
     bb6:	d03e      	beq.n	c36 <_usart_interrupt_handler+0x116>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     bb8:	079a      	lsls	r2, r3, #30
     bba:	d513      	bpl.n	be4 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     bbc:	221a      	movs	r2, #26
     bbe:	2332      	movs	r3, #50	; 0x32
     bc0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     bc2:	8b63      	ldrh	r3, [r4, #26]
     bc4:	3a18      	subs	r2, #24
     bc6:	4313      	orrs	r3, r2
     bc8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     bca:	077b      	lsls	r3, r7, #29
     bcc:	d558      	bpl.n	c80 <_usart_interrupt_handler+0x160>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     bce:	0028      	movs	r0, r5
     bd0:	696b      	ldr	r3, [r5, #20]
     bd2:	4798      	blx	r3
     bd4:	e054      	b.n	c80 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     bd6:	0028      	movs	r0, r5
     bd8:	68eb      	ldr	r3, [r5, #12]
     bda:	4798      	blx	r3
     bdc:	e7de      	b.n	b9c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     bde:	2237      	movs	r2, #55	; 0x37
     be0:	4013      	ands	r3, r2
     be2:	e7e7      	b.n	bb4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     be4:	075a      	lsls	r2, r3, #29
     be6:	d507      	bpl.n	bf8 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     be8:	221e      	movs	r2, #30
     bea:	2332      	movs	r3, #50	; 0x32
     bec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     bee:	8b63      	ldrh	r3, [r4, #26]
     bf0:	3a1a      	subs	r2, #26
     bf2:	4313      	orrs	r3, r2
     bf4:	8363      	strh	r3, [r4, #26]
     bf6:	e7e8      	b.n	bca <_usart_interrupt_handler+0xaa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     bf8:	07da      	lsls	r2, r3, #31
     bfa:	d507      	bpl.n	c0c <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_BAD_DATA;
     bfc:	2213      	movs	r2, #19
     bfe:	2332      	movs	r3, #50	; 0x32
     c00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     c02:	8b63      	ldrh	r3, [r4, #26]
     c04:	3a12      	subs	r2, #18
     c06:	4313      	orrs	r3, r2
     c08:	8363      	strh	r3, [r4, #26]
     c0a:	e7de      	b.n	bca <_usart_interrupt_handler+0xaa>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     c0c:	06da      	lsls	r2, r3, #27
     c0e:	d507      	bpl.n	c20 <_usart_interrupt_handler+0x100>
					module->rx_status = STATUS_ERR_PROTOCOL;
     c10:	2242      	movs	r2, #66	; 0x42
     c12:	2332      	movs	r3, #50	; 0x32
     c14:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     c16:	8b63      	ldrh	r3, [r4, #26]
     c18:	3a32      	subs	r2, #50	; 0x32
     c1a:	4313      	orrs	r3, r2
     c1c:	8363      	strh	r3, [r4, #26]
     c1e:	e7d4      	b.n	bca <_usart_interrupt_handler+0xaa>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     c20:	2220      	movs	r2, #32
     c22:	421a      	tst	r2, r3
     c24:	d0d1      	beq.n	bca <_usart_interrupt_handler+0xaa>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     c26:	3221      	adds	r2, #33	; 0x21
     c28:	2332      	movs	r3, #50	; 0x32
     c2a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     c2c:	8b63      	ldrh	r3, [r4, #26]
     c2e:	3a21      	subs	r2, #33	; 0x21
     c30:	4313      	orrs	r3, r2
     c32:	8363      	strh	r3, [r4, #26]
     c34:	e7c9      	b.n	bca <_usart_interrupt_handler+0xaa>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     c36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     c38:	05db      	lsls	r3, r3, #23
     c3a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     c3c:	b2da      	uxtb	r2, r3
     c3e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     c40:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     c42:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     c44:	1c51      	adds	r1, r2, #1
     c46:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c48:	7969      	ldrb	r1, [r5, #5]
     c4a:	2901      	cmp	r1, #1
     c4c:	d010      	beq.n	c70 <_usart_interrupt_handler+0x150>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     c4e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     c50:	3b01      	subs	r3, #1
     c52:	b29b      	uxth	r3, r3
     c54:	85ab      	strh	r3, [r5, #44]	; 0x2c
     c56:	2b00      	cmp	r3, #0
     c58:	d112      	bne.n	c80 <_usart_interrupt_handler+0x160>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c5a:	3304      	adds	r3, #4
     c5c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     c5e:	2200      	movs	r2, #0
     c60:	332e      	adds	r3, #46	; 0x2e
     c62:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     c64:	07bb      	lsls	r3, r7, #30
     c66:	d50b      	bpl.n	c80 <_usart_interrupt_handler+0x160>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     c68:	0028      	movs	r0, r5
     c6a:	692b      	ldr	r3, [r5, #16]
     c6c:	4798      	blx	r3
     c6e:	e007      	b.n	c80 <_usart_interrupt_handler+0x160>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     c70:	0a1b      	lsrs	r3, r3, #8
     c72:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     c74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     c76:	3301      	adds	r3, #1
     c78:	626b      	str	r3, [r5, #36]	; 0x24
     c7a:	e7e8      	b.n	c4e <_usart_interrupt_handler+0x12e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c7c:	2304      	movs	r3, #4
     c7e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     c80:	06f3      	lsls	r3, r6, #27
     c82:	d504      	bpl.n	c8e <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     c84:	2310      	movs	r3, #16
     c86:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     c88:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     c8a:	06fb      	lsls	r3, r7, #27
     c8c:	d40e      	bmi.n	cac <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     c8e:	06b3      	lsls	r3, r6, #26
     c90:	d504      	bpl.n	c9c <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     c92:	2320      	movs	r3, #32
     c94:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     c96:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     c98:	073b      	lsls	r3, r7, #28
     c9a:	d40b      	bmi.n	cb4 <_usart_interrupt_handler+0x194>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     c9c:	0733      	lsls	r3, r6, #28
     c9e:	d504      	bpl.n	caa <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     ca0:	2308      	movs	r3, #8
     ca2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     ca4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     ca6:	06bb      	lsls	r3, r7, #26
     ca8:	d408      	bmi.n	cbc <_usart_interrupt_handler+0x19c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     cac:	0028      	movs	r0, r5
     cae:	69eb      	ldr	r3, [r5, #28]
     cb0:	4798      	blx	r3
     cb2:	e7ec      	b.n	c8e <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     cb4:	0028      	movs	r0, r5
     cb6:	69ab      	ldr	r3, [r5, #24]
     cb8:	4798      	blx	r3
     cba:	e7ef      	b.n	c9c <_usart_interrupt_handler+0x17c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     cbc:	6a2b      	ldr	r3, [r5, #32]
     cbe:	0028      	movs	r0, r5
     cc0:	4798      	blx	r3
}
     cc2:	e7f2      	b.n	caa <_usart_interrupt_handler+0x18a>
     cc4:	200000d4 	.word	0x200000d4

00000cc8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     cc8:	b510      	push	{r4, lr}
	switch (clock_source) {
     cca:	2808      	cmp	r0, #8
     ccc:	d803      	bhi.n	cd6 <system_clock_source_get_hz+0xe>
     cce:	0080      	lsls	r0, r0, #2
     cd0:	4b1b      	ldr	r3, [pc, #108]	; (d40 <system_clock_source_get_hz+0x78>)
     cd2:	581b      	ldr	r3, [r3, r0]
     cd4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     cd6:	2000      	movs	r0, #0
     cd8:	e030      	b.n	d3c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     cda:	4b1a      	ldr	r3, [pc, #104]	; (d44 <system_clock_source_get_hz+0x7c>)
     cdc:	6918      	ldr	r0, [r3, #16]
     cde:	e02d      	b.n	d3c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     ce0:	4b19      	ldr	r3, [pc, #100]	; (d48 <system_clock_source_get_hz+0x80>)
     ce2:	6a1b      	ldr	r3, [r3, #32]
     ce4:	059b      	lsls	r3, r3, #22
     ce6:	0f9b      	lsrs	r3, r3, #30
     ce8:	4818      	ldr	r0, [pc, #96]	; (d4c <system_clock_source_get_hz+0x84>)
     cea:	40d8      	lsrs	r0, r3
     cec:	e026      	b.n	d3c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     cee:	4b15      	ldr	r3, [pc, #84]	; (d44 <system_clock_source_get_hz+0x7c>)
     cf0:	6958      	ldr	r0, [r3, #20]
     cf2:	e023      	b.n	d3c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cf4:	4b13      	ldr	r3, [pc, #76]	; (d44 <system_clock_source_get_hz+0x7c>)
     cf6:	681b      	ldr	r3, [r3, #0]
			return 0;
     cf8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cfa:	079b      	lsls	r3, r3, #30
     cfc:	d51e      	bpl.n	d3c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     cfe:	4912      	ldr	r1, [pc, #72]	; (d48 <system_clock_source_get_hz+0x80>)
     d00:	2210      	movs	r2, #16
     d02:	68cb      	ldr	r3, [r1, #12]
     d04:	421a      	tst	r2, r3
     d06:	d0fc      	beq.n	d02 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     d08:	4b0e      	ldr	r3, [pc, #56]	; (d44 <system_clock_source_get_hz+0x7c>)
     d0a:	681b      	ldr	r3, [r3, #0]
     d0c:	075b      	lsls	r3, r3, #29
     d0e:	d401      	bmi.n	d14 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     d10:	480f      	ldr	r0, [pc, #60]	; (d50 <system_clock_source_get_hz+0x88>)
     d12:	e013      	b.n	d3c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d14:	2000      	movs	r0, #0
     d16:	4b0f      	ldr	r3, [pc, #60]	; (d54 <system_clock_source_get_hz+0x8c>)
     d18:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     d1a:	4b0a      	ldr	r3, [pc, #40]	; (d44 <system_clock_source_get_hz+0x7c>)
     d1c:	689b      	ldr	r3, [r3, #8]
     d1e:	041b      	lsls	r3, r3, #16
     d20:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d22:	4358      	muls	r0, r3
     d24:	e00a      	b.n	d3c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d26:	2350      	movs	r3, #80	; 0x50
     d28:	4a07      	ldr	r2, [pc, #28]	; (d48 <system_clock_source_get_hz+0x80>)
     d2a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d2c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d2e:	075b      	lsls	r3, r3, #29
     d30:	d504      	bpl.n	d3c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     d32:	4b04      	ldr	r3, [pc, #16]	; (d44 <system_clock_source_get_hz+0x7c>)
     d34:	68d8      	ldr	r0, [r3, #12]
     d36:	e001      	b.n	d3c <system_clock_source_get_hz+0x74>
		return 32768UL;
     d38:	2080      	movs	r0, #128	; 0x80
     d3a:	0200      	lsls	r0, r0, #8
	}
}
     d3c:	bd10      	pop	{r4, pc}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	00002828 	.word	0x00002828
     d44:	200000b0 	.word	0x200000b0
     d48:	40000800 	.word	0x40000800
     d4c:	007a1200 	.word	0x007a1200
     d50:	02dc6c00 	.word	0x02dc6c00
     d54:	00001129 	.word	0x00001129

00000d58 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d58:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d5a:	490c      	ldr	r1, [pc, #48]	; (d8c <system_clock_source_osc8m_set_config+0x34>)
     d5c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d5e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d60:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d62:	7840      	ldrb	r0, [r0, #1]
     d64:	2201      	movs	r2, #1
     d66:	4010      	ands	r0, r2
     d68:	0180      	lsls	r0, r0, #6
     d6a:	2640      	movs	r6, #64	; 0x40
     d6c:	43b3      	bics	r3, r6
     d6e:	4303      	orrs	r3, r0
     d70:	402a      	ands	r2, r5
     d72:	01d2      	lsls	r2, r2, #7
     d74:	2080      	movs	r0, #128	; 0x80
     d76:	4383      	bics	r3, r0
     d78:	4313      	orrs	r3, r2
     d7a:	2203      	movs	r2, #3
     d7c:	4022      	ands	r2, r4
     d7e:	0212      	lsls	r2, r2, #8
     d80:	4803      	ldr	r0, [pc, #12]	; (d90 <system_clock_source_osc8m_set_config+0x38>)
     d82:	4003      	ands	r3, r0
     d84:	4313      	orrs	r3, r2
     d86:	620b      	str	r3, [r1, #32]
}
     d88:	bd70      	pop	{r4, r5, r6, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	40000800 	.word	0x40000800
     d90:	fffffcff 	.word	0xfffffcff

00000d94 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     d94:	2808      	cmp	r0, #8
     d96:	d803      	bhi.n	da0 <system_clock_source_enable+0xc>
     d98:	0080      	lsls	r0, r0, #2
     d9a:	4b25      	ldr	r3, [pc, #148]	; (e30 <system_clock_source_enable+0x9c>)
     d9c:	581b      	ldr	r3, [r3, r0]
     d9e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     da0:	2017      	movs	r0, #23
     da2:	e044      	b.n	e2e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     da4:	4a23      	ldr	r2, [pc, #140]	; (e34 <system_clock_source_enable+0xa0>)
     da6:	6a13      	ldr	r3, [r2, #32]
     da8:	2102      	movs	r1, #2
     daa:	430b      	orrs	r3, r1
     dac:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     dae:	2000      	movs	r0, #0
     db0:	e03d      	b.n	e2e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     db2:	4a20      	ldr	r2, [pc, #128]	; (e34 <system_clock_source_enable+0xa0>)
     db4:	6993      	ldr	r3, [r2, #24]
     db6:	2102      	movs	r1, #2
     db8:	430b      	orrs	r3, r1
     dba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     dbc:	2000      	movs	r0, #0
		break;
     dbe:	e036      	b.n	e2e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     dc0:	4a1c      	ldr	r2, [pc, #112]	; (e34 <system_clock_source_enable+0xa0>)
     dc2:	8a13      	ldrh	r3, [r2, #16]
     dc4:	2102      	movs	r1, #2
     dc6:	430b      	orrs	r3, r1
     dc8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     dca:	2000      	movs	r0, #0
		break;
     dcc:	e02f      	b.n	e2e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     dce:	4a19      	ldr	r2, [pc, #100]	; (e34 <system_clock_source_enable+0xa0>)
     dd0:	8a93      	ldrh	r3, [r2, #20]
     dd2:	2102      	movs	r1, #2
     dd4:	430b      	orrs	r3, r1
     dd6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     dd8:	2000      	movs	r0, #0
		break;
     dda:	e028      	b.n	e2e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     ddc:	4916      	ldr	r1, [pc, #88]	; (e38 <system_clock_source_enable+0xa4>)
     dde:	680b      	ldr	r3, [r1, #0]
     de0:	2202      	movs	r2, #2
     de2:	4313      	orrs	r3, r2
     de4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     de6:	4b13      	ldr	r3, [pc, #76]	; (e34 <system_clock_source_enable+0xa0>)
     de8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dea:	0019      	movs	r1, r3
     dec:	320e      	adds	r2, #14
     dee:	68cb      	ldr	r3, [r1, #12]
     df0:	421a      	tst	r2, r3
     df2:	d0fc      	beq.n	dee <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     df4:	4a10      	ldr	r2, [pc, #64]	; (e38 <system_clock_source_enable+0xa4>)
     df6:	6891      	ldr	r1, [r2, #8]
     df8:	4b0e      	ldr	r3, [pc, #56]	; (e34 <system_clock_source_enable+0xa0>)
     dfa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     dfc:	6852      	ldr	r2, [r2, #4]
     dfe:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     e00:	2200      	movs	r2, #0
     e02:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e04:	0019      	movs	r1, r3
     e06:	3210      	adds	r2, #16
     e08:	68cb      	ldr	r3, [r1, #12]
     e0a:	421a      	tst	r2, r3
     e0c:	d0fc      	beq.n	e08 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     e0e:	4b0a      	ldr	r3, [pc, #40]	; (e38 <system_clock_source_enable+0xa4>)
     e10:	681b      	ldr	r3, [r3, #0]
     e12:	b29b      	uxth	r3, r3
     e14:	4a07      	ldr	r2, [pc, #28]	; (e34 <system_clock_source_enable+0xa0>)
     e16:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     e18:	2000      	movs	r0, #0
     e1a:	e008      	b.n	e2e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     e1c:	4905      	ldr	r1, [pc, #20]	; (e34 <system_clock_source_enable+0xa0>)
     e1e:	2244      	movs	r2, #68	; 0x44
     e20:	5c8b      	ldrb	r3, [r1, r2]
     e22:	2002      	movs	r0, #2
     e24:	4303      	orrs	r3, r0
     e26:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     e28:	2000      	movs	r0, #0
		break;
     e2a:	e000      	b.n	e2e <system_clock_source_enable+0x9a>
		return STATUS_OK;
     e2c:	2000      	movs	r0, #0
}
     e2e:	4770      	bx	lr
     e30:	0000284c 	.word	0x0000284c
     e34:	40000800 	.word	0x40000800
     e38:	200000b0 	.word	0x200000b0

00000e3c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e3c:	b530      	push	{r4, r5, lr}
     e3e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e40:	22c2      	movs	r2, #194	; 0xc2
     e42:	00d2      	lsls	r2, r2, #3
     e44:	4b1a      	ldr	r3, [pc, #104]	; (eb0 <system_clock_init+0x74>)
     e46:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e48:	4a1a      	ldr	r2, [pc, #104]	; (eb4 <system_clock_init+0x78>)
     e4a:	6853      	ldr	r3, [r2, #4]
     e4c:	211e      	movs	r1, #30
     e4e:	438b      	bics	r3, r1
     e50:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     e52:	2301      	movs	r3, #1
     e54:	466a      	mov	r2, sp
     e56:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e58:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e5a:	4d17      	ldr	r5, [pc, #92]	; (eb8 <system_clock_init+0x7c>)
     e5c:	b2e0      	uxtb	r0, r4
     e5e:	4669      	mov	r1, sp
     e60:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e62:	3401      	adds	r4, #1
     e64:	2c25      	cmp	r4, #37	; 0x25
     e66:	d1f9      	bne.n	e5c <system_clock_init+0x20>
	config->run_in_standby  = false;
     e68:	a803      	add	r0, sp, #12
     e6a:	2400      	movs	r4, #0
     e6c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     e6e:	2501      	movs	r5, #1
     e70:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e72:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e74:	4b11      	ldr	r3, [pc, #68]	; (ebc <system_clock_init+0x80>)
     e76:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e78:	2006      	movs	r0, #6
     e7a:	4b11      	ldr	r3, [pc, #68]	; (ec0 <system_clock_init+0x84>)
     e7c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e7e:	4b11      	ldr	r3, [pc, #68]	; (ec4 <system_clock_init+0x88>)
     e80:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     e82:	4b11      	ldr	r3, [pc, #68]	; (ec8 <system_clock_init+0x8c>)
     e84:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     e86:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     e88:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     e8a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e8c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     e8e:	466b      	mov	r3, sp
     e90:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e92:	2306      	movs	r3, #6
     e94:	466a      	mov	r2, sp
     e96:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     e98:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     e9a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e9c:	4669      	mov	r1, sp
     e9e:	2000      	movs	r0, #0
     ea0:	4b0a      	ldr	r3, [pc, #40]	; (ecc <system_clock_init+0x90>)
     ea2:	4798      	blx	r3
     ea4:	2000      	movs	r0, #0
     ea6:	4b0a      	ldr	r3, [pc, #40]	; (ed0 <system_clock_init+0x94>)
     ea8:	4798      	blx	r3
#endif
}
     eaa:	b005      	add	sp, #20
     eac:	bd30      	pop	{r4, r5, pc}
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	40000800 	.word	0x40000800
     eb4:	41004000 	.word	0x41004000
     eb8:	0000110d 	.word	0x0000110d
     ebc:	00000d59 	.word	0x00000d59
     ec0:	00000d95 	.word	0x00000d95
     ec4:	00000ed5 	.word	0x00000ed5
     ec8:	40000400 	.word	0x40000400
     ecc:	00000ef9 	.word	0x00000ef9
     ed0:	00000fb1 	.word	0x00000fb1

00000ed4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     ed4:	4a06      	ldr	r2, [pc, #24]	; (ef0 <system_gclk_init+0x1c>)
     ed6:	6993      	ldr	r3, [r2, #24]
     ed8:	2108      	movs	r1, #8
     eda:	430b      	orrs	r3, r1
     edc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     ede:	2201      	movs	r2, #1
     ee0:	4b04      	ldr	r3, [pc, #16]	; (ef4 <system_gclk_init+0x20>)
     ee2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     ee4:	0019      	movs	r1, r3
     ee6:	780b      	ldrb	r3, [r1, #0]
     ee8:	4213      	tst	r3, r2
     eea:	d1fc      	bne.n	ee6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     eec:	4770      	bx	lr
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	40000400 	.word	0x40000400
     ef4:	40000c00 	.word	0x40000c00

00000ef8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ef8:	b570      	push	{r4, r5, r6, lr}
     efa:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     efc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     efe:	780d      	ldrb	r5, [r1, #0]
     f00:	022d      	lsls	r5, r5, #8
     f02:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     f04:	784b      	ldrb	r3, [r1, #1]
     f06:	2b00      	cmp	r3, #0
     f08:	d002      	beq.n	f10 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     f0a:	2380      	movs	r3, #128	; 0x80
     f0c:	02db      	lsls	r3, r3, #11
     f0e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     f10:	7a4b      	ldrb	r3, [r1, #9]
     f12:	2b00      	cmp	r3, #0
     f14:	d002      	beq.n	f1c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     f16:	2380      	movs	r3, #128	; 0x80
     f18:	031b      	lsls	r3, r3, #12
     f1a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     f1c:	6848      	ldr	r0, [r1, #4]
     f1e:	2801      	cmp	r0, #1
     f20:	d910      	bls.n	f44 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     f22:	1e43      	subs	r3, r0, #1
     f24:	4218      	tst	r0, r3
     f26:	d134      	bne.n	f92 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f28:	2802      	cmp	r0, #2
     f2a:	d930      	bls.n	f8e <system_gclk_gen_set_config+0x96>
     f2c:	2302      	movs	r3, #2
     f2e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     f30:	3201      	adds	r2, #1
						mask <<= 1) {
     f32:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     f34:	4298      	cmp	r0, r3
     f36:	d8fb      	bhi.n	f30 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     f38:	0212      	lsls	r2, r2, #8
     f3a:	4332      	orrs	r2, r6
     f3c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f3e:	2380      	movs	r3, #128	; 0x80
     f40:	035b      	lsls	r3, r3, #13
     f42:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f44:	7a0b      	ldrb	r3, [r1, #8]
     f46:	2b00      	cmp	r3, #0
     f48:	d002      	beq.n	f50 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f4a:	2380      	movs	r3, #128	; 0x80
     f4c:	039b      	lsls	r3, r3, #14
     f4e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f50:	4a13      	ldr	r2, [pc, #76]	; (fa0 <system_gclk_gen_set_config+0xa8>)
     f52:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     f54:	b25b      	sxtb	r3, r3
     f56:	2b00      	cmp	r3, #0
     f58:	dbfb      	blt.n	f52 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f5a:	4b12      	ldr	r3, [pc, #72]	; (fa4 <system_gclk_gen_set_config+0xac>)
     f5c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f5e:	4b12      	ldr	r3, [pc, #72]	; (fa8 <system_gclk_gen_set_config+0xb0>)
     f60:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f62:	4a0f      	ldr	r2, [pc, #60]	; (fa0 <system_gclk_gen_set_config+0xa8>)
     f64:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     f66:	b25b      	sxtb	r3, r3
     f68:	2b00      	cmp	r3, #0
     f6a:	dbfb      	blt.n	f64 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     f6c:	4b0c      	ldr	r3, [pc, #48]	; (fa0 <system_gclk_gen_set_config+0xa8>)
     f6e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f70:	001a      	movs	r2, r3
     f72:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     f74:	b25b      	sxtb	r3, r3
     f76:	2b00      	cmp	r3, #0
     f78:	dbfb      	blt.n	f72 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     f7a:	4a09      	ldr	r2, [pc, #36]	; (fa0 <system_gclk_gen_set_config+0xa8>)
     f7c:	6853      	ldr	r3, [r2, #4]
     f7e:	2180      	movs	r1, #128	; 0x80
     f80:	0249      	lsls	r1, r1, #9
     f82:	400b      	ands	r3, r1
     f84:	431d      	orrs	r5, r3
     f86:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f88:	4b08      	ldr	r3, [pc, #32]	; (fac <system_gclk_gen_set_config+0xb4>)
     f8a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f8c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     f8e:	2200      	movs	r2, #0
     f90:	e7d2      	b.n	f38 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     f92:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     f94:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f96:	2380      	movs	r3, #128	; 0x80
     f98:	029b      	lsls	r3, r3, #10
     f9a:	431d      	orrs	r5, r3
     f9c:	e7d2      	b.n	f44 <system_gclk_gen_set_config+0x4c>
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	40000c00 	.word	0x40000c00
     fa4:	000006d1 	.word	0x000006d1
     fa8:	40000c08 	.word	0x40000c08
     fac:	00000711 	.word	0x00000711

00000fb0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     fb0:	b510      	push	{r4, lr}
     fb2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fb4:	4a0b      	ldr	r2, [pc, #44]	; (fe4 <system_gclk_gen_enable+0x34>)
     fb6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fb8:	b25b      	sxtb	r3, r3
     fba:	2b00      	cmp	r3, #0
     fbc:	dbfb      	blt.n	fb6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     fbe:	4b0a      	ldr	r3, [pc, #40]	; (fe8 <system_gclk_gen_enable+0x38>)
     fc0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fc2:	4b0a      	ldr	r3, [pc, #40]	; (fec <system_gclk_gen_enable+0x3c>)
     fc4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fc6:	4a07      	ldr	r2, [pc, #28]	; (fe4 <system_gclk_gen_enable+0x34>)
     fc8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fca:	b25b      	sxtb	r3, r3
     fcc:	2b00      	cmp	r3, #0
     fce:	dbfb      	blt.n	fc8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     fd0:	4a04      	ldr	r2, [pc, #16]	; (fe4 <system_gclk_gen_enable+0x34>)
     fd2:	6851      	ldr	r1, [r2, #4]
     fd4:	2380      	movs	r3, #128	; 0x80
     fd6:	025b      	lsls	r3, r3, #9
     fd8:	430b      	orrs	r3, r1
     fda:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     fdc:	4b04      	ldr	r3, [pc, #16]	; (ff0 <system_gclk_gen_enable+0x40>)
     fde:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fe0:	bd10      	pop	{r4, pc}
     fe2:	46c0      	nop			; (mov r8, r8)
     fe4:	40000c00 	.word	0x40000c00
     fe8:	000006d1 	.word	0x000006d1
     fec:	40000c04 	.word	0x40000c04
     ff0:	00000711 	.word	0x00000711

00000ff4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     ff4:	b570      	push	{r4, r5, r6, lr}
     ff6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ff8:	4a1a      	ldr	r2, [pc, #104]	; (1064 <system_gclk_gen_get_hz+0x70>)
     ffa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ffc:	b25b      	sxtb	r3, r3
     ffe:	2b00      	cmp	r3, #0
    1000:	dbfb      	blt.n	ffa <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1002:	4b19      	ldr	r3, [pc, #100]	; (1068 <system_gclk_gen_get_hz+0x74>)
    1004:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1006:	4b19      	ldr	r3, [pc, #100]	; (106c <system_gclk_gen_get_hz+0x78>)
    1008:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    100a:	4a16      	ldr	r2, [pc, #88]	; (1064 <system_gclk_gen_get_hz+0x70>)
    100c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    100e:	b25b      	sxtb	r3, r3
    1010:	2b00      	cmp	r3, #0
    1012:	dbfb      	blt.n	100c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1014:	4e13      	ldr	r6, [pc, #76]	; (1064 <system_gclk_gen_get_hz+0x70>)
    1016:	6870      	ldr	r0, [r6, #4]
    1018:	04c0      	lsls	r0, r0, #19
    101a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    101c:	4b14      	ldr	r3, [pc, #80]	; (1070 <system_gclk_gen_get_hz+0x7c>)
    101e:	4798      	blx	r3
    1020:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1022:	4b12      	ldr	r3, [pc, #72]	; (106c <system_gclk_gen_get_hz+0x78>)
    1024:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1026:	6876      	ldr	r6, [r6, #4]
    1028:	02f6      	lsls	r6, r6, #11
    102a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    102c:	4b11      	ldr	r3, [pc, #68]	; (1074 <system_gclk_gen_get_hz+0x80>)
    102e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1030:	4a0c      	ldr	r2, [pc, #48]	; (1064 <system_gclk_gen_get_hz+0x70>)
    1032:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1034:	b25b      	sxtb	r3, r3
    1036:	2b00      	cmp	r3, #0
    1038:	dbfb      	blt.n	1032 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    103a:	4b0a      	ldr	r3, [pc, #40]	; (1064 <system_gclk_gen_get_hz+0x70>)
    103c:	689c      	ldr	r4, [r3, #8]
    103e:	0224      	lsls	r4, r4, #8
    1040:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1042:	4b0d      	ldr	r3, [pc, #52]	; (1078 <system_gclk_gen_get_hz+0x84>)
    1044:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1046:	2e00      	cmp	r6, #0
    1048:	d107      	bne.n	105a <system_gclk_gen_get_hz+0x66>
    104a:	2c01      	cmp	r4, #1
    104c:	d907      	bls.n	105e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    104e:	0021      	movs	r1, r4
    1050:	0028      	movs	r0, r5
    1052:	4b0a      	ldr	r3, [pc, #40]	; (107c <system_gclk_gen_get_hz+0x88>)
    1054:	4798      	blx	r3
    1056:	0005      	movs	r5, r0
    1058:	e001      	b.n	105e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    105a:	3401      	adds	r4, #1
    105c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    105e:	0028      	movs	r0, r5
    1060:	bd70      	pop	{r4, r5, r6, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	40000c00 	.word	0x40000c00
    1068:	000006d1 	.word	0x000006d1
    106c:	40000c04 	.word	0x40000c04
    1070:	00000cc9 	.word	0x00000cc9
    1074:	40000c08 	.word	0x40000c08
    1078:	00000711 	.word	0x00000711
    107c:	00001669 	.word	0x00001669

00001080 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1080:	b510      	push	{r4, lr}
    1082:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1084:	4b06      	ldr	r3, [pc, #24]	; (10a0 <system_gclk_chan_enable+0x20>)
    1086:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1088:	4b06      	ldr	r3, [pc, #24]	; (10a4 <system_gclk_chan_enable+0x24>)
    108a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    108c:	4a06      	ldr	r2, [pc, #24]	; (10a8 <system_gclk_chan_enable+0x28>)
    108e:	8853      	ldrh	r3, [r2, #2]
    1090:	2180      	movs	r1, #128	; 0x80
    1092:	01c9      	lsls	r1, r1, #7
    1094:	430b      	orrs	r3, r1
    1096:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1098:	4b04      	ldr	r3, [pc, #16]	; (10ac <system_gclk_chan_enable+0x2c>)
    109a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    109c:	bd10      	pop	{r4, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	000006d1 	.word	0x000006d1
    10a4:	40000c02 	.word	0x40000c02
    10a8:	40000c00 	.word	0x40000c00
    10ac:	00000711 	.word	0x00000711

000010b0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    10b0:	b510      	push	{r4, lr}
    10b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10b4:	4b0f      	ldr	r3, [pc, #60]	; (10f4 <system_gclk_chan_disable+0x44>)
    10b6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10b8:	4b0f      	ldr	r3, [pc, #60]	; (10f8 <system_gclk_chan_disable+0x48>)
    10ba:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    10bc:	4a0f      	ldr	r2, [pc, #60]	; (10fc <system_gclk_chan_disable+0x4c>)
    10be:	8853      	ldrh	r3, [r2, #2]
    10c0:	051b      	lsls	r3, r3, #20
    10c2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    10c4:	8853      	ldrh	r3, [r2, #2]
    10c6:	490e      	ldr	r1, [pc, #56]	; (1100 <system_gclk_chan_disable+0x50>)
    10c8:	400b      	ands	r3, r1
    10ca:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    10cc:	8853      	ldrh	r3, [r2, #2]
    10ce:	490d      	ldr	r1, [pc, #52]	; (1104 <system_gclk_chan_disable+0x54>)
    10d0:	400b      	ands	r3, r1
    10d2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    10d4:	0011      	movs	r1, r2
    10d6:	2280      	movs	r2, #128	; 0x80
    10d8:	01d2      	lsls	r2, r2, #7
    10da:	884b      	ldrh	r3, [r1, #2]
    10dc:	4213      	tst	r3, r2
    10de:	d1fc      	bne.n	10da <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    10e0:	4906      	ldr	r1, [pc, #24]	; (10fc <system_gclk_chan_disable+0x4c>)
    10e2:	884a      	ldrh	r2, [r1, #2]
    10e4:	0203      	lsls	r3, r0, #8
    10e6:	4806      	ldr	r0, [pc, #24]	; (1100 <system_gclk_chan_disable+0x50>)
    10e8:	4002      	ands	r2, r0
    10ea:	4313      	orrs	r3, r2
    10ec:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    10ee:	4b06      	ldr	r3, [pc, #24]	; (1108 <system_gclk_chan_disable+0x58>)
    10f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10f2:	bd10      	pop	{r4, pc}
    10f4:	000006d1 	.word	0x000006d1
    10f8:	40000c02 	.word	0x40000c02
    10fc:	40000c00 	.word	0x40000c00
    1100:	fffff0ff 	.word	0xfffff0ff
    1104:	ffffbfff 	.word	0xffffbfff
    1108:	00000711 	.word	0x00000711

0000110c <system_gclk_chan_set_config>:
{
    110c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    110e:	780c      	ldrb	r4, [r1, #0]
    1110:	0224      	lsls	r4, r4, #8
    1112:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1114:	4b02      	ldr	r3, [pc, #8]	; (1120 <system_gclk_chan_set_config+0x14>)
    1116:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1118:	b2a4      	uxth	r4, r4
    111a:	4b02      	ldr	r3, [pc, #8]	; (1124 <system_gclk_chan_set_config+0x18>)
    111c:	805c      	strh	r4, [r3, #2]
}
    111e:	bd10      	pop	{r4, pc}
    1120:	000010b1 	.word	0x000010b1
    1124:	40000c00 	.word	0x40000c00

00001128 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1128:	b510      	push	{r4, lr}
    112a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    112c:	4b06      	ldr	r3, [pc, #24]	; (1148 <system_gclk_chan_get_hz+0x20>)
    112e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1130:	4b06      	ldr	r3, [pc, #24]	; (114c <system_gclk_chan_get_hz+0x24>)
    1132:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1134:	4b06      	ldr	r3, [pc, #24]	; (1150 <system_gclk_chan_get_hz+0x28>)
    1136:	885c      	ldrh	r4, [r3, #2]
    1138:	0524      	lsls	r4, r4, #20
    113a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    113c:	4b05      	ldr	r3, [pc, #20]	; (1154 <system_gclk_chan_get_hz+0x2c>)
    113e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1140:	0020      	movs	r0, r4
    1142:	4b05      	ldr	r3, [pc, #20]	; (1158 <system_gclk_chan_get_hz+0x30>)
    1144:	4798      	blx	r3
}
    1146:	bd10      	pop	{r4, pc}
    1148:	000006d1 	.word	0x000006d1
    114c:	40000c02 	.word	0x40000c02
    1150:	40000c00 	.word	0x40000c00
    1154:	00000711 	.word	0x00000711
    1158:	00000ff5 	.word	0x00000ff5

0000115c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    115c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    115e:	78d3      	ldrb	r3, [r2, #3]
    1160:	2b00      	cmp	r3, #0
    1162:	d135      	bne.n	11d0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1164:	7813      	ldrb	r3, [r2, #0]
    1166:	2b80      	cmp	r3, #128	; 0x80
    1168:	d029      	beq.n	11be <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    116a:	061b      	lsls	r3, r3, #24
    116c:	2480      	movs	r4, #128	; 0x80
    116e:	0264      	lsls	r4, r4, #9
    1170:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1172:	7854      	ldrb	r4, [r2, #1]
    1174:	2502      	movs	r5, #2
    1176:	43ac      	bics	r4, r5
    1178:	d106      	bne.n	1188 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    117a:	7894      	ldrb	r4, [r2, #2]
    117c:	2c00      	cmp	r4, #0
    117e:	d120      	bne.n	11c2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1180:	2480      	movs	r4, #128	; 0x80
    1182:	02a4      	lsls	r4, r4, #10
    1184:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1186:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1188:	7854      	ldrb	r4, [r2, #1]
    118a:	3c01      	subs	r4, #1
    118c:	2c01      	cmp	r4, #1
    118e:	d91c      	bls.n	11ca <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1190:	040d      	lsls	r5, r1, #16
    1192:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1194:	24a0      	movs	r4, #160	; 0xa0
    1196:	05e4      	lsls	r4, r4, #23
    1198:	432c      	orrs	r4, r5
    119a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    119c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    119e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11a0:	24d0      	movs	r4, #208	; 0xd0
    11a2:	0624      	lsls	r4, r4, #24
    11a4:	432c      	orrs	r4, r5
    11a6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11a8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    11aa:	78d4      	ldrb	r4, [r2, #3]
    11ac:	2c00      	cmp	r4, #0
    11ae:	d122      	bne.n	11f6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    11b0:	035b      	lsls	r3, r3, #13
    11b2:	d51c      	bpl.n	11ee <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    11b4:	7893      	ldrb	r3, [r2, #2]
    11b6:	2b01      	cmp	r3, #1
    11b8:	d01e      	beq.n	11f8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    11ba:	6141      	str	r1, [r0, #20]
    11bc:	e017      	b.n	11ee <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    11be:	2300      	movs	r3, #0
    11c0:	e7d7      	b.n	1172 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    11c2:	24c0      	movs	r4, #192	; 0xc0
    11c4:	02e4      	lsls	r4, r4, #11
    11c6:	4323      	orrs	r3, r4
    11c8:	e7dd      	b.n	1186 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    11ca:	4c0d      	ldr	r4, [pc, #52]	; (1200 <_system_pinmux_config+0xa4>)
    11cc:	4023      	ands	r3, r4
    11ce:	e7df      	b.n	1190 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    11d0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    11d2:	040c      	lsls	r4, r1, #16
    11d4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    11d6:	23a0      	movs	r3, #160	; 0xa0
    11d8:	05db      	lsls	r3, r3, #23
    11da:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11dc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    11de:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11e0:	23d0      	movs	r3, #208	; 0xd0
    11e2:	061b      	lsls	r3, r3, #24
    11e4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11e6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    11e8:	78d3      	ldrb	r3, [r2, #3]
    11ea:	2b00      	cmp	r3, #0
    11ec:	d103      	bne.n	11f6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    11ee:	7853      	ldrb	r3, [r2, #1]
    11f0:	3b01      	subs	r3, #1
    11f2:	2b01      	cmp	r3, #1
    11f4:	d902      	bls.n	11fc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    11f6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    11f8:	6181      	str	r1, [r0, #24]
    11fa:	e7f8      	b.n	11ee <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    11fc:	6081      	str	r1, [r0, #8]
}
    11fe:	e7fa      	b.n	11f6 <_system_pinmux_config+0x9a>
    1200:	fffbffff 	.word	0xfffbffff

00001204 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1204:	b510      	push	{r4, lr}
    1206:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1208:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    120a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    120c:	2900      	cmp	r1, #0
    120e:	d104      	bne.n	121a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1210:	0943      	lsrs	r3, r0, #5
    1212:	01db      	lsls	r3, r3, #7
    1214:	4905      	ldr	r1, [pc, #20]	; (122c <system_pinmux_pin_set_config+0x28>)
    1216:	468c      	mov	ip, r1
    1218:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    121a:	241f      	movs	r4, #31
    121c:	4020      	ands	r0, r4
    121e:	2101      	movs	r1, #1
    1220:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1222:	0018      	movs	r0, r3
    1224:	4b02      	ldr	r3, [pc, #8]	; (1230 <system_pinmux_pin_set_config+0x2c>)
    1226:	4798      	blx	r3
}
    1228:	bd10      	pop	{r4, pc}
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	41004400 	.word	0x41004400
    1230:	0000115d 	.word	0x0000115d

00001234 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1234:	4770      	bx	lr
	...

00001238 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1238:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    123a:	4b05      	ldr	r3, [pc, #20]	; (1250 <system_init+0x18>)
    123c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    123e:	4b05      	ldr	r3, [pc, #20]	; (1254 <system_init+0x1c>)
    1240:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1242:	4b05      	ldr	r3, [pc, #20]	; (1258 <system_init+0x20>)
    1244:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1246:	4b05      	ldr	r3, [pc, #20]	; (125c <system_init+0x24>)
    1248:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    124a:	4b05      	ldr	r3, [pc, #20]	; (1260 <system_init+0x28>)
    124c:	4798      	blx	r3
}
    124e:	bd10      	pop	{r4, pc}
    1250:	00000e3d 	.word	0x00000e3d
    1254:	000006cd 	.word	0x000006cd
    1258:	00001235 	.word	0x00001235
    125c:	00001235 	.word	0x00001235
    1260:	00001235 	.word	0x00001235

00001264 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1264:	e7fe      	b.n	1264 <Dummy_Handler>
	...

00001268 <Reset_Handler>:
{
    1268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    126a:	4a2a      	ldr	r2, [pc, #168]	; (1314 <Reset_Handler+0xac>)
    126c:	4b2a      	ldr	r3, [pc, #168]	; (1318 <Reset_Handler+0xb0>)
    126e:	429a      	cmp	r2, r3
    1270:	d011      	beq.n	1296 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1272:	001a      	movs	r2, r3
    1274:	4b29      	ldr	r3, [pc, #164]	; (131c <Reset_Handler+0xb4>)
    1276:	429a      	cmp	r2, r3
    1278:	d20d      	bcs.n	1296 <Reset_Handler+0x2e>
    127a:	4a29      	ldr	r2, [pc, #164]	; (1320 <Reset_Handler+0xb8>)
    127c:	3303      	adds	r3, #3
    127e:	1a9b      	subs	r3, r3, r2
    1280:	089b      	lsrs	r3, r3, #2
    1282:	3301      	adds	r3, #1
    1284:	009b      	lsls	r3, r3, #2
    1286:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1288:	4823      	ldr	r0, [pc, #140]	; (1318 <Reset_Handler+0xb0>)
    128a:	4922      	ldr	r1, [pc, #136]	; (1314 <Reset_Handler+0xac>)
    128c:	588c      	ldr	r4, [r1, r2]
    128e:	5084      	str	r4, [r0, r2]
    1290:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1292:	429a      	cmp	r2, r3
    1294:	d1fa      	bne.n	128c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1296:	4a23      	ldr	r2, [pc, #140]	; (1324 <Reset_Handler+0xbc>)
    1298:	4b23      	ldr	r3, [pc, #140]	; (1328 <Reset_Handler+0xc0>)
    129a:	429a      	cmp	r2, r3
    129c:	d20a      	bcs.n	12b4 <Reset_Handler+0x4c>
    129e:	43d3      	mvns	r3, r2
    12a0:	4921      	ldr	r1, [pc, #132]	; (1328 <Reset_Handler+0xc0>)
    12a2:	185b      	adds	r3, r3, r1
    12a4:	2103      	movs	r1, #3
    12a6:	438b      	bics	r3, r1
    12a8:	3304      	adds	r3, #4
    12aa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    12ac:	2100      	movs	r1, #0
    12ae:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    12b0:	4293      	cmp	r3, r2
    12b2:	d1fc      	bne.n	12ae <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    12b4:	4a1d      	ldr	r2, [pc, #116]	; (132c <Reset_Handler+0xc4>)
    12b6:	21ff      	movs	r1, #255	; 0xff
    12b8:	4b1d      	ldr	r3, [pc, #116]	; (1330 <Reset_Handler+0xc8>)
    12ba:	438b      	bics	r3, r1
    12bc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    12be:	39fd      	subs	r1, #253	; 0xfd
    12c0:	2390      	movs	r3, #144	; 0x90
    12c2:	005b      	lsls	r3, r3, #1
    12c4:	4a1b      	ldr	r2, [pc, #108]	; (1334 <Reset_Handler+0xcc>)
    12c6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    12c8:	4a1b      	ldr	r2, [pc, #108]	; (1338 <Reset_Handler+0xd0>)
    12ca:	78d3      	ldrb	r3, [r2, #3]
    12cc:	2503      	movs	r5, #3
    12ce:	43ab      	bics	r3, r5
    12d0:	2402      	movs	r4, #2
    12d2:	4323      	orrs	r3, r4
    12d4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    12d6:	78d3      	ldrb	r3, [r2, #3]
    12d8:	270c      	movs	r7, #12
    12da:	43bb      	bics	r3, r7
    12dc:	2608      	movs	r6, #8
    12de:	4333      	orrs	r3, r6
    12e0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    12e2:	4b16      	ldr	r3, [pc, #88]	; (133c <Reset_Handler+0xd4>)
    12e4:	7b98      	ldrb	r0, [r3, #14]
    12e6:	2230      	movs	r2, #48	; 0x30
    12e8:	4390      	bics	r0, r2
    12ea:	2220      	movs	r2, #32
    12ec:	4310      	orrs	r0, r2
    12ee:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    12f0:	7b99      	ldrb	r1, [r3, #14]
    12f2:	43b9      	bics	r1, r7
    12f4:	4331      	orrs	r1, r6
    12f6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    12f8:	7b9a      	ldrb	r2, [r3, #14]
    12fa:	43aa      	bics	r2, r5
    12fc:	4322      	orrs	r2, r4
    12fe:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1300:	4a0f      	ldr	r2, [pc, #60]	; (1340 <Reset_Handler+0xd8>)
    1302:	6853      	ldr	r3, [r2, #4]
    1304:	2180      	movs	r1, #128	; 0x80
    1306:	430b      	orrs	r3, r1
    1308:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    130a:	4b0e      	ldr	r3, [pc, #56]	; (1344 <Reset_Handler+0xdc>)
    130c:	4798      	blx	r3
        main();
    130e:	4b0e      	ldr	r3, [pc, #56]	; (1348 <Reset_Handler+0xe0>)
    1310:	4798      	blx	r3
    1312:	e7fe      	b.n	1312 <Reset_Handler+0xaa>
    1314:	00002934 	.word	0x00002934
    1318:	20000000 	.word	0x20000000
    131c:	20000068 	.word	0x20000068
    1320:	20000004 	.word	0x20000004
    1324:	20000068 	.word	0x20000068
    1328:	200001c0 	.word	0x200001c0
    132c:	e000ed00 	.word	0xe000ed00
    1330:	00000000 	.word	0x00000000
    1334:	41007000 	.word	0x41007000
    1338:	41005000 	.word	0x41005000
    133c:	41004800 	.word	0x41004800
    1340:	41004000 	.word	0x41004000
    1344:	000017d5 	.word	0x000017d5
    1348:	000015d9 	.word	0x000015d9

0000134c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    134c:	b5f0      	push	{r4, r5, r6, r7, lr}
    134e:	46c6      	mov	lr, r8
    1350:	b500      	push	{lr}
    1352:	000c      	movs	r4, r1
    1354:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1356:	2800      	cmp	r0, #0
    1358:	d10f      	bne.n	137a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    135a:	2a00      	cmp	r2, #0
    135c:	dd11      	ble.n	1382 <_read+0x36>
    135e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1360:	4e09      	ldr	r6, [pc, #36]	; (1388 <_read+0x3c>)
    1362:	4d0a      	ldr	r5, [pc, #40]	; (138c <_read+0x40>)
    1364:	6830      	ldr	r0, [r6, #0]
    1366:	0021      	movs	r1, r4
    1368:	682b      	ldr	r3, [r5, #0]
    136a:	4798      	blx	r3
		ptr++;
    136c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    136e:	42bc      	cmp	r4, r7
    1370:	d1f8      	bne.n	1364 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1372:	4640      	mov	r0, r8
    1374:	bc04      	pop	{r2}
    1376:	4690      	mov	r8, r2
    1378:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    137a:	2301      	movs	r3, #1
    137c:	425b      	negs	r3, r3
    137e:	4698      	mov	r8, r3
    1380:	e7f7      	b.n	1372 <_read+0x26>
	for (; len > 0; --len) {
    1382:	4680      	mov	r8, r0
    1384:	e7f5      	b.n	1372 <_read+0x26>
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	200000f4 	.word	0x200000f4
    138c:	200000ec 	.word	0x200000ec

00001390 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1390:	b5f0      	push	{r4, r5, r6, r7, lr}
    1392:	46c6      	mov	lr, r8
    1394:	b500      	push	{lr}
    1396:	000e      	movs	r6, r1
    1398:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    139a:	3801      	subs	r0, #1
    139c:	2802      	cmp	r0, #2
    139e:	d810      	bhi.n	13c2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    13a0:	2a00      	cmp	r2, #0
    13a2:	d011      	beq.n	13c8 <_write+0x38>
    13a4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    13a6:	4b0c      	ldr	r3, [pc, #48]	; (13d8 <_write+0x48>)
    13a8:	4698      	mov	r8, r3
    13aa:	4f0c      	ldr	r7, [pc, #48]	; (13dc <_write+0x4c>)
    13ac:	4643      	mov	r3, r8
    13ae:	6818      	ldr	r0, [r3, #0]
    13b0:	5d31      	ldrb	r1, [r6, r4]
    13b2:	683b      	ldr	r3, [r7, #0]
    13b4:	4798      	blx	r3
    13b6:	2800      	cmp	r0, #0
    13b8:	db08      	blt.n	13cc <_write+0x3c>
			return -1;
		}
		++nChars;
    13ba:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    13bc:	42a5      	cmp	r5, r4
    13be:	d1f5      	bne.n	13ac <_write+0x1c>
    13c0:	e006      	b.n	13d0 <_write+0x40>
		return -1;
    13c2:	2401      	movs	r4, #1
    13c4:	4264      	negs	r4, r4
    13c6:	e003      	b.n	13d0 <_write+0x40>
	for (; len != 0; --len) {
    13c8:	0014      	movs	r4, r2
    13ca:	e001      	b.n	13d0 <_write+0x40>
			return -1;
    13cc:	2401      	movs	r4, #1
    13ce:	4264      	negs	r4, r4
	}
	return nChars;
}
    13d0:	0020      	movs	r0, r4
    13d2:	bc04      	pop	{r2}
    13d4:	4690      	mov	r8, r2
    13d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13d8:	200000f4 	.word	0x200000f4
    13dc:	200000f0 	.word	0x200000f0

000013e0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    13e0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    13e2:	4a06      	ldr	r2, [pc, #24]	; (13fc <_sbrk+0x1c>)
    13e4:	6812      	ldr	r2, [r2, #0]
    13e6:	2a00      	cmp	r2, #0
    13e8:	d004      	beq.n	13f4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    13ea:	4a04      	ldr	r2, [pc, #16]	; (13fc <_sbrk+0x1c>)
    13ec:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    13ee:	18c3      	adds	r3, r0, r3
    13f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    13f2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    13f4:	4902      	ldr	r1, [pc, #8]	; (1400 <_sbrk+0x20>)
    13f6:	4a01      	ldr	r2, [pc, #4]	; (13fc <_sbrk+0x1c>)
    13f8:	6011      	str	r1, [r2, #0]
    13fa:	e7f6      	b.n	13ea <_sbrk+0xa>
    13fc:	200000c8 	.word	0x200000c8
    1400:	200021c0 	.word	0x200021c0

00001404 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1404:	2001      	movs	r0, #1
    1406:	4240      	negs	r0, r0
    1408:	4770      	bx	lr

0000140a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    140a:	2380      	movs	r3, #128	; 0x80
    140c:	019b      	lsls	r3, r3, #6
    140e:	604b      	str	r3, [r1, #4]

	return 0;
}
    1410:	2000      	movs	r0, #0
    1412:	4770      	bx	lr

00001414 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1414:	2001      	movs	r0, #1
    1416:	4770      	bx	lr

00001418 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1418:	2000      	movs	r0, #0
    141a:	4770      	bx	lr

0000141c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    141c:	b570      	push	{r4, r5, r6, lr}
    141e:	b082      	sub	sp, #8
    1420:	0005      	movs	r5, r0
    1422:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1424:	2200      	movs	r2, #0
    1426:	466b      	mov	r3, sp
    1428:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    142a:	4c06      	ldr	r4, [pc, #24]	; (1444 <usart_serial_getchar+0x28>)
    142c:	466b      	mov	r3, sp
    142e:	1d99      	adds	r1, r3, #6
    1430:	0028      	movs	r0, r5
    1432:	47a0      	blx	r4
    1434:	2800      	cmp	r0, #0
    1436:	d1f9      	bne.n	142c <usart_serial_getchar+0x10>

	*c = temp;
    1438:	466b      	mov	r3, sp
    143a:	3306      	adds	r3, #6
    143c:	881b      	ldrh	r3, [r3, #0]
    143e:	7033      	strb	r3, [r6, #0]
}
    1440:	b002      	add	sp, #8
    1442:	bd70      	pop	{r4, r5, r6, pc}
    1444:	00000aa9 	.word	0x00000aa9

00001448 <usart_serial_putchar>:
{
    1448:	b570      	push	{r4, r5, r6, lr}
    144a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    144c:	b28c      	uxth	r4, r1
    144e:	4e03      	ldr	r6, [pc, #12]	; (145c <usart_serial_putchar+0x14>)
    1450:	0021      	movs	r1, r4
    1452:	0028      	movs	r0, r5
    1454:	47b0      	blx	r6
    1456:	2800      	cmp	r0, #0
    1458:	d1fa      	bne.n	1450 <usart_serial_putchar+0x8>
}
    145a:	bd70      	pop	{r4, r5, r6, pc}
    145c:	00000a7d 	.word	0x00000a7d

00001460 <configure_usart>:
	/* Jump to user Reset Handler in the application */
	application_code_entry();
}

void configure_usart(void)
{
    1460:	b5f0      	push	{r4, r5, r6, r7, lr}
    1462:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1464:	2380      	movs	r3, #128	; 0x80
    1466:	05db      	lsls	r3, r3, #23
    1468:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    146a:	2300      	movs	r3, #0
    146c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    146e:	22ff      	movs	r2, #255	; 0xff
    1470:	4669      	mov	r1, sp
    1472:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1474:	2200      	movs	r2, #0
    1476:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1478:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    147a:	2401      	movs	r4, #1
    147c:	2124      	movs	r1, #36	; 0x24
    147e:	4668      	mov	r0, sp
    1480:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    1482:	3101      	adds	r1, #1
    1484:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1486:	3101      	adds	r1, #1
    1488:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    148a:	3101      	adds	r1, #1
    148c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    148e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1490:	3105      	adds	r1, #5
    1492:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1494:	3101      	adds	r1, #1
    1496:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1498:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    149a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    149c:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    149e:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    14a0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    14a2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    14a4:	2313      	movs	r3, #19
    14a6:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    14a8:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = UART_BAUDRATE;
    14aa:	23e1      	movs	r3, #225	; 0xe1
    14ac:	025b      	lsls	r3, r3, #9
    14ae:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    14b0:	23c4      	movs	r3, #196	; 0xc4
    14b2:	039b      	lsls	r3, r3, #14
    14b4:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    14b6:	2301      	movs	r3, #1
    14b8:	425b      	negs	r3, r3
    14ba:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    14bc:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
    14be:	4b17      	ldr	r3, [pc, #92]	; (151c <configure_usart+0xbc>)
    14c0:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
    14c2:	4b17      	ldr	r3, [pc, #92]	; (1520 <configure_usart+0xc0>)
    14c4:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    14c6:	4d17      	ldr	r5, [pc, #92]	; (1524 <configure_usart+0xc4>)
    14c8:	4b17      	ldr	r3, [pc, #92]	; (1528 <configure_usart+0xc8>)
    14ca:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    14cc:	4a17      	ldr	r2, [pc, #92]	; (152c <configure_usart+0xcc>)
    14ce:	4b18      	ldr	r3, [pc, #96]	; (1530 <configure_usart+0xd0>)
    14d0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    14d2:	4a18      	ldr	r2, [pc, #96]	; (1534 <configure_usart+0xd4>)
    14d4:	4b18      	ldr	r3, [pc, #96]	; (1538 <configure_usart+0xd8>)
    14d6:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    14d8:	466a      	mov	r2, sp
    14da:	4918      	ldr	r1, [pc, #96]	; (153c <configure_usart+0xdc>)
    14dc:	0028      	movs	r0, r5
    14de:	4b18      	ldr	r3, [pc, #96]	; (1540 <configure_usart+0xe0>)
    14e0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    14e2:	4f18      	ldr	r7, [pc, #96]	; (1544 <configure_usart+0xe4>)
    14e4:	683b      	ldr	r3, [r7, #0]
    14e6:	6898      	ldr	r0, [r3, #8]
    14e8:	2100      	movs	r1, #0
    14ea:	4e17      	ldr	r6, [pc, #92]	; (1548 <configure_usart+0xe8>)
    14ec:	47b0      	blx	r6
	setbuf(stdin, NULL);
    14ee:	683b      	ldr	r3, [r7, #0]
    14f0:	6858      	ldr	r0, [r3, #4]
    14f2:	2100      	movs	r1, #0
    14f4:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14f6:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14f8:	0030      	movs	r0, r6
    14fa:	4b14      	ldr	r3, [pc, #80]	; (154c <configure_usart+0xec>)
    14fc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14fe:	231f      	movs	r3, #31
    1500:	4018      	ands	r0, r3
    1502:	4084      	lsls	r4, r0
    1504:	4b12      	ldr	r3, [pc, #72]	; (1550 <configure_usart+0xf0>)
    1506:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1508:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    150a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    150c:	2b00      	cmp	r3, #0
    150e:	d1fc      	bne.n	150a <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1510:	6833      	ldr	r3, [r6, #0]
    1512:	2202      	movs	r2, #2
    1514:	4313      	orrs	r3, r2
    1516:	6033      	str	r3, [r6, #0]
	
	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);
	usart_enable(&usart_instance);
}
    1518:	b011      	add	sp, #68	; 0x44
    151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    151c:	002a0003 	.word	0x002a0003
    1520:	002b0003 	.word	0x002b0003
    1524:	200000f8 	.word	0x200000f8
    1528:	200000f4 	.word	0x200000f4
    152c:	00001449 	.word	0x00001449
    1530:	200000f0 	.word	0x200000f0
    1534:	0000141d 	.word	0x0000141d
    1538:	200000ec 	.word	0x200000ec
    153c:	42001800 	.word	0x42001800
    1540:	00000741 	.word	0x00000741
    1544:	20000004 	.word	0x20000004
    1548:	00001861 	.word	0x00001861
    154c:	0000063d 	.word	0x0000063d
    1550:	e000e100 	.word	0xe000e100

00001554 <configure_nvm>:

void configure_nvm(void)
{
    1554:	b500      	push	{lr}
    1556:	b083      	sub	sp, #12
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    1558:	2200      	movs	r2, #0
    155a:	466b      	mov	r3, sp
    155c:	701a      	strb	r2, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    155e:	4b07      	ldr	r3, [pc, #28]	; (157c <configure_nvm+0x28>)
    1560:	685b      	ldr	r3, [r3, #4]
    1562:	06db      	lsls	r3, r3, #27
    1564:	0f1b      	lsrs	r3, r3, #28
    1566:	4669      	mov	r1, sp
    1568:	708b      	strb	r3, [r1, #2]
	config->disable_cache     = false;
    156a:	70ca      	strb	r2, [r1, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    156c:	710a      	strb	r2, [r1, #4]
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
	config_nvm.manual_page_write = false;
    156e:	704a      	strb	r2, [r1, #1]
	nvm_set_config(&config_nvm);
    1570:	4668      	mov	r0, sp
    1572:	4b03      	ldr	r3, [pc, #12]	; (1580 <configure_nvm+0x2c>)
    1574:	4798      	blx	r3
}
    1576:	b003      	add	sp, #12
    1578:	bd00      	pop	{pc}
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	41004000 	.word	0x41004000
    1580:	00000115 	.word	0x00000115

00001584 <configure_pins>:

void configure_pins(void)
{
    1584:	b570      	push	{r4, r5, r6, lr}
    1586:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1588:	ac01      	add	r4, sp, #4
    158a:	2301      	movs	r3, #1
    158c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    158e:	2600      	movs	r6, #0
    1590:	70a6      	strb	r6, [r4, #2]
	// LED
	struct port_config configure_port_pin;
	port_get_config_defaults(&configure_port_pin);
	configure_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1592:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &configure_port_pin);
    1594:	0021      	movs	r1, r4
    1596:	2017      	movs	r0, #23
    1598:	4d03      	ldr	r5, [pc, #12]	; (15a8 <configure_pins+0x24>)
    159a:	47a8      	blx	r5
	
	// Button
	configure_port_pin.direction = PORT_PIN_DIR_INPUT;
    159c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(BUTTON_0_PIN, &configure_port_pin);
    159e:	0021      	movs	r1, r4
    15a0:	2037      	movs	r0, #55	; 0x37
    15a2:	47a8      	blx	r5
}
    15a4:	b002      	add	sp, #8
    15a6:	bd70      	pop	{r4, r5, r6, pc}
    15a8:	00000265 	.word	0x00000265

000015ac <erase_nvm>:

void erase_nvm(void)
{
    15ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int i = NVM_APPCODE; i < NVM_END; i += NVM_ROW_PAGES * NVM_PAGE_SIZE)
    15ae:	2480      	movs	r4, #128	; 0x80
    15b0:	01e4      	lsls	r4, r4, #7
	{
		do
		{
			error_code = nvm_erase_row(i);
    15b2:	4e07      	ldr	r6, [pc, #28]	; (15d0 <erase_nvm+0x24>)
    15b4:	4d07      	ldr	r5, [pc, #28]	; (15d4 <erase_nvm+0x28>)
	for (int i = NVM_APPCODE; i < NVM_END; i += NVM_ROW_PAGES * NVM_PAGE_SIZE)
    15b6:	2780      	movs	r7, #128	; 0x80
    15b8:	02ff      	lsls	r7, r7, #11
			error_code = nvm_erase_row(i);
    15ba:	0020      	movs	r0, r4
    15bc:	47b0      	blx	r6
    15be:	7028      	strb	r0, [r5, #0]
		} while (error_code == STATUS_BUSY);
    15c0:	2805      	cmp	r0, #5
    15c2:	d0fa      	beq.n	15ba <erase_nvm+0xe>
	for (int i = NVM_APPCODE; i < NVM_END; i += NVM_ROW_PAGES * NVM_PAGE_SIZE)
    15c4:	3401      	adds	r4, #1
    15c6:	34ff      	adds	r4, #255	; 0xff
    15c8:	42bc      	cmp	r4, r7
    15ca:	d1f6      	bne.n	15ba <erase_nvm+0xe>
	}
}
    15cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00000211 	.word	0x00000211
    15d4:	200001b8 	.word	0x200001b8

000015d8 <main>:

int main (void)
{
    15d8:	b570      	push	{r4, r5, r6, lr}
	system_init();
    15da:	4b17      	ldr	r3, [pc, #92]	; (1638 <main+0x60>)
    15dc:	4798      	blx	r3
	configure_usart();
    15de:	4b17      	ldr	r3, [pc, #92]	; (163c <main+0x64>)
    15e0:	4798      	blx	r3
	configure_nvm();
    15e2:	4b17      	ldr	r3, [pc, #92]	; (1640 <main+0x68>)
    15e4:	4798      	blx	r3
	configure_pins();
    15e6:	4b17      	ldr	r3, [pc, #92]	; (1644 <main+0x6c>)
    15e8:	4798      	blx	r3
	
	printf("Bootloader");
    15ea:	4817      	ldr	r0, [pc, #92]	; (1648 <main+0x70>)
    15ec:	4b17      	ldr	r3, [pc, #92]	; (164c <main+0x74>)
    15ee:	4798      	blx	r3
	
	do
	{
		error_code = nvm_read_buffer(NVM_APPCODE, read_buffer, NVM_PAGE_SIZE);
    15f0:	4e17      	ldr	r6, [pc, #92]	; (1650 <main+0x78>)
    15f2:	4d18      	ldr	r5, [pc, #96]	; (1654 <main+0x7c>)
    15f4:	4c18      	ldr	r4, [pc, #96]	; (1658 <main+0x80>)
    15f6:	2240      	movs	r2, #64	; 0x40
    15f8:	0031      	movs	r1, r6
    15fa:	2080      	movs	r0, #128	; 0x80
    15fc:	01c0      	lsls	r0, r0, #7
    15fe:	47a8      	blx	r5
    1600:	7020      	strb	r0, [r4, #0]
	} while (error_code == STATUS_BUSY);
    1602:	2805      	cmp	r0, #5
    1604:	d0f7      	beq.n	15f6 <main+0x1e>
	
	erase_nvm();
    1606:	4b15      	ldr	r3, [pc, #84]	; (165c <main+0x84>)
    1608:	4798      	blx	r3
	
	do
	{
		error_code = nvm_read_buffer(NVM_APPCODE, read_buffer, NVM_PAGE_SIZE);
    160a:	4e11      	ldr	r6, [pc, #68]	; (1650 <main+0x78>)
    160c:	4d11      	ldr	r5, [pc, #68]	; (1654 <main+0x7c>)
    160e:	4c12      	ldr	r4, [pc, #72]	; (1658 <main+0x80>)
    1610:	2240      	movs	r2, #64	; 0x40
    1612:	0031      	movs	r1, r6
    1614:	2080      	movs	r0, #128	; 0x80
    1616:	01c0      	lsls	r0, r0, #7
    1618:	47a8      	blx	r5
    161a:	7020      	strb	r0, [r4, #0]
	} while (error_code == STATUS_BUSY);
    161c:	2805      	cmp	r0, #5
    161e:	d0f7      	beq.n	1610 <main+0x38>
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1620:	480f      	ldr	r0, [pc, #60]	; (1660 <main+0x88>)
    1622:	2380      	movs	r3, #128	; 0x80
    1624:	041b      	lsls	r3, r3, #16
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1626:	490f      	ldr	r1, [pc, #60]	; (1664 <main+0x8c>)
    1628:	e000      	b.n	162c <main+0x54>
    162a:	618b      	str	r3, [r1, #24]
	return (port_base->IN.reg & pin_mask);
    162c:	6a02      	ldr	r2, [r0, #32]
	
	while (1) {
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    162e:	421a      	tst	r2, r3
    1630:	d1fb      	bne.n	162a <main+0x52>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1632:	614b      	str	r3, [r1, #20]
    1634:	e7fa      	b.n	162c <main+0x54>
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	00001239 	.word	0x00001239
    163c:	00001461 	.word	0x00001461
    1640:	00001555 	.word	0x00001555
    1644:	00001585 	.word	0x00001585
    1648:	00002870 	.word	0x00002870
    164c:	0000182d 	.word	0x0000182d
    1650:	20000178 	.word	0x20000178
    1654:	000001a1 	.word	0x000001a1
    1658:	200001b8 	.word	0x200001b8
    165c:	000015ad 	.word	0x000015ad
    1660:	41004480 	.word	0x41004480
    1664:	41004400 	.word	0x41004400

00001668 <__udivsi3>:
    1668:	2200      	movs	r2, #0
    166a:	0843      	lsrs	r3, r0, #1
    166c:	428b      	cmp	r3, r1
    166e:	d374      	bcc.n	175a <__udivsi3+0xf2>
    1670:	0903      	lsrs	r3, r0, #4
    1672:	428b      	cmp	r3, r1
    1674:	d35f      	bcc.n	1736 <__udivsi3+0xce>
    1676:	0a03      	lsrs	r3, r0, #8
    1678:	428b      	cmp	r3, r1
    167a:	d344      	bcc.n	1706 <__udivsi3+0x9e>
    167c:	0b03      	lsrs	r3, r0, #12
    167e:	428b      	cmp	r3, r1
    1680:	d328      	bcc.n	16d4 <__udivsi3+0x6c>
    1682:	0c03      	lsrs	r3, r0, #16
    1684:	428b      	cmp	r3, r1
    1686:	d30d      	bcc.n	16a4 <__udivsi3+0x3c>
    1688:	22ff      	movs	r2, #255	; 0xff
    168a:	0209      	lsls	r1, r1, #8
    168c:	ba12      	rev	r2, r2
    168e:	0c03      	lsrs	r3, r0, #16
    1690:	428b      	cmp	r3, r1
    1692:	d302      	bcc.n	169a <__udivsi3+0x32>
    1694:	1212      	asrs	r2, r2, #8
    1696:	0209      	lsls	r1, r1, #8
    1698:	d065      	beq.n	1766 <__udivsi3+0xfe>
    169a:	0b03      	lsrs	r3, r0, #12
    169c:	428b      	cmp	r3, r1
    169e:	d319      	bcc.n	16d4 <__udivsi3+0x6c>
    16a0:	e000      	b.n	16a4 <__udivsi3+0x3c>
    16a2:	0a09      	lsrs	r1, r1, #8
    16a4:	0bc3      	lsrs	r3, r0, #15
    16a6:	428b      	cmp	r3, r1
    16a8:	d301      	bcc.n	16ae <__udivsi3+0x46>
    16aa:	03cb      	lsls	r3, r1, #15
    16ac:	1ac0      	subs	r0, r0, r3
    16ae:	4152      	adcs	r2, r2
    16b0:	0b83      	lsrs	r3, r0, #14
    16b2:	428b      	cmp	r3, r1
    16b4:	d301      	bcc.n	16ba <__udivsi3+0x52>
    16b6:	038b      	lsls	r3, r1, #14
    16b8:	1ac0      	subs	r0, r0, r3
    16ba:	4152      	adcs	r2, r2
    16bc:	0b43      	lsrs	r3, r0, #13
    16be:	428b      	cmp	r3, r1
    16c0:	d301      	bcc.n	16c6 <__udivsi3+0x5e>
    16c2:	034b      	lsls	r3, r1, #13
    16c4:	1ac0      	subs	r0, r0, r3
    16c6:	4152      	adcs	r2, r2
    16c8:	0b03      	lsrs	r3, r0, #12
    16ca:	428b      	cmp	r3, r1
    16cc:	d301      	bcc.n	16d2 <__udivsi3+0x6a>
    16ce:	030b      	lsls	r3, r1, #12
    16d0:	1ac0      	subs	r0, r0, r3
    16d2:	4152      	adcs	r2, r2
    16d4:	0ac3      	lsrs	r3, r0, #11
    16d6:	428b      	cmp	r3, r1
    16d8:	d301      	bcc.n	16de <__udivsi3+0x76>
    16da:	02cb      	lsls	r3, r1, #11
    16dc:	1ac0      	subs	r0, r0, r3
    16de:	4152      	adcs	r2, r2
    16e0:	0a83      	lsrs	r3, r0, #10
    16e2:	428b      	cmp	r3, r1
    16e4:	d301      	bcc.n	16ea <__udivsi3+0x82>
    16e6:	028b      	lsls	r3, r1, #10
    16e8:	1ac0      	subs	r0, r0, r3
    16ea:	4152      	adcs	r2, r2
    16ec:	0a43      	lsrs	r3, r0, #9
    16ee:	428b      	cmp	r3, r1
    16f0:	d301      	bcc.n	16f6 <__udivsi3+0x8e>
    16f2:	024b      	lsls	r3, r1, #9
    16f4:	1ac0      	subs	r0, r0, r3
    16f6:	4152      	adcs	r2, r2
    16f8:	0a03      	lsrs	r3, r0, #8
    16fa:	428b      	cmp	r3, r1
    16fc:	d301      	bcc.n	1702 <__udivsi3+0x9a>
    16fe:	020b      	lsls	r3, r1, #8
    1700:	1ac0      	subs	r0, r0, r3
    1702:	4152      	adcs	r2, r2
    1704:	d2cd      	bcs.n	16a2 <__udivsi3+0x3a>
    1706:	09c3      	lsrs	r3, r0, #7
    1708:	428b      	cmp	r3, r1
    170a:	d301      	bcc.n	1710 <__udivsi3+0xa8>
    170c:	01cb      	lsls	r3, r1, #7
    170e:	1ac0      	subs	r0, r0, r3
    1710:	4152      	adcs	r2, r2
    1712:	0983      	lsrs	r3, r0, #6
    1714:	428b      	cmp	r3, r1
    1716:	d301      	bcc.n	171c <__udivsi3+0xb4>
    1718:	018b      	lsls	r3, r1, #6
    171a:	1ac0      	subs	r0, r0, r3
    171c:	4152      	adcs	r2, r2
    171e:	0943      	lsrs	r3, r0, #5
    1720:	428b      	cmp	r3, r1
    1722:	d301      	bcc.n	1728 <__udivsi3+0xc0>
    1724:	014b      	lsls	r3, r1, #5
    1726:	1ac0      	subs	r0, r0, r3
    1728:	4152      	adcs	r2, r2
    172a:	0903      	lsrs	r3, r0, #4
    172c:	428b      	cmp	r3, r1
    172e:	d301      	bcc.n	1734 <__udivsi3+0xcc>
    1730:	010b      	lsls	r3, r1, #4
    1732:	1ac0      	subs	r0, r0, r3
    1734:	4152      	adcs	r2, r2
    1736:	08c3      	lsrs	r3, r0, #3
    1738:	428b      	cmp	r3, r1
    173a:	d301      	bcc.n	1740 <__udivsi3+0xd8>
    173c:	00cb      	lsls	r3, r1, #3
    173e:	1ac0      	subs	r0, r0, r3
    1740:	4152      	adcs	r2, r2
    1742:	0883      	lsrs	r3, r0, #2
    1744:	428b      	cmp	r3, r1
    1746:	d301      	bcc.n	174c <__udivsi3+0xe4>
    1748:	008b      	lsls	r3, r1, #2
    174a:	1ac0      	subs	r0, r0, r3
    174c:	4152      	adcs	r2, r2
    174e:	0843      	lsrs	r3, r0, #1
    1750:	428b      	cmp	r3, r1
    1752:	d301      	bcc.n	1758 <__udivsi3+0xf0>
    1754:	004b      	lsls	r3, r1, #1
    1756:	1ac0      	subs	r0, r0, r3
    1758:	4152      	adcs	r2, r2
    175a:	1a41      	subs	r1, r0, r1
    175c:	d200      	bcs.n	1760 <__udivsi3+0xf8>
    175e:	4601      	mov	r1, r0
    1760:	4152      	adcs	r2, r2
    1762:	4610      	mov	r0, r2
    1764:	4770      	bx	lr
    1766:	e7ff      	b.n	1768 <__udivsi3+0x100>
    1768:	b501      	push	{r0, lr}
    176a:	2000      	movs	r0, #0
    176c:	f000 f806 	bl	177c <__aeabi_idiv0>
    1770:	bd02      	pop	{r1, pc}
    1772:	46c0      	nop			; (mov r8, r8)

00001774 <__aeabi_uidivmod>:
    1774:	2900      	cmp	r1, #0
    1776:	d0f7      	beq.n	1768 <__udivsi3+0x100>
    1778:	e776      	b.n	1668 <__udivsi3>
    177a:	4770      	bx	lr

0000177c <__aeabi_idiv0>:
    177c:	4770      	bx	lr
    177e:	46c0      	nop			; (mov r8, r8)

00001780 <__aeabi_lmul>:
    1780:	b5f0      	push	{r4, r5, r6, r7, lr}
    1782:	46ce      	mov	lr, r9
    1784:	4647      	mov	r7, r8
    1786:	0415      	lsls	r5, r2, #16
    1788:	0c2d      	lsrs	r5, r5, #16
    178a:	002e      	movs	r6, r5
    178c:	b580      	push	{r7, lr}
    178e:	0407      	lsls	r7, r0, #16
    1790:	0c14      	lsrs	r4, r2, #16
    1792:	0c3f      	lsrs	r7, r7, #16
    1794:	4699      	mov	r9, r3
    1796:	0c03      	lsrs	r3, r0, #16
    1798:	437e      	muls	r6, r7
    179a:	435d      	muls	r5, r3
    179c:	4367      	muls	r7, r4
    179e:	4363      	muls	r3, r4
    17a0:	197f      	adds	r7, r7, r5
    17a2:	0c34      	lsrs	r4, r6, #16
    17a4:	19e4      	adds	r4, r4, r7
    17a6:	469c      	mov	ip, r3
    17a8:	42a5      	cmp	r5, r4
    17aa:	d903      	bls.n	17b4 <__aeabi_lmul+0x34>
    17ac:	2380      	movs	r3, #128	; 0x80
    17ae:	025b      	lsls	r3, r3, #9
    17b0:	4698      	mov	r8, r3
    17b2:	44c4      	add	ip, r8
    17b4:	464b      	mov	r3, r9
    17b6:	4351      	muls	r1, r2
    17b8:	4343      	muls	r3, r0
    17ba:	0436      	lsls	r6, r6, #16
    17bc:	0c36      	lsrs	r6, r6, #16
    17be:	0c25      	lsrs	r5, r4, #16
    17c0:	0424      	lsls	r4, r4, #16
    17c2:	4465      	add	r5, ip
    17c4:	19a4      	adds	r4, r4, r6
    17c6:	1859      	adds	r1, r3, r1
    17c8:	1949      	adds	r1, r1, r5
    17ca:	0020      	movs	r0, r4
    17cc:	bc0c      	pop	{r2, r3}
    17ce:	4690      	mov	r8, r2
    17d0:	4699      	mov	r9, r3
    17d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000017d4 <__libc_init_array>:
    17d4:	b570      	push	{r4, r5, r6, lr}
    17d6:	2600      	movs	r6, #0
    17d8:	4d0c      	ldr	r5, [pc, #48]	; (180c <__libc_init_array+0x38>)
    17da:	4c0d      	ldr	r4, [pc, #52]	; (1810 <__libc_init_array+0x3c>)
    17dc:	1b64      	subs	r4, r4, r5
    17de:	10a4      	asrs	r4, r4, #2
    17e0:	42a6      	cmp	r6, r4
    17e2:	d109      	bne.n	17f8 <__libc_init_array+0x24>
    17e4:	2600      	movs	r6, #0
    17e6:	f001 f895 	bl	2914 <_init>
    17ea:	4d0a      	ldr	r5, [pc, #40]	; (1814 <__libc_init_array+0x40>)
    17ec:	4c0a      	ldr	r4, [pc, #40]	; (1818 <__libc_init_array+0x44>)
    17ee:	1b64      	subs	r4, r4, r5
    17f0:	10a4      	asrs	r4, r4, #2
    17f2:	42a6      	cmp	r6, r4
    17f4:	d105      	bne.n	1802 <__libc_init_array+0x2e>
    17f6:	bd70      	pop	{r4, r5, r6, pc}
    17f8:	00b3      	lsls	r3, r6, #2
    17fa:	58eb      	ldr	r3, [r5, r3]
    17fc:	4798      	blx	r3
    17fe:	3601      	adds	r6, #1
    1800:	e7ee      	b.n	17e0 <__libc_init_array+0xc>
    1802:	00b3      	lsls	r3, r6, #2
    1804:	58eb      	ldr	r3, [r5, r3]
    1806:	4798      	blx	r3
    1808:	3601      	adds	r6, #1
    180a:	e7f2      	b.n	17f2 <__libc_init_array+0x1e>
    180c:	00002920 	.word	0x00002920
    1810:	00002920 	.word	0x00002920
    1814:	00002920 	.word	0x00002920
    1818:	00002924 	.word	0x00002924

0000181c <memset>:
    181c:	0003      	movs	r3, r0
    181e:	1882      	adds	r2, r0, r2
    1820:	4293      	cmp	r3, r2
    1822:	d100      	bne.n	1826 <memset+0xa>
    1824:	4770      	bx	lr
    1826:	7019      	strb	r1, [r3, #0]
    1828:	3301      	adds	r3, #1
    182a:	e7f9      	b.n	1820 <memset+0x4>

0000182c <iprintf>:
    182c:	b40f      	push	{r0, r1, r2, r3}
    182e:	4b0b      	ldr	r3, [pc, #44]	; (185c <iprintf+0x30>)
    1830:	b513      	push	{r0, r1, r4, lr}
    1832:	681c      	ldr	r4, [r3, #0]
    1834:	2c00      	cmp	r4, #0
    1836:	d005      	beq.n	1844 <iprintf+0x18>
    1838:	69a3      	ldr	r3, [r4, #24]
    183a:	2b00      	cmp	r3, #0
    183c:	d102      	bne.n	1844 <iprintf+0x18>
    183e:	0020      	movs	r0, r4
    1840:	f000 f9bc 	bl	1bbc <__sinit>
    1844:	ab05      	add	r3, sp, #20
    1846:	9a04      	ldr	r2, [sp, #16]
    1848:	68a1      	ldr	r1, [r4, #8]
    184a:	0020      	movs	r0, r4
    184c:	9301      	str	r3, [sp, #4]
    184e:	f000 fb91 	bl	1f74 <_vfiprintf_r>
    1852:	bc16      	pop	{r1, r2, r4}
    1854:	bc08      	pop	{r3}
    1856:	b004      	add	sp, #16
    1858:	4718      	bx	r3
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	20000004 	.word	0x20000004

00001860 <setbuf>:
    1860:	424a      	negs	r2, r1
    1862:	414a      	adcs	r2, r1
    1864:	2380      	movs	r3, #128	; 0x80
    1866:	b510      	push	{r4, lr}
    1868:	0052      	lsls	r2, r2, #1
    186a:	00db      	lsls	r3, r3, #3
    186c:	f000 f802 	bl	1874 <setvbuf>
    1870:	bd10      	pop	{r4, pc}
	...

00001874 <setvbuf>:
    1874:	b5f0      	push	{r4, r5, r6, r7, lr}
    1876:	001d      	movs	r5, r3
    1878:	4b4f      	ldr	r3, [pc, #316]	; (19b8 <setvbuf+0x144>)
    187a:	b085      	sub	sp, #20
    187c:	681e      	ldr	r6, [r3, #0]
    187e:	0004      	movs	r4, r0
    1880:	000f      	movs	r7, r1
    1882:	9200      	str	r2, [sp, #0]
    1884:	2e00      	cmp	r6, #0
    1886:	d005      	beq.n	1894 <setvbuf+0x20>
    1888:	69b3      	ldr	r3, [r6, #24]
    188a:	2b00      	cmp	r3, #0
    188c:	d102      	bne.n	1894 <setvbuf+0x20>
    188e:	0030      	movs	r0, r6
    1890:	f000 f994 	bl	1bbc <__sinit>
    1894:	4b49      	ldr	r3, [pc, #292]	; (19bc <setvbuf+0x148>)
    1896:	429c      	cmp	r4, r3
    1898:	d150      	bne.n	193c <setvbuf+0xc8>
    189a:	6874      	ldr	r4, [r6, #4]
    189c:	9b00      	ldr	r3, [sp, #0]
    189e:	2b02      	cmp	r3, #2
    18a0:	d005      	beq.n	18ae <setvbuf+0x3a>
    18a2:	2b01      	cmp	r3, #1
    18a4:	d900      	bls.n	18a8 <setvbuf+0x34>
    18a6:	e084      	b.n	19b2 <setvbuf+0x13e>
    18a8:	2d00      	cmp	r5, #0
    18aa:	da00      	bge.n	18ae <setvbuf+0x3a>
    18ac:	e081      	b.n	19b2 <setvbuf+0x13e>
    18ae:	0021      	movs	r1, r4
    18b0:	0030      	movs	r0, r6
    18b2:	f000 f915 	bl	1ae0 <_fflush_r>
    18b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    18b8:	2900      	cmp	r1, #0
    18ba:	d008      	beq.n	18ce <setvbuf+0x5a>
    18bc:	0023      	movs	r3, r4
    18be:	3344      	adds	r3, #68	; 0x44
    18c0:	4299      	cmp	r1, r3
    18c2:	d002      	beq.n	18ca <setvbuf+0x56>
    18c4:	0030      	movs	r0, r6
    18c6:	f000 fa85 	bl	1dd4 <_free_r>
    18ca:	2300      	movs	r3, #0
    18cc:	6363      	str	r3, [r4, #52]	; 0x34
    18ce:	2300      	movs	r3, #0
    18d0:	61a3      	str	r3, [r4, #24]
    18d2:	6063      	str	r3, [r4, #4]
    18d4:	89a3      	ldrh	r3, [r4, #12]
    18d6:	061b      	lsls	r3, r3, #24
    18d8:	d503      	bpl.n	18e2 <setvbuf+0x6e>
    18da:	6921      	ldr	r1, [r4, #16]
    18dc:	0030      	movs	r0, r6
    18de:	f000 fa79 	bl	1dd4 <_free_r>
    18e2:	89a3      	ldrh	r3, [r4, #12]
    18e4:	4a36      	ldr	r2, [pc, #216]	; (19c0 <setvbuf+0x14c>)
    18e6:	4013      	ands	r3, r2
    18e8:	81a3      	strh	r3, [r4, #12]
    18ea:	9b00      	ldr	r3, [sp, #0]
    18ec:	2b02      	cmp	r3, #2
    18ee:	d05a      	beq.n	19a6 <setvbuf+0x132>
    18f0:	ab03      	add	r3, sp, #12
    18f2:	aa02      	add	r2, sp, #8
    18f4:	0021      	movs	r1, r4
    18f6:	0030      	movs	r0, r6
    18f8:	f000 f9f6 	bl	1ce8 <__swhatbuf_r>
    18fc:	89a3      	ldrh	r3, [r4, #12]
    18fe:	4318      	orrs	r0, r3
    1900:	81a0      	strh	r0, [r4, #12]
    1902:	2d00      	cmp	r5, #0
    1904:	d124      	bne.n	1950 <setvbuf+0xdc>
    1906:	9d02      	ldr	r5, [sp, #8]
    1908:	0028      	movs	r0, r5
    190a:	f000 fa59 	bl	1dc0 <malloc>
    190e:	9501      	str	r5, [sp, #4]
    1910:	1e07      	subs	r7, r0, #0
    1912:	d142      	bne.n	199a <setvbuf+0x126>
    1914:	9b02      	ldr	r3, [sp, #8]
    1916:	9301      	str	r3, [sp, #4]
    1918:	42ab      	cmp	r3, r5
    191a:	d139      	bne.n	1990 <setvbuf+0x11c>
    191c:	2001      	movs	r0, #1
    191e:	4240      	negs	r0, r0
    1920:	2302      	movs	r3, #2
    1922:	89a2      	ldrh	r2, [r4, #12]
    1924:	4313      	orrs	r3, r2
    1926:	81a3      	strh	r3, [r4, #12]
    1928:	2300      	movs	r3, #0
    192a:	60a3      	str	r3, [r4, #8]
    192c:	0023      	movs	r3, r4
    192e:	3347      	adds	r3, #71	; 0x47
    1930:	6023      	str	r3, [r4, #0]
    1932:	6123      	str	r3, [r4, #16]
    1934:	2301      	movs	r3, #1
    1936:	6163      	str	r3, [r4, #20]
    1938:	b005      	add	sp, #20
    193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    193c:	4b21      	ldr	r3, [pc, #132]	; (19c4 <setvbuf+0x150>)
    193e:	429c      	cmp	r4, r3
    1940:	d101      	bne.n	1946 <setvbuf+0xd2>
    1942:	68b4      	ldr	r4, [r6, #8]
    1944:	e7aa      	b.n	189c <setvbuf+0x28>
    1946:	4b20      	ldr	r3, [pc, #128]	; (19c8 <setvbuf+0x154>)
    1948:	429c      	cmp	r4, r3
    194a:	d1a7      	bne.n	189c <setvbuf+0x28>
    194c:	68f4      	ldr	r4, [r6, #12]
    194e:	e7a5      	b.n	189c <setvbuf+0x28>
    1950:	2f00      	cmp	r7, #0
    1952:	d0d9      	beq.n	1908 <setvbuf+0x94>
    1954:	69b3      	ldr	r3, [r6, #24]
    1956:	2b00      	cmp	r3, #0
    1958:	d102      	bne.n	1960 <setvbuf+0xec>
    195a:	0030      	movs	r0, r6
    195c:	f000 f92e 	bl	1bbc <__sinit>
    1960:	9b00      	ldr	r3, [sp, #0]
    1962:	2b01      	cmp	r3, #1
    1964:	d103      	bne.n	196e <setvbuf+0xfa>
    1966:	89a3      	ldrh	r3, [r4, #12]
    1968:	9a00      	ldr	r2, [sp, #0]
    196a:	431a      	orrs	r2, r3
    196c:	81a2      	strh	r2, [r4, #12]
    196e:	2008      	movs	r0, #8
    1970:	89a3      	ldrh	r3, [r4, #12]
    1972:	6027      	str	r7, [r4, #0]
    1974:	6127      	str	r7, [r4, #16]
    1976:	6165      	str	r5, [r4, #20]
    1978:	4018      	ands	r0, r3
    197a:	d018      	beq.n	19ae <setvbuf+0x13a>
    197c:	2001      	movs	r0, #1
    197e:	4018      	ands	r0, r3
    1980:	2300      	movs	r3, #0
    1982:	4298      	cmp	r0, r3
    1984:	d011      	beq.n	19aa <setvbuf+0x136>
    1986:	426d      	negs	r5, r5
    1988:	60a3      	str	r3, [r4, #8]
    198a:	61a5      	str	r5, [r4, #24]
    198c:	0018      	movs	r0, r3
    198e:	e7d3      	b.n	1938 <setvbuf+0xc4>
    1990:	9801      	ldr	r0, [sp, #4]
    1992:	f000 fa15 	bl	1dc0 <malloc>
    1996:	1e07      	subs	r7, r0, #0
    1998:	d0c0      	beq.n	191c <setvbuf+0xa8>
    199a:	2380      	movs	r3, #128	; 0x80
    199c:	89a2      	ldrh	r2, [r4, #12]
    199e:	9d01      	ldr	r5, [sp, #4]
    19a0:	4313      	orrs	r3, r2
    19a2:	81a3      	strh	r3, [r4, #12]
    19a4:	e7d6      	b.n	1954 <setvbuf+0xe0>
    19a6:	2000      	movs	r0, #0
    19a8:	e7ba      	b.n	1920 <setvbuf+0xac>
    19aa:	60a5      	str	r5, [r4, #8]
    19ac:	e7c4      	b.n	1938 <setvbuf+0xc4>
    19ae:	60a0      	str	r0, [r4, #8]
    19b0:	e7c2      	b.n	1938 <setvbuf+0xc4>
    19b2:	2001      	movs	r0, #1
    19b4:	4240      	negs	r0, r0
    19b6:	e7bf      	b.n	1938 <setvbuf+0xc4>
    19b8:	20000004 	.word	0x20000004
    19bc:	000028a0 	.word	0x000028a0
    19c0:	fffff35c 	.word	0xfffff35c
    19c4:	000028c0 	.word	0x000028c0
    19c8:	00002880 	.word	0x00002880

000019cc <__sflush_r>:
    19cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    19ce:	898a      	ldrh	r2, [r1, #12]
    19d0:	0005      	movs	r5, r0
    19d2:	000c      	movs	r4, r1
    19d4:	0713      	lsls	r3, r2, #28
    19d6:	d460      	bmi.n	1a9a <__sflush_r+0xce>
    19d8:	684b      	ldr	r3, [r1, #4]
    19da:	2b00      	cmp	r3, #0
    19dc:	dc04      	bgt.n	19e8 <__sflush_r+0x1c>
    19de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    19e0:	2b00      	cmp	r3, #0
    19e2:	dc01      	bgt.n	19e8 <__sflush_r+0x1c>
    19e4:	2000      	movs	r0, #0
    19e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    19e8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    19ea:	2f00      	cmp	r7, #0
    19ec:	d0fa      	beq.n	19e4 <__sflush_r+0x18>
    19ee:	2300      	movs	r3, #0
    19f0:	682e      	ldr	r6, [r5, #0]
    19f2:	602b      	str	r3, [r5, #0]
    19f4:	2380      	movs	r3, #128	; 0x80
    19f6:	015b      	lsls	r3, r3, #5
    19f8:	401a      	ands	r2, r3
    19fa:	d034      	beq.n	1a66 <__sflush_r+0x9a>
    19fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    19fe:	89a3      	ldrh	r3, [r4, #12]
    1a00:	075b      	lsls	r3, r3, #29
    1a02:	d506      	bpl.n	1a12 <__sflush_r+0x46>
    1a04:	6863      	ldr	r3, [r4, #4]
    1a06:	1ac0      	subs	r0, r0, r3
    1a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d001      	beq.n	1a12 <__sflush_r+0x46>
    1a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1a10:	1ac0      	subs	r0, r0, r3
    1a12:	0002      	movs	r2, r0
    1a14:	6a21      	ldr	r1, [r4, #32]
    1a16:	2300      	movs	r3, #0
    1a18:	0028      	movs	r0, r5
    1a1a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1a1c:	47b8      	blx	r7
    1a1e:	89a1      	ldrh	r1, [r4, #12]
    1a20:	1c43      	adds	r3, r0, #1
    1a22:	d106      	bne.n	1a32 <__sflush_r+0x66>
    1a24:	682b      	ldr	r3, [r5, #0]
    1a26:	2b1d      	cmp	r3, #29
    1a28:	d831      	bhi.n	1a8e <__sflush_r+0xc2>
    1a2a:	4a2c      	ldr	r2, [pc, #176]	; (1adc <__sflush_r+0x110>)
    1a2c:	40da      	lsrs	r2, r3
    1a2e:	07d3      	lsls	r3, r2, #31
    1a30:	d52d      	bpl.n	1a8e <__sflush_r+0xc2>
    1a32:	2300      	movs	r3, #0
    1a34:	6063      	str	r3, [r4, #4]
    1a36:	6923      	ldr	r3, [r4, #16]
    1a38:	6023      	str	r3, [r4, #0]
    1a3a:	04cb      	lsls	r3, r1, #19
    1a3c:	d505      	bpl.n	1a4a <__sflush_r+0x7e>
    1a3e:	1c43      	adds	r3, r0, #1
    1a40:	d102      	bne.n	1a48 <__sflush_r+0x7c>
    1a42:	682b      	ldr	r3, [r5, #0]
    1a44:	2b00      	cmp	r3, #0
    1a46:	d100      	bne.n	1a4a <__sflush_r+0x7e>
    1a48:	6560      	str	r0, [r4, #84]	; 0x54
    1a4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a4c:	602e      	str	r6, [r5, #0]
    1a4e:	2900      	cmp	r1, #0
    1a50:	d0c8      	beq.n	19e4 <__sflush_r+0x18>
    1a52:	0023      	movs	r3, r4
    1a54:	3344      	adds	r3, #68	; 0x44
    1a56:	4299      	cmp	r1, r3
    1a58:	d002      	beq.n	1a60 <__sflush_r+0x94>
    1a5a:	0028      	movs	r0, r5
    1a5c:	f000 f9ba 	bl	1dd4 <_free_r>
    1a60:	2000      	movs	r0, #0
    1a62:	6360      	str	r0, [r4, #52]	; 0x34
    1a64:	e7bf      	b.n	19e6 <__sflush_r+0x1a>
    1a66:	2301      	movs	r3, #1
    1a68:	6a21      	ldr	r1, [r4, #32]
    1a6a:	0028      	movs	r0, r5
    1a6c:	47b8      	blx	r7
    1a6e:	1c43      	adds	r3, r0, #1
    1a70:	d1c5      	bne.n	19fe <__sflush_r+0x32>
    1a72:	682b      	ldr	r3, [r5, #0]
    1a74:	2b00      	cmp	r3, #0
    1a76:	d0c2      	beq.n	19fe <__sflush_r+0x32>
    1a78:	2b1d      	cmp	r3, #29
    1a7a:	d001      	beq.n	1a80 <__sflush_r+0xb4>
    1a7c:	2b16      	cmp	r3, #22
    1a7e:	d101      	bne.n	1a84 <__sflush_r+0xb8>
    1a80:	602e      	str	r6, [r5, #0]
    1a82:	e7af      	b.n	19e4 <__sflush_r+0x18>
    1a84:	2340      	movs	r3, #64	; 0x40
    1a86:	89a2      	ldrh	r2, [r4, #12]
    1a88:	4313      	orrs	r3, r2
    1a8a:	81a3      	strh	r3, [r4, #12]
    1a8c:	e7ab      	b.n	19e6 <__sflush_r+0x1a>
    1a8e:	2340      	movs	r3, #64	; 0x40
    1a90:	430b      	orrs	r3, r1
    1a92:	2001      	movs	r0, #1
    1a94:	81a3      	strh	r3, [r4, #12]
    1a96:	4240      	negs	r0, r0
    1a98:	e7a5      	b.n	19e6 <__sflush_r+0x1a>
    1a9a:	690f      	ldr	r7, [r1, #16]
    1a9c:	2f00      	cmp	r7, #0
    1a9e:	d0a1      	beq.n	19e4 <__sflush_r+0x18>
    1aa0:	680b      	ldr	r3, [r1, #0]
    1aa2:	600f      	str	r7, [r1, #0]
    1aa4:	1bdb      	subs	r3, r3, r7
    1aa6:	9301      	str	r3, [sp, #4]
    1aa8:	2300      	movs	r3, #0
    1aaa:	0792      	lsls	r2, r2, #30
    1aac:	d100      	bne.n	1ab0 <__sflush_r+0xe4>
    1aae:	694b      	ldr	r3, [r1, #20]
    1ab0:	60a3      	str	r3, [r4, #8]
    1ab2:	9b01      	ldr	r3, [sp, #4]
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	dc00      	bgt.n	1aba <__sflush_r+0xee>
    1ab8:	e794      	b.n	19e4 <__sflush_r+0x18>
    1aba:	9b01      	ldr	r3, [sp, #4]
    1abc:	003a      	movs	r2, r7
    1abe:	6a21      	ldr	r1, [r4, #32]
    1ac0:	0028      	movs	r0, r5
    1ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1ac4:	47b0      	blx	r6
    1ac6:	2800      	cmp	r0, #0
    1ac8:	dc03      	bgt.n	1ad2 <__sflush_r+0x106>
    1aca:	2340      	movs	r3, #64	; 0x40
    1acc:	89a2      	ldrh	r2, [r4, #12]
    1ace:	4313      	orrs	r3, r2
    1ad0:	e7df      	b.n	1a92 <__sflush_r+0xc6>
    1ad2:	9b01      	ldr	r3, [sp, #4]
    1ad4:	183f      	adds	r7, r7, r0
    1ad6:	1a1b      	subs	r3, r3, r0
    1ad8:	9301      	str	r3, [sp, #4]
    1ada:	e7ea      	b.n	1ab2 <__sflush_r+0xe6>
    1adc:	20400001 	.word	0x20400001

00001ae0 <_fflush_r>:
    1ae0:	690b      	ldr	r3, [r1, #16]
    1ae2:	b570      	push	{r4, r5, r6, lr}
    1ae4:	0005      	movs	r5, r0
    1ae6:	000c      	movs	r4, r1
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d101      	bne.n	1af0 <_fflush_r+0x10>
    1aec:	2000      	movs	r0, #0
    1aee:	bd70      	pop	{r4, r5, r6, pc}
    1af0:	2800      	cmp	r0, #0
    1af2:	d004      	beq.n	1afe <_fflush_r+0x1e>
    1af4:	6983      	ldr	r3, [r0, #24]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d101      	bne.n	1afe <_fflush_r+0x1e>
    1afa:	f000 f85f 	bl	1bbc <__sinit>
    1afe:	4b0b      	ldr	r3, [pc, #44]	; (1b2c <_fflush_r+0x4c>)
    1b00:	429c      	cmp	r4, r3
    1b02:	d109      	bne.n	1b18 <_fflush_r+0x38>
    1b04:	686c      	ldr	r4, [r5, #4]
    1b06:	220c      	movs	r2, #12
    1b08:	5ea3      	ldrsh	r3, [r4, r2]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d0ee      	beq.n	1aec <_fflush_r+0xc>
    1b0e:	0021      	movs	r1, r4
    1b10:	0028      	movs	r0, r5
    1b12:	f7ff ff5b 	bl	19cc <__sflush_r>
    1b16:	e7ea      	b.n	1aee <_fflush_r+0xe>
    1b18:	4b05      	ldr	r3, [pc, #20]	; (1b30 <_fflush_r+0x50>)
    1b1a:	429c      	cmp	r4, r3
    1b1c:	d101      	bne.n	1b22 <_fflush_r+0x42>
    1b1e:	68ac      	ldr	r4, [r5, #8]
    1b20:	e7f1      	b.n	1b06 <_fflush_r+0x26>
    1b22:	4b04      	ldr	r3, [pc, #16]	; (1b34 <_fflush_r+0x54>)
    1b24:	429c      	cmp	r4, r3
    1b26:	d1ee      	bne.n	1b06 <_fflush_r+0x26>
    1b28:	68ec      	ldr	r4, [r5, #12]
    1b2a:	e7ec      	b.n	1b06 <_fflush_r+0x26>
    1b2c:	000028a0 	.word	0x000028a0
    1b30:	000028c0 	.word	0x000028c0
    1b34:	00002880 	.word	0x00002880

00001b38 <_cleanup_r>:
    1b38:	b510      	push	{r4, lr}
    1b3a:	4902      	ldr	r1, [pc, #8]	; (1b44 <_cleanup_r+0xc>)
    1b3c:	f000 f8b2 	bl	1ca4 <_fwalk_reent>
    1b40:	bd10      	pop	{r4, pc}
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	00001ae1 	.word	0x00001ae1

00001b48 <std.isra.0>:
    1b48:	2300      	movs	r3, #0
    1b4a:	b510      	push	{r4, lr}
    1b4c:	0004      	movs	r4, r0
    1b4e:	6003      	str	r3, [r0, #0]
    1b50:	6043      	str	r3, [r0, #4]
    1b52:	6083      	str	r3, [r0, #8]
    1b54:	8181      	strh	r1, [r0, #12]
    1b56:	6643      	str	r3, [r0, #100]	; 0x64
    1b58:	81c2      	strh	r2, [r0, #14]
    1b5a:	6103      	str	r3, [r0, #16]
    1b5c:	6143      	str	r3, [r0, #20]
    1b5e:	6183      	str	r3, [r0, #24]
    1b60:	0019      	movs	r1, r3
    1b62:	2208      	movs	r2, #8
    1b64:	305c      	adds	r0, #92	; 0x5c
    1b66:	f7ff fe59 	bl	181c <memset>
    1b6a:	4b05      	ldr	r3, [pc, #20]	; (1b80 <std.isra.0+0x38>)
    1b6c:	6224      	str	r4, [r4, #32]
    1b6e:	6263      	str	r3, [r4, #36]	; 0x24
    1b70:	4b04      	ldr	r3, [pc, #16]	; (1b84 <std.isra.0+0x3c>)
    1b72:	62a3      	str	r3, [r4, #40]	; 0x28
    1b74:	4b04      	ldr	r3, [pc, #16]	; (1b88 <std.isra.0+0x40>)
    1b76:	62e3      	str	r3, [r4, #44]	; 0x2c
    1b78:	4b04      	ldr	r3, [pc, #16]	; (1b8c <std.isra.0+0x44>)
    1b7a:	6323      	str	r3, [r4, #48]	; 0x30
    1b7c:	bd10      	pop	{r4, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	000024e1 	.word	0x000024e1
    1b84:	00002509 	.word	0x00002509
    1b88:	00002541 	.word	0x00002541
    1b8c:	0000256d 	.word	0x0000256d

00001b90 <__sfmoreglue>:
    1b90:	b570      	push	{r4, r5, r6, lr}
    1b92:	2568      	movs	r5, #104	; 0x68
    1b94:	1e4a      	subs	r2, r1, #1
    1b96:	4355      	muls	r5, r2
    1b98:	000e      	movs	r6, r1
    1b9a:	0029      	movs	r1, r5
    1b9c:	3174      	adds	r1, #116	; 0x74
    1b9e:	f000 f963 	bl	1e68 <_malloc_r>
    1ba2:	1e04      	subs	r4, r0, #0
    1ba4:	d008      	beq.n	1bb8 <__sfmoreglue+0x28>
    1ba6:	2100      	movs	r1, #0
    1ba8:	002a      	movs	r2, r5
    1baa:	6001      	str	r1, [r0, #0]
    1bac:	6046      	str	r6, [r0, #4]
    1bae:	300c      	adds	r0, #12
    1bb0:	60a0      	str	r0, [r4, #8]
    1bb2:	3268      	adds	r2, #104	; 0x68
    1bb4:	f7ff fe32 	bl	181c <memset>
    1bb8:	0020      	movs	r0, r4
    1bba:	bd70      	pop	{r4, r5, r6, pc}

00001bbc <__sinit>:
    1bbc:	6983      	ldr	r3, [r0, #24]
    1bbe:	b513      	push	{r0, r1, r4, lr}
    1bc0:	0004      	movs	r4, r0
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d128      	bne.n	1c18 <__sinit+0x5c>
    1bc6:	6483      	str	r3, [r0, #72]	; 0x48
    1bc8:	64c3      	str	r3, [r0, #76]	; 0x4c
    1bca:	6503      	str	r3, [r0, #80]	; 0x50
    1bcc:	4b13      	ldr	r3, [pc, #76]	; (1c1c <__sinit+0x60>)
    1bce:	4a14      	ldr	r2, [pc, #80]	; (1c20 <__sinit+0x64>)
    1bd0:	681b      	ldr	r3, [r3, #0]
    1bd2:	6282      	str	r2, [r0, #40]	; 0x28
    1bd4:	9301      	str	r3, [sp, #4]
    1bd6:	4298      	cmp	r0, r3
    1bd8:	d101      	bne.n	1bde <__sinit+0x22>
    1bda:	2301      	movs	r3, #1
    1bdc:	6183      	str	r3, [r0, #24]
    1bde:	0020      	movs	r0, r4
    1be0:	f000 f820 	bl	1c24 <__sfp>
    1be4:	6060      	str	r0, [r4, #4]
    1be6:	0020      	movs	r0, r4
    1be8:	f000 f81c 	bl	1c24 <__sfp>
    1bec:	60a0      	str	r0, [r4, #8]
    1bee:	0020      	movs	r0, r4
    1bf0:	f000 f818 	bl	1c24 <__sfp>
    1bf4:	2200      	movs	r2, #0
    1bf6:	60e0      	str	r0, [r4, #12]
    1bf8:	2104      	movs	r1, #4
    1bfa:	6860      	ldr	r0, [r4, #4]
    1bfc:	f7ff ffa4 	bl	1b48 <std.isra.0>
    1c00:	2201      	movs	r2, #1
    1c02:	2109      	movs	r1, #9
    1c04:	68a0      	ldr	r0, [r4, #8]
    1c06:	f7ff ff9f 	bl	1b48 <std.isra.0>
    1c0a:	2202      	movs	r2, #2
    1c0c:	2112      	movs	r1, #18
    1c0e:	68e0      	ldr	r0, [r4, #12]
    1c10:	f7ff ff9a 	bl	1b48 <std.isra.0>
    1c14:	2301      	movs	r3, #1
    1c16:	61a3      	str	r3, [r4, #24]
    1c18:	bd13      	pop	{r0, r1, r4, pc}
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	0000287c 	.word	0x0000287c
    1c20:	00001b39 	.word	0x00001b39

00001c24 <__sfp>:
    1c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c26:	4b1e      	ldr	r3, [pc, #120]	; (1ca0 <__sfp+0x7c>)
    1c28:	0007      	movs	r7, r0
    1c2a:	681e      	ldr	r6, [r3, #0]
    1c2c:	69b3      	ldr	r3, [r6, #24]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d102      	bne.n	1c38 <__sfp+0x14>
    1c32:	0030      	movs	r0, r6
    1c34:	f7ff ffc2 	bl	1bbc <__sinit>
    1c38:	3648      	adds	r6, #72	; 0x48
    1c3a:	68b4      	ldr	r4, [r6, #8]
    1c3c:	6873      	ldr	r3, [r6, #4]
    1c3e:	3b01      	subs	r3, #1
    1c40:	d504      	bpl.n	1c4c <__sfp+0x28>
    1c42:	6833      	ldr	r3, [r6, #0]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d007      	beq.n	1c58 <__sfp+0x34>
    1c48:	6836      	ldr	r6, [r6, #0]
    1c4a:	e7f6      	b.n	1c3a <__sfp+0x16>
    1c4c:	220c      	movs	r2, #12
    1c4e:	5ea5      	ldrsh	r5, [r4, r2]
    1c50:	2d00      	cmp	r5, #0
    1c52:	d00d      	beq.n	1c70 <__sfp+0x4c>
    1c54:	3468      	adds	r4, #104	; 0x68
    1c56:	e7f2      	b.n	1c3e <__sfp+0x1a>
    1c58:	2104      	movs	r1, #4
    1c5a:	0038      	movs	r0, r7
    1c5c:	f7ff ff98 	bl	1b90 <__sfmoreglue>
    1c60:	6030      	str	r0, [r6, #0]
    1c62:	2800      	cmp	r0, #0
    1c64:	d1f0      	bne.n	1c48 <__sfp+0x24>
    1c66:	230c      	movs	r3, #12
    1c68:	0004      	movs	r4, r0
    1c6a:	603b      	str	r3, [r7, #0]
    1c6c:	0020      	movs	r0, r4
    1c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c70:	2301      	movs	r3, #1
    1c72:	0020      	movs	r0, r4
    1c74:	425b      	negs	r3, r3
    1c76:	81e3      	strh	r3, [r4, #14]
    1c78:	3302      	adds	r3, #2
    1c7a:	81a3      	strh	r3, [r4, #12]
    1c7c:	6665      	str	r5, [r4, #100]	; 0x64
    1c7e:	6025      	str	r5, [r4, #0]
    1c80:	60a5      	str	r5, [r4, #8]
    1c82:	6065      	str	r5, [r4, #4]
    1c84:	6125      	str	r5, [r4, #16]
    1c86:	6165      	str	r5, [r4, #20]
    1c88:	61a5      	str	r5, [r4, #24]
    1c8a:	2208      	movs	r2, #8
    1c8c:	0029      	movs	r1, r5
    1c8e:	305c      	adds	r0, #92	; 0x5c
    1c90:	f7ff fdc4 	bl	181c <memset>
    1c94:	6365      	str	r5, [r4, #52]	; 0x34
    1c96:	63a5      	str	r5, [r4, #56]	; 0x38
    1c98:	64a5      	str	r5, [r4, #72]	; 0x48
    1c9a:	64e5      	str	r5, [r4, #76]	; 0x4c
    1c9c:	e7e6      	b.n	1c6c <__sfp+0x48>
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	0000287c 	.word	0x0000287c

00001ca4 <_fwalk_reent>:
    1ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ca6:	0004      	movs	r4, r0
    1ca8:	0007      	movs	r7, r0
    1caa:	2600      	movs	r6, #0
    1cac:	9101      	str	r1, [sp, #4]
    1cae:	3448      	adds	r4, #72	; 0x48
    1cb0:	2c00      	cmp	r4, #0
    1cb2:	d101      	bne.n	1cb8 <_fwalk_reent+0x14>
    1cb4:	0030      	movs	r0, r6
    1cb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1cb8:	6863      	ldr	r3, [r4, #4]
    1cba:	68a5      	ldr	r5, [r4, #8]
    1cbc:	9300      	str	r3, [sp, #0]
    1cbe:	9b00      	ldr	r3, [sp, #0]
    1cc0:	3b01      	subs	r3, #1
    1cc2:	9300      	str	r3, [sp, #0]
    1cc4:	d501      	bpl.n	1cca <_fwalk_reent+0x26>
    1cc6:	6824      	ldr	r4, [r4, #0]
    1cc8:	e7f2      	b.n	1cb0 <_fwalk_reent+0xc>
    1cca:	89ab      	ldrh	r3, [r5, #12]
    1ccc:	2b01      	cmp	r3, #1
    1cce:	d908      	bls.n	1ce2 <_fwalk_reent+0x3e>
    1cd0:	220e      	movs	r2, #14
    1cd2:	5eab      	ldrsh	r3, [r5, r2]
    1cd4:	3301      	adds	r3, #1
    1cd6:	d004      	beq.n	1ce2 <_fwalk_reent+0x3e>
    1cd8:	0029      	movs	r1, r5
    1cda:	0038      	movs	r0, r7
    1cdc:	9b01      	ldr	r3, [sp, #4]
    1cde:	4798      	blx	r3
    1ce0:	4306      	orrs	r6, r0
    1ce2:	3568      	adds	r5, #104	; 0x68
    1ce4:	e7eb      	b.n	1cbe <_fwalk_reent+0x1a>
	...

00001ce8 <__swhatbuf_r>:
    1ce8:	b570      	push	{r4, r5, r6, lr}
    1cea:	000e      	movs	r6, r1
    1cec:	001d      	movs	r5, r3
    1cee:	230e      	movs	r3, #14
    1cf0:	5ec9      	ldrsh	r1, [r1, r3]
    1cf2:	b090      	sub	sp, #64	; 0x40
    1cf4:	0014      	movs	r4, r2
    1cf6:	2900      	cmp	r1, #0
    1cf8:	da07      	bge.n	1d0a <__swhatbuf_r+0x22>
    1cfa:	2300      	movs	r3, #0
    1cfc:	602b      	str	r3, [r5, #0]
    1cfe:	89b3      	ldrh	r3, [r6, #12]
    1d00:	061b      	lsls	r3, r3, #24
    1d02:	d411      	bmi.n	1d28 <__swhatbuf_r+0x40>
    1d04:	2380      	movs	r3, #128	; 0x80
    1d06:	00db      	lsls	r3, r3, #3
    1d08:	e00f      	b.n	1d2a <__swhatbuf_r+0x42>
    1d0a:	aa01      	add	r2, sp, #4
    1d0c:	f000 fd26 	bl	275c <_fstat_r>
    1d10:	2800      	cmp	r0, #0
    1d12:	dbf2      	blt.n	1cfa <__swhatbuf_r+0x12>
    1d14:	22f0      	movs	r2, #240	; 0xf0
    1d16:	9b02      	ldr	r3, [sp, #8]
    1d18:	0212      	lsls	r2, r2, #8
    1d1a:	4013      	ands	r3, r2
    1d1c:	4a05      	ldr	r2, [pc, #20]	; (1d34 <__swhatbuf_r+0x4c>)
    1d1e:	189b      	adds	r3, r3, r2
    1d20:	425a      	negs	r2, r3
    1d22:	4153      	adcs	r3, r2
    1d24:	602b      	str	r3, [r5, #0]
    1d26:	e7ed      	b.n	1d04 <__swhatbuf_r+0x1c>
    1d28:	2340      	movs	r3, #64	; 0x40
    1d2a:	2000      	movs	r0, #0
    1d2c:	6023      	str	r3, [r4, #0]
    1d2e:	b010      	add	sp, #64	; 0x40
    1d30:	bd70      	pop	{r4, r5, r6, pc}
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	ffffe000 	.word	0xffffe000

00001d38 <__smakebuf_r>:
    1d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d3a:	2602      	movs	r6, #2
    1d3c:	898b      	ldrh	r3, [r1, #12]
    1d3e:	0005      	movs	r5, r0
    1d40:	000c      	movs	r4, r1
    1d42:	4233      	tst	r3, r6
    1d44:	d006      	beq.n	1d54 <__smakebuf_r+0x1c>
    1d46:	0023      	movs	r3, r4
    1d48:	3347      	adds	r3, #71	; 0x47
    1d4a:	6023      	str	r3, [r4, #0]
    1d4c:	6123      	str	r3, [r4, #16]
    1d4e:	2301      	movs	r3, #1
    1d50:	6163      	str	r3, [r4, #20]
    1d52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1d54:	ab01      	add	r3, sp, #4
    1d56:	466a      	mov	r2, sp
    1d58:	f7ff ffc6 	bl	1ce8 <__swhatbuf_r>
    1d5c:	9900      	ldr	r1, [sp, #0]
    1d5e:	0007      	movs	r7, r0
    1d60:	0028      	movs	r0, r5
    1d62:	f000 f881 	bl	1e68 <_malloc_r>
    1d66:	2800      	cmp	r0, #0
    1d68:	d108      	bne.n	1d7c <__smakebuf_r+0x44>
    1d6a:	220c      	movs	r2, #12
    1d6c:	5ea3      	ldrsh	r3, [r4, r2]
    1d6e:	059a      	lsls	r2, r3, #22
    1d70:	d4ef      	bmi.n	1d52 <__smakebuf_r+0x1a>
    1d72:	2203      	movs	r2, #3
    1d74:	4393      	bics	r3, r2
    1d76:	431e      	orrs	r6, r3
    1d78:	81a6      	strh	r6, [r4, #12]
    1d7a:	e7e4      	b.n	1d46 <__smakebuf_r+0xe>
    1d7c:	4b0f      	ldr	r3, [pc, #60]	; (1dbc <__smakebuf_r+0x84>)
    1d7e:	62ab      	str	r3, [r5, #40]	; 0x28
    1d80:	2380      	movs	r3, #128	; 0x80
    1d82:	89a2      	ldrh	r2, [r4, #12]
    1d84:	6020      	str	r0, [r4, #0]
    1d86:	4313      	orrs	r3, r2
    1d88:	81a3      	strh	r3, [r4, #12]
    1d8a:	9b00      	ldr	r3, [sp, #0]
    1d8c:	6120      	str	r0, [r4, #16]
    1d8e:	6163      	str	r3, [r4, #20]
    1d90:	9b01      	ldr	r3, [sp, #4]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d00d      	beq.n	1db2 <__smakebuf_r+0x7a>
    1d96:	230e      	movs	r3, #14
    1d98:	5ee1      	ldrsh	r1, [r4, r3]
    1d9a:	0028      	movs	r0, r5
    1d9c:	f000 fcf0 	bl	2780 <_isatty_r>
    1da0:	2800      	cmp	r0, #0
    1da2:	d006      	beq.n	1db2 <__smakebuf_r+0x7a>
    1da4:	2203      	movs	r2, #3
    1da6:	89a3      	ldrh	r3, [r4, #12]
    1da8:	4393      	bics	r3, r2
    1daa:	001a      	movs	r2, r3
    1dac:	2301      	movs	r3, #1
    1dae:	4313      	orrs	r3, r2
    1db0:	81a3      	strh	r3, [r4, #12]
    1db2:	89a0      	ldrh	r0, [r4, #12]
    1db4:	4338      	orrs	r0, r7
    1db6:	81a0      	strh	r0, [r4, #12]
    1db8:	e7cb      	b.n	1d52 <__smakebuf_r+0x1a>
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	00001b39 	.word	0x00001b39

00001dc0 <malloc>:
    1dc0:	b510      	push	{r4, lr}
    1dc2:	4b03      	ldr	r3, [pc, #12]	; (1dd0 <malloc+0x10>)
    1dc4:	0001      	movs	r1, r0
    1dc6:	6818      	ldr	r0, [r3, #0]
    1dc8:	f000 f84e 	bl	1e68 <_malloc_r>
    1dcc:	bd10      	pop	{r4, pc}
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	20000004 	.word	0x20000004

00001dd4 <_free_r>:
    1dd4:	b570      	push	{r4, r5, r6, lr}
    1dd6:	0005      	movs	r5, r0
    1dd8:	2900      	cmp	r1, #0
    1dda:	d010      	beq.n	1dfe <_free_r+0x2a>
    1ddc:	1f0c      	subs	r4, r1, #4
    1dde:	6823      	ldr	r3, [r4, #0]
    1de0:	2b00      	cmp	r3, #0
    1de2:	da00      	bge.n	1de6 <_free_r+0x12>
    1de4:	18e4      	adds	r4, r4, r3
    1de6:	0028      	movs	r0, r5
    1de8:	f000 fcfb 	bl	27e2 <__malloc_lock>
    1dec:	4a1d      	ldr	r2, [pc, #116]	; (1e64 <_free_r+0x90>)
    1dee:	6813      	ldr	r3, [r2, #0]
    1df0:	2b00      	cmp	r3, #0
    1df2:	d105      	bne.n	1e00 <_free_r+0x2c>
    1df4:	6063      	str	r3, [r4, #4]
    1df6:	6014      	str	r4, [r2, #0]
    1df8:	0028      	movs	r0, r5
    1dfa:	f000 fcf3 	bl	27e4 <__malloc_unlock>
    1dfe:	bd70      	pop	{r4, r5, r6, pc}
    1e00:	42a3      	cmp	r3, r4
    1e02:	d909      	bls.n	1e18 <_free_r+0x44>
    1e04:	6821      	ldr	r1, [r4, #0]
    1e06:	1860      	adds	r0, r4, r1
    1e08:	4283      	cmp	r3, r0
    1e0a:	d1f3      	bne.n	1df4 <_free_r+0x20>
    1e0c:	6818      	ldr	r0, [r3, #0]
    1e0e:	685b      	ldr	r3, [r3, #4]
    1e10:	1841      	adds	r1, r0, r1
    1e12:	6021      	str	r1, [r4, #0]
    1e14:	e7ee      	b.n	1df4 <_free_r+0x20>
    1e16:	0013      	movs	r3, r2
    1e18:	685a      	ldr	r2, [r3, #4]
    1e1a:	2a00      	cmp	r2, #0
    1e1c:	d001      	beq.n	1e22 <_free_r+0x4e>
    1e1e:	42a2      	cmp	r2, r4
    1e20:	d9f9      	bls.n	1e16 <_free_r+0x42>
    1e22:	6819      	ldr	r1, [r3, #0]
    1e24:	1858      	adds	r0, r3, r1
    1e26:	42a0      	cmp	r0, r4
    1e28:	d10b      	bne.n	1e42 <_free_r+0x6e>
    1e2a:	6820      	ldr	r0, [r4, #0]
    1e2c:	1809      	adds	r1, r1, r0
    1e2e:	1858      	adds	r0, r3, r1
    1e30:	6019      	str	r1, [r3, #0]
    1e32:	4282      	cmp	r2, r0
    1e34:	d1e0      	bne.n	1df8 <_free_r+0x24>
    1e36:	6810      	ldr	r0, [r2, #0]
    1e38:	6852      	ldr	r2, [r2, #4]
    1e3a:	1841      	adds	r1, r0, r1
    1e3c:	6019      	str	r1, [r3, #0]
    1e3e:	605a      	str	r2, [r3, #4]
    1e40:	e7da      	b.n	1df8 <_free_r+0x24>
    1e42:	42a0      	cmp	r0, r4
    1e44:	d902      	bls.n	1e4c <_free_r+0x78>
    1e46:	230c      	movs	r3, #12
    1e48:	602b      	str	r3, [r5, #0]
    1e4a:	e7d5      	b.n	1df8 <_free_r+0x24>
    1e4c:	6821      	ldr	r1, [r4, #0]
    1e4e:	1860      	adds	r0, r4, r1
    1e50:	4282      	cmp	r2, r0
    1e52:	d103      	bne.n	1e5c <_free_r+0x88>
    1e54:	6810      	ldr	r0, [r2, #0]
    1e56:	6852      	ldr	r2, [r2, #4]
    1e58:	1841      	adds	r1, r0, r1
    1e5a:	6021      	str	r1, [r4, #0]
    1e5c:	6062      	str	r2, [r4, #4]
    1e5e:	605c      	str	r4, [r3, #4]
    1e60:	e7ca      	b.n	1df8 <_free_r+0x24>
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	200000cc 	.word	0x200000cc

00001e68 <_malloc_r>:
    1e68:	2303      	movs	r3, #3
    1e6a:	b570      	push	{r4, r5, r6, lr}
    1e6c:	1ccd      	adds	r5, r1, #3
    1e6e:	439d      	bics	r5, r3
    1e70:	3508      	adds	r5, #8
    1e72:	0006      	movs	r6, r0
    1e74:	2d0c      	cmp	r5, #12
    1e76:	d21e      	bcs.n	1eb6 <_malloc_r+0x4e>
    1e78:	250c      	movs	r5, #12
    1e7a:	42a9      	cmp	r1, r5
    1e7c:	d81d      	bhi.n	1eba <_malloc_r+0x52>
    1e7e:	0030      	movs	r0, r6
    1e80:	f000 fcaf 	bl	27e2 <__malloc_lock>
    1e84:	4a25      	ldr	r2, [pc, #148]	; (1f1c <_malloc_r+0xb4>)
    1e86:	6814      	ldr	r4, [r2, #0]
    1e88:	0021      	movs	r1, r4
    1e8a:	2900      	cmp	r1, #0
    1e8c:	d119      	bne.n	1ec2 <_malloc_r+0x5a>
    1e8e:	4c24      	ldr	r4, [pc, #144]	; (1f20 <_malloc_r+0xb8>)
    1e90:	6823      	ldr	r3, [r4, #0]
    1e92:	2b00      	cmp	r3, #0
    1e94:	d103      	bne.n	1e9e <_malloc_r+0x36>
    1e96:	0030      	movs	r0, r6
    1e98:	f000 fb10 	bl	24bc <_sbrk_r>
    1e9c:	6020      	str	r0, [r4, #0]
    1e9e:	0029      	movs	r1, r5
    1ea0:	0030      	movs	r0, r6
    1ea2:	f000 fb0b 	bl	24bc <_sbrk_r>
    1ea6:	1c43      	adds	r3, r0, #1
    1ea8:	d12c      	bne.n	1f04 <_malloc_r+0x9c>
    1eaa:	230c      	movs	r3, #12
    1eac:	0030      	movs	r0, r6
    1eae:	6033      	str	r3, [r6, #0]
    1eb0:	f000 fc98 	bl	27e4 <__malloc_unlock>
    1eb4:	e003      	b.n	1ebe <_malloc_r+0x56>
    1eb6:	2d00      	cmp	r5, #0
    1eb8:	dadf      	bge.n	1e7a <_malloc_r+0x12>
    1eba:	230c      	movs	r3, #12
    1ebc:	6033      	str	r3, [r6, #0]
    1ebe:	2000      	movs	r0, #0
    1ec0:	bd70      	pop	{r4, r5, r6, pc}
    1ec2:	680b      	ldr	r3, [r1, #0]
    1ec4:	1b5b      	subs	r3, r3, r5
    1ec6:	d41a      	bmi.n	1efe <_malloc_r+0x96>
    1ec8:	2b0b      	cmp	r3, #11
    1eca:	d903      	bls.n	1ed4 <_malloc_r+0x6c>
    1ecc:	600b      	str	r3, [r1, #0]
    1ece:	18cc      	adds	r4, r1, r3
    1ed0:	6025      	str	r5, [r4, #0]
    1ed2:	e003      	b.n	1edc <_malloc_r+0x74>
    1ed4:	428c      	cmp	r4, r1
    1ed6:	d10e      	bne.n	1ef6 <_malloc_r+0x8e>
    1ed8:	6863      	ldr	r3, [r4, #4]
    1eda:	6013      	str	r3, [r2, #0]
    1edc:	0030      	movs	r0, r6
    1ede:	f000 fc81 	bl	27e4 <__malloc_unlock>
    1ee2:	0020      	movs	r0, r4
    1ee4:	2207      	movs	r2, #7
    1ee6:	300b      	adds	r0, #11
    1ee8:	1d23      	adds	r3, r4, #4
    1eea:	4390      	bics	r0, r2
    1eec:	1ac3      	subs	r3, r0, r3
    1eee:	d0e7      	beq.n	1ec0 <_malloc_r+0x58>
    1ef0:	425a      	negs	r2, r3
    1ef2:	50e2      	str	r2, [r4, r3]
    1ef4:	e7e4      	b.n	1ec0 <_malloc_r+0x58>
    1ef6:	684b      	ldr	r3, [r1, #4]
    1ef8:	6063      	str	r3, [r4, #4]
    1efa:	000c      	movs	r4, r1
    1efc:	e7ee      	b.n	1edc <_malloc_r+0x74>
    1efe:	000c      	movs	r4, r1
    1f00:	6849      	ldr	r1, [r1, #4]
    1f02:	e7c2      	b.n	1e8a <_malloc_r+0x22>
    1f04:	2303      	movs	r3, #3
    1f06:	1cc4      	adds	r4, r0, #3
    1f08:	439c      	bics	r4, r3
    1f0a:	42a0      	cmp	r0, r4
    1f0c:	d0e0      	beq.n	1ed0 <_malloc_r+0x68>
    1f0e:	1a21      	subs	r1, r4, r0
    1f10:	0030      	movs	r0, r6
    1f12:	f000 fad3 	bl	24bc <_sbrk_r>
    1f16:	1c43      	adds	r3, r0, #1
    1f18:	d1da      	bne.n	1ed0 <_malloc_r+0x68>
    1f1a:	e7c6      	b.n	1eaa <_malloc_r+0x42>
    1f1c:	200000cc 	.word	0x200000cc
    1f20:	200000d0 	.word	0x200000d0

00001f24 <__sfputc_r>:
    1f24:	6893      	ldr	r3, [r2, #8]
    1f26:	b510      	push	{r4, lr}
    1f28:	3b01      	subs	r3, #1
    1f2a:	6093      	str	r3, [r2, #8]
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	da05      	bge.n	1f3c <__sfputc_r+0x18>
    1f30:	6994      	ldr	r4, [r2, #24]
    1f32:	42a3      	cmp	r3, r4
    1f34:	db08      	blt.n	1f48 <__sfputc_r+0x24>
    1f36:	b2cb      	uxtb	r3, r1
    1f38:	2b0a      	cmp	r3, #10
    1f3a:	d005      	beq.n	1f48 <__sfputc_r+0x24>
    1f3c:	6813      	ldr	r3, [r2, #0]
    1f3e:	1c58      	adds	r0, r3, #1
    1f40:	6010      	str	r0, [r2, #0]
    1f42:	7019      	strb	r1, [r3, #0]
    1f44:	b2c8      	uxtb	r0, r1
    1f46:	bd10      	pop	{r4, pc}
    1f48:	f000 fb16 	bl	2578 <__swbuf_r>
    1f4c:	e7fb      	b.n	1f46 <__sfputc_r+0x22>

00001f4e <__sfputs_r>:
    1f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f50:	0006      	movs	r6, r0
    1f52:	000f      	movs	r7, r1
    1f54:	0014      	movs	r4, r2
    1f56:	18d5      	adds	r5, r2, r3
    1f58:	42ac      	cmp	r4, r5
    1f5a:	d101      	bne.n	1f60 <__sfputs_r+0x12>
    1f5c:	2000      	movs	r0, #0
    1f5e:	e007      	b.n	1f70 <__sfputs_r+0x22>
    1f60:	7821      	ldrb	r1, [r4, #0]
    1f62:	003a      	movs	r2, r7
    1f64:	0030      	movs	r0, r6
    1f66:	f7ff ffdd 	bl	1f24 <__sfputc_r>
    1f6a:	3401      	adds	r4, #1
    1f6c:	1c43      	adds	r3, r0, #1
    1f6e:	d1f3      	bne.n	1f58 <__sfputs_r+0xa>
    1f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001f74 <_vfiprintf_r>:
    1f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f76:	b09f      	sub	sp, #124	; 0x7c
    1f78:	0006      	movs	r6, r0
    1f7a:	000f      	movs	r7, r1
    1f7c:	0014      	movs	r4, r2
    1f7e:	9305      	str	r3, [sp, #20]
    1f80:	2800      	cmp	r0, #0
    1f82:	d004      	beq.n	1f8e <_vfiprintf_r+0x1a>
    1f84:	6983      	ldr	r3, [r0, #24]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d101      	bne.n	1f8e <_vfiprintf_r+0x1a>
    1f8a:	f7ff fe17 	bl	1bbc <__sinit>
    1f8e:	4b7f      	ldr	r3, [pc, #508]	; (218c <STACK_SIZE+0x18c>)
    1f90:	429f      	cmp	r7, r3
    1f92:	d15c      	bne.n	204e <STACK_SIZE+0x4e>
    1f94:	6877      	ldr	r7, [r6, #4]
    1f96:	89bb      	ldrh	r3, [r7, #12]
    1f98:	071b      	lsls	r3, r3, #28
    1f9a:	d562      	bpl.n	2062 <STACK_SIZE+0x62>
    1f9c:	693b      	ldr	r3, [r7, #16]
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d05f      	beq.n	2062 <STACK_SIZE+0x62>
    1fa2:	2300      	movs	r3, #0
    1fa4:	ad06      	add	r5, sp, #24
    1fa6:	616b      	str	r3, [r5, #20]
    1fa8:	3320      	adds	r3, #32
    1faa:	766b      	strb	r3, [r5, #25]
    1fac:	3310      	adds	r3, #16
    1fae:	76ab      	strb	r3, [r5, #26]
    1fb0:	9402      	str	r4, [sp, #8]
    1fb2:	9c02      	ldr	r4, [sp, #8]
    1fb4:	7823      	ldrb	r3, [r4, #0]
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	d15d      	bne.n	2076 <STACK_SIZE+0x76>
    1fba:	9b02      	ldr	r3, [sp, #8]
    1fbc:	1ae3      	subs	r3, r4, r3
    1fbe:	9304      	str	r3, [sp, #16]
    1fc0:	d00d      	beq.n	1fde <_vfiprintf_r+0x6a>
    1fc2:	9b04      	ldr	r3, [sp, #16]
    1fc4:	9a02      	ldr	r2, [sp, #8]
    1fc6:	0039      	movs	r1, r7
    1fc8:	0030      	movs	r0, r6
    1fca:	f7ff ffc0 	bl	1f4e <__sfputs_r>
    1fce:	1c43      	adds	r3, r0, #1
    1fd0:	d100      	bne.n	1fd4 <_vfiprintf_r+0x60>
    1fd2:	e0cc      	b.n	216e <STACK_SIZE+0x16e>
    1fd4:	696a      	ldr	r2, [r5, #20]
    1fd6:	9b04      	ldr	r3, [sp, #16]
    1fd8:	4694      	mov	ip, r2
    1fda:	4463      	add	r3, ip
    1fdc:	616b      	str	r3, [r5, #20]
    1fde:	7823      	ldrb	r3, [r4, #0]
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d100      	bne.n	1fe6 <_vfiprintf_r+0x72>
    1fe4:	e0c3      	b.n	216e <STACK_SIZE+0x16e>
    1fe6:	2201      	movs	r2, #1
    1fe8:	2300      	movs	r3, #0
    1fea:	4252      	negs	r2, r2
    1fec:	606a      	str	r2, [r5, #4]
    1fee:	a902      	add	r1, sp, #8
    1ff0:	3254      	adds	r2, #84	; 0x54
    1ff2:	1852      	adds	r2, r2, r1
    1ff4:	3401      	adds	r4, #1
    1ff6:	602b      	str	r3, [r5, #0]
    1ff8:	60eb      	str	r3, [r5, #12]
    1ffa:	60ab      	str	r3, [r5, #8]
    1ffc:	7013      	strb	r3, [r2, #0]
    1ffe:	65ab      	str	r3, [r5, #88]	; 0x58
    2000:	7821      	ldrb	r1, [r4, #0]
    2002:	2205      	movs	r2, #5
    2004:	4862      	ldr	r0, [pc, #392]	; (2190 <STACK_SIZE+0x190>)
    2006:	f000 fbe1 	bl	27cc <memchr>
    200a:	1c63      	adds	r3, r4, #1
    200c:	469c      	mov	ip, r3
    200e:	2800      	cmp	r0, #0
    2010:	d135      	bne.n	207e <STACK_SIZE+0x7e>
    2012:	6829      	ldr	r1, [r5, #0]
    2014:	06cb      	lsls	r3, r1, #27
    2016:	d504      	bpl.n	2022 <STACK_SIZE+0x22>
    2018:	2353      	movs	r3, #83	; 0x53
    201a:	aa02      	add	r2, sp, #8
    201c:	3020      	adds	r0, #32
    201e:	189b      	adds	r3, r3, r2
    2020:	7018      	strb	r0, [r3, #0]
    2022:	070b      	lsls	r3, r1, #28
    2024:	d504      	bpl.n	2030 <STACK_SIZE+0x30>
    2026:	2353      	movs	r3, #83	; 0x53
    2028:	202b      	movs	r0, #43	; 0x2b
    202a:	aa02      	add	r2, sp, #8
    202c:	189b      	adds	r3, r3, r2
    202e:	7018      	strb	r0, [r3, #0]
    2030:	7823      	ldrb	r3, [r4, #0]
    2032:	2b2a      	cmp	r3, #42	; 0x2a
    2034:	d02c      	beq.n	2090 <STACK_SIZE+0x90>
    2036:	2000      	movs	r0, #0
    2038:	210a      	movs	r1, #10
    203a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    203c:	7822      	ldrb	r2, [r4, #0]
    203e:	3a30      	subs	r2, #48	; 0x30
    2040:	2a09      	cmp	r2, #9
    2042:	d800      	bhi.n	2046 <STACK_SIZE+0x46>
    2044:	e06b      	b.n	211e <STACK_SIZE+0x11e>
    2046:	2800      	cmp	r0, #0
    2048:	d02a      	beq.n	20a0 <STACK_SIZE+0xa0>
    204a:	9309      	str	r3, [sp, #36]	; 0x24
    204c:	e028      	b.n	20a0 <STACK_SIZE+0xa0>
    204e:	4b51      	ldr	r3, [pc, #324]	; (2194 <STACK_SIZE+0x194>)
    2050:	429f      	cmp	r7, r3
    2052:	d101      	bne.n	2058 <STACK_SIZE+0x58>
    2054:	68b7      	ldr	r7, [r6, #8]
    2056:	e79e      	b.n	1f96 <_vfiprintf_r+0x22>
    2058:	4b4f      	ldr	r3, [pc, #316]	; (2198 <STACK_SIZE+0x198>)
    205a:	429f      	cmp	r7, r3
    205c:	d19b      	bne.n	1f96 <_vfiprintf_r+0x22>
    205e:	68f7      	ldr	r7, [r6, #12]
    2060:	e799      	b.n	1f96 <_vfiprintf_r+0x22>
    2062:	0039      	movs	r1, r7
    2064:	0030      	movs	r0, r6
    2066:	f000 faf1 	bl	264c <__swsetup_r>
    206a:	2800      	cmp	r0, #0
    206c:	d099      	beq.n	1fa2 <_vfiprintf_r+0x2e>
    206e:	2001      	movs	r0, #1
    2070:	4240      	negs	r0, r0
    2072:	b01f      	add	sp, #124	; 0x7c
    2074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2076:	2b25      	cmp	r3, #37	; 0x25
    2078:	d09f      	beq.n	1fba <_vfiprintf_r+0x46>
    207a:	3401      	adds	r4, #1
    207c:	e79a      	b.n	1fb4 <_vfiprintf_r+0x40>
    207e:	4b44      	ldr	r3, [pc, #272]	; (2190 <STACK_SIZE+0x190>)
    2080:	6829      	ldr	r1, [r5, #0]
    2082:	1ac0      	subs	r0, r0, r3
    2084:	2301      	movs	r3, #1
    2086:	4083      	lsls	r3, r0
    2088:	430b      	orrs	r3, r1
    208a:	602b      	str	r3, [r5, #0]
    208c:	4664      	mov	r4, ip
    208e:	e7b7      	b.n	2000 <STACK_SIZE>
    2090:	9b05      	ldr	r3, [sp, #20]
    2092:	1d18      	adds	r0, r3, #4
    2094:	681b      	ldr	r3, [r3, #0]
    2096:	9005      	str	r0, [sp, #20]
    2098:	2b00      	cmp	r3, #0
    209a:	db3a      	blt.n	2112 <STACK_SIZE+0x112>
    209c:	9309      	str	r3, [sp, #36]	; 0x24
    209e:	4664      	mov	r4, ip
    20a0:	7823      	ldrb	r3, [r4, #0]
    20a2:	2b2e      	cmp	r3, #46	; 0x2e
    20a4:	d10b      	bne.n	20be <STACK_SIZE+0xbe>
    20a6:	7863      	ldrb	r3, [r4, #1]
    20a8:	1c62      	adds	r2, r4, #1
    20aa:	2b2a      	cmp	r3, #42	; 0x2a
    20ac:	d13f      	bne.n	212e <STACK_SIZE+0x12e>
    20ae:	9b05      	ldr	r3, [sp, #20]
    20b0:	3402      	adds	r4, #2
    20b2:	1d1a      	adds	r2, r3, #4
    20b4:	681b      	ldr	r3, [r3, #0]
    20b6:	9205      	str	r2, [sp, #20]
    20b8:	2b00      	cmp	r3, #0
    20ba:	db35      	blt.n	2128 <STACK_SIZE+0x128>
    20bc:	9307      	str	r3, [sp, #28]
    20be:	7821      	ldrb	r1, [r4, #0]
    20c0:	2203      	movs	r2, #3
    20c2:	4836      	ldr	r0, [pc, #216]	; (219c <STACK_SIZE+0x19c>)
    20c4:	f000 fb82 	bl	27cc <memchr>
    20c8:	2800      	cmp	r0, #0
    20ca:	d007      	beq.n	20dc <STACK_SIZE+0xdc>
    20cc:	4b33      	ldr	r3, [pc, #204]	; (219c <STACK_SIZE+0x19c>)
    20ce:	682a      	ldr	r2, [r5, #0]
    20d0:	1ac0      	subs	r0, r0, r3
    20d2:	2340      	movs	r3, #64	; 0x40
    20d4:	4083      	lsls	r3, r0
    20d6:	4313      	orrs	r3, r2
    20d8:	602b      	str	r3, [r5, #0]
    20da:	3401      	adds	r4, #1
    20dc:	7821      	ldrb	r1, [r4, #0]
    20de:	1c63      	adds	r3, r4, #1
    20e0:	2206      	movs	r2, #6
    20e2:	482f      	ldr	r0, [pc, #188]	; (21a0 <STACK_SIZE+0x1a0>)
    20e4:	9302      	str	r3, [sp, #8]
    20e6:	7629      	strb	r1, [r5, #24]
    20e8:	f000 fb70 	bl	27cc <memchr>
    20ec:	2800      	cmp	r0, #0
    20ee:	d044      	beq.n	217a <STACK_SIZE+0x17a>
    20f0:	4b2c      	ldr	r3, [pc, #176]	; (21a4 <STACK_SIZE+0x1a4>)
    20f2:	2b00      	cmp	r3, #0
    20f4:	d12f      	bne.n	2156 <STACK_SIZE+0x156>
    20f6:	6829      	ldr	r1, [r5, #0]
    20f8:	9b05      	ldr	r3, [sp, #20]
    20fa:	2207      	movs	r2, #7
    20fc:	05c9      	lsls	r1, r1, #23
    20fe:	d528      	bpl.n	2152 <STACK_SIZE+0x152>
    2100:	189b      	adds	r3, r3, r2
    2102:	4393      	bics	r3, r2
    2104:	3308      	adds	r3, #8
    2106:	9305      	str	r3, [sp, #20]
    2108:	696b      	ldr	r3, [r5, #20]
    210a:	9a03      	ldr	r2, [sp, #12]
    210c:	189b      	adds	r3, r3, r2
    210e:	616b      	str	r3, [r5, #20]
    2110:	e74f      	b.n	1fb2 <_vfiprintf_r+0x3e>
    2112:	425b      	negs	r3, r3
    2114:	60eb      	str	r3, [r5, #12]
    2116:	2302      	movs	r3, #2
    2118:	430b      	orrs	r3, r1
    211a:	602b      	str	r3, [r5, #0]
    211c:	e7bf      	b.n	209e <STACK_SIZE+0x9e>
    211e:	434b      	muls	r3, r1
    2120:	3401      	adds	r4, #1
    2122:	189b      	adds	r3, r3, r2
    2124:	2001      	movs	r0, #1
    2126:	e789      	b.n	203c <STACK_SIZE+0x3c>
    2128:	2301      	movs	r3, #1
    212a:	425b      	negs	r3, r3
    212c:	e7c6      	b.n	20bc <STACK_SIZE+0xbc>
    212e:	2300      	movs	r3, #0
    2130:	0014      	movs	r4, r2
    2132:	200a      	movs	r0, #10
    2134:	001a      	movs	r2, r3
    2136:	606b      	str	r3, [r5, #4]
    2138:	7821      	ldrb	r1, [r4, #0]
    213a:	3930      	subs	r1, #48	; 0x30
    213c:	2909      	cmp	r1, #9
    213e:	d903      	bls.n	2148 <STACK_SIZE+0x148>
    2140:	2b00      	cmp	r3, #0
    2142:	d0bc      	beq.n	20be <STACK_SIZE+0xbe>
    2144:	9207      	str	r2, [sp, #28]
    2146:	e7ba      	b.n	20be <STACK_SIZE+0xbe>
    2148:	4342      	muls	r2, r0
    214a:	3401      	adds	r4, #1
    214c:	1852      	adds	r2, r2, r1
    214e:	2301      	movs	r3, #1
    2150:	e7f2      	b.n	2138 <STACK_SIZE+0x138>
    2152:	3307      	adds	r3, #7
    2154:	e7d5      	b.n	2102 <STACK_SIZE+0x102>
    2156:	ab05      	add	r3, sp, #20
    2158:	9300      	str	r3, [sp, #0]
    215a:	003a      	movs	r2, r7
    215c:	4b12      	ldr	r3, [pc, #72]	; (21a8 <STACK_SIZE+0x1a8>)
    215e:	0029      	movs	r1, r5
    2160:	0030      	movs	r0, r6
    2162:	e000      	b.n	2166 <STACK_SIZE+0x166>
    2164:	bf00      	nop
    2166:	9003      	str	r0, [sp, #12]
    2168:	9b03      	ldr	r3, [sp, #12]
    216a:	3301      	adds	r3, #1
    216c:	d1cc      	bne.n	2108 <STACK_SIZE+0x108>
    216e:	89bb      	ldrh	r3, [r7, #12]
    2170:	065b      	lsls	r3, r3, #25
    2172:	d500      	bpl.n	2176 <STACK_SIZE+0x176>
    2174:	e77b      	b.n	206e <STACK_SIZE+0x6e>
    2176:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2178:	e77b      	b.n	2072 <STACK_SIZE+0x72>
    217a:	ab05      	add	r3, sp, #20
    217c:	9300      	str	r3, [sp, #0]
    217e:	003a      	movs	r2, r7
    2180:	4b09      	ldr	r3, [pc, #36]	; (21a8 <STACK_SIZE+0x1a8>)
    2182:	0029      	movs	r1, r5
    2184:	0030      	movs	r0, r6
    2186:	f000 f87f 	bl	2288 <_printf_i>
    218a:	e7ec      	b.n	2166 <STACK_SIZE+0x166>
    218c:	000028a0 	.word	0x000028a0
    2190:	000028e0 	.word	0x000028e0
    2194:	000028c0 	.word	0x000028c0
    2198:	00002880 	.word	0x00002880
    219c:	000028e6 	.word	0x000028e6
    21a0:	000028ea 	.word	0x000028ea
    21a4:	00000000 	.word	0x00000000
    21a8:	00001f4f 	.word	0x00001f4f

000021ac <_printf_common>:
    21ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    21ae:	0015      	movs	r5, r2
    21b0:	9301      	str	r3, [sp, #4]
    21b2:	688a      	ldr	r2, [r1, #8]
    21b4:	690b      	ldr	r3, [r1, #16]
    21b6:	9000      	str	r0, [sp, #0]
    21b8:	000c      	movs	r4, r1
    21ba:	4293      	cmp	r3, r2
    21bc:	da00      	bge.n	21c0 <_printf_common+0x14>
    21be:	0013      	movs	r3, r2
    21c0:	0022      	movs	r2, r4
    21c2:	602b      	str	r3, [r5, #0]
    21c4:	3243      	adds	r2, #67	; 0x43
    21c6:	7812      	ldrb	r2, [r2, #0]
    21c8:	2a00      	cmp	r2, #0
    21ca:	d001      	beq.n	21d0 <_printf_common+0x24>
    21cc:	3301      	adds	r3, #1
    21ce:	602b      	str	r3, [r5, #0]
    21d0:	6823      	ldr	r3, [r4, #0]
    21d2:	069b      	lsls	r3, r3, #26
    21d4:	d502      	bpl.n	21dc <_printf_common+0x30>
    21d6:	682b      	ldr	r3, [r5, #0]
    21d8:	3302      	adds	r3, #2
    21da:	602b      	str	r3, [r5, #0]
    21dc:	2706      	movs	r7, #6
    21de:	6823      	ldr	r3, [r4, #0]
    21e0:	401f      	ands	r7, r3
    21e2:	d027      	beq.n	2234 <_printf_common+0x88>
    21e4:	0023      	movs	r3, r4
    21e6:	3343      	adds	r3, #67	; 0x43
    21e8:	781b      	ldrb	r3, [r3, #0]
    21ea:	1e5a      	subs	r2, r3, #1
    21ec:	4193      	sbcs	r3, r2
    21ee:	6822      	ldr	r2, [r4, #0]
    21f0:	0692      	lsls	r2, r2, #26
    21f2:	d430      	bmi.n	2256 <_printf_common+0xaa>
    21f4:	0022      	movs	r2, r4
    21f6:	9901      	ldr	r1, [sp, #4]
    21f8:	3243      	adds	r2, #67	; 0x43
    21fa:	9800      	ldr	r0, [sp, #0]
    21fc:	9e08      	ldr	r6, [sp, #32]
    21fe:	47b0      	blx	r6
    2200:	1c43      	adds	r3, r0, #1
    2202:	d025      	beq.n	2250 <_printf_common+0xa4>
    2204:	2306      	movs	r3, #6
    2206:	6820      	ldr	r0, [r4, #0]
    2208:	682a      	ldr	r2, [r5, #0]
    220a:	68e1      	ldr	r1, [r4, #12]
    220c:	4003      	ands	r3, r0
    220e:	2500      	movs	r5, #0
    2210:	2b04      	cmp	r3, #4
    2212:	d103      	bne.n	221c <_printf_common+0x70>
    2214:	1a8d      	subs	r5, r1, r2
    2216:	43eb      	mvns	r3, r5
    2218:	17db      	asrs	r3, r3, #31
    221a:	401d      	ands	r5, r3
    221c:	68a3      	ldr	r3, [r4, #8]
    221e:	6922      	ldr	r2, [r4, #16]
    2220:	4293      	cmp	r3, r2
    2222:	dd01      	ble.n	2228 <_printf_common+0x7c>
    2224:	1a9b      	subs	r3, r3, r2
    2226:	18ed      	adds	r5, r5, r3
    2228:	2700      	movs	r7, #0
    222a:	42bd      	cmp	r5, r7
    222c:	d120      	bne.n	2270 <_printf_common+0xc4>
    222e:	2000      	movs	r0, #0
    2230:	e010      	b.n	2254 <_printf_common+0xa8>
    2232:	3701      	adds	r7, #1
    2234:	68e3      	ldr	r3, [r4, #12]
    2236:	682a      	ldr	r2, [r5, #0]
    2238:	1a9b      	subs	r3, r3, r2
    223a:	429f      	cmp	r7, r3
    223c:	dad2      	bge.n	21e4 <_printf_common+0x38>
    223e:	0022      	movs	r2, r4
    2240:	2301      	movs	r3, #1
    2242:	3219      	adds	r2, #25
    2244:	9901      	ldr	r1, [sp, #4]
    2246:	9800      	ldr	r0, [sp, #0]
    2248:	9e08      	ldr	r6, [sp, #32]
    224a:	47b0      	blx	r6
    224c:	1c43      	adds	r3, r0, #1
    224e:	d1f0      	bne.n	2232 <_printf_common+0x86>
    2250:	2001      	movs	r0, #1
    2252:	4240      	negs	r0, r0
    2254:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2256:	2030      	movs	r0, #48	; 0x30
    2258:	18e1      	adds	r1, r4, r3
    225a:	3143      	adds	r1, #67	; 0x43
    225c:	7008      	strb	r0, [r1, #0]
    225e:	0021      	movs	r1, r4
    2260:	1c5a      	adds	r2, r3, #1
    2262:	3145      	adds	r1, #69	; 0x45
    2264:	7809      	ldrb	r1, [r1, #0]
    2266:	18a2      	adds	r2, r4, r2
    2268:	3243      	adds	r2, #67	; 0x43
    226a:	3302      	adds	r3, #2
    226c:	7011      	strb	r1, [r2, #0]
    226e:	e7c1      	b.n	21f4 <_printf_common+0x48>
    2270:	0022      	movs	r2, r4
    2272:	2301      	movs	r3, #1
    2274:	321a      	adds	r2, #26
    2276:	9901      	ldr	r1, [sp, #4]
    2278:	9800      	ldr	r0, [sp, #0]
    227a:	9e08      	ldr	r6, [sp, #32]
    227c:	47b0      	blx	r6
    227e:	1c43      	adds	r3, r0, #1
    2280:	d0e6      	beq.n	2250 <_printf_common+0xa4>
    2282:	3701      	adds	r7, #1
    2284:	e7d1      	b.n	222a <_printf_common+0x7e>
	...

00002288 <_printf_i>:
    2288:	b5f0      	push	{r4, r5, r6, r7, lr}
    228a:	b08b      	sub	sp, #44	; 0x2c
    228c:	9206      	str	r2, [sp, #24]
    228e:	000a      	movs	r2, r1
    2290:	3243      	adds	r2, #67	; 0x43
    2292:	9307      	str	r3, [sp, #28]
    2294:	9005      	str	r0, [sp, #20]
    2296:	9204      	str	r2, [sp, #16]
    2298:	7e0a      	ldrb	r2, [r1, #24]
    229a:	000c      	movs	r4, r1
    229c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    229e:	2a6e      	cmp	r2, #110	; 0x6e
    22a0:	d100      	bne.n	22a4 <_printf_i+0x1c>
    22a2:	e08f      	b.n	23c4 <_printf_i+0x13c>
    22a4:	d817      	bhi.n	22d6 <_printf_i+0x4e>
    22a6:	2a63      	cmp	r2, #99	; 0x63
    22a8:	d02c      	beq.n	2304 <_printf_i+0x7c>
    22aa:	d808      	bhi.n	22be <_printf_i+0x36>
    22ac:	2a00      	cmp	r2, #0
    22ae:	d100      	bne.n	22b2 <_printf_i+0x2a>
    22b0:	e099      	b.n	23e6 <_printf_i+0x15e>
    22b2:	2a58      	cmp	r2, #88	; 0x58
    22b4:	d054      	beq.n	2360 <_printf_i+0xd8>
    22b6:	0026      	movs	r6, r4
    22b8:	3642      	adds	r6, #66	; 0x42
    22ba:	7032      	strb	r2, [r6, #0]
    22bc:	e029      	b.n	2312 <_printf_i+0x8a>
    22be:	2a64      	cmp	r2, #100	; 0x64
    22c0:	d001      	beq.n	22c6 <_printf_i+0x3e>
    22c2:	2a69      	cmp	r2, #105	; 0x69
    22c4:	d1f7      	bne.n	22b6 <_printf_i+0x2e>
    22c6:	6821      	ldr	r1, [r4, #0]
    22c8:	681a      	ldr	r2, [r3, #0]
    22ca:	0608      	lsls	r0, r1, #24
    22cc:	d523      	bpl.n	2316 <_printf_i+0x8e>
    22ce:	1d11      	adds	r1, r2, #4
    22d0:	6019      	str	r1, [r3, #0]
    22d2:	6815      	ldr	r5, [r2, #0]
    22d4:	e025      	b.n	2322 <_printf_i+0x9a>
    22d6:	2a73      	cmp	r2, #115	; 0x73
    22d8:	d100      	bne.n	22dc <_printf_i+0x54>
    22da:	e088      	b.n	23ee <_printf_i+0x166>
    22dc:	d808      	bhi.n	22f0 <_printf_i+0x68>
    22de:	2a6f      	cmp	r2, #111	; 0x6f
    22e0:	d029      	beq.n	2336 <_printf_i+0xae>
    22e2:	2a70      	cmp	r2, #112	; 0x70
    22e4:	d1e7      	bne.n	22b6 <_printf_i+0x2e>
    22e6:	2220      	movs	r2, #32
    22e8:	6809      	ldr	r1, [r1, #0]
    22ea:	430a      	orrs	r2, r1
    22ec:	6022      	str	r2, [r4, #0]
    22ee:	e003      	b.n	22f8 <_printf_i+0x70>
    22f0:	2a75      	cmp	r2, #117	; 0x75
    22f2:	d020      	beq.n	2336 <_printf_i+0xae>
    22f4:	2a78      	cmp	r2, #120	; 0x78
    22f6:	d1de      	bne.n	22b6 <_printf_i+0x2e>
    22f8:	0022      	movs	r2, r4
    22fa:	2178      	movs	r1, #120	; 0x78
    22fc:	3245      	adds	r2, #69	; 0x45
    22fe:	7011      	strb	r1, [r2, #0]
    2300:	4a6c      	ldr	r2, [pc, #432]	; (24b4 <_printf_i+0x22c>)
    2302:	e030      	b.n	2366 <_printf_i+0xde>
    2304:	000e      	movs	r6, r1
    2306:	681a      	ldr	r2, [r3, #0]
    2308:	3642      	adds	r6, #66	; 0x42
    230a:	1d11      	adds	r1, r2, #4
    230c:	6019      	str	r1, [r3, #0]
    230e:	6813      	ldr	r3, [r2, #0]
    2310:	7033      	strb	r3, [r6, #0]
    2312:	2301      	movs	r3, #1
    2314:	e079      	b.n	240a <_printf_i+0x182>
    2316:	0649      	lsls	r1, r1, #25
    2318:	d5d9      	bpl.n	22ce <_printf_i+0x46>
    231a:	1d11      	adds	r1, r2, #4
    231c:	6019      	str	r1, [r3, #0]
    231e:	2300      	movs	r3, #0
    2320:	5ed5      	ldrsh	r5, [r2, r3]
    2322:	2d00      	cmp	r5, #0
    2324:	da03      	bge.n	232e <_printf_i+0xa6>
    2326:	232d      	movs	r3, #45	; 0x2d
    2328:	9a04      	ldr	r2, [sp, #16]
    232a:	426d      	negs	r5, r5
    232c:	7013      	strb	r3, [r2, #0]
    232e:	4b62      	ldr	r3, [pc, #392]	; (24b8 <_printf_i+0x230>)
    2330:	270a      	movs	r7, #10
    2332:	9303      	str	r3, [sp, #12]
    2334:	e02f      	b.n	2396 <_printf_i+0x10e>
    2336:	6820      	ldr	r0, [r4, #0]
    2338:	6819      	ldr	r1, [r3, #0]
    233a:	0605      	lsls	r5, r0, #24
    233c:	d503      	bpl.n	2346 <_printf_i+0xbe>
    233e:	1d08      	adds	r0, r1, #4
    2340:	6018      	str	r0, [r3, #0]
    2342:	680d      	ldr	r5, [r1, #0]
    2344:	e005      	b.n	2352 <_printf_i+0xca>
    2346:	0640      	lsls	r0, r0, #25
    2348:	d5f9      	bpl.n	233e <_printf_i+0xb6>
    234a:	680d      	ldr	r5, [r1, #0]
    234c:	1d08      	adds	r0, r1, #4
    234e:	6018      	str	r0, [r3, #0]
    2350:	b2ad      	uxth	r5, r5
    2352:	4b59      	ldr	r3, [pc, #356]	; (24b8 <_printf_i+0x230>)
    2354:	2708      	movs	r7, #8
    2356:	9303      	str	r3, [sp, #12]
    2358:	2a6f      	cmp	r2, #111	; 0x6f
    235a:	d018      	beq.n	238e <_printf_i+0x106>
    235c:	270a      	movs	r7, #10
    235e:	e016      	b.n	238e <_printf_i+0x106>
    2360:	3145      	adds	r1, #69	; 0x45
    2362:	700a      	strb	r2, [r1, #0]
    2364:	4a54      	ldr	r2, [pc, #336]	; (24b8 <_printf_i+0x230>)
    2366:	9203      	str	r2, [sp, #12]
    2368:	681a      	ldr	r2, [r3, #0]
    236a:	6821      	ldr	r1, [r4, #0]
    236c:	1d10      	adds	r0, r2, #4
    236e:	6018      	str	r0, [r3, #0]
    2370:	6815      	ldr	r5, [r2, #0]
    2372:	0608      	lsls	r0, r1, #24
    2374:	d522      	bpl.n	23bc <_printf_i+0x134>
    2376:	07cb      	lsls	r3, r1, #31
    2378:	d502      	bpl.n	2380 <_printf_i+0xf8>
    237a:	2320      	movs	r3, #32
    237c:	4319      	orrs	r1, r3
    237e:	6021      	str	r1, [r4, #0]
    2380:	2710      	movs	r7, #16
    2382:	2d00      	cmp	r5, #0
    2384:	d103      	bne.n	238e <_printf_i+0x106>
    2386:	2320      	movs	r3, #32
    2388:	6822      	ldr	r2, [r4, #0]
    238a:	439a      	bics	r2, r3
    238c:	6022      	str	r2, [r4, #0]
    238e:	0023      	movs	r3, r4
    2390:	2200      	movs	r2, #0
    2392:	3343      	adds	r3, #67	; 0x43
    2394:	701a      	strb	r2, [r3, #0]
    2396:	6863      	ldr	r3, [r4, #4]
    2398:	60a3      	str	r3, [r4, #8]
    239a:	2b00      	cmp	r3, #0
    239c:	db5c      	blt.n	2458 <_printf_i+0x1d0>
    239e:	2204      	movs	r2, #4
    23a0:	6821      	ldr	r1, [r4, #0]
    23a2:	4391      	bics	r1, r2
    23a4:	6021      	str	r1, [r4, #0]
    23a6:	2d00      	cmp	r5, #0
    23a8:	d158      	bne.n	245c <_printf_i+0x1d4>
    23aa:	9e04      	ldr	r6, [sp, #16]
    23ac:	2b00      	cmp	r3, #0
    23ae:	d064      	beq.n	247a <_printf_i+0x1f2>
    23b0:	0026      	movs	r6, r4
    23b2:	9b03      	ldr	r3, [sp, #12]
    23b4:	3642      	adds	r6, #66	; 0x42
    23b6:	781b      	ldrb	r3, [r3, #0]
    23b8:	7033      	strb	r3, [r6, #0]
    23ba:	e05e      	b.n	247a <_printf_i+0x1f2>
    23bc:	0648      	lsls	r0, r1, #25
    23be:	d5da      	bpl.n	2376 <_printf_i+0xee>
    23c0:	b2ad      	uxth	r5, r5
    23c2:	e7d8      	b.n	2376 <_printf_i+0xee>
    23c4:	6809      	ldr	r1, [r1, #0]
    23c6:	681a      	ldr	r2, [r3, #0]
    23c8:	0608      	lsls	r0, r1, #24
    23ca:	d505      	bpl.n	23d8 <_printf_i+0x150>
    23cc:	1d11      	adds	r1, r2, #4
    23ce:	6019      	str	r1, [r3, #0]
    23d0:	6813      	ldr	r3, [r2, #0]
    23d2:	6962      	ldr	r2, [r4, #20]
    23d4:	601a      	str	r2, [r3, #0]
    23d6:	e006      	b.n	23e6 <_printf_i+0x15e>
    23d8:	0649      	lsls	r1, r1, #25
    23da:	d5f7      	bpl.n	23cc <_printf_i+0x144>
    23dc:	1d11      	adds	r1, r2, #4
    23de:	6019      	str	r1, [r3, #0]
    23e0:	6813      	ldr	r3, [r2, #0]
    23e2:	8aa2      	ldrh	r2, [r4, #20]
    23e4:	801a      	strh	r2, [r3, #0]
    23e6:	2300      	movs	r3, #0
    23e8:	9e04      	ldr	r6, [sp, #16]
    23ea:	6123      	str	r3, [r4, #16]
    23ec:	e054      	b.n	2498 <_printf_i+0x210>
    23ee:	681a      	ldr	r2, [r3, #0]
    23f0:	1d11      	adds	r1, r2, #4
    23f2:	6019      	str	r1, [r3, #0]
    23f4:	6816      	ldr	r6, [r2, #0]
    23f6:	2100      	movs	r1, #0
    23f8:	6862      	ldr	r2, [r4, #4]
    23fa:	0030      	movs	r0, r6
    23fc:	f000 f9e6 	bl	27cc <memchr>
    2400:	2800      	cmp	r0, #0
    2402:	d001      	beq.n	2408 <_printf_i+0x180>
    2404:	1b80      	subs	r0, r0, r6
    2406:	6060      	str	r0, [r4, #4]
    2408:	6863      	ldr	r3, [r4, #4]
    240a:	6123      	str	r3, [r4, #16]
    240c:	2300      	movs	r3, #0
    240e:	9a04      	ldr	r2, [sp, #16]
    2410:	7013      	strb	r3, [r2, #0]
    2412:	e041      	b.n	2498 <_printf_i+0x210>
    2414:	6923      	ldr	r3, [r4, #16]
    2416:	0032      	movs	r2, r6
    2418:	9906      	ldr	r1, [sp, #24]
    241a:	9805      	ldr	r0, [sp, #20]
    241c:	9d07      	ldr	r5, [sp, #28]
    241e:	47a8      	blx	r5
    2420:	1c43      	adds	r3, r0, #1
    2422:	d043      	beq.n	24ac <_printf_i+0x224>
    2424:	6823      	ldr	r3, [r4, #0]
    2426:	2500      	movs	r5, #0
    2428:	079b      	lsls	r3, r3, #30
    242a:	d40f      	bmi.n	244c <_printf_i+0x1c4>
    242c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    242e:	68e0      	ldr	r0, [r4, #12]
    2430:	4298      	cmp	r0, r3
    2432:	da3d      	bge.n	24b0 <_printf_i+0x228>
    2434:	0018      	movs	r0, r3
    2436:	e03b      	b.n	24b0 <_printf_i+0x228>
    2438:	0022      	movs	r2, r4
    243a:	2301      	movs	r3, #1
    243c:	3219      	adds	r2, #25
    243e:	9906      	ldr	r1, [sp, #24]
    2440:	9805      	ldr	r0, [sp, #20]
    2442:	9e07      	ldr	r6, [sp, #28]
    2444:	47b0      	blx	r6
    2446:	1c43      	adds	r3, r0, #1
    2448:	d030      	beq.n	24ac <_printf_i+0x224>
    244a:	3501      	adds	r5, #1
    244c:	68e3      	ldr	r3, [r4, #12]
    244e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2450:	1a9b      	subs	r3, r3, r2
    2452:	429d      	cmp	r5, r3
    2454:	dbf0      	blt.n	2438 <_printf_i+0x1b0>
    2456:	e7e9      	b.n	242c <_printf_i+0x1a4>
    2458:	2d00      	cmp	r5, #0
    245a:	d0a9      	beq.n	23b0 <_printf_i+0x128>
    245c:	9e04      	ldr	r6, [sp, #16]
    245e:	0028      	movs	r0, r5
    2460:	0039      	movs	r1, r7
    2462:	f7ff f987 	bl	1774 <__aeabi_uidivmod>
    2466:	9b03      	ldr	r3, [sp, #12]
    2468:	3e01      	subs	r6, #1
    246a:	5c5b      	ldrb	r3, [r3, r1]
    246c:	0028      	movs	r0, r5
    246e:	7033      	strb	r3, [r6, #0]
    2470:	0039      	movs	r1, r7
    2472:	f7ff f8f9 	bl	1668 <__udivsi3>
    2476:	1e05      	subs	r5, r0, #0
    2478:	d1f1      	bne.n	245e <_printf_i+0x1d6>
    247a:	2f08      	cmp	r7, #8
    247c:	d109      	bne.n	2492 <_printf_i+0x20a>
    247e:	6823      	ldr	r3, [r4, #0]
    2480:	07db      	lsls	r3, r3, #31
    2482:	d506      	bpl.n	2492 <_printf_i+0x20a>
    2484:	6863      	ldr	r3, [r4, #4]
    2486:	6922      	ldr	r2, [r4, #16]
    2488:	4293      	cmp	r3, r2
    248a:	dc02      	bgt.n	2492 <_printf_i+0x20a>
    248c:	2330      	movs	r3, #48	; 0x30
    248e:	3e01      	subs	r6, #1
    2490:	7033      	strb	r3, [r6, #0]
    2492:	9b04      	ldr	r3, [sp, #16]
    2494:	1b9b      	subs	r3, r3, r6
    2496:	6123      	str	r3, [r4, #16]
    2498:	9b07      	ldr	r3, [sp, #28]
    249a:	aa09      	add	r2, sp, #36	; 0x24
    249c:	9300      	str	r3, [sp, #0]
    249e:	0021      	movs	r1, r4
    24a0:	9b06      	ldr	r3, [sp, #24]
    24a2:	9805      	ldr	r0, [sp, #20]
    24a4:	f7ff fe82 	bl	21ac <_printf_common>
    24a8:	1c43      	adds	r3, r0, #1
    24aa:	d1b3      	bne.n	2414 <_printf_i+0x18c>
    24ac:	2001      	movs	r0, #1
    24ae:	4240      	negs	r0, r0
    24b0:	b00b      	add	sp, #44	; 0x2c
    24b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b4:	00002902 	.word	0x00002902
    24b8:	000028f1 	.word	0x000028f1

000024bc <_sbrk_r>:
    24bc:	2300      	movs	r3, #0
    24be:	b570      	push	{r4, r5, r6, lr}
    24c0:	4c06      	ldr	r4, [pc, #24]	; (24dc <_sbrk_r+0x20>)
    24c2:	0005      	movs	r5, r0
    24c4:	0008      	movs	r0, r1
    24c6:	6023      	str	r3, [r4, #0]
    24c8:	f7fe ff8a 	bl	13e0 <_sbrk>
    24cc:	1c43      	adds	r3, r0, #1
    24ce:	d103      	bne.n	24d8 <_sbrk_r+0x1c>
    24d0:	6823      	ldr	r3, [r4, #0]
    24d2:	2b00      	cmp	r3, #0
    24d4:	d000      	beq.n	24d8 <_sbrk_r+0x1c>
    24d6:	602b      	str	r3, [r5, #0]
    24d8:	bd70      	pop	{r4, r5, r6, pc}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	200001bc 	.word	0x200001bc

000024e0 <__sread>:
    24e0:	b570      	push	{r4, r5, r6, lr}
    24e2:	000c      	movs	r4, r1
    24e4:	250e      	movs	r5, #14
    24e6:	5f49      	ldrsh	r1, [r1, r5]
    24e8:	f000 f97e 	bl	27e8 <_read_r>
    24ec:	2800      	cmp	r0, #0
    24ee:	db03      	blt.n	24f8 <__sread+0x18>
    24f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    24f2:	181b      	adds	r3, r3, r0
    24f4:	6563      	str	r3, [r4, #84]	; 0x54
    24f6:	bd70      	pop	{r4, r5, r6, pc}
    24f8:	89a3      	ldrh	r3, [r4, #12]
    24fa:	4a02      	ldr	r2, [pc, #8]	; (2504 <__sread+0x24>)
    24fc:	4013      	ands	r3, r2
    24fe:	81a3      	strh	r3, [r4, #12]
    2500:	e7f9      	b.n	24f6 <__sread+0x16>
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	ffffefff 	.word	0xffffefff

00002508 <__swrite>:
    2508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    250a:	001f      	movs	r7, r3
    250c:	898b      	ldrh	r3, [r1, #12]
    250e:	0005      	movs	r5, r0
    2510:	000c      	movs	r4, r1
    2512:	0016      	movs	r6, r2
    2514:	05db      	lsls	r3, r3, #23
    2516:	d505      	bpl.n	2524 <__swrite+0x1c>
    2518:	230e      	movs	r3, #14
    251a:	5ec9      	ldrsh	r1, [r1, r3]
    251c:	2200      	movs	r2, #0
    251e:	2302      	movs	r3, #2
    2520:	f000 f940 	bl	27a4 <_lseek_r>
    2524:	89a3      	ldrh	r3, [r4, #12]
    2526:	4a05      	ldr	r2, [pc, #20]	; (253c <__swrite+0x34>)
    2528:	0028      	movs	r0, r5
    252a:	4013      	ands	r3, r2
    252c:	81a3      	strh	r3, [r4, #12]
    252e:	0032      	movs	r2, r6
    2530:	230e      	movs	r3, #14
    2532:	5ee1      	ldrsh	r1, [r4, r3]
    2534:	003b      	movs	r3, r7
    2536:	f000 f875 	bl	2624 <_write_r>
    253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    253c:	ffffefff 	.word	0xffffefff

00002540 <__sseek>:
    2540:	b570      	push	{r4, r5, r6, lr}
    2542:	000c      	movs	r4, r1
    2544:	250e      	movs	r5, #14
    2546:	5f49      	ldrsh	r1, [r1, r5]
    2548:	f000 f92c 	bl	27a4 <_lseek_r>
    254c:	89a3      	ldrh	r3, [r4, #12]
    254e:	1c42      	adds	r2, r0, #1
    2550:	d103      	bne.n	255a <__sseek+0x1a>
    2552:	4a05      	ldr	r2, [pc, #20]	; (2568 <__sseek+0x28>)
    2554:	4013      	ands	r3, r2
    2556:	81a3      	strh	r3, [r4, #12]
    2558:	bd70      	pop	{r4, r5, r6, pc}
    255a:	2280      	movs	r2, #128	; 0x80
    255c:	0152      	lsls	r2, r2, #5
    255e:	4313      	orrs	r3, r2
    2560:	81a3      	strh	r3, [r4, #12]
    2562:	6560      	str	r0, [r4, #84]	; 0x54
    2564:	e7f8      	b.n	2558 <__sseek+0x18>
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	ffffefff 	.word	0xffffefff

0000256c <__sclose>:
    256c:	b510      	push	{r4, lr}
    256e:	230e      	movs	r3, #14
    2570:	5ec9      	ldrsh	r1, [r1, r3]
    2572:	f000 f8e1 	bl	2738 <_close_r>
    2576:	bd10      	pop	{r4, pc}

00002578 <__swbuf_r>:
    2578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    257a:	0005      	movs	r5, r0
    257c:	000e      	movs	r6, r1
    257e:	0014      	movs	r4, r2
    2580:	2800      	cmp	r0, #0
    2582:	d004      	beq.n	258e <__swbuf_r+0x16>
    2584:	6983      	ldr	r3, [r0, #24]
    2586:	2b00      	cmp	r3, #0
    2588:	d101      	bne.n	258e <__swbuf_r+0x16>
    258a:	f7ff fb17 	bl	1bbc <__sinit>
    258e:	4b22      	ldr	r3, [pc, #136]	; (2618 <__swbuf_r+0xa0>)
    2590:	429c      	cmp	r4, r3
    2592:	d12d      	bne.n	25f0 <__swbuf_r+0x78>
    2594:	686c      	ldr	r4, [r5, #4]
    2596:	69a3      	ldr	r3, [r4, #24]
    2598:	60a3      	str	r3, [r4, #8]
    259a:	89a3      	ldrh	r3, [r4, #12]
    259c:	071b      	lsls	r3, r3, #28
    259e:	d531      	bpl.n	2604 <__swbuf_r+0x8c>
    25a0:	6923      	ldr	r3, [r4, #16]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d02e      	beq.n	2604 <__swbuf_r+0x8c>
    25a6:	6823      	ldr	r3, [r4, #0]
    25a8:	6922      	ldr	r2, [r4, #16]
    25aa:	b2f7      	uxtb	r7, r6
    25ac:	1a98      	subs	r0, r3, r2
    25ae:	6963      	ldr	r3, [r4, #20]
    25b0:	b2f6      	uxtb	r6, r6
    25b2:	4298      	cmp	r0, r3
    25b4:	db05      	blt.n	25c2 <__swbuf_r+0x4a>
    25b6:	0021      	movs	r1, r4
    25b8:	0028      	movs	r0, r5
    25ba:	f7ff fa91 	bl	1ae0 <_fflush_r>
    25be:	2800      	cmp	r0, #0
    25c0:	d126      	bne.n	2610 <__swbuf_r+0x98>
    25c2:	68a3      	ldr	r3, [r4, #8]
    25c4:	3001      	adds	r0, #1
    25c6:	3b01      	subs	r3, #1
    25c8:	60a3      	str	r3, [r4, #8]
    25ca:	6823      	ldr	r3, [r4, #0]
    25cc:	1c5a      	adds	r2, r3, #1
    25ce:	6022      	str	r2, [r4, #0]
    25d0:	701f      	strb	r7, [r3, #0]
    25d2:	6963      	ldr	r3, [r4, #20]
    25d4:	4298      	cmp	r0, r3
    25d6:	d004      	beq.n	25e2 <__swbuf_r+0x6a>
    25d8:	89a3      	ldrh	r3, [r4, #12]
    25da:	07db      	lsls	r3, r3, #31
    25dc:	d51a      	bpl.n	2614 <__swbuf_r+0x9c>
    25de:	2e0a      	cmp	r6, #10
    25e0:	d118      	bne.n	2614 <__swbuf_r+0x9c>
    25e2:	0021      	movs	r1, r4
    25e4:	0028      	movs	r0, r5
    25e6:	f7ff fa7b 	bl	1ae0 <_fflush_r>
    25ea:	2800      	cmp	r0, #0
    25ec:	d012      	beq.n	2614 <__swbuf_r+0x9c>
    25ee:	e00f      	b.n	2610 <__swbuf_r+0x98>
    25f0:	4b0a      	ldr	r3, [pc, #40]	; (261c <__swbuf_r+0xa4>)
    25f2:	429c      	cmp	r4, r3
    25f4:	d101      	bne.n	25fa <__swbuf_r+0x82>
    25f6:	68ac      	ldr	r4, [r5, #8]
    25f8:	e7cd      	b.n	2596 <__swbuf_r+0x1e>
    25fa:	4b09      	ldr	r3, [pc, #36]	; (2620 <__swbuf_r+0xa8>)
    25fc:	429c      	cmp	r4, r3
    25fe:	d1ca      	bne.n	2596 <__swbuf_r+0x1e>
    2600:	68ec      	ldr	r4, [r5, #12]
    2602:	e7c8      	b.n	2596 <__swbuf_r+0x1e>
    2604:	0021      	movs	r1, r4
    2606:	0028      	movs	r0, r5
    2608:	f000 f820 	bl	264c <__swsetup_r>
    260c:	2800      	cmp	r0, #0
    260e:	d0ca      	beq.n	25a6 <__swbuf_r+0x2e>
    2610:	2601      	movs	r6, #1
    2612:	4276      	negs	r6, r6
    2614:	0030      	movs	r0, r6
    2616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2618:	000028a0 	.word	0x000028a0
    261c:	000028c0 	.word	0x000028c0
    2620:	00002880 	.word	0x00002880

00002624 <_write_r>:
    2624:	b570      	push	{r4, r5, r6, lr}
    2626:	0005      	movs	r5, r0
    2628:	0008      	movs	r0, r1
    262a:	0011      	movs	r1, r2
    262c:	2200      	movs	r2, #0
    262e:	4c06      	ldr	r4, [pc, #24]	; (2648 <_write_r+0x24>)
    2630:	6022      	str	r2, [r4, #0]
    2632:	001a      	movs	r2, r3
    2634:	f7fe feac 	bl	1390 <_write>
    2638:	1c43      	adds	r3, r0, #1
    263a:	d103      	bne.n	2644 <_write_r+0x20>
    263c:	6823      	ldr	r3, [r4, #0]
    263e:	2b00      	cmp	r3, #0
    2640:	d000      	beq.n	2644 <_write_r+0x20>
    2642:	602b      	str	r3, [r5, #0]
    2644:	bd70      	pop	{r4, r5, r6, pc}
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	200001bc 	.word	0x200001bc

0000264c <__swsetup_r>:
    264c:	4b36      	ldr	r3, [pc, #216]	; (2728 <__swsetup_r+0xdc>)
    264e:	b570      	push	{r4, r5, r6, lr}
    2650:	681d      	ldr	r5, [r3, #0]
    2652:	0006      	movs	r6, r0
    2654:	000c      	movs	r4, r1
    2656:	2d00      	cmp	r5, #0
    2658:	d005      	beq.n	2666 <__swsetup_r+0x1a>
    265a:	69ab      	ldr	r3, [r5, #24]
    265c:	2b00      	cmp	r3, #0
    265e:	d102      	bne.n	2666 <__swsetup_r+0x1a>
    2660:	0028      	movs	r0, r5
    2662:	f7ff faab 	bl	1bbc <__sinit>
    2666:	4b31      	ldr	r3, [pc, #196]	; (272c <__swsetup_r+0xe0>)
    2668:	429c      	cmp	r4, r3
    266a:	d10f      	bne.n	268c <__swsetup_r+0x40>
    266c:	686c      	ldr	r4, [r5, #4]
    266e:	230c      	movs	r3, #12
    2670:	5ee2      	ldrsh	r2, [r4, r3]
    2672:	b293      	uxth	r3, r2
    2674:	0719      	lsls	r1, r3, #28
    2676:	d42d      	bmi.n	26d4 <__swsetup_r+0x88>
    2678:	06d9      	lsls	r1, r3, #27
    267a:	d411      	bmi.n	26a0 <__swsetup_r+0x54>
    267c:	2309      	movs	r3, #9
    267e:	2001      	movs	r0, #1
    2680:	6033      	str	r3, [r6, #0]
    2682:	3337      	adds	r3, #55	; 0x37
    2684:	4313      	orrs	r3, r2
    2686:	81a3      	strh	r3, [r4, #12]
    2688:	4240      	negs	r0, r0
    268a:	bd70      	pop	{r4, r5, r6, pc}
    268c:	4b28      	ldr	r3, [pc, #160]	; (2730 <__swsetup_r+0xe4>)
    268e:	429c      	cmp	r4, r3
    2690:	d101      	bne.n	2696 <__swsetup_r+0x4a>
    2692:	68ac      	ldr	r4, [r5, #8]
    2694:	e7eb      	b.n	266e <__swsetup_r+0x22>
    2696:	4b27      	ldr	r3, [pc, #156]	; (2734 <__swsetup_r+0xe8>)
    2698:	429c      	cmp	r4, r3
    269a:	d1e8      	bne.n	266e <__swsetup_r+0x22>
    269c:	68ec      	ldr	r4, [r5, #12]
    269e:	e7e6      	b.n	266e <__swsetup_r+0x22>
    26a0:	075b      	lsls	r3, r3, #29
    26a2:	d513      	bpl.n	26cc <__swsetup_r+0x80>
    26a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    26a6:	2900      	cmp	r1, #0
    26a8:	d008      	beq.n	26bc <__swsetup_r+0x70>
    26aa:	0023      	movs	r3, r4
    26ac:	3344      	adds	r3, #68	; 0x44
    26ae:	4299      	cmp	r1, r3
    26b0:	d002      	beq.n	26b8 <__swsetup_r+0x6c>
    26b2:	0030      	movs	r0, r6
    26b4:	f7ff fb8e 	bl	1dd4 <_free_r>
    26b8:	2300      	movs	r3, #0
    26ba:	6363      	str	r3, [r4, #52]	; 0x34
    26bc:	2224      	movs	r2, #36	; 0x24
    26be:	89a3      	ldrh	r3, [r4, #12]
    26c0:	4393      	bics	r3, r2
    26c2:	81a3      	strh	r3, [r4, #12]
    26c4:	2300      	movs	r3, #0
    26c6:	6063      	str	r3, [r4, #4]
    26c8:	6923      	ldr	r3, [r4, #16]
    26ca:	6023      	str	r3, [r4, #0]
    26cc:	2308      	movs	r3, #8
    26ce:	89a2      	ldrh	r2, [r4, #12]
    26d0:	4313      	orrs	r3, r2
    26d2:	81a3      	strh	r3, [r4, #12]
    26d4:	6923      	ldr	r3, [r4, #16]
    26d6:	2b00      	cmp	r3, #0
    26d8:	d10b      	bne.n	26f2 <__swsetup_r+0xa6>
    26da:	21a0      	movs	r1, #160	; 0xa0
    26dc:	2280      	movs	r2, #128	; 0x80
    26de:	89a3      	ldrh	r3, [r4, #12]
    26e0:	0089      	lsls	r1, r1, #2
    26e2:	0092      	lsls	r2, r2, #2
    26e4:	400b      	ands	r3, r1
    26e6:	4293      	cmp	r3, r2
    26e8:	d003      	beq.n	26f2 <__swsetup_r+0xa6>
    26ea:	0021      	movs	r1, r4
    26ec:	0030      	movs	r0, r6
    26ee:	f7ff fb23 	bl	1d38 <__smakebuf_r>
    26f2:	2301      	movs	r3, #1
    26f4:	89a2      	ldrh	r2, [r4, #12]
    26f6:	4013      	ands	r3, r2
    26f8:	d011      	beq.n	271e <__swsetup_r+0xd2>
    26fa:	2300      	movs	r3, #0
    26fc:	60a3      	str	r3, [r4, #8]
    26fe:	6963      	ldr	r3, [r4, #20]
    2700:	425b      	negs	r3, r3
    2702:	61a3      	str	r3, [r4, #24]
    2704:	2000      	movs	r0, #0
    2706:	6923      	ldr	r3, [r4, #16]
    2708:	4283      	cmp	r3, r0
    270a:	d1be      	bne.n	268a <__swsetup_r+0x3e>
    270c:	230c      	movs	r3, #12
    270e:	5ee2      	ldrsh	r2, [r4, r3]
    2710:	0613      	lsls	r3, r2, #24
    2712:	d5ba      	bpl.n	268a <__swsetup_r+0x3e>
    2714:	2340      	movs	r3, #64	; 0x40
    2716:	4313      	orrs	r3, r2
    2718:	81a3      	strh	r3, [r4, #12]
    271a:	3801      	subs	r0, #1
    271c:	e7b5      	b.n	268a <__swsetup_r+0x3e>
    271e:	0792      	lsls	r2, r2, #30
    2720:	d400      	bmi.n	2724 <__swsetup_r+0xd8>
    2722:	6963      	ldr	r3, [r4, #20]
    2724:	60a3      	str	r3, [r4, #8]
    2726:	e7ed      	b.n	2704 <__swsetup_r+0xb8>
    2728:	20000004 	.word	0x20000004
    272c:	000028a0 	.word	0x000028a0
    2730:	000028c0 	.word	0x000028c0
    2734:	00002880 	.word	0x00002880

00002738 <_close_r>:
    2738:	2300      	movs	r3, #0
    273a:	b570      	push	{r4, r5, r6, lr}
    273c:	4c06      	ldr	r4, [pc, #24]	; (2758 <_close_r+0x20>)
    273e:	0005      	movs	r5, r0
    2740:	0008      	movs	r0, r1
    2742:	6023      	str	r3, [r4, #0]
    2744:	f7fe fe5e 	bl	1404 <_close>
    2748:	1c43      	adds	r3, r0, #1
    274a:	d103      	bne.n	2754 <_close_r+0x1c>
    274c:	6823      	ldr	r3, [r4, #0]
    274e:	2b00      	cmp	r3, #0
    2750:	d000      	beq.n	2754 <_close_r+0x1c>
    2752:	602b      	str	r3, [r5, #0]
    2754:	bd70      	pop	{r4, r5, r6, pc}
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	200001bc 	.word	0x200001bc

0000275c <_fstat_r>:
    275c:	2300      	movs	r3, #0
    275e:	b570      	push	{r4, r5, r6, lr}
    2760:	4c06      	ldr	r4, [pc, #24]	; (277c <_fstat_r+0x20>)
    2762:	0005      	movs	r5, r0
    2764:	0008      	movs	r0, r1
    2766:	0011      	movs	r1, r2
    2768:	6023      	str	r3, [r4, #0]
    276a:	f7fe fe4e 	bl	140a <_fstat>
    276e:	1c43      	adds	r3, r0, #1
    2770:	d103      	bne.n	277a <_fstat_r+0x1e>
    2772:	6823      	ldr	r3, [r4, #0]
    2774:	2b00      	cmp	r3, #0
    2776:	d000      	beq.n	277a <_fstat_r+0x1e>
    2778:	602b      	str	r3, [r5, #0]
    277a:	bd70      	pop	{r4, r5, r6, pc}
    277c:	200001bc 	.word	0x200001bc

00002780 <_isatty_r>:
    2780:	2300      	movs	r3, #0
    2782:	b570      	push	{r4, r5, r6, lr}
    2784:	4c06      	ldr	r4, [pc, #24]	; (27a0 <_isatty_r+0x20>)
    2786:	0005      	movs	r5, r0
    2788:	0008      	movs	r0, r1
    278a:	6023      	str	r3, [r4, #0]
    278c:	f7fe fe42 	bl	1414 <_isatty>
    2790:	1c43      	adds	r3, r0, #1
    2792:	d103      	bne.n	279c <_isatty_r+0x1c>
    2794:	6823      	ldr	r3, [r4, #0]
    2796:	2b00      	cmp	r3, #0
    2798:	d000      	beq.n	279c <_isatty_r+0x1c>
    279a:	602b      	str	r3, [r5, #0]
    279c:	bd70      	pop	{r4, r5, r6, pc}
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	200001bc 	.word	0x200001bc

000027a4 <_lseek_r>:
    27a4:	b570      	push	{r4, r5, r6, lr}
    27a6:	0005      	movs	r5, r0
    27a8:	0008      	movs	r0, r1
    27aa:	0011      	movs	r1, r2
    27ac:	2200      	movs	r2, #0
    27ae:	4c06      	ldr	r4, [pc, #24]	; (27c8 <_lseek_r+0x24>)
    27b0:	6022      	str	r2, [r4, #0]
    27b2:	001a      	movs	r2, r3
    27b4:	f7fe fe30 	bl	1418 <_lseek>
    27b8:	1c43      	adds	r3, r0, #1
    27ba:	d103      	bne.n	27c4 <_lseek_r+0x20>
    27bc:	6823      	ldr	r3, [r4, #0]
    27be:	2b00      	cmp	r3, #0
    27c0:	d000      	beq.n	27c4 <_lseek_r+0x20>
    27c2:	602b      	str	r3, [r5, #0]
    27c4:	bd70      	pop	{r4, r5, r6, pc}
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	200001bc 	.word	0x200001bc

000027cc <memchr>:
    27cc:	b2c9      	uxtb	r1, r1
    27ce:	1882      	adds	r2, r0, r2
    27d0:	4290      	cmp	r0, r2
    27d2:	d101      	bne.n	27d8 <memchr+0xc>
    27d4:	2000      	movs	r0, #0
    27d6:	4770      	bx	lr
    27d8:	7803      	ldrb	r3, [r0, #0]
    27da:	428b      	cmp	r3, r1
    27dc:	d0fb      	beq.n	27d6 <memchr+0xa>
    27de:	3001      	adds	r0, #1
    27e0:	e7f6      	b.n	27d0 <memchr+0x4>

000027e2 <__malloc_lock>:
    27e2:	4770      	bx	lr

000027e4 <__malloc_unlock>:
    27e4:	4770      	bx	lr
	...

000027e8 <_read_r>:
    27e8:	b570      	push	{r4, r5, r6, lr}
    27ea:	0005      	movs	r5, r0
    27ec:	0008      	movs	r0, r1
    27ee:	0011      	movs	r1, r2
    27f0:	2200      	movs	r2, #0
    27f2:	4c06      	ldr	r4, [pc, #24]	; (280c <_read_r+0x24>)
    27f4:	6022      	str	r2, [r4, #0]
    27f6:	001a      	movs	r2, r3
    27f8:	f7fe fda8 	bl	134c <_read>
    27fc:	1c43      	adds	r3, r0, #1
    27fe:	d103      	bne.n	2808 <_read_r+0x20>
    2800:	6823      	ldr	r3, [r4, #0]
    2802:	2b00      	cmp	r3, #0
    2804:	d000      	beq.n	2808 <_read_r+0x20>
    2806:	602b      	str	r3, [r5, #0]
    2808:	bd70      	pop	{r4, r5, r6, pc}
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	200001bc 	.word	0x200001bc
    2810:	42000800 	.word	0x42000800
    2814:	42000c00 	.word	0x42000c00
    2818:	42001000 	.word	0x42001000
    281c:	42001400 	.word	0x42001400
    2820:	42001800 	.word	0x42001800
    2824:	42001c00 	.word	0x42001c00
    2828:	00000cda 	.word	0x00000cda
    282c:	00000cd6 	.word	0x00000cd6
    2830:	00000cd6 	.word	0x00000cd6
    2834:	00000d38 	.word	0x00000d38
    2838:	00000d38 	.word	0x00000d38
    283c:	00000cee 	.word	0x00000cee
    2840:	00000ce0 	.word	0x00000ce0
    2844:	00000cf4 	.word	0x00000cf4
    2848:	00000d26 	.word	0x00000d26
    284c:	00000dc0 	.word	0x00000dc0
    2850:	00000da0 	.word	0x00000da0
    2854:	00000da0 	.word	0x00000da0
    2858:	00000e2c 	.word	0x00000e2c
    285c:	00000db2 	.word	0x00000db2
    2860:	00000dce 	.word	0x00000dce
    2864:	00000da4 	.word	0x00000da4
    2868:	00000ddc 	.word	0x00000ddc
    286c:	00000e1c 	.word	0x00000e1c
    2870:	746f6f42 	.word	0x746f6f42
    2874:	64616f6c 	.word	0x64616f6c
    2878:	00007265 	.word	0x00007265

0000287c <_global_impure_ptr>:
    287c:	20000008                                ... 

00002880 <__sf_fake_stderr>:
	...

000028a0 <__sf_fake_stdin>:
	...

000028c0 <__sf_fake_stdout>:
	...
    28e0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    28f0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2900:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2910:	00006665                                ef..

00002914 <_init>:
    2914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	bcf8      	pop	{r3, r4, r5, r6, r7}
    291a:	bc08      	pop	{r3}
    291c:	469e      	mov	lr, r3
    291e:	4770      	bx	lr

00002920 <__init_array_start>:
    2920:	000000dd 	.word	0x000000dd

00002924 <_fini>:
    2924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2926:	46c0      	nop			; (mov r8, r8)
    2928:	bcf8      	pop	{r3, r4, r5, r6, r7}
    292a:	bc08      	pop	{r3}
    292c:	469e      	mov	lr, r3
    292e:	4770      	bx	lr

00002930 <__fini_array_start>:
    2930:	000000b5 	.word	0x000000b5
