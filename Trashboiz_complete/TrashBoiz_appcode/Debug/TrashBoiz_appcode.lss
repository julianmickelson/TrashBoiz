
TrashBoiz_appcode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000154bc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000238  20000000  000154bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000084c  20000238  000156f4  00030238  2**2
                  ALLOC
  3 .stack        00002004  20000a84  00015f40  00030238  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY
  6 .debug_info   00063a5d  00000000  00000000  0003032a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007723  00000000  00000000  00093d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000079b3  00000000  00000000  0009b4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001580  00000000  00000000  000a2e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013d0  00000000  00000000  000a43dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010369  00000000  00000000  000a57ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00020673  00000000  00000000  000b5b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095ace  00000000  00000000  000d6189  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005a74  00000000  00000000  0016bc58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	88 2a 00 20 f9 be 00 00 f1 bf 00 00 f1 bf 00 00     .*. ............
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	f1 bf 00 00 00 00 00 00 00 00 00 00 f1 bf 00 00     ................
      3c:	f1 bf 00 00 f1 bf 00 00 f1 bf 00 00 f1 bf 00 00     ................

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      4c:	45 7d 00 00 f5 76 00 00 f1 bf 00 00 f1 bf 00 00     E}...v..........
		if (time.hour == 0) {
      5c:	f1 bf 00 00 f1 bf 00 00 b1 a1 00 00 c9 a1 00 00     ................
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	e1 a1 00 00 f9 a1 00 00 11 a2 00 00 29 a2 00 00     ............)...
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      7c:	41 be 00 00 55 be 00 00 69 be 00 00 f1 bf 00 00     A...U...i.......
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      8c:	f1 bf 00 00 f1 bf 00 00 00 00 00 00 00 00 00 00     ................
      9c:	f1 bf 00 00 f1 bf 00 00 f1 bf 00 00 f1 bf 00 00     ................
			alarm.time.hour = alarm.time.hour % 12;
      ac:	f1 bf 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	20000238 	.word	0x20000238
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	000154bc 	.word	0x000154bc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000023c 	.word	0x2000023c
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	000154bc 	.word	0x000154bc
     10c:	000154bc 	.word	0x000154bc
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     198:	b580      	push	{r7, lr}
     19a:	b082      	sub	sp, #8
     19c:	af00      	add	r7, sp, #0
     19e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1a0:	687b      	ldr	r3, [r7, #4]
     1a2:	2200      	movs	r2, #0
     1a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1a6:	687b      	ldr	r3, [r7, #4]
     1a8:	2201      	movs	r2, #1
     1aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	2200      	movs	r2, #0
     1b0:	709a      	strb	r2, [r3, #2]
}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	46bd      	mov	sp, r7
     1b6:	b002      	add	sp, #8
     1b8:	bd80      	pop	{r7, pc}
	...

000001bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	0002      	movs	r2, r0
     1c4:	1dfb      	adds	r3, r7, #7
     1c6:	701a      	strb	r2, [r3, #0]
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	1c0a      	adds	r2, r1, #0
     1cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1ce:	1dfb      	adds	r3, r7, #7
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	0018      	movs	r0, r3
     1d4:	4b0d      	ldr	r3, [pc, #52]	; (20c <port_pin_set_output_level+0x50>)
     1d6:	4798      	blx	r3
     1d8:	0003      	movs	r3, r0
     1da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1dc:	1dfb      	adds	r3, r7, #7
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	221f      	movs	r2, #31
     1e2:	4013      	ands	r3, r2
     1e4:	2201      	movs	r2, #1
     1e6:	409a      	lsls	r2, r3
     1e8:	0013      	movs	r3, r2
     1ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1ec:	1dbb      	adds	r3, r7, #6
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b00      	cmp	r3, #0
     1f2:	d003      	beq.n	1fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	68ba      	ldr	r2, [r7, #8]
     1f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1fa:	e002      	b.n	202 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1fc:	68fb      	ldr	r3, [r7, #12]
     1fe:	68ba      	ldr	r2, [r7, #8]
     200:	615a      	str	r2, [r3, #20]
}
     202:	46c0      	nop			; (mov r8, r8)
     204:	46bd      	mov	sp, r7
     206:	b004      	add	sp, #16
     208:	bd80      	pop	{r7, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	00000175 	.word	0x00000175

00000210 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     210:	b580      	push	{r7, lr}
     212:	b084      	sub	sp, #16
     214:	af00      	add	r7, sp, #0
     216:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     218:	687b      	ldr	r3, [r7, #4]
     21a:	681b      	ldr	r3, [r3, #0]
     21c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     21e:	68fb      	ldr	r3, [r7, #12]
     220:	69db      	ldr	r3, [r3, #28]
     222:	1e5a      	subs	r2, r3, #1
     224:	4193      	sbcs	r3, r2
     226:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     228:	0018      	movs	r0, r3
     22a:	46bd      	mov	sp, r7
     22c:	b004      	add	sp, #16
     22e:	bd80      	pop	{r7, pc}

00000230 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     230:	b580      	push	{r7, lr}
     232:	b082      	sub	sp, #8
     234:	af00      	add	r7, sp, #0
     236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     238:	687b      	ldr	r3, [r7, #4]
     23a:	2201      	movs	r2, #1
     23c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     23e:	687b      	ldr	r3, [r7, #4]
     240:	2200      	movs	r2, #0
     242:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     244:	687b      	ldr	r3, [r7, #4]
     246:	2200      	movs	r2, #0
     248:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	22c0      	movs	r2, #192	; 0xc0
     24e:	0392      	lsls	r2, r2, #14
     250:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     252:	687b      	ldr	r3, [r7, #4]
     254:	2200      	movs	r2, #0
     256:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     258:	687b      	ldr	r3, [r7, #4]
     25a:	2200      	movs	r2, #0
     25c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     25e:	687b      	ldr	r3, [r7, #4]
     260:	2201      	movs	r2, #1
     262:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2201      	movs	r2, #1
     268:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     26a:	687b      	ldr	r3, [r7, #4]
     26c:	2200      	movs	r2, #0
     26e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     270:	687b      	ldr	r3, [r7, #4]
     272:	2224      	movs	r2, #36	; 0x24
     274:	2100      	movs	r1, #0
     276:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     278:	687b      	ldr	r3, [r7, #4]
     27a:	3318      	adds	r3, #24
     27c:	220c      	movs	r2, #12
     27e:	2100      	movs	r1, #0
     280:	0018      	movs	r0, r3
     282:	4b0a      	ldr	r3, [pc, #40]	; (2ac <spi_get_config_defaults+0x7c>)
     284:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     286:	687b      	ldr	r3, [r7, #4]
     288:	4a09      	ldr	r2, [pc, #36]	; (2b0 <spi_get_config_defaults+0x80>)
     28a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     28c:	687b      	ldr	r3, [r7, #4]
     28e:	2200      	movs	r2, #0
     290:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     292:	687b      	ldr	r3, [r7, #4]
     294:	2200      	movs	r2, #0
     296:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2200      	movs	r2, #0
     29c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	2200      	movs	r2, #0
     2a2:	635a      	str	r2, [r3, #52]	; 0x34

};
     2a4:	46c0      	nop			; (mov r8, r8)
     2a6:	46bd      	mov	sp, r7
     2a8:	b002      	add	sp, #8
     2aa:	bd80      	pop	{r7, pc}
     2ac:	00011fcb 	.word	0x00011fcb
     2b0:	000186a0 	.word	0x000186a0

000002b4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     2b4:	b580      	push	{r7, lr}
     2b6:	b082      	sub	sp, #8
     2b8:	af00      	add	r7, sp, #0
     2ba:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	220a      	movs	r2, #10
     2c0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     2c2:	687b      	ldr	r3, [r7, #4]
     2c4:	2200      	movs	r2, #0
     2c6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     2c8:	687b      	ldr	r3, [r7, #4]
     2ca:	2200      	movs	r2, #0
     2cc:	709a      	strb	r2, [r3, #2]
}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	46bd      	mov	sp, r7
     2d2:	b002      	add	sp, #8
     2d4:	bd80      	pop	{r7, pc}
	...

000002d8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     2d8:	b580      	push	{r7, lr}
     2da:	b084      	sub	sp, #16
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
     2e0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     2e2:	683b      	ldr	r3, [r7, #0]
     2e4:	781a      	ldrb	r2, [r3, #0]
     2e6:	687b      	ldr	r3, [r7, #4]
     2e8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     2ea:	683b      	ldr	r3, [r7, #0]
     2ec:	785a      	ldrb	r2, [r3, #1]
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     2f2:	683b      	ldr	r3, [r7, #0]
     2f4:	789a      	ldrb	r2, [r3, #2]
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fa:	230c      	movs	r3, #12
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	0018      	movs	r0, r3
     300:	4b0b      	ldr	r3, [pc, #44]	; (330 <spi_attach_slave+0x58>)
     302:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     304:	230c      	movs	r3, #12
     306:	18fb      	adds	r3, r7, r3
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     30c:	687b      	ldr	r3, [r7, #4]
     30e:	781b      	ldrb	r3, [r3, #0]
     310:	220c      	movs	r2, #12
     312:	18ba      	adds	r2, r7, r2
     314:	0011      	movs	r1, r2
     316:	0018      	movs	r0, r3
     318:	4b06      	ldr	r3, [pc, #24]	; (334 <spi_attach_slave+0x5c>)
     31a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	781b      	ldrb	r3, [r3, #0]
     320:	2101      	movs	r1, #1
     322:	0018      	movs	r0, r3
     324:	4b04      	ldr	r3, [pc, #16]	; (338 <spi_attach_slave+0x60>)
     326:	4798      	blx	r3
}
     328:	46c0      	nop			; (mov r8, r8)
     32a:	46bd      	mov	sp, r7
     32c:	b004      	add	sp, #16
     32e:	bd80      	pop	{r7, pc}
     330:	00000199 	.word	0x00000199
     334:	00008735 	.word	0x00008735
     338:	000001bd 	.word	0x000001bd

0000033c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     33c:	b580      	push	{r7, lr}
     33e:	b084      	sub	sp, #16
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     344:	687b      	ldr	r3, [r7, #4]
     346:	681b      	ldr	r3, [r3, #0]
     348:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	687b      	ldr	r3, [r7, #4]
     34e:	0018      	movs	r0, r3
     350:	4b06      	ldr	r3, [pc, #24]	; (36c <spi_enable+0x30>)
     352:	4798      	blx	r3
     354:	1e03      	subs	r3, r0, #0
     356:	d1f9      	bne.n	34c <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     358:	68fb      	ldr	r3, [r7, #12]
     35a:	681b      	ldr	r3, [r3, #0]
     35c:	2202      	movs	r2, #2
     35e:	431a      	orrs	r2, r3
     360:	68fb      	ldr	r3, [r7, #12]
     362:	601a      	str	r2, [r3, #0]
}
     364:	46c0      	nop			; (mov r8, r8)
     366:	46bd      	mov	sp, r7
     368:	b004      	add	sp, #16
     36a:	bd80      	pop	{r7, pc}
     36c:	00000211 	.word	0x00000211

00000370 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     370:	b580      	push	{r7, lr}
     372:	b084      	sub	sp, #16
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     378:	687b      	ldr	r3, [r7, #4]
     37a:	681b      	ldr	r3, [r3, #0]
     37c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     37e:	46c0      	nop			; (mov r8, r8)
     380:	687b      	ldr	r3, [r7, #4]
     382:	0018      	movs	r0, r3
     384:	4b07      	ldr	r3, [pc, #28]	; (3a4 <spi_disable+0x34>)
     386:	4798      	blx	r3
     388:	1e03      	subs	r3, r0, #0
     38a:	d1f9      	bne.n	380 <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     38c:	68fb      	ldr	r3, [r7, #12]
     38e:	681b      	ldr	r3, [r3, #0]
     390:	2202      	movs	r2, #2
     392:	4393      	bics	r3, r2
     394:	001a      	movs	r2, r3
     396:	68fb      	ldr	r3, [r7, #12]
     398:	601a      	str	r2, [r3, #0]
}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	46bd      	mov	sp, r7
     39e:	b004      	add	sp, #16
     3a0:	bd80      	pop	{r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	00000211 	.word	0x00000211

000003a8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b084      	sub	sp, #16
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	681b      	ldr	r3, [r3, #0]
     3b4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     3b6:	68fb      	ldr	r3, [r7, #12]
     3b8:	7e1b      	ldrb	r3, [r3, #24]
     3ba:	b2db      	uxtb	r3, r3
     3bc:	001a      	movs	r2, r3
     3be:	2302      	movs	r3, #2
     3c0:	4013      	ands	r3, r2
     3c2:	1e5a      	subs	r2, r3, #1
     3c4:	4193      	sbcs	r3, r2
     3c6:	b2db      	uxtb	r3, r3
}
     3c8:	0018      	movs	r0, r3
     3ca:	46bd      	mov	sp, r7
     3cc:	b004      	add	sp, #16
     3ce:	bd80      	pop	{r7, pc}

000003d0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b084      	sub	sp, #16
     3d4:	af00      	add	r7, sp, #0
     3d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	681b      	ldr	r3, [r3, #0]
     3dc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3de:	68fb      	ldr	r3, [r7, #12]
     3e0:	7e1b      	ldrb	r3, [r3, #24]
     3e2:	b2db      	uxtb	r3, r3
     3e4:	001a      	movs	r2, r3
     3e6:	2301      	movs	r3, #1
     3e8:	4013      	ands	r3, r2
     3ea:	1e5a      	subs	r2, r3, #1
     3ec:	4193      	sbcs	r3, r2
     3ee:	b2db      	uxtb	r3, r3
}
     3f0:	0018      	movs	r0, r3
     3f2:	46bd      	mov	sp, r7
     3f4:	b004      	add	sp, #16
     3f6:	bd80      	pop	{r7, pc}

000003f8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     3f8:	b580      	push	{r7, lr}
     3fa:	b084      	sub	sp, #16
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     400:	687b      	ldr	r3, [r7, #4]
     402:	681b      	ldr	r3, [r3, #0]
     404:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     406:	68fb      	ldr	r3, [r7, #12]
     408:	7e1b      	ldrb	r3, [r3, #24]
     40a:	b2db      	uxtb	r3, r3
     40c:	001a      	movs	r2, r3
     40e:	2304      	movs	r3, #4
     410:	4013      	ands	r3, r2
     412:	1e5a      	subs	r2, r3, #1
     414:	4193      	sbcs	r3, r2
     416:	b2db      	uxtb	r3, r3
}
     418:	0018      	movs	r0, r3
     41a:	46bd      	mov	sp, r7
     41c:	b004      	add	sp, #16
     41e:	bd80      	pop	{r7, pc}

00000420 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     420:	b580      	push	{r7, lr}
     422:	b084      	sub	sp, #16
     424:	af00      	add	r7, sp, #0
     426:	6078      	str	r0, [r7, #4]
     428:	000a      	movs	r2, r1
     42a:	1cbb      	adds	r3, r7, #2
     42c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     42e:	687b      	ldr	r3, [r7, #4]
     430:	681b      	ldr	r3, [r3, #0]
     432:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     434:	687b      	ldr	r3, [r7, #4]
     436:	0018      	movs	r0, r3
     438:	4b0a      	ldr	r3, [pc, #40]	; (464 <spi_write+0x44>)
     43a:	4798      	blx	r3
     43c:	0003      	movs	r3, r0
     43e:	001a      	movs	r2, r3
     440:	2301      	movs	r3, #1
     442:	4053      	eors	r3, r2
     444:	b2db      	uxtb	r3, r3
     446:	2b00      	cmp	r3, #0
     448:	d001      	beq.n	44e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     44a:	2305      	movs	r3, #5
     44c:	e006      	b.n	45c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     44e:	1cbb      	adds	r3, r7, #2
     450:	881b      	ldrh	r3, [r3, #0]
     452:	05db      	lsls	r3, r3, #23
     454:	0dda      	lsrs	r2, r3, #23
     456:	68fb      	ldr	r3, [r7, #12]
     458:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     45a:	2300      	movs	r3, #0
}
     45c:	0018      	movs	r0, r3
     45e:	46bd      	mov	sp, r7
     460:	b004      	add	sp, #16
     462:	bd80      	pop	{r7, pc}
     464:	000003d1 	.word	0x000003d1

00000468 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     468:	b580      	push	{r7, lr}
     46a:	b084      	sub	sp, #16
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
     470:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     472:	687b      	ldr	r3, [r7, #4]
     474:	681b      	ldr	r3, [r3, #0]
     476:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     478:	687b      	ldr	r3, [r7, #4]
     47a:	0018      	movs	r0, r3
     47c:	4b1d      	ldr	r3, [pc, #116]	; (4f4 <spi_read+0x8c>)
     47e:	4798      	blx	r3
     480:	0003      	movs	r3, r0
     482:	001a      	movs	r2, r3
     484:	2301      	movs	r3, #1
     486:	4053      	eors	r3, r2
     488:	b2db      	uxtb	r3, r3
     48a:	2b00      	cmp	r3, #0
     48c:	d001      	beq.n	492 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     48e:	2310      	movs	r3, #16
     490:	e02c      	b.n	4ec <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     492:	230f      	movs	r3, #15
     494:	18fb      	adds	r3, r7, r3
     496:	2200      	movs	r2, #0
     498:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     49a:	68bb      	ldr	r3, [r7, #8]
     49c:	8b5b      	ldrh	r3, [r3, #26]
     49e:	b29b      	uxth	r3, r3
     4a0:	001a      	movs	r2, r3
     4a2:	2304      	movs	r3, #4
     4a4:	4013      	ands	r3, r2
     4a6:	d00b      	beq.n	4c0 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
     4a8:	230f      	movs	r3, #15
     4aa:	18fb      	adds	r3, r7, r3
     4ac:	221e      	movs	r2, #30
     4ae:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     4b0:	68bb      	ldr	r3, [r7, #8]
     4b2:	8b5b      	ldrh	r3, [r3, #26]
     4b4:	b29b      	uxth	r3, r3
     4b6:	2204      	movs	r2, #4
     4b8:	4313      	orrs	r3, r2
     4ba:	b29a      	uxth	r2, r3
     4bc:	68bb      	ldr	r3, [r7, #8]
     4be:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	799b      	ldrb	r3, [r3, #6]
     4c4:	2b01      	cmp	r3, #1
     4c6:	d108      	bne.n	4da <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4c8:	68bb      	ldr	r3, [r7, #8]
     4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     4cc:	b29b      	uxth	r3, r3
     4ce:	05db      	lsls	r3, r3, #23
     4d0:	0ddb      	lsrs	r3, r3, #23
     4d2:	b29a      	uxth	r2, r3
     4d4:	683b      	ldr	r3, [r7, #0]
     4d6:	801a      	strh	r2, [r3, #0]
     4d8:	e005      	b.n	4e6 <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4da:	68bb      	ldr	r3, [r7, #8]
     4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     4de:	b2db      	uxtb	r3, r3
     4e0:	b29a      	uxth	r2, r3
     4e2:	683b      	ldr	r3, [r7, #0]
     4e4:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     4e6:	230f      	movs	r3, #15
     4e8:	18fb      	adds	r3, r7, r3
     4ea:	781b      	ldrb	r3, [r3, #0]
}
     4ec:	0018      	movs	r0, r3
     4ee:	46bd      	mov	sp, r7
     4f0:	b004      	add	sp, #16
     4f2:	bd80      	pop	{r7, pc}
     4f4:	000003f9 	.word	0x000003f9

000004f8 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     4f8:	b580      	push	{r7, lr}
     4fa:	b086      	sub	sp, #24
     4fc:	af00      	add	r7, sp, #0
     4fe:	60f8      	str	r0, [r7, #12]
     500:	60b9      	str	r1, [r7, #8]
     502:	1dbb      	adds	r3, r7, #6
     504:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     506:	2313      	movs	r3, #19
     508:	18fb      	adds	r3, r7, r3
     50a:	2200      	movs	r2, #0
     50c:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     50e:	2317      	movs	r3, #23
     510:	18fb      	adds	r3, r7, r3
     512:	2200      	movs	r2, #0
     514:	701a      	strb	r2, [r3, #0]
     516:	2316      	movs	r3, #22
     518:	18fb      	adds	r3, r7, r3
     51a:	2200      	movs	r2, #0
     51c:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     51e:	2314      	movs	r3, #20
     520:	18fb      	adds	r3, r7, r3
     522:	2200      	movs	r2, #0
     524:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     526:	2310      	movs	r3, #16
     528:	18fb      	adds	r3, r7, r3
     52a:	2200      	movs	r2, #0
     52c:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
     52e:	68fb      	ldr	r3, [r7, #12]
     530:	2b00      	cmp	r3, #0
     532:	d107      	bne.n	544 <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
     534:	2313      	movs	r3, #19
     536:	18fb      	adds	r3, r7, r3
     538:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     53a:	2317      	movs	r3, #23
     53c:	18fb      	adds	r3, r7, r3
     53e:	2201      	movs	r2, #1
     540:	701a      	strb	r2, [r3, #0]
     542:	e00d      	b.n	560 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
     544:	68bb      	ldr	r3, [r7, #8]
     546:	2b00      	cmp	r3, #0
     548:	d107      	bne.n	55a <spi_rw+0x62>
		pu8Miso = &u8Dummy;
     54a:	2313      	movs	r3, #19
     54c:	18fb      	adds	r3, r7, r3
     54e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     550:	2316      	movs	r3, #22
     552:	18fb      	adds	r3, r7, r3
     554:	2201      	movs	r2, #1
     556:	701a      	strb	r2, [r3, #0]
     558:	e002      	b.n	560 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
     55a:	2306      	movs	r3, #6
     55c:	425b      	negs	r3, r3
     55e:	e06a      	b.n	636 <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
     560:	4937      	ldr	r1, [pc, #220]	; (640 <spi_rw+0x148>)
     562:	4b38      	ldr	r3, [pc, #224]	; (644 <spi_rw+0x14c>)
     564:	2201      	movs	r2, #1
     566:	0018      	movs	r0, r3
     568:	4b37      	ldr	r3, [pc, #220]	; (648 <spi_rw+0x150>)
     56a:	4798      	blx	r3

	while (u16Sz) {
     56c:	e04c      	b.n	608 <spi_rw+0x110>
		txd_data = *pu8Mosi;
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	781a      	ldrb	r2, [r3, #0]
     572:	2314      	movs	r3, #20
     574:	18fb      	adds	r3, r7, r3
     576:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     578:	46c0      	nop			; (mov r8, r8)
     57a:	4b32      	ldr	r3, [pc, #200]	; (644 <spi_rw+0x14c>)
     57c:	0018      	movs	r0, r3
     57e:	4b33      	ldr	r3, [pc, #204]	; (64c <spi_rw+0x154>)
     580:	4798      	blx	r3
     582:	0003      	movs	r3, r0
     584:	001a      	movs	r2, r3
     586:	2301      	movs	r3, #1
     588:	4053      	eors	r3, r2
     58a:	b2db      	uxtb	r3, r3
     58c:	2b00      	cmp	r3, #0
     58e:	d1f4      	bne.n	57a <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     590:	46c0      	nop			; (mov r8, r8)
     592:	2314      	movs	r3, #20
     594:	18fb      	adds	r3, r7, r3
     596:	881a      	ldrh	r2, [r3, #0]
     598:	4b2a      	ldr	r3, [pc, #168]	; (644 <spi_rw+0x14c>)
     59a:	0011      	movs	r1, r2
     59c:	0018      	movs	r0, r3
     59e:	4b2c      	ldr	r3, [pc, #176]	; (650 <spi_rw+0x158>)
     5a0:	4798      	blx	r3
     5a2:	1e03      	subs	r3, r0, #0
     5a4:	d1f5      	bne.n	592 <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	4b26      	ldr	r3, [pc, #152]	; (644 <spi_rw+0x14c>)
     5aa:	0018      	movs	r0, r3
     5ac:	4b29      	ldr	r3, [pc, #164]	; (654 <spi_rw+0x15c>)
     5ae:	4798      	blx	r3
     5b0:	0003      	movs	r3, r0
     5b2:	001a      	movs	r2, r3
     5b4:	2301      	movs	r3, #1
     5b6:	4053      	eors	r3, r2
     5b8:	b2db      	uxtb	r3, r3
     5ba:	2b00      	cmp	r3, #0
     5bc:	d1f4      	bne.n	5a8 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	2310      	movs	r3, #16
     5c2:	18fa      	adds	r2, r7, r3
     5c4:	4b1f      	ldr	r3, [pc, #124]	; (644 <spi_rw+0x14c>)
     5c6:	0011      	movs	r1, r2
     5c8:	0018      	movs	r0, r3
     5ca:	4b23      	ldr	r3, [pc, #140]	; (658 <spi_rw+0x160>)
     5cc:	4798      	blx	r3
     5ce:	1e03      	subs	r3, r0, #0
     5d0:	d1f6      	bne.n	5c0 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
     5d2:	2310      	movs	r3, #16
     5d4:	18fb      	adds	r3, r7, r3
     5d6:	881b      	ldrh	r3, [r3, #0]
     5d8:	b2da      	uxtb	r2, r3
     5da:	68bb      	ldr	r3, [r7, #8]
     5dc:	701a      	strb	r2, [r3, #0]

		u16Sz--;
     5de:	1dbb      	adds	r3, r7, #6
     5e0:	881a      	ldrh	r2, [r3, #0]
     5e2:	1dbb      	adds	r3, r7, #6
     5e4:	3a01      	subs	r2, #1
     5e6:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     5e8:	2316      	movs	r3, #22
     5ea:	18fb      	adds	r3, r7, r3
     5ec:	781b      	ldrb	r3, [r3, #0]
     5ee:	2b00      	cmp	r3, #0
     5f0:	d102      	bne.n	5f8 <spi_rw+0x100>
			pu8Miso++;
     5f2:	68bb      	ldr	r3, [r7, #8]
     5f4:	3301      	adds	r3, #1
     5f6:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     5f8:	2317      	movs	r3, #23
     5fa:	18fb      	adds	r3, r7, r3
     5fc:	781b      	ldrb	r3, [r3, #0]
     5fe:	2b00      	cmp	r3, #0
     600:	d102      	bne.n	608 <spi_rw+0x110>
			pu8Mosi++;
     602:	68fb      	ldr	r3, [r7, #12]
     604:	3301      	adds	r3, #1
     606:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
     608:	1dbb      	adds	r3, r7, #6
     60a:	881b      	ldrh	r3, [r3, #0]
     60c:	2b00      	cmp	r3, #0
     60e:	d1ae      	bne.n	56e <spi_rw+0x76>
	}

	while (!spi_is_write_complete(&master))
     610:	46c0      	nop			; (mov r8, r8)
     612:	4b0c      	ldr	r3, [pc, #48]	; (644 <spi_rw+0x14c>)
     614:	0018      	movs	r0, r3
     616:	4b11      	ldr	r3, [pc, #68]	; (65c <spi_rw+0x164>)
     618:	4798      	blx	r3
     61a:	0003      	movs	r3, r0
     61c:	001a      	movs	r2, r3
     61e:	2301      	movs	r3, #1
     620:	4053      	eors	r3, r2
     622:	b2db      	uxtb	r3, r3
     624:	2b00      	cmp	r3, #0
     626:	d1f4      	bne.n	612 <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
     628:	4905      	ldr	r1, [pc, #20]	; (640 <spi_rw+0x148>)
     62a:	4b06      	ldr	r3, [pc, #24]	; (644 <spi_rw+0x14c>)
     62c:	2200      	movs	r2, #0
     62e:	0018      	movs	r0, r3
     630:	4b05      	ldr	r3, [pc, #20]	; (648 <spi_rw+0x150>)
     632:	4798      	blx	r3

	return M2M_SUCCESS;
     634:	2300      	movs	r3, #0
}
     636:	0018      	movs	r0, r3
     638:	46bd      	mov	sp, r7
     63a:	b006      	add	sp, #24
     63c:	bd80      	pop	{r7, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	20000404 	.word	0x20000404
     644:	20000408 	.word	0x20000408
     648:	0000861d 	.word	0x0000861d
     64c:	000003d1 	.word	0x000003d1
     650:	00000421 	.word	0x00000421
     654:	000003f9 	.word	0x000003f9
     658:	00000469 	.word	0x00000469
     65c:	000003a9 	.word	0x000003a9

00000660 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     660:	b580      	push	{r7, lr}
     662:	b092      	sub	sp, #72	; 0x48
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     668:	2347      	movs	r3, #71	; 0x47
     66a:	18fb      	adds	r3, r7, r3
     66c:	2200      	movs	r2, #0
     66e:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     670:	2308      	movs	r3, #8
     672:	18fb      	adds	r3, r7, r3
     674:	0018      	movs	r0, r3
     676:	4b26      	ldr	r3, [pc, #152]	; (710 <nm_bus_init+0xb0>)
     678:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     67a:	2308      	movs	r3, #8
     67c:	18fb      	adds	r3, r7, r3
     67e:	220e      	movs	r2, #14
     680:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     682:	2308      	movs	r3, #8
     684:	18fa      	adds	r2, r7, r3
     686:	4b23      	ldr	r3, [pc, #140]	; (714 <nm_bus_init+0xb4>)
     688:	0011      	movs	r1, r2
     68a:	0018      	movs	r0, r3
     68c:	4b22      	ldr	r3, [pc, #136]	; (718 <nm_bus_init+0xb8>)
     68e:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     690:	230c      	movs	r3, #12
     692:	18fb      	adds	r3, r7, r3
     694:	0018      	movs	r0, r3
     696:	4b21      	ldr	r3, [pc, #132]	; (71c <nm_bus_init+0xbc>)
     698:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     69a:	230c      	movs	r3, #12
     69c:	18fb      	adds	r3, r7, r3
     69e:	22c0      	movs	r2, #192	; 0xc0
     6a0:	0392      	lsls	r2, r2, #14
     6a2:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     6a4:	230c      	movs	r3, #12
     6a6:	18fb      	adds	r3, r7, r3
     6a8:	4a1d      	ldr	r2, [pc, #116]	; (720 <nm_bus_init+0xc0>)
     6aa:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     6ac:	230c      	movs	r3, #12
     6ae:	18fb      	adds	r3, r7, r3
     6b0:	4a1c      	ldr	r2, [pc, #112]	; (724 <nm_bus_init+0xc4>)
     6b2:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     6b4:	230c      	movs	r3, #12
     6b6:	18fb      	adds	r3, r7, r3
     6b8:	2201      	movs	r2, #1
     6ba:	4252      	negs	r2, r2
     6bc:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     6be:	230c      	movs	r3, #12
     6c0:	18fb      	adds	r3, r7, r3
     6c2:	4a19      	ldr	r2, [pc, #100]	; (728 <nm_bus_init+0xc8>)
     6c4:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     6c6:	230c      	movs	r3, #12
     6c8:	18fb      	adds	r3, r7, r3
     6ca:	2200      	movs	r2, #0
     6cc:	751a      	strb	r2, [r3, #20]

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     6ce:	230c      	movs	r3, #12
     6d0:	18fb      	adds	r3, r7, r3
     6d2:	4a16      	ldr	r2, [pc, #88]	; (72c <nm_bus_init+0xcc>)
     6d4:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     6d6:	230c      	movs	r3, #12
     6d8:	18fa      	adds	r2, r7, r3
     6da:	4915      	ldr	r1, [pc, #84]	; (730 <nm_bus_init+0xd0>)
     6dc:	4b15      	ldr	r3, [pc, #84]	; (734 <nm_bus_init+0xd4>)
     6de:	0018      	movs	r0, r3
     6e0:	4b15      	ldr	r3, [pc, #84]	; (738 <nm_bus_init+0xd8>)
     6e2:	4798      	blx	r3
     6e4:	1e03      	subs	r3, r0, #0
     6e6:	d002      	beq.n	6ee <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
     6e8:	2306      	movs	r3, #6
     6ea:	425b      	negs	r3, r3
     6ec:	e00c      	b.n	708 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
     6ee:	4b11      	ldr	r3, [pc, #68]	; (734 <nm_bus_init+0xd4>)
     6f0:	0018      	movs	r0, r3
     6f2:	4b12      	ldr	r3, [pc, #72]	; (73c <nm_bus_init+0xdc>)
     6f4:	4798      	blx	r3

	nm_bsp_reset();
     6f6:	4b12      	ldr	r3, [pc, #72]	; (740 <nm_bus_init+0xe0>)
     6f8:	4798      	blx	r3
	nm_bsp_sleep(1);
     6fa:	2001      	movs	r0, #1
     6fc:	4b11      	ldr	r3, [pc, #68]	; (744 <nm_bus_init+0xe4>)
     6fe:	4798      	blx	r3
#endif
	return result;
     700:	2347      	movs	r3, #71	; 0x47
     702:	18fb      	adds	r3, r7, r3
     704:	781b      	ldrb	r3, [r3, #0]
     706:	b25b      	sxtb	r3, r3
}
     708:	0018      	movs	r0, r3
     70a:	46bd      	mov	sp, r7
     70c:	b012      	add	sp, #72	; 0x48
     70e:	bd80      	pop	{r7, pc}
     710:	000002b5 	.word	0x000002b5
     714:	20000404 	.word	0x20000404
     718:	000002d9 	.word	0x000002d9
     71c:	00000231 	.word	0x00000231
     720:	000c0002 	.word	0x000c0002
     724:	000d0002 	.word	0x000d0002
     728:	000f0002 	.word	0x000f0002
     72c:	00b71b00 	.word	0x00b71b00
     730:	42001000 	.word	0x42001000
     734:	20000408 	.word	0x20000408
     738:	00008515 	.word	0x00008515
     73c:	0000033d 	.word	0x0000033d
     740:	0000272d 	.word	0x0000272d
     744:	00002771 	.word	0x00002771

00000748 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     748:	b590      	push	{r4, r7, lr}
     74a:	b085      	sub	sp, #20
     74c:	af00      	add	r7, sp, #0
     74e:	0002      	movs	r2, r0
     750:	6039      	str	r1, [r7, #0]
     752:	1dfb      	adds	r3, r7, #7
     754:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     756:	230f      	movs	r3, #15
     758:	18fb      	adds	r3, r7, r3
     75a:	2200      	movs	r2, #0
     75c:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     75e:	1dfb      	adds	r3, r7, #7
     760:	781b      	ldrb	r3, [r3, #0]
     762:	2b03      	cmp	r3, #3
     764:	d10f      	bne.n	786 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     766:	683b      	ldr	r3, [r7, #0]
     768:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     76a:	68bb      	ldr	r3, [r7, #8]
     76c:	6818      	ldr	r0, [r3, #0]
     76e:	68bb      	ldr	r3, [r7, #8]
     770:	6859      	ldr	r1, [r3, #4]
     772:	68bb      	ldr	r3, [r7, #8]
     774:	891b      	ldrh	r3, [r3, #8]
     776:	220f      	movs	r2, #15
     778:	18bc      	adds	r4, r7, r2
     77a:	001a      	movs	r2, r3
     77c:	4b0f      	ldr	r3, [pc, #60]	; (7bc <nm_bus_ioctl+0x74>)
     77e:	4798      	blx	r3
     780:	0003      	movs	r3, r0
     782:	7023      	strb	r3, [r4, #0]
		}
		break;
     784:	e012      	b.n	7ac <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
     786:	230f      	movs	r3, #15
     788:	18fb      	adds	r3, r7, r3
     78a:	22ff      	movs	r2, #255	; 0xff
     78c:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     78e:	2386      	movs	r3, #134	; 0x86
     790:	005a      	lsls	r2, r3, #1
     792:	490b      	ldr	r1, [pc, #44]	; (7c0 <nm_bus_ioctl+0x78>)
     794:	4b0b      	ldr	r3, [pc, #44]	; (7c4 <nm_bus_ioctl+0x7c>)
     796:	0018      	movs	r0, r3
     798:	4b0b      	ldr	r3, [pc, #44]	; (7c8 <nm_bus_ioctl+0x80>)
     79a:	4798      	blx	r3
     79c:	4b0b      	ldr	r3, [pc, #44]	; (7cc <nm_bus_ioctl+0x84>)
     79e:	0018      	movs	r0, r3
     7a0:	4b0b      	ldr	r3, [pc, #44]	; (7d0 <nm_bus_ioctl+0x88>)
     7a2:	4798      	blx	r3
     7a4:	200d      	movs	r0, #13
     7a6:	4b0b      	ldr	r3, [pc, #44]	; (7d4 <nm_bus_ioctl+0x8c>)
     7a8:	4798      	blx	r3
			break;
     7aa:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     7ac:	230f      	movs	r3, #15
     7ae:	18fb      	adds	r3, r7, r3
     7b0:	781b      	ldrb	r3, [r3, #0]
     7b2:	b25b      	sxtb	r3, r3
}
     7b4:	0018      	movs	r0, r3
     7b6:	46bd      	mov	sp, r7
     7b8:	b005      	add	sp, #20
     7ba:	bd90      	pop	{r4, r7, pc}
     7bc:	000004f9 	.word	0x000004f9
     7c0:	000136d0 	.word	0x000136d0
     7c4:	000136a8 	.word	0x000136a8
     7c8:	0001212d 	.word	0x0001212d
     7cc:	000136bc 	.word	0x000136bc
     7d0:	00012249 	.word	0x00012249
     7d4:	00012161 	.word	0x00012161

000007d8 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     7d8:	b580      	push	{r7, lr}
     7da:	b082      	sub	sp, #8
     7dc:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     7de:	1dfb      	adds	r3, r7, #7
     7e0:	2200      	movs	r2, #0
     7e2:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     7e4:	1d3b      	adds	r3, r7, #4
     7e6:	0018      	movs	r0, r3
     7e8:	4b09      	ldr	r3, [pc, #36]	; (810 <nm_bus_deinit+0x38>)
     7ea:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     7ec:	1d3b      	adds	r3, r7, #4
     7ee:	2200      	movs	r2, #0
     7f0:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     7f2:	1d3b      	adds	r3, r7, #4
     7f4:	2200      	movs	r2, #0
     7f6:	705a      	strb	r2, [r3, #1]

#ifdef CONF_WINC_USE_I2C
	i2c_master_disable(&i2c_master_instance);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
     7f8:	4b06      	ldr	r3, [pc, #24]	; (814 <nm_bus_deinit+0x3c>)
     7fa:	0018      	movs	r0, r3
     7fc:	4b06      	ldr	r3, [pc, #24]	; (818 <nm_bus_deinit+0x40>)
     7fe:	4798      	blx	r3
#endif /* CONF_WINC_USE_SPI */
	return result;
     800:	1dfb      	adds	r3, r7, #7
     802:	781b      	ldrb	r3, [r3, #0]
     804:	b25b      	sxtb	r3, r3
}
     806:	0018      	movs	r0, r3
     808:	46bd      	mov	sp, r7
     80a:	b002      	add	sp, #8
     80c:	bd80      	pop	{r7, pc}
     80e:	46c0      	nop			; (mov r8, r8)
     810:	00000199 	.word	0x00000199
     814:	20000408 	.word	0x20000408
     818:	00000371 	.word	0x00000371

0000081c <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
	config->port = 80;
     824:	687b      	ldr	r3, [r7, #4]
     826:	2250      	movs	r2, #80	; 0x50
     828:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	2200      	movs	r2, #0
     82e:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
     830:	687b      	ldr	r3, [r7, #4]
     832:	4a0b      	ldr	r2, [pc, #44]	; (860 <http_client_get_config_defaults+0x44>)
     834:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
     836:	687b      	ldr	r3, [r7, #4]
     838:	2200      	movs	r2, #0
     83a:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	2200      	movs	r2, #0
     840:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
     842:	687b      	ldr	r3, [r7, #4]
     844:	2280      	movs	r2, #128	; 0x80
     846:	0052      	lsls	r2, r2, #1
     848:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	2252      	movs	r2, #82	; 0x52
     84e:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
     850:	687b      	ldr	r3, [r7, #4]
     852:	4a04      	ldr	r2, [pc, #16]	; (864 <http_client_get_config_defaults+0x48>)
     854:	619a      	str	r2, [r3, #24]
}
     856:	46c0      	nop			; (mov r8, r8)
     858:	46bd      	mov	sp, r7
     85a:	b002      	add	sp, #8
     85c:	bd80      	pop	{r7, pc}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	00004e20 	.word	0x00004e20
     864:	000136e0 	.word	0x000136e0

00000868 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
     868:	b590      	push	{r4, r7, lr}
     86a:	b083      	sub	sp, #12
     86c:	af00      	add	r7, sp, #0
     86e:	6078      	str	r0, [r7, #4]
     870:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
     872:	687b      	ldr	r3, [r7, #4]
     874:	2b00      	cmp	r3, #0
     876:	d002      	beq.n	87e <http_client_init+0x16>
     878:	683b      	ldr	r3, [r7, #0]
     87a:	2b00      	cmp	r3, #0
     87c:	d102      	bne.n	884 <http_client_init+0x1c>
		return -EINVAL;
     87e:	2316      	movs	r3, #22
     880:	425b      	negs	r3, r3
     882:	e058      	b.n	936 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
     884:	683b      	ldr	r3, [r7, #0]
     886:	691b      	ldr	r3, [r3, #16]
     888:	2b00      	cmp	r3, #0
     88a:	d102      	bne.n	892 <http_client_init+0x2a>
		return -EINVAL;
     88c:	2316      	movs	r3, #22
     88e:	425b      	negs	r3, r3
     890:	e051      	b.n	936 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
     892:	683b      	ldr	r3, [r7, #0]
     894:	685b      	ldr	r3, [r3, #4]
     896:	2b00      	cmp	r3, #0
     898:	d102      	bne.n	8a0 <http_client_init+0x38>
		return -EINVAL;
     89a:	2316      	movs	r3, #22
     89c:	425b      	negs	r3, r3
     89e:	e04a      	b.n	936 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
     8a0:	683b      	ldr	r3, [r7, #0]
     8a2:	695b      	ldr	r3, [r3, #20]
     8a4:	2b51      	cmp	r3, #81	; 0x51
     8a6:	d802      	bhi.n	8ae <http_client_init+0x46>
		return -EINVAL;
     8a8:	2316      	movs	r3, #22
     8aa:	425b      	negs	r3, r3
     8ac:	e043      	b.n	936 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	22e8      	movs	r2, #232	; 0xe8
     8b2:	2100      	movs	r1, #0
     8b4:	0018      	movs	r0, r3
     8b6:	4b22      	ldr	r3, [pc, #136]	; (940 <http_client_init+0xd8>)
     8b8:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	3350      	adds	r3, #80	; 0x50
     8be:	6839      	ldr	r1, [r7, #0]
     8c0:	221c      	movs	r2, #28
     8c2:	0018      	movs	r0, r3
     8c4:	4b1f      	ldr	r3, [pc, #124]	; (944 <http_client_init+0xdc>)
     8c6:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     8cc:	2b00      	cmp	r3, #0
     8ce:	d115      	bne.n	8fc <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
     8d0:	683b      	ldr	r3, [r7, #0]
     8d2:	691b      	ldr	r3, [r3, #16]
     8d4:	0018      	movs	r0, r3
     8d6:	4b1c      	ldr	r3, [pc, #112]	; (948 <http_client_init+0xe0>)
     8d8:	4798      	blx	r3
     8da:	0003      	movs	r3, r0
     8dc:	001a      	movs	r2, r3
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     8e6:	2b00      	cmp	r3, #0
     8e8:	d102      	bne.n	8f0 <http_client_init+0x88>
			return -ENOMEM;
     8ea:	230c      	movs	r3, #12
     8ec:	425b      	negs	r3, r3
     8ee:	e022      	b.n	936 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	2241      	movs	r2, #65	; 0x41
     8f4:	5c99      	ldrb	r1, [r3, r2]
     8f6:	2004      	movs	r0, #4
     8f8:	4301      	orrs	r1, r0
     8fa:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
     8fc:	683b      	ldr	r3, [r7, #0]
     8fe:	891b      	ldrh	r3, [r3, #8]
     900:	2b00      	cmp	r3, #0
     902:	d010      	beq.n	926 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
     904:	683b      	ldr	r3, [r7, #0]
     906:	6858      	ldr	r0, [r3, #4]
     908:	687a      	ldr	r2, [r7, #4]
     90a:	4910      	ldr	r1, [pc, #64]	; (94c <http_client_init+0xe4>)
     90c:	2300      	movs	r3, #0
     90e:	4c10      	ldr	r4, [pc, #64]	; (950 <http_client_init+0xe8>)
     910:	47a0      	blx	r4
     912:	0002      	movs	r2, r0
     914:	687b      	ldr	r3, [r7, #4]
     916:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
     918:	687b      	ldr	r3, [r7, #4]
     91a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     91c:	2b00      	cmp	r3, #0
     91e:	da02      	bge.n	926 <http_client_init+0xbe>
			return -ENOSPC;
     920:	231c      	movs	r3, #28
     922:	425b      	negs	r3, r3
     924:	e007      	b.n	936 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
     926:	687b      	ldr	r3, [r7, #4]
     928:	2200      	movs	r2, #0
     92a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	22d8      	movs	r2, #216	; 0xd8
     930:	2100      	movs	r1, #0
     932:	5099      	str	r1, [r3, r2]

	return 0;
     934:	2300      	movs	r3, #0
}
     936:	0018      	movs	r0, r3
     938:	46bd      	mov	sp, r7
     93a:	b003      	add	sp, #12
     93c:	bd90      	pop	{r4, r7, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	00011fcb 	.word	0x00011fcb
     944:	00011f95 	.word	0x00011f95
     948:	00011f49 	.word	0x00011f49
     94c:	00000bf1 	.word	0x00000bf1
     950:	000022d5 	.word	0x000022d5

00000954 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
     954:	b580      	push	{r7, lr}
     956:	b082      	sub	sp, #8
     958:	af00      	add	r7, sp, #0
     95a:	6078      	str	r0, [r7, #4]
	switch (err) {
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	330e      	adds	r3, #14
     960:	2b0e      	cmp	r3, #14
     962:	d825      	bhi.n	9b0 <_hwerr_to_stderr+0x5c>
     964:	009a      	lsls	r2, r3, #2
     966:	4b18      	ldr	r3, [pc, #96]	; (9c8 <_hwerr_to_stderr+0x74>)
     968:	18d3      	adds	r3, r2, r3
     96a:	681b      	ldr	r3, [r3, #0]
     96c:	469f      	mov	pc, r3
		case 0:
			return -EIO;
     96e:	2305      	movs	r3, #5
     970:	425b      	negs	r3, r3
     972:	e024      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
     974:	2302      	movs	r3, #2
     976:	425b      	negs	r3, r3
     978:	e021      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
     97a:	2370      	movs	r3, #112	; 0x70
     97c:	425b      	negs	r3, r3
     97e:	e01e      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
     980:	230c      	movs	r3, #12
     982:	425b      	negs	r3, r3
     984:	e01b      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
     986:	2316      	movs	r3, #22
     988:	425b      	negs	r3, r3
     98a:	e018      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
     98c:	230c      	movs	r3, #12
     98e:	425b      	negs	r3, r3
     990:	e015      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
     992:	2305      	movs	r3, #5
     994:	425b      	negs	r3, r3
     996:	e012      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
     998:	2379      	movs	r3, #121	; 0x79
     99a:	425b      	negs	r3, r3
     99c:	e00f      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
     99e:	2368      	movs	r3, #104	; 0x68
     9a0:	425b      	negs	r3, r3
     9a2:	e00c      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
     9a4:	230b      	movs	r3, #11
     9a6:	425b      	negs	r3, r3
     9a8:	e009      	b.n	9be <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
     9aa:	2310      	movs	r3, #16
     9ac:	425b      	negs	r3, r3
     9ae:	e006      	b.n	9be <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	2b00      	cmp	r3, #0
     9b4:	da02      	bge.n	9bc <_hwerr_to_stderr+0x68>
				return -EIO;
     9b6:	2305      	movs	r3, #5
     9b8:	425b      	negs	r3, r3
     9ba:	e000      	b.n	9be <_hwerr_to_stderr+0x6a>
			}
			return 0;
     9bc:	2300      	movs	r3, #0
	}
}
     9be:	0018      	movs	r0, r3
     9c0:	46bd      	mov	sp, r7
     9c2:	b002      	add	sp, #8
     9c4:	bd80      	pop	{r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	0001381c 	.word	0x0001381c

000009cc <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
     9cc:	b580      	push	{r7, lr}
     9ce:	b08a      	sub	sp, #40	; 0x28
     9d0:	af00      	add	r7, sp, #0
     9d2:	603a      	str	r2, [r7, #0]
     9d4:	1dfb      	adds	r3, r7, #7
     9d6:	1c02      	adds	r2, r0, #0
     9d8:	701a      	strb	r2, [r3, #0]
     9da:	1dbb      	adds	r3, r7, #6
     9dc:	1c0a      	adds	r2, r1, #0
     9de:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
     9e0:	1dfb      	adds	r3, r7, #7
     9e2:	2200      	movs	r2, #0
     9e4:	569a      	ldrsb	r2, [r3, r2]
     9e6:	4b4b      	ldr	r3, [pc, #300]	; (b14 <http_client_socket_event_handler+0x148>)
     9e8:	0092      	lsls	r2, r2, #2
     9ea:	58d3      	ldr	r3, [r2, r3]
     9ec:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
     9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9f0:	2b00      	cmp	r3, #0
     9f2:	d100      	bne.n	9f6 <http_client_socket_event_handler+0x2a>
     9f4:	e08a      	b.n	b0c <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
     9f6:	1dbb      	adds	r3, r7, #6
     9f8:	781b      	ldrb	r3, [r3, #0]
     9fa:	2b06      	cmp	r3, #6
     9fc:	d040      	beq.n	a80 <http_client_socket_event_handler+0xb4>
     9fe:	2b07      	cmp	r3, #7
     a00:	d060      	beq.n	ac4 <http_client_socket_event_handler+0xf8>
     a02:	2b05      	cmp	r3, #5
     a04:	d000      	beq.n	a08 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
     a06:	e082      	b.n	b0e <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
     a08:	683b      	ldr	r3, [r7, #0]
     a0a:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
     a0c:	6a3b      	ldr	r3, [r7, #32]
     a0e:	785b      	ldrb	r3, [r3, #1]
     a10:	b25b      	sxtb	r3, r3
     a12:	001a      	movs	r2, r3
     a14:	230c      	movs	r3, #12
     a16:	18fb      	adds	r3, r7, r3
     a18:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
     a1a:	6a3b      	ldr	r3, [r7, #32]
     a1c:	785b      	ldrb	r3, [r3, #1]
     a1e:	b25b      	sxtb	r3, r3
     a20:	2b00      	cmp	r3, #0
     a22:	da0c      	bge.n	a3e <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
     a24:	6a3b      	ldr	r3, [r7, #32]
     a26:	785b      	ldrb	r3, [r3, #1]
     a28:	b25b      	sxtb	r3, r3
     a2a:	0018      	movs	r0, r3
     a2c:	4b3a      	ldr	r3, [pc, #232]	; (b18 <http_client_socket_event_handler+0x14c>)
     a2e:	4798      	blx	r3
     a30:	0002      	movs	r2, r0
     a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a34:	0011      	movs	r1, r2
     a36:	0018      	movs	r0, r3
     a38:	4b38      	ldr	r3, [pc, #224]	; (b1c <http_client_socket_event_handler+0x150>)
     a3a:	4798      	blx	r3
    	break;
     a3c:	e067      	b.n	b0e <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
     a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     a42:	2b00      	cmp	r3, #0
     a44:	d006      	beq.n	a54 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
     a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     a4a:	220c      	movs	r2, #12
     a4c:	18ba      	adds	r2, r7, r2
     a4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
     a50:	2100      	movs	r1, #0
     a52:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
     a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a56:	2203      	movs	r2, #3
     a58:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
     a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a5c:	6d58      	ldr	r0, [r3, #84]	; 0x54
     a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a60:	6c99      	ldr	r1, [r3, #72]	; 0x48
     a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a64:	2258      	movs	r2, #88	; 0x58
     a66:	5a9b      	ldrh	r3, [r3, r2]
     a68:	001a      	movs	r2, r3
     a6a:	4b2d      	ldr	r3, [pc, #180]	; (b20 <http_client_socket_event_handler+0x154>)
     a6c:	4798      	blx	r3
    		_http_client_recv_packet(module);
     a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a70:	0018      	movs	r0, r3
     a72:	4b2c      	ldr	r3, [pc, #176]	; (b24 <http_client_socket_event_handler+0x158>)
     a74:	4798      	blx	r3
			_http_client_request(module);
     a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a78:	0018      	movs	r0, r3
     a7a:	4b2b      	ldr	r3, [pc, #172]	; (b28 <http_client_socket_event_handler+0x15c>)
     a7c:	4798      	blx	r3
    	break;
     a7e:	e046      	b.n	b0e <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
     a80:	683b      	ldr	r3, [r7, #0]
     a82:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
     a84:	69fb      	ldr	r3, [r7, #28]
     a86:	2204      	movs	r2, #4
     a88:	5e9b      	ldrsh	r3, [r3, r2]
     a8a:	2b00      	cmp	r3, #0
     a8c:	dd09      	ble.n	aa2 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
     a8e:	69fb      	ldr	r3, [r7, #28]
     a90:	2204      	movs	r2, #4
     a92:	5e9b      	ldrsh	r3, [r3, r2]
     a94:	001a      	movs	r2, r3
     a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     a98:	0011      	movs	r1, r2
     a9a:	0018      	movs	r0, r3
     a9c:	4b23      	ldr	r3, [pc, #140]	; (b2c <http_client_socket_event_handler+0x160>)
     a9e:	4798      	blx	r3
     aa0:	e00b      	b.n	aba <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
     aa2:	69fb      	ldr	r3, [r7, #28]
     aa4:	2204      	movs	r2, #4
     aa6:	5e9b      	ldrsh	r3, [r3, r2]
     aa8:	0018      	movs	r0, r3
     aaa:	4b1b      	ldr	r3, [pc, #108]	; (b18 <http_client_socket_event_handler+0x14c>)
     aac:	4798      	blx	r3
     aae:	0002      	movs	r2, r0
     ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ab2:	0011      	movs	r1, r2
     ab4:	0018      	movs	r0, r3
     ab6:	4b19      	ldr	r3, [pc, #100]	; (b1c <http_client_socket_event_handler+0x150>)
     ab8:	4798      	blx	r3
		_http_client_recv_packet(module);
     aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     abc:	0018      	movs	r0, r3
     abe:	4b19      	ldr	r3, [pc, #100]	; (b24 <http_client_socket_event_handler+0x158>)
     ac0:	4798      	blx	r3
		break;
     ac2:	e024      	b.n	b0e <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
     ac4:	231a      	movs	r3, #26
     ac6:	18fb      	adds	r3, r7, r3
     ac8:	683a      	ldr	r2, [r7, #0]
     aca:	8812      	ldrh	r2, [r2, #0]
     acc:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
     ace:	231a      	movs	r3, #26
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	2200      	movs	r2, #0
     ad4:	5e9b      	ldrsh	r3, [r3, r2]
     ad6:	2b00      	cmp	r3, #0
     ad8:	da0d      	bge.n	af6 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
     ada:	231a      	movs	r3, #26
     adc:	18fb      	adds	r3, r7, r3
     ade:	2200      	movs	r2, #0
     ae0:	5e9b      	ldrsh	r3, [r3, r2]
     ae2:	0018      	movs	r0, r3
     ae4:	4b0c      	ldr	r3, [pc, #48]	; (b18 <http_client_socket_event_handler+0x14c>)
     ae6:	4798      	blx	r3
     ae8:	0002      	movs	r2, r0
     aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     aec:	0011      	movs	r1, r2
     aee:	0018      	movs	r0, r3
     af0:	4b0a      	ldr	r3, [pc, #40]	; (b1c <http_client_socket_event_handler+0x150>)
     af2:	4798      	blx	r3
     af4:	e003      	b.n	afe <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
     af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     af8:	0018      	movs	r0, r3
     afa:	4b0b      	ldr	r3, [pc, #44]	; (b28 <http_client_socket_event_handler+0x15c>)
     afc:	4798      	blx	r3
		module->sending = 0;
     afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b00:	2241      	movs	r2, #65	; 0x41
     b02:	5c99      	ldrb	r1, [r3, r2]
     b04:	2001      	movs	r0, #1
     b06:	4381      	bics	r1, r0
     b08:	5499      	strb	r1, [r3, r2]
    	break;
     b0a:	e000      	b.n	b0e <http_client_socket_event_handler+0x142>
		return;
     b0c:	46c0      	nop			; (mov r8, r8)
	}

}
     b0e:	46bd      	mov	sp, r7
     b10:	b00a      	add	sp, #40	; 0x28
     b12:	bd80      	pop	{r7, pc}
     b14:	20000254 	.word	0x20000254
     b18:	00000955 	.word	0x00000955
     b1c:	00000fc9 	.word	0x00000fc9
     b20:	00002365 	.word	0x00002365
     b24:	00001855 	.word	0x00001855
     b28:	0000111d 	.word	0x0000111d
     b2c:	000018b9 	.word	0x000018b9

00000b30 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
     b30:	b580      	push	{r7, lr}
     b32:	b088      	sub	sp, #32
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
     b38:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
     b3a:	2300      	movs	r3, #0
     b3c:	61fb      	str	r3, [r7, #28]
     b3e:	e048      	b.n	bd2 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
     b40:	4b27      	ldr	r3, [pc, #156]	; (be0 <http_client_socket_resolve_handler+0xb0>)
     b42:	69fa      	ldr	r2, [r7, #28]
     b44:	0092      	lsls	r2, r2, #2
     b46:	58d3      	ldr	r3, [r2, r3]
     b48:	2b00      	cmp	r3, #0
     b4a:	d03f      	beq.n	bcc <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
     b4c:	4b24      	ldr	r3, [pc, #144]	; (be0 <http_client_socket_resolve_handler+0xb0>)
     b4e:	69fa      	ldr	r2, [r7, #28]
     b50:	0092      	lsls	r2, r2, #2
     b52:	58d3      	ldr	r3, [r2, r3]
     b54:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
     b56:	69bb      	ldr	r3, [r7, #24]
     b58:	1c5a      	adds	r2, r3, #1
     b5a:	687b      	ldr	r3, [r7, #4]
     b5c:	0011      	movs	r1, r2
     b5e:	0018      	movs	r0, r3
     b60:	4b20      	ldr	r3, [pc, #128]	; (be4 <http_client_socket_resolve_handler+0xb4>)
     b62:	4798      	blx	r3
     b64:	1e03      	subs	r3, r0, #0
     b66:	d131      	bne.n	bcc <http_client_socket_resolve_handler+0x9c>
     b68:	69bb      	ldr	r3, [r7, #24]
     b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     b6c:	2b01      	cmp	r3, #1
     b6e:	d12d      	bne.n	bcc <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
     b70:	683b      	ldr	r3, [r7, #0]
     b72:	2b00      	cmp	r3, #0
     b74:	d107      	bne.n	b86 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
     b76:	2376      	movs	r3, #118	; 0x76
     b78:	425a      	negs	r2, r3
     b7a:	69bb      	ldr	r3, [r7, #24]
     b7c:	0011      	movs	r1, r2
     b7e:	0018      	movs	r0, r3
     b80:	4b19      	ldr	r3, [pc, #100]	; (be8 <http_client_socket_resolve_handler+0xb8>)
     b82:	4798      	blx	r3
					return;
     b84:	e028      	b.n	bd8 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
     b86:	2308      	movs	r3, #8
     b88:	18fb      	adds	r3, r7, r3
     b8a:	2202      	movs	r2, #2
     b8c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
     b8e:	69bb      	ldr	r3, [r7, #24]
     b90:	2250      	movs	r2, #80	; 0x50
     b92:	5a9b      	ldrh	r3, [r3, r2]
     b94:	021b      	lsls	r3, r3, #8
     b96:	b21a      	sxth	r2, r3
     b98:	69bb      	ldr	r3, [r7, #24]
     b9a:	2150      	movs	r1, #80	; 0x50
     b9c:	5a5b      	ldrh	r3, [r3, r1]
     b9e:	0a1b      	lsrs	r3, r3, #8
     ba0:	b29b      	uxth	r3, r3
     ba2:	b21b      	sxth	r3, r3
     ba4:	4313      	orrs	r3, r2
     ba6:	b21b      	sxth	r3, r3
     ba8:	b29a      	uxth	r2, r3
     baa:	2308      	movs	r3, #8
     bac:	18fb      	adds	r3, r7, r3
     bae:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
     bb0:	2308      	movs	r3, #8
     bb2:	18fb      	adds	r3, r7, r3
     bb4:	683a      	ldr	r2, [r7, #0]
     bb6:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
     bb8:	69bb      	ldr	r3, [r7, #24]
     bba:	781b      	ldrb	r3, [r3, #0]
     bbc:	b25b      	sxtb	r3, r3
     bbe:	2208      	movs	r2, #8
     bc0:	18b9      	adds	r1, r7, r2
     bc2:	2210      	movs	r2, #16
     bc4:	0018      	movs	r0, r3
     bc6:	4b09      	ldr	r3, [pc, #36]	; (bec <http_client_socket_resolve_handler+0xbc>)
     bc8:	4798      	blx	r3
				return;
     bca:	e005      	b.n	bd8 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
     bcc:	69fb      	ldr	r3, [r7, #28]
     bce:	3301      	adds	r3, #1
     bd0:	61fb      	str	r3, [r7, #28]
     bd2:	69fb      	ldr	r3, [r7, #28]
     bd4:	2b06      	cmp	r3, #6
     bd6:	ddb3      	ble.n	b40 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
     bd8:	46bd      	mov	sp, r7
     bda:	b008      	add	sp, #32
     bdc:	bd80      	pop	{r7, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	20000254 	.word	0x20000254
     be4:	0001244d 	.word	0x0001244d
     be8:	00000fc9 	.word	0x00000fc9
     bec:	00006645 	.word	0x00006645

00000bf0 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
     bf0:	b580      	push	{r7, lr}
     bf2:	b086      	sub	sp, #24
     bf4:	af00      	add	r7, sp, #0
     bf6:	60f8      	str	r0, [r7, #12]
     bf8:	60b9      	str	r1, [r7, #8]
     bfa:	607a      	str	r2, [r7, #4]
     bfc:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
     bfe:	687b      	ldr	r3, [r7, #4]
     c00:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
     c02:	697b      	ldr	r3, [r7, #20]
     c04:	2b00      	cmp	r3, #0
     c06:	d007      	beq.n	c18 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
     c08:	233e      	movs	r3, #62	; 0x3e
     c0a:	425a      	negs	r2, r3
     c0c:	697b      	ldr	r3, [r7, #20]
     c0e:	0011      	movs	r1, r2
     c10:	0018      	movs	r0, r3
     c12:	4b03      	ldr	r3, [pc, #12]	; (c20 <http_client_timer_callback+0x30>)
     c14:	4798      	blx	r3
     c16:	e000      	b.n	c1a <http_client_timer_callback+0x2a>
		return;
     c18:	46c0      	nop			; (mov r8, r8)
}
     c1a:	46bd      	mov	sp, r7
     c1c:	b006      	add	sp, #24
     c1e:	bd80      	pop	{r7, pc}
     c20:	00000fc9 	.word	0x00000fc9

00000c24 <_is_ip>:

static int _is_ip(const char *host)
{
     c24:	b580      	push	{r7, lr}
     c26:	b084      	sub	sp, #16
     c28:	af00      	add	r7, sp, #0
     c2a:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
     c2c:	2300      	movs	r3, #0
     c2e:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
     c30:	e03a      	b.n	ca8 <_is_ip+0x84>
		ch = *host++;
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	1c5a      	adds	r2, r3, #1
     c36:	607a      	str	r2, [r7, #4]
     c38:	220b      	movs	r2, #11
     c3a:	18ba      	adds	r2, r7, r2
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
     c40:	230b      	movs	r3, #11
     c42:	18fb      	adds	r3, r7, r3
     c44:	781b      	ldrb	r3, [r3, #0]
     c46:	2b60      	cmp	r3, #96	; 0x60
     c48:	d904      	bls.n	c54 <_is_ip+0x30>
     c4a:	230b      	movs	r3, #11
     c4c:	18fb      	adds	r3, r7, r3
     c4e:	781b      	ldrb	r3, [r3, #0]
     c50:	2b66      	cmp	r3, #102	; 0x66
     c52:	d913      	bls.n	c7c <_is_ip+0x58>
     c54:	230b      	movs	r3, #11
     c56:	18fb      	adds	r3, r7, r3
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	2b40      	cmp	r3, #64	; 0x40
     c5c:	d904      	bls.n	c68 <_is_ip+0x44>
     c5e:	230b      	movs	r3, #11
     c60:	18fb      	adds	r3, r7, r3
     c62:	781b      	ldrb	r3, [r3, #0]
     c64:	2b46      	cmp	r3, #70	; 0x46
     c66:	d909      	bls.n	c7c <_is_ip+0x58>
     c68:	230b      	movs	r3, #11
     c6a:	18fb      	adds	r3, r7, r3
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	2b3a      	cmp	r3, #58	; 0x3a
     c70:	d004      	beq.n	c7c <_is_ip+0x58>
     c72:	230b      	movs	r3, #11
     c74:	18fb      	adds	r3, r7, r3
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	2b2f      	cmp	r3, #47	; 0x2f
     c7a:	d102      	bne.n	c82 <_is_ip+0x5e>
			isv6 = 1;
     c7c:	2301      	movs	r3, #1
     c7e:	60fb      	str	r3, [r7, #12]
     c80:	e012      	b.n	ca8 <_is_ip+0x84>
		} else if (ch == '.') {
     c82:	230b      	movs	r3, #11
     c84:	18fb      	adds	r3, r7, r3
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	2b2e      	cmp	r3, #46	; 0x2e
     c8a:	d104      	bne.n	c96 <_is_ip+0x72>
			if (isv6) {
     c8c:	68fb      	ldr	r3, [r7, #12]
     c8e:	2b00      	cmp	r3, #0
     c90:	d00a      	beq.n	ca8 <_is_ip+0x84>
				return 0;
     c92:	2300      	movs	r3, #0
     c94:	e00d      	b.n	cb2 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
     c96:	230b      	movs	r3, #11
     c98:	18fb      	adds	r3, r7, r3
     c9a:	781b      	ldrb	r3, [r3, #0]
     c9c:	2230      	movs	r2, #48	; 0x30
     c9e:	4013      	ands	r3, r2
     ca0:	2b30      	cmp	r3, #48	; 0x30
     ca2:	d001      	beq.n	ca8 <_is_ip+0x84>
			return 0;
     ca4:	2300      	movs	r3, #0
     ca6:	e004      	b.n	cb2 <_is_ip+0x8e>
	while (*host != '\0') {
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	2b00      	cmp	r3, #0
     cae:	d1c0      	bne.n	c32 <_is_ip+0xe>
		}
	}
	return 1;
     cb0:	2301      	movs	r3, #1
}
     cb2:	0018      	movs	r0, r3
     cb4:	46bd      	mov	sp, r7
     cb6:	b004      	add	sp, #16
     cb8:	bd80      	pop	{r7, pc}
	...

00000cbc <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
     cbc:	b5b0      	push	{r4, r5, r7, lr}
     cbe:	b08e      	sub	sp, #56	; 0x38
     cc0:	af00      	add	r7, sp, #0
     cc2:	60f8      	str	r0, [r7, #12]
     cc4:	60b9      	str	r1, [r7, #8]
     cc6:	603b      	str	r3, [r7, #0]
     cc8:	1dfb      	adds	r3, r7, #7
     cca:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
     ccc:	2337      	movs	r3, #55	; 0x37
     cce:	18fb      	adds	r3, r7, r3
     cd0:	2200      	movs	r2, #0
     cd2:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
     cd4:	2300      	movs	r3, #0
     cd6:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
     cd8:	2300      	movs	r3, #0
     cda:	633b      	str	r3, [r7, #48]	; 0x30
     cdc:	2300      	movs	r3, #0
     cde:	62fb      	str	r3, [r7, #44]	; 0x2c
     ce0:	2300      	movs	r3, #0
     ce2:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
     ce4:	68fb      	ldr	r3, [r7, #12]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d102      	bne.n	cf0 <http_client_send_request+0x34>
		return -EINVAL;
     cea:	2316      	movs	r3, #22
     cec:	425b      	negs	r3, r3
     cee:	e145      	b.n	f7c <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
     cf0:	68fb      	ldr	r3, [r7, #12]
     cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     cf4:	2b02      	cmp	r3, #2
     cf6:	d902      	bls.n	cfe <http_client_send_request+0x42>
		return -EBUSY;
     cf8:	2310      	movs	r3, #16
     cfa:	425b      	negs	r3, r3
     cfc:	e13e      	b.n	f7c <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
     cfe:	49a1      	ldr	r1, [pc, #644]	; (f84 <http_client_send_request+0x2c8>)
     d00:	68bb      	ldr	r3, [r7, #8]
     d02:	2207      	movs	r2, #7
     d04:	0018      	movs	r0, r3
     d06:	4ba0      	ldr	r3, [pc, #640]	; (f88 <http_client_send_request+0x2cc>)
     d08:	4798      	blx	r3
     d0a:	1e03      	subs	r3, r0, #0
     d0c:	d102      	bne.n	d14 <http_client_send_request+0x58>
		i = 7;
     d0e:	2307      	movs	r3, #7
     d10:	633b      	str	r3, [r7, #48]	; 0x30
     d12:	e009      	b.n	d28 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
     d14:	499d      	ldr	r1, [pc, #628]	; (f8c <http_client_send_request+0x2d0>)
     d16:	68bb      	ldr	r3, [r7, #8]
     d18:	2208      	movs	r2, #8
     d1a:	0018      	movs	r0, r3
     d1c:	4b9a      	ldr	r3, [pc, #616]	; (f88 <http_client_send_request+0x2cc>)
     d1e:	4798      	blx	r3
     d20:	1e03      	subs	r3, r0, #0
     d22:	d101      	bne.n	d28 <http_client_send_request+0x6c>
		i = 8;
     d24:	2308      	movs	r3, #8
     d26:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
     d28:	68fb      	ldr	r3, [r7, #12]
     d2a:	1c5c      	adds	r4, r3, #1
     d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d2e:	68ba      	ldr	r2, [r7, #8]
     d30:	18d5      	adds	r5, r2, r3
     d32:	68fb      	ldr	r3, [r7, #12]
     d34:	3301      	adds	r3, #1
     d36:	0018      	movs	r0, r3
     d38:	4b95      	ldr	r3, [pc, #596]	; (f90 <http_client_send_request+0x2d4>)
     d3a:	4798      	blx	r3
     d3c:	0003      	movs	r3, r0
     d3e:	001a      	movs	r2, r3
     d40:	0029      	movs	r1, r5
     d42:	0020      	movs	r0, r4
     d44:	4b90      	ldr	r3, [pc, #576]	; (f88 <http_client_send_request+0x2cc>)
     d46:	4798      	blx	r3
     d48:	0003      	movs	r3, r0
     d4a:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
     d4c:	e00d      	b.n	d6a <http_client_send_request+0xae>
		module->host[j++] = url[i];
     d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d50:	1c5a      	adds	r2, r3, #1
     d52:	62fa      	str	r2, [r7, #44]	; 0x2c
     d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d56:	68b9      	ldr	r1, [r7, #8]
     d58:	188a      	adds	r2, r1, r2
     d5a:	7811      	ldrb	r1, [r2, #0]
     d5c:	68fa      	ldr	r2, [r7, #12]
     d5e:	18d3      	adds	r3, r2, r3
     d60:	1c0a      	adds	r2, r1, #0
     d62:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
     d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d66:	3301      	adds	r3, #1
     d68:	633b      	str	r3, [r7, #48]	; 0x30
     d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d6c:	68ba      	ldr	r2, [r7, #8]
     d6e:	18d3      	adds	r3, r2, r3
     d70:	781b      	ldrb	r3, [r3, #0]
     d72:	2b00      	cmp	r3, #0
     d74:	d005      	beq.n	d82 <http_client_send_request+0xc6>
     d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d78:	68ba      	ldr	r2, [r7, #8]
     d7a:	18d3      	adds	r3, r2, r3
     d7c:	781b      	ldrb	r3, [r3, #0]
     d7e:	2b2f      	cmp	r3, #47	; 0x2f
     d80:	d1e5      	bne.n	d4e <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
     d82:	68fa      	ldr	r2, [r7, #12]
     d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d86:	18d3      	adds	r3, r2, r3
     d88:	3301      	adds	r3, #1
     d8a:	2200      	movs	r2, #0
     d8c:	701a      	strb	r2, [r3, #0]
	uri = url + i;
     d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d90:	68ba      	ldr	r2, [r7, #8]
     d92:	18d3      	adds	r3, r2, r3
     d94:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
     d96:	68fb      	ldr	r3, [r7, #12]
     d98:	3301      	adds	r3, #1
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	2b00      	cmp	r3, #0
     d9e:	d102      	bne.n	da6 <http_client_send_request+0xea>
		return -EINVAL;
     da0:	2316      	movs	r3, #22
     da2:	425b      	negs	r3, r3
     da4:	e0ea      	b.n	f7c <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
     da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
     da8:	0018      	movs	r0, r3
     daa:	4b79      	ldr	r3, [pc, #484]	; (f90 <http_client_send_request+0x2d4>)
     dac:	4798      	blx	r3
     dae:	0003      	movs	r3, r0
     db0:	2b3f      	cmp	r3, #63	; 0x3f
     db2:	d902      	bls.n	dba <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
     db4:	235b      	movs	r3, #91	; 0x5b
     db6:	425b      	negs	r3, r3
     db8:	e0e0      	b.n	f7c <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
     dba:	68fb      	ldr	r3, [r7, #12]
     dbc:	22d4      	movs	r2, #212	; 0xd4
     dbe:	589b      	ldr	r3, [r3, r2]
     dc0:	2b00      	cmp	r3, #0
     dc2:	d005      	beq.n	dd0 <http_client_send_request+0x114>
		free(module->req.ext_header);
     dc4:	68fb      	ldr	r3, [r7, #12]
     dc6:	22d4      	movs	r2, #212	; 0xd4
     dc8:	589b      	ldr	r3, [r3, r2]
     dca:	0018      	movs	r0, r3
     dcc:	4b71      	ldr	r3, [pc, #452]	; (f94 <http_client_send_request+0x2d8>)
     dce:	4798      	blx	r3
	}
	if (ext_header != NULL) {
     dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     dd2:	2b00      	cmp	r3, #0
     dd4:	d010      	beq.n	df8 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
     dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     dd8:	0018      	movs	r0, r3
     dda:	4b6f      	ldr	r3, [pc, #444]	; (f98 <http_client_send_request+0x2dc>)
     ddc:	4798      	blx	r3
     dde:	0003      	movs	r3, r0
     de0:	0019      	movs	r1, r3
     de2:	68fb      	ldr	r3, [r7, #12]
     de4:	22d4      	movs	r2, #212	; 0xd4
     de6:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
     de8:	68fb      	ldr	r3, [r7, #12]
     dea:	22d4      	movs	r2, #212	; 0xd4
     dec:	589b      	ldr	r3, [r3, r2]
     dee:	2b00      	cmp	r3, #0
     df0:	d106      	bne.n	e00 <http_client_send_request+0x144>
			return -ENOMEM;
     df2:	230c      	movs	r3, #12
     df4:	425b      	negs	r3, r3
     df6:	e0c1      	b.n	f7c <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
     df8:	68fb      	ldr	r3, [r7, #12]
     dfa:	22d4      	movs	r2, #212	; 0xd4
     dfc:	2100      	movs	r1, #0
     dfe:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
     e00:	68fb      	ldr	r3, [r7, #12]
     e02:	2241      	movs	r2, #65	; 0x41
     e04:	5c99      	ldrb	r1, [r3, r2]
     e06:	2001      	movs	r0, #1
     e08:	4381      	bics	r1, r0
     e0a:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
     e0c:	68fb      	ldr	r3, [r7, #12]
     e0e:	2200      	movs	r2, #0
     e10:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
     e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e14:	781b      	ldrb	r3, [r3, #0]
     e16:	2b2f      	cmp	r3, #47	; 0x2f
     e18:	d107      	bne.n	e2a <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
     e1a:	68fb      	ldr	r3, [r7, #12]
     e1c:	3370      	adds	r3, #112	; 0x70
     e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e20:	0011      	movs	r1, r2
     e22:	0018      	movs	r0, r3
     e24:	4b5d      	ldr	r3, [pc, #372]	; (f9c <http_client_send_request+0x2e0>)
     e26:	4798      	blx	r3
     e28:	e00f      	b.n	e4a <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
     e2a:	68fb      	ldr	r3, [r7, #12]
     e2c:	2270      	movs	r2, #112	; 0x70
     e2e:	212f      	movs	r1, #47	; 0x2f
     e30:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
     e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	2b00      	cmp	r3, #0
     e38:	d007      	beq.n	e4a <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	3370      	adds	r3, #112	; 0x70
     e3e:	3301      	adds	r3, #1
     e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e42:	0011      	movs	r1, r2
     e44:	0018      	movs	r0, r3
     e46:	4b55      	ldr	r3, [pc, #340]	; (f9c <http_client_send_request+0x2e0>)
     e48:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
     e4a:	683b      	ldr	r3, [r7, #0]
     e4c:	2b00      	cmp	r3, #0
     e4e:	d007      	beq.n	e60 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
     e50:	68fb      	ldr	r3, [r7, #12]
     e52:	33b0      	adds	r3, #176	; 0xb0
     e54:	6839      	ldr	r1, [r7, #0]
     e56:	2218      	movs	r2, #24
     e58:	0018      	movs	r0, r3
     e5a:	4b51      	ldr	r3, [pc, #324]	; (fa0 <http_client_send_request+0x2e4>)
     e5c:	4798      	blx	r3
     e5e:	e006      	b.n	e6e <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
     e60:	68fb      	ldr	r3, [r7, #12]
     e62:	33b0      	adds	r3, #176	; 0xb0
     e64:	2218      	movs	r2, #24
     e66:	2100      	movs	r1, #0
     e68:	0018      	movs	r0, r3
     e6a:	4b4e      	ldr	r3, [pc, #312]	; (fa4 <http_client_send_request+0x2e8>)
     e6c:	4798      	blx	r3
	}

	module->req.method = method;
     e6e:	68fb      	ldr	r3, [r7, #12]
     e70:	1dfa      	adds	r2, r7, #7
     e72:	21c8      	movs	r1, #200	; 0xc8
     e74:	7812      	ldrb	r2, [r2, #0]
     e76:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
     e78:	68fb      	ldr	r3, [r7, #12]
     e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     e7c:	2b01      	cmp	r3, #1
     e7e:	d003      	beq.n	e88 <http_client_send_request+0x1cc>
     e80:	d316      	bcc.n	eb0 <http_client_send_request+0x1f4>
     e82:	2b02      	cmp	r3, #2
     e84:	d004      	beq.n	e90 <http_client_send_request+0x1d4>
     e86:	e074      	b.n	f72 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
     e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e8a:	2b00      	cmp	r3, #0
     e8c:	d100      	bne.n	e90 <http_client_send_request+0x1d4>
     e8e:	e073      	b.n	f78 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
     e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e92:	2b00      	cmp	r3, #0
     e94:	d107      	bne.n	ea6 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
     e96:	68fb      	ldr	r3, [r7, #12]
     e98:	2203      	movs	r2, #3
     e9a:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
     e9c:	68fb      	ldr	r3, [r7, #12]
     e9e:	0018      	movs	r0, r3
     ea0:	4b41      	ldr	r3, [pc, #260]	; (fa8 <http_client_send_request+0x2ec>)
     ea2:	4798      	blx	r3
			break;
     ea4:	e069      	b.n	f7a <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
     ea6:	68fb      	ldr	r3, [r7, #12]
     ea8:	2100      	movs	r1, #0
     eaa:	0018      	movs	r0, r3
     eac:	4b3f      	ldr	r3, [pc, #252]	; (fac <http_client_send_request+0x2f0>)
     eae:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
     eb0:	68fb      	ldr	r3, [r7, #12]
     eb2:	2252      	movs	r2, #82	; 0x52
     eb4:	5c9b      	ldrb	r3, [r3, r2]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d007      	beq.n	eca <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
     eba:	2337      	movs	r3, #55	; 0x37
     ebc:	18fb      	adds	r3, r7, r3
     ebe:	2237      	movs	r2, #55	; 0x37
     ec0:	18ba      	adds	r2, r7, r2
     ec2:	7812      	ldrb	r2, [r2, #0]
     ec4:	2101      	movs	r1, #1
     ec6:	430a      	orrs	r2, r1
     ec8:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
     eca:	2337      	movs	r3, #55	; 0x37
     ecc:	18fb      	adds	r3, r7, r3
     ece:	781b      	ldrb	r3, [r3, #0]
     ed0:	001a      	movs	r2, r3
     ed2:	2101      	movs	r1, #1
     ed4:	2002      	movs	r0, #2
     ed6:	4b36      	ldr	r3, [pc, #216]	; (fb0 <http_client_send_request+0x2f4>)
     ed8:	4798      	blx	r3
     eda:	0003      	movs	r3, r0
     edc:	001a      	movs	r2, r3
     ede:	68fb      	ldr	r3, [r7, #12]
     ee0:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
     ee2:	68fb      	ldr	r3, [r7, #12]
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	b25b      	sxtb	r3, r3
     ee8:	2b00      	cmp	r3, #0
     eea:	db3f      	blt.n	f6c <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
     eec:	68fb      	ldr	r3, [r7, #12]
     eee:	781b      	ldrb	r3, [r3, #0]
     ef0:	b25b      	sxtb	r3, r3
     ef2:	001a      	movs	r2, r3
     ef4:	4b2f      	ldr	r3, [pc, #188]	; (fb4 <http_client_send_request+0x2f8>)
     ef6:	0092      	lsls	r2, r2, #2
     ef8:	68f9      	ldr	r1, [r7, #12]
     efa:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
     efc:	68fb      	ldr	r3, [r7, #12]
     efe:	3301      	adds	r3, #1
     f00:	0018      	movs	r0, r3
     f02:	4b2d      	ldr	r3, [pc, #180]	; (fb8 <http_client_send_request+0x2fc>)
     f04:	4798      	blx	r3
     f06:	1e03      	subs	r3, r0, #0
     f08:	d027      	beq.n	f5a <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
     f0a:	2314      	movs	r3, #20
     f0c:	18fb      	adds	r3, r7, r3
     f0e:	2202      	movs	r2, #2
     f10:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
     f12:	68fb      	ldr	r3, [r7, #12]
     f14:	2250      	movs	r2, #80	; 0x50
     f16:	5a9b      	ldrh	r3, [r3, r2]
     f18:	021b      	lsls	r3, r3, #8
     f1a:	b21a      	sxth	r2, r3
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	2150      	movs	r1, #80	; 0x50
     f20:	5a5b      	ldrh	r3, [r3, r1]
     f22:	0a1b      	lsrs	r3, r3, #8
     f24:	b29b      	uxth	r3, r3
     f26:	b21b      	sxth	r3, r3
     f28:	4313      	orrs	r3, r2
     f2a:	b21b      	sxth	r3, r3
     f2c:	b29a      	uxth	r2, r3
     f2e:	2314      	movs	r3, #20
     f30:	18fb      	adds	r3, r7, r3
     f32:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
     f34:	68fb      	ldr	r3, [r7, #12]
     f36:	3301      	adds	r3, #1
     f38:	0018      	movs	r0, r3
     f3a:	4b20      	ldr	r3, [pc, #128]	; (fbc <http_client_send_request+0x300>)
     f3c:	4798      	blx	r3
     f3e:	0002      	movs	r2, r0
     f40:	2314      	movs	r3, #20
     f42:	18fb      	adds	r3, r7, r3
     f44:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
     f46:	68fb      	ldr	r3, [r7, #12]
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	b25b      	sxtb	r3, r3
     f4c:	2214      	movs	r2, #20
     f4e:	18b9      	adds	r1, r7, r2
     f50:	2210      	movs	r2, #16
     f52:	0018      	movs	r0, r3
     f54:	4b1a      	ldr	r3, [pc, #104]	; (fc0 <http_client_send_request+0x304>)
     f56:	4798      	blx	r3
     f58:	e004      	b.n	f64 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
     f5a:	68fb      	ldr	r3, [r7, #12]
     f5c:	3301      	adds	r3, #1
     f5e:	0018      	movs	r0, r3
     f60:	4b18      	ldr	r3, [pc, #96]	; (fc4 <http_client_send_request+0x308>)
     f62:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
     f64:	68fb      	ldr	r3, [r7, #12]
     f66:	2201      	movs	r2, #1
     f68:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
     f6a:	e006      	b.n	f7a <http_client_send_request+0x2be>
			return -ENOSPC;
     f6c:	231c      	movs	r3, #28
     f6e:	425b      	negs	r3, r3
     f70:	e004      	b.n	f7c <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
     f72:	230b      	movs	r3, #11
     f74:	425b      	negs	r3, r3
     f76:	e001      	b.n	f7c <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
     f78:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
     f7a:	2300      	movs	r3, #0
}
     f7c:	0018      	movs	r0, r3
     f7e:	46bd      	mov	sp, r7
     f80:	b00e      	add	sp, #56	; 0x38
     f82:	bdb0      	pop	{r4, r5, r7, pc}
     f84:	000136ec 	.word	0x000136ec
     f88:	000124b9 	.word	0x000124b9
     f8c:	000136f4 	.word	0x000136f4
     f90:	000124ab 	.word	0x000124ab
     f94:	00011f5d 	.word	0x00011f5d
     f98:	00012471 	.word	0x00012471
     f9c:	00012461 	.word	0x00012461
     fa0:	00011f95 	.word	0x00011f95
     fa4:	00011fcb 	.word	0x00011fcb
     fa8:	0000111d 	.word	0x0000111d
     fac:	00000fc9 	.word	0x00000fc9
     fb0:	000064c1 	.word	0x000064c1
     fb4:	20000254 	.word	0x20000254
     fb8:	00000c25 	.word	0x00000c25
     fbc:	00006bd9 	.word	0x00006bd9
     fc0:	00006645 	.word	0x00006645
     fc4:	00006ce1 	.word	0x00006ce1

00000fc8 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b086      	sub	sp, #24
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
     fd0:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	22c0      	movs	r2, #192	; 0xc0
     fd6:	589b      	ldr	r3, [r3, r2]
     fd8:	2b00      	cmp	r3, #0
     fda:	d007      	beq.n	fec <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
     fdc:	687b      	ldr	r3, [r7, #4]
     fde:	22c0      	movs	r2, #192	; 0xc0
     fe0:	589b      	ldr	r3, [r3, r2]
     fe2:	687a      	ldr	r2, [r7, #4]
     fe4:	21c4      	movs	r1, #196	; 0xc4
     fe6:	5852      	ldr	r2, [r2, r1]
     fe8:	0010      	movs	r0, r2
     fea:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
     fec:	687b      	ldr	r3, [r7, #4]
     fee:	33b0      	adds	r3, #176	; 0xb0
     ff0:	2218      	movs	r2, #24
     ff2:	2100      	movs	r1, #0
     ff4:	0018      	movs	r0, r3
     ff6:	4b24      	ldr	r3, [pc, #144]	; (1088 <_http_client_clear_conn+0xc0>)
     ff8:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
     ffa:	687b      	ldr	r3, [r7, #4]
     ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     ffe:	2b00      	cmp	r3, #0
    1000:	d005      	beq.n	100e <_http_client_clear_conn+0x46>
		close(module->sock);
    1002:	687b      	ldr	r3, [r7, #4]
    1004:	781b      	ldrb	r3, [r3, #0]
    1006:	b25b      	sxtb	r3, r3
    1008:	0018      	movs	r0, r3
    100a:	4b20      	ldr	r3, [pc, #128]	; (108c <_http_client_clear_conn+0xc4>)
    100c:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    100e:	687b      	ldr	r3, [r7, #4]
    1010:	781b      	ldrb	r3, [r3, #0]
    1012:	b25b      	sxtb	r3, r3
    1014:	001a      	movs	r2, r3
    1016:	4b1e      	ldr	r3, [pc, #120]	; (1090 <_http_client_clear_conn+0xc8>)
    1018:	0092      	lsls	r2, r2, #2
    101a:	2100      	movs	r1, #0
    101c:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	336c      	adds	r3, #108	; 0x6c
    1022:	226c      	movs	r2, #108	; 0x6c
    1024:	2100      	movs	r1, #0
    1026:	0018      	movs	r0, r3
    1028:	4b17      	ldr	r3, [pc, #92]	; (1088 <_http_client_clear_conn+0xc0>)
    102a:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    102c:	687b      	ldr	r3, [r7, #4]
    102e:	33d8      	adds	r3, #216	; 0xd8
    1030:	2210      	movs	r2, #16
    1032:	2100      	movs	r1, #0
    1034:	0018      	movs	r0, r3
    1036:	4b14      	ldr	r3, [pc, #80]	; (1088 <_http_client_clear_conn+0xc0>)
    1038:	4798      	blx	r3
	module->req.state = STATE_INIT;
    103a:	687b      	ldr	r3, [r7, #4]
    103c:	2200      	movs	r2, #0
    103e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    1040:	687b      	ldr	r3, [r7, #4]
    1042:	22d8      	movs	r2, #216	; 0xd8
    1044:	2100      	movs	r1, #0
    1046:	5099      	str	r1, [r3, r2]

	module->sending = 0;
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	2241      	movs	r2, #65	; 0x41
    104c:	5c99      	ldrb	r1, [r3, r2]
    104e:	2001      	movs	r0, #1
    1050:	4381      	bics	r1, r0
    1052:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
    1054:	687b      	ldr	r3, [r7, #4]
    1056:	2241      	movs	r2, #65	; 0x41
    1058:	5c99      	ldrb	r1, [r3, r2]
    105a:	2002      	movs	r0, #2
    105c:	4381      	bics	r1, r0
    105e:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
    1060:	230c      	movs	r3, #12
    1062:	18fb      	adds	r3, r7, r3
    1064:	683a      	ldr	r2, [r7, #0]
    1066:	601a      	str	r2, [r3, #0]
	if (module->cb) {
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    106c:	2b00      	cmp	r3, #0
    106e:	d006      	beq.n	107e <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1074:	220c      	movs	r2, #12
    1076:	18ba      	adds	r2, r7, r2
    1078:	6878      	ldr	r0, [r7, #4]
    107a:	2104      	movs	r1, #4
    107c:	4798      	blx	r3
	}
}
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	46bd      	mov	sp, r7
    1082:	b006      	add	sp, #24
    1084:	bd80      	pop	{r7, pc}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	00011fcb 	.word	0x00011fcb
    108c:	00006aa5 	.word	0x00006aa5
    1090:	20000254 	.word	0x20000254

00001094 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    1094:	b590      	push	{r4, r7, lr}
    1096:	b087      	sub	sp, #28
    1098:	af00      	add	r7, sp, #0
    109a:	60f8      	str	r0, [r7, #12]
    109c:	60b9      	str	r1, [r7, #8]
    109e:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
    10a0:	68fb      	ldr	r3, [r7, #12]
    10a2:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
    10a4:	697b      	ldr	r3, [r7, #20]
    10a6:	2241      	movs	r2, #65	; 0x41
    10a8:	5c99      	ldrb	r1, [r3, r2]
    10aa:	2001      	movs	r0, #1
    10ac:	4301      	orrs	r1, r0
    10ae:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    10b0:	697b      	ldr	r3, [r7, #20]
    10b2:	2000      	movs	r0, #0
    10b4:	5618      	ldrsb	r0, [r3, r0]
    10b6:	687b      	ldr	r3, [r7, #4]
    10b8:	b29a      	uxth	r2, r3
    10ba:	68b9      	ldr	r1, [r7, #8]
    10bc:	2300      	movs	r3, #0
    10be:	4c14      	ldr	r4, [pc, #80]	; (1110 <_http_client_send_wait+0x7c>)
    10c0:	47a0      	blx	r4
    10c2:	0003      	movs	r3, r0
    10c4:	613b      	str	r3, [r7, #16]
    10c6:	693b      	ldr	r3, [r7, #16]
    10c8:	2b00      	cmp	r3, #0
    10ca:	da0f      	bge.n	10ec <_http_client_send_wait+0x58>
		module->sending = 0;
    10cc:	697b      	ldr	r3, [r7, #20]
    10ce:	2241      	movs	r2, #65	; 0x41
    10d0:	5c99      	ldrb	r1, [r3, r2]
    10d2:	2001      	movs	r0, #1
    10d4:	4381      	bics	r1, r0
    10d6:	5499      	strb	r1, [r3, r2]
		return result;
    10d8:	693b      	ldr	r3, [r7, #16]
    10da:	e014      	b.n	1106 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    10dc:	2000      	movs	r0, #0
    10de:	4b0d      	ldr	r3, [pc, #52]	; (1114 <_http_client_send_wait+0x80>)
    10e0:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
    10e2:	697b      	ldr	r3, [r7, #20]
    10e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    10e6:	0018      	movs	r0, r3
    10e8:	4b0b      	ldr	r3, [pc, #44]	; (1118 <_http_client_send_wait+0x84>)
    10ea:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    10ec:	697b      	ldr	r3, [r7, #20]
    10ee:	2241      	movs	r2, #65	; 0x41
    10f0:	5c9b      	ldrb	r3, [r3, r2]
    10f2:	2201      	movs	r2, #1
    10f4:	4013      	ands	r3, r2
    10f6:	b2db      	uxtb	r3, r3
    10f8:	2b00      	cmp	r3, #0
    10fa:	d003      	beq.n	1104 <_http_client_send_wait+0x70>
    10fc:	697b      	ldr	r3, [r7, #20]
    10fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1100:	2b02      	cmp	r3, #2
    1102:	d8eb      	bhi.n	10dc <_http_client_send_wait+0x48>
	}

	return 0;
    1104:	2300      	movs	r3, #0
}
    1106:	0018      	movs	r0, r3
    1108:	46bd      	mov	sp, r7
    110a:	b007      	add	sp, #28
    110c:	bd90      	pop	{r4, r7, pc}
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	00006799 	.word	0x00006799
    1114:	000039f5 	.word	0x000039f5
    1118:	000023e1 	.word	0x000023e1

0000111c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    111c:	b5f0      	push	{r4, r5, r6, r7, lr}
    111e:	46c6      	mov	lr, r8
    1120:	b500      	push	{lr}
    1122:	b0a0      	sub	sp, #128	; 0x80
    1124:	af02      	add	r7, sp, #8
    1126:	61f8      	str	r0, [r7, #28]
    1128:	4668      	mov	r0, sp
    112a:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    112c:	2318      	movs	r3, #24
    112e:	2218      	movs	r2, #24
    1130:	18ba      	adds	r2, r7, r2
    1132:	18d0      	adds	r0, r2, r3
    1134:	4bbd      	ldr	r3, [pc, #756]	; (142c <_http_client_request+0x310>)
    1136:	469c      	mov	ip, r3
    1138:	4663      	mov	r3, ip
    113a:	cb16      	ldmia	r3!, {r1, r2, r4}
    113c:	c016      	stmia	r0!, {r1, r2, r4}
    113e:	469c      	mov	ip, r3
    1140:	4663      	mov	r3, ip
    1142:	681b      	ldr	r3, [r3, #0]
    1144:	469c      	mov	ip, r3
    1146:	4663      	mov	r3, ip
    1148:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    114a:	69f8      	ldr	r0, [r7, #28]
    114c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    114e:	4684      	mov	ip, r0
    1150:	2301      	movs	r3, #1
    1152:	425b      	negs	r3, r3
    1154:	4698      	mov	r8, r3
    1156:	44c4      	add	ip, r8
    1158:	4663      	mov	r3, ip
    115a:	66fb      	str	r3, [r7, #108]	; 0x6c
    115c:	6038      	str	r0, [r7, #0]
    115e:	2300      	movs	r3, #0
    1160:	607b      	str	r3, [r7, #4]
    1162:	6839      	ldr	r1, [r7, #0]
    1164:	687a      	ldr	r2, [r7, #4]
    1166:	000b      	movs	r3, r1
    1168:	0f5b      	lsrs	r3, r3, #29
    116a:	469c      	mov	ip, r3
    116c:	0013      	movs	r3, r2
    116e:	00db      	lsls	r3, r3, #3
    1170:	617b      	str	r3, [r7, #20]
    1172:	4663      	mov	r3, ip
    1174:	697c      	ldr	r4, [r7, #20]
    1176:	431c      	orrs	r4, r3
    1178:	617c      	str	r4, [r7, #20]
    117a:	000b      	movs	r3, r1
    117c:	00db      	lsls	r3, r3, #3
    117e:	613b      	str	r3, [r7, #16]
    1180:	0005      	movs	r5, r0
    1182:	2200      	movs	r2, #0
    1184:	0016      	movs	r6, r2
    1186:	0f6a      	lsrs	r2, r5, #29
    1188:	00f3      	lsls	r3, r6, #3
    118a:	60fb      	str	r3, [r7, #12]
    118c:	68fb      	ldr	r3, [r7, #12]
    118e:	4313      	orrs	r3, r2
    1190:	60fb      	str	r3, [r7, #12]
    1192:	00eb      	lsls	r3, r5, #3
    1194:	60bb      	str	r3, [r7, #8]
    1196:	1dc3      	adds	r3, r0, #7
    1198:	08db      	lsrs	r3, r3, #3
    119a:	00db      	lsls	r3, r3, #3
    119c:	466a      	mov	r2, sp
    119e:	1ad3      	subs	r3, r2, r3
    11a0:	469d      	mov	sp, r3
    11a2:	ab02      	add	r3, sp, #8
    11a4:	3300      	adds	r3, #0
    11a6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
    11a8:	69fb      	ldr	r3, [r7, #28]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d100      	bne.n	11b0 <_http_client_request+0x94>
    11ae:	e346      	b.n	183e <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
    11b0:	69fb      	ldr	r3, [r7, #28]
    11b2:	2241      	movs	r2, #65	; 0x41
    11b4:	5c9b      	ldrb	r3, [r3, r2]
    11b6:	2201      	movs	r2, #1
    11b8:	4013      	ands	r3, r2
    11ba:	b2db      	uxtb	r3, r3
    11bc:	2b00      	cmp	r3, #0
    11be:	d000      	beq.n	11c2 <_http_client_request+0xa6>
    11c0:	e33f      	b.n	1842 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
    11c2:	69fb      	ldr	r3, [r7, #28]
    11c4:	33b0      	adds	r3, #176	; 0xb0
    11c6:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
    11c8:	69fb      	ldr	r3, [r7, #28]
    11ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    11cc:	2b03      	cmp	r3, #3
    11ce:	d003      	beq.n	11d8 <_http_client_request+0xbc>
    11d0:	2b04      	cmp	r3, #4
    11d2:	d100      	bne.n	11d6 <_http_client_request+0xba>
    11d4:	e1b3      	b.n	153e <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
    11d6:	e32f      	b.n	1838 <_http_client_request+0x71c>
		module->req.content_length = 0;
    11d8:	69fb      	ldr	r3, [r7, #28]
    11da:	22cc      	movs	r2, #204	; 0xcc
    11dc:	2100      	movs	r1, #0
    11de:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
    11e0:	69fb      	ldr	r3, [r7, #28]
    11e2:	22d0      	movs	r2, #208	; 0xd0
    11e4:	2100      	movs	r1, #0
    11e6:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    11e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    11ea:	69fb      	ldr	r3, [r7, #28]
    11ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    11ee:	4c90      	ldr	r4, [pc, #576]	; (1430 <_http_client_request+0x314>)
    11f0:	2334      	movs	r3, #52	; 0x34
    11f2:	2018      	movs	r0, #24
    11f4:	1838      	adds	r0, r7, r0
    11f6:	18c0      	adds	r0, r0, r3
    11f8:	69fb      	ldr	r3, [r7, #28]
    11fa:	9300      	str	r3, [sp, #0]
    11fc:	0023      	movs	r3, r4
    11fe:	4c8d      	ldr	r4, [pc, #564]	; (1434 <_http_client_request+0x318>)
    1200:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
    1202:	69fb      	ldr	r3, [r7, #28]
    1204:	22c8      	movs	r2, #200	; 0xc8
    1206:	5c9b      	ldrb	r3, [r3, r2]
    1208:	2b01      	cmp	r3, #1
    120a:	d10a      	bne.n	1222 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
    120c:	498a      	ldr	r1, [pc, #552]	; (1438 <_http_client_request+0x31c>)
    120e:	2334      	movs	r3, #52	; 0x34
    1210:	2218      	movs	r2, #24
    1212:	4694      	mov	ip, r2
    1214:	44bc      	add	ip, r7
    1216:	4463      	add	r3, ip
    1218:	2204      	movs	r2, #4
    121a:	0018      	movs	r0, r3
    121c:	4b87      	ldr	r3, [pc, #540]	; (143c <_http_client_request+0x320>)
    121e:	4798      	blx	r3
    1220:	e04e      	b.n	12c0 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
    1222:	69fb      	ldr	r3, [r7, #28]
    1224:	22c8      	movs	r2, #200	; 0xc8
    1226:	5c9b      	ldrb	r3, [r3, r2]
    1228:	2b02      	cmp	r3, #2
    122a:	d10a      	bne.n	1242 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
    122c:	4984      	ldr	r1, [pc, #528]	; (1440 <_http_client_request+0x324>)
    122e:	2334      	movs	r3, #52	; 0x34
    1230:	2218      	movs	r2, #24
    1232:	4694      	mov	ip, r2
    1234:	44bc      	add	ip, r7
    1236:	4463      	add	r3, ip
    1238:	2205      	movs	r2, #5
    123a:	0018      	movs	r0, r3
    123c:	4b7f      	ldr	r3, [pc, #508]	; (143c <_http_client_request+0x320>)
    123e:	4798      	blx	r3
    1240:	e03e      	b.n	12c0 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    1242:	69fb      	ldr	r3, [r7, #28]
    1244:	22c8      	movs	r2, #200	; 0xc8
    1246:	5c9b      	ldrb	r3, [r3, r2]
    1248:	2b03      	cmp	r3, #3
    124a:	d10a      	bne.n	1262 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    124c:	497d      	ldr	r1, [pc, #500]	; (1444 <_http_client_request+0x328>)
    124e:	2334      	movs	r3, #52	; 0x34
    1250:	2218      	movs	r2, #24
    1252:	4694      	mov	ip, r2
    1254:	44bc      	add	ip, r7
    1256:	4463      	add	r3, ip
    1258:	2207      	movs	r2, #7
    125a:	0018      	movs	r0, r3
    125c:	4b77      	ldr	r3, [pc, #476]	; (143c <_http_client_request+0x320>)
    125e:	4798      	blx	r3
    1260:	e02e      	b.n	12c0 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    1262:	69fb      	ldr	r3, [r7, #28]
    1264:	22c8      	movs	r2, #200	; 0xc8
    1266:	5c9b      	ldrb	r3, [r3, r2]
    1268:	2b04      	cmp	r3, #4
    126a:	d10a      	bne.n	1282 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    126c:	4976      	ldr	r1, [pc, #472]	; (1448 <_http_client_request+0x32c>)
    126e:	2334      	movs	r3, #52	; 0x34
    1270:	2218      	movs	r2, #24
    1272:	4694      	mov	ip, r2
    1274:	44bc      	add	ip, r7
    1276:	4463      	add	r3, ip
    1278:	2204      	movs	r2, #4
    127a:	0018      	movs	r0, r3
    127c:	4b6f      	ldr	r3, [pc, #444]	; (143c <_http_client_request+0x320>)
    127e:	4798      	blx	r3
    1280:	e01e      	b.n	12c0 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    1282:	69fb      	ldr	r3, [r7, #28]
    1284:	22c8      	movs	r2, #200	; 0xc8
    1286:	5c9b      	ldrb	r3, [r3, r2]
    1288:	2b05      	cmp	r3, #5
    128a:	d10a      	bne.n	12a2 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    128c:	496f      	ldr	r1, [pc, #444]	; (144c <_http_client_request+0x330>)
    128e:	2334      	movs	r3, #52	; 0x34
    1290:	2218      	movs	r2, #24
    1292:	4694      	mov	ip, r2
    1294:	44bc      	add	ip, r7
    1296:	4463      	add	r3, ip
    1298:	2208      	movs	r2, #8
    129a:	0018      	movs	r0, r3
    129c:	4b67      	ldr	r3, [pc, #412]	; (143c <_http_client_request+0x320>)
    129e:	4798      	blx	r3
    12a0:	e00e      	b.n	12c0 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    12a2:	69fb      	ldr	r3, [r7, #28]
    12a4:	22c8      	movs	r2, #200	; 0xc8
    12a6:	5c9b      	ldrb	r3, [r3, r2]
    12a8:	2b06      	cmp	r3, #6
    12aa:	d109      	bne.n	12c0 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    12ac:	4968      	ldr	r1, [pc, #416]	; (1450 <_http_client_request+0x334>)
    12ae:	2334      	movs	r3, #52	; 0x34
    12b0:	2218      	movs	r2, #24
    12b2:	4694      	mov	ip, r2
    12b4:	44bc      	add	ip, r7
    12b6:	4463      	add	r3, ip
    12b8:	2205      	movs	r2, #5
    12ba:	0018      	movs	r0, r3
    12bc:	4b5f      	ldr	r3, [pc, #380]	; (143c <_http_client_request+0x320>)
    12be:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    12c0:	69fb      	ldr	r3, [r7, #28]
    12c2:	3370      	adds	r3, #112	; 0x70
    12c4:	001c      	movs	r4, r3
    12c6:	69fb      	ldr	r3, [r7, #28]
    12c8:	3370      	adds	r3, #112	; 0x70
    12ca:	0018      	movs	r0, r3
    12cc:	4b61      	ldr	r3, [pc, #388]	; (1454 <_http_client_request+0x338>)
    12ce:	4798      	blx	r3
    12d0:	0002      	movs	r2, r0
    12d2:	2334      	movs	r3, #52	; 0x34
    12d4:	2118      	movs	r1, #24
    12d6:	468c      	mov	ip, r1
    12d8:	44bc      	add	ip, r7
    12da:	4463      	add	r3, ip
    12dc:	0021      	movs	r1, r4
    12de:	0018      	movs	r0, r3
    12e0:	4b56      	ldr	r3, [pc, #344]	; (143c <_http_client_request+0x320>)
    12e2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    12e4:	495c      	ldr	r1, [pc, #368]	; (1458 <_http_client_request+0x33c>)
    12e6:	2334      	movs	r3, #52	; 0x34
    12e8:	2218      	movs	r2, #24
    12ea:	4694      	mov	ip, r2
    12ec:	44bc      	add	ip, r7
    12ee:	4463      	add	r3, ip
    12f0:	220b      	movs	r2, #11
    12f2:	0018      	movs	r0, r3
    12f4:	4b51      	ldr	r3, [pc, #324]	; (143c <_http_client_request+0x320>)
    12f6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    12f8:	4958      	ldr	r1, [pc, #352]	; (145c <_http_client_request+0x340>)
    12fa:	2334      	movs	r3, #52	; 0x34
    12fc:	2218      	movs	r2, #24
    12fe:	4694      	mov	ip, r2
    1300:	44bc      	add	ip, r7
    1302:	4463      	add	r3, ip
    1304:	220c      	movs	r2, #12
    1306:	0018      	movs	r0, r3
    1308:	4b4c      	ldr	r3, [pc, #304]	; (143c <_http_client_request+0x320>)
    130a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    130c:	69fb      	ldr	r3, [r7, #28]
    130e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    1310:	69fb      	ldr	r3, [r7, #28]
    1312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    1314:	0018      	movs	r0, r3
    1316:	4b4f      	ldr	r3, [pc, #316]	; (1454 <_http_client_request+0x338>)
    1318:	4798      	blx	r3
    131a:	0002      	movs	r2, r0
    131c:	2334      	movs	r3, #52	; 0x34
    131e:	2118      	movs	r1, #24
    1320:	468c      	mov	ip, r1
    1322:	44bc      	add	ip, r7
    1324:	4463      	add	r3, ip
    1326:	0021      	movs	r1, r4
    1328:	0018      	movs	r0, r3
    132a:	4b44      	ldr	r3, [pc, #272]	; (143c <_http_client_request+0x320>)
    132c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    132e:	494c      	ldr	r1, [pc, #304]	; (1460 <_http_client_request+0x344>)
    1330:	2334      	movs	r3, #52	; 0x34
    1332:	2218      	movs	r2, #24
    1334:	4694      	mov	ip, r2
    1336:	44bc      	add	ip, r7
    1338:	4463      	add	r3, ip
    133a:	2202      	movs	r2, #2
    133c:	0018      	movs	r0, r3
    133e:	4b3f      	ldr	r3, [pc, #252]	; (143c <_http_client_request+0x320>)
    1340:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    1342:	4948      	ldr	r1, [pc, #288]	; (1464 <_http_client_request+0x348>)
    1344:	2334      	movs	r3, #52	; 0x34
    1346:	2218      	movs	r2, #24
    1348:	4694      	mov	ip, r2
    134a:	44bc      	add	ip, r7
    134c:	4463      	add	r3, ip
    134e:	2206      	movs	r2, #6
    1350:	0018      	movs	r0, r3
    1352:	4b3a      	ldr	r3, [pc, #232]	; (143c <_http_client_request+0x320>)
    1354:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    1356:	69fb      	ldr	r3, [r7, #28]
    1358:	1c5c      	adds	r4, r3, #1
    135a:	69fb      	ldr	r3, [r7, #28]
    135c:	3301      	adds	r3, #1
    135e:	0018      	movs	r0, r3
    1360:	4b3c      	ldr	r3, [pc, #240]	; (1454 <_http_client_request+0x338>)
    1362:	4798      	blx	r3
    1364:	0002      	movs	r2, r0
    1366:	2334      	movs	r3, #52	; 0x34
    1368:	2118      	movs	r1, #24
    136a:	468c      	mov	ip, r1
    136c:	44bc      	add	ip, r7
    136e:	4463      	add	r3, ip
    1370:	0021      	movs	r1, r4
    1372:	0018      	movs	r0, r3
    1374:	4b31      	ldr	r3, [pc, #196]	; (143c <_http_client_request+0x320>)
    1376:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    1378:	4939      	ldr	r1, [pc, #228]	; (1460 <_http_client_request+0x344>)
    137a:	2334      	movs	r3, #52	; 0x34
    137c:	2218      	movs	r2, #24
    137e:	4694      	mov	ip, r2
    1380:	44bc      	add	ip, r7
    1382:	4463      	add	r3, ip
    1384:	2202      	movs	r2, #2
    1386:	0018      	movs	r0, r3
    1388:	4b2c      	ldr	r3, [pc, #176]	; (143c <_http_client_request+0x320>)
    138a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    138c:	4936      	ldr	r1, [pc, #216]	; (1468 <_http_client_request+0x34c>)
    138e:	2334      	movs	r3, #52	; 0x34
    1390:	2218      	movs	r2, #24
    1392:	4694      	mov	ip, r2
    1394:	44bc      	add	ip, r7
    1396:	4463      	add	r3, ip
    1398:	2218      	movs	r2, #24
    139a:	0018      	movs	r0, r3
    139c:	4b27      	ldr	r3, [pc, #156]	; (143c <_http_client_request+0x320>)
    139e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    13a0:	4932      	ldr	r1, [pc, #200]	; (146c <_http_client_request+0x350>)
    13a2:	2334      	movs	r3, #52	; 0x34
    13a4:	2218      	movs	r2, #24
    13a6:	4694      	mov	ip, r2
    13a8:	44bc      	add	ip, r7
    13aa:	4463      	add	r3, ip
    13ac:	2213      	movs	r2, #19
    13ae:	0018      	movs	r0, r3
    13b0:	4b22      	ldr	r3, [pc, #136]	; (143c <_http_client_request+0x320>)
    13b2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    13b4:	492e      	ldr	r1, [pc, #184]	; (1470 <_http_client_request+0x354>)
    13b6:	2334      	movs	r3, #52	; 0x34
    13b8:	2218      	movs	r2, #24
    13ba:	4694      	mov	ip, r2
    13bc:	44bc      	add	ip, r7
    13be:	4463      	add	r3, ip
    13c0:	2217      	movs	r2, #23
    13c2:	0018      	movs	r0, r3
    13c4:	4b1d      	ldr	r3, [pc, #116]	; (143c <_http_client_request+0x320>)
    13c6:	4798      	blx	r3
		if (entity->read != NULL) {
    13c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    13ca:	68db      	ldr	r3, [r3, #12]
    13cc:	2b00      	cmp	r3, #0
    13ce:	d100      	bne.n	13d2 <_http_client_request+0x2b6>
    13d0:	e088      	b.n	14e4 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
    13d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    13d4:	781b      	ldrb	r3, [r3, #0]
    13d6:	2b00      	cmp	r3, #0
    13d8:	d00f      	beq.n	13fa <_http_client_request+0x2de>
				module->req.content_length = -1;
    13da:	69fb      	ldr	r3, [r7, #28]
    13dc:	21cc      	movs	r1, #204	; 0xcc
    13de:	2201      	movs	r2, #1
    13e0:	4252      	negs	r2, r2
    13e2:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    13e4:	4923      	ldr	r1, [pc, #140]	; (1474 <_http_client_request+0x358>)
    13e6:	2334      	movs	r3, #52	; 0x34
    13e8:	2218      	movs	r2, #24
    13ea:	4694      	mov	ip, r2
    13ec:	44bc      	add	ip, r7
    13ee:	4463      	add	r3, ip
    13f0:	221c      	movs	r2, #28
    13f2:	0018      	movs	r0, r3
    13f4:	4b11      	ldr	r3, [pc, #68]	; (143c <_http_client_request+0x320>)
    13f6:	4798      	blx	r3
    13f8:	e074      	b.n	14e4 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
    13fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    13fc:	689b      	ldr	r3, [r3, #8]
    13fe:	2b00      	cmp	r3, #0
    1400:	d070      	beq.n	14e4 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    1402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1404:	689a      	ldr	r2, [r3, #8]
    1406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1408:	695b      	ldr	r3, [r3, #20]
    140a:	0018      	movs	r0, r3
    140c:	4790      	blx	r2
    140e:	0001      	movs	r1, r0
    1410:	69fb      	ldr	r3, [r7, #28]
    1412:	22cc      	movs	r2, #204	; 0xcc
    1414:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
    1416:	69fb      	ldr	r3, [r7, #28]
    1418:	22cc      	movs	r2, #204	; 0xcc
    141a:	589b      	ldr	r3, [r3, r2]
    141c:	2b00      	cmp	r3, #0
    141e:	da2b      	bge.n	1478 <_http_client_request+0x35c>
					module->req.content_length = 0;
    1420:	69fb      	ldr	r3, [r7, #28]
    1422:	22cc      	movs	r2, #204	; 0xcc
    1424:	2100      	movs	r1, #0
    1426:	5099      	str	r1, [r3, r2]
    1428:	e05c      	b.n	14e4 <_http_client_request+0x3c8>
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	000137dc 	.word	0x000137dc
    1430:	00001095 	.word	0x00001095
    1434:	00001ffd 	.word	0x00001ffd
    1438:	00013700 	.word	0x00013700
    143c:	000020bd 	.word	0x000020bd
    1440:	00013708 	.word	0x00013708
    1444:	00013710 	.word	0x00013710
    1448:	00013718 	.word	0x00013718
    144c:	00013720 	.word	0x00013720
    1450:	0001372c 	.word	0x0001372c
    1454:	000124ab 	.word	0x000124ab
    1458:	00013734 	.word	0x00013734
    145c:	00013740 	.word	0x00013740
    1460:	00013750 	.word	0x00013750
    1464:	00013754 	.word	0x00013754
    1468:	0001375c 	.word	0x0001375c
    146c:	00013778 	.word	0x00013778
    1470:	0001378c 	.word	0x0001378c
    1474:	000137a4 	.word	0x000137a4
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    1478:	69fb      	ldr	r3, [r7, #28]
    147a:	22cc      	movs	r2, #204	; 0xcc
    147c:	589b      	ldr	r3, [r3, r2]
    147e:	001a      	movs	r2, r3
    1480:	49e0      	ldr	r1, [pc, #896]	; (1804 <_http_client_request+0x6e8>)
    1482:	2328      	movs	r3, #40	; 0x28
    1484:	2018      	movs	r0, #24
    1486:	4684      	mov	ip, r0
    1488:	44bc      	add	ip, r7
    148a:	4463      	add	r3, ip
    148c:	0018      	movs	r0, r3
    148e:	4bde      	ldr	r3, [pc, #888]	; (1808 <_http_client_request+0x6ec>)
    1490:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    1492:	49de      	ldr	r1, [pc, #888]	; (180c <_http_client_request+0x6f0>)
    1494:	2334      	movs	r3, #52	; 0x34
    1496:	2218      	movs	r2, #24
    1498:	4694      	mov	ip, r2
    149a:	44bc      	add	ip, r7
    149c:	4463      	add	r3, ip
    149e:	2210      	movs	r2, #16
    14a0:	0018      	movs	r0, r3
    14a2:	4bdb      	ldr	r3, [pc, #876]	; (1810 <_http_client_request+0x6f4>)
    14a4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
    14a6:	2328      	movs	r3, #40	; 0x28
    14a8:	2218      	movs	r2, #24
    14aa:	4694      	mov	ip, r2
    14ac:	44bc      	add	ip, r7
    14ae:	4463      	add	r3, ip
    14b0:	0018      	movs	r0, r3
    14b2:	4bd8      	ldr	r3, [pc, #864]	; (1814 <_http_client_request+0x6f8>)
    14b4:	4798      	blx	r3
    14b6:	0002      	movs	r2, r0
    14b8:	2328      	movs	r3, #40	; 0x28
    14ba:	2118      	movs	r1, #24
    14bc:	1879      	adds	r1, r7, r1
    14be:	18c9      	adds	r1, r1, r3
    14c0:	2334      	movs	r3, #52	; 0x34
    14c2:	2018      	movs	r0, #24
    14c4:	4684      	mov	ip, r0
    14c6:	44bc      	add	ip, r7
    14c8:	4463      	add	r3, ip
    14ca:	0018      	movs	r0, r3
    14cc:	4bd0      	ldr	r3, [pc, #832]	; (1810 <_http_client_request+0x6f4>)
    14ce:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    14d0:	49d1      	ldr	r1, [pc, #836]	; (1818 <_http_client_request+0x6fc>)
    14d2:	2334      	movs	r3, #52	; 0x34
    14d4:	2218      	movs	r2, #24
    14d6:	4694      	mov	ip, r2
    14d8:	44bc      	add	ip, r7
    14da:	4463      	add	r3, ip
    14dc:	2202      	movs	r2, #2
    14de:	0018      	movs	r0, r3
    14e0:	4bcb      	ldr	r3, [pc, #812]	; (1810 <_http_client_request+0x6f4>)
    14e2:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
    14e4:	69fb      	ldr	r3, [r7, #28]
    14e6:	22d4      	movs	r2, #212	; 0xd4
    14e8:	589b      	ldr	r3, [r3, r2]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d012      	beq.n	1514 <_http_client_request+0x3f8>
				module->req.ext_header,
    14ee:	69fb      	ldr	r3, [r7, #28]
    14f0:	22d4      	movs	r2, #212	; 0xd4
    14f2:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
    14f4:	69fb      	ldr	r3, [r7, #28]
    14f6:	22d4      	movs	r2, #212	; 0xd4
    14f8:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
    14fa:	0018      	movs	r0, r3
    14fc:	4bc5      	ldr	r3, [pc, #788]	; (1814 <_http_client_request+0x6f8>)
    14fe:	4798      	blx	r3
    1500:	0002      	movs	r2, r0
    1502:	2334      	movs	r3, #52	; 0x34
    1504:	2118      	movs	r1, #24
    1506:	468c      	mov	ip, r1
    1508:	44bc      	add	ip, r7
    150a:	4463      	add	r3, ip
    150c:	0021      	movs	r1, r4
    150e:	0018      	movs	r0, r3
    1510:	4bbf      	ldr	r3, [pc, #764]	; (1810 <_http_client_request+0x6f4>)
    1512:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    1514:	49c0      	ldr	r1, [pc, #768]	; (1818 <_http_client_request+0x6fc>)
    1516:	2334      	movs	r3, #52	; 0x34
    1518:	2218      	movs	r2, #24
    151a:	4694      	mov	ip, r2
    151c:	44bc      	add	ip, r7
    151e:	4463      	add	r3, ip
    1520:	2202      	movs	r2, #2
    1522:	0018      	movs	r0, r3
    1524:	4bba      	ldr	r3, [pc, #744]	; (1810 <_http_client_request+0x6f4>)
    1526:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    1528:	2334      	movs	r3, #52	; 0x34
    152a:	2218      	movs	r2, #24
    152c:	4694      	mov	ip, r2
    152e:	44bc      	add	ip, r7
    1530:	4463      	add	r3, ip
    1532:	0018      	movs	r0, r3
    1534:	4bb9      	ldr	r3, [pc, #740]	; (181c <_http_client_request+0x700>)
    1536:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
    1538:	69fb      	ldr	r3, [r7, #28]
    153a:	2204      	movs	r2, #4
    153c:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
    153e:	69fb      	ldr	r3, [r7, #28]
    1540:	22cc      	movs	r2, #204	; 0xcc
    1542:	589b      	ldr	r3, [r3, r2]
    1544:	2b00      	cmp	r3, #0
    1546:	db00      	blt.n	154a <_http_client_request+0x42e>
    1548:	e0c6      	b.n	16d8 <_http_client_request+0x5bc>
    154a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    154c:	68db      	ldr	r3, [r3, #12]
    154e:	2b00      	cmp	r3, #0
    1550:	d100      	bne.n	1554 <_http_client_request+0x438>
    1552:	e0c1      	b.n	16d8 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    1554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1556:	68dc      	ldr	r4, [r3, #12]
    1558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    155a:	6958      	ldr	r0, [r3, #20]
    155c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    155e:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    1560:	69fb      	ldr	r3, [r7, #28]
    1562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    1564:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    1566:	69fb      	ldr	r3, [r7, #28]
    1568:	22d0      	movs	r2, #208	; 0xd0
    156a:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    156c:	002a      	movs	r2, r5
    156e:	47a0      	blx	r4
    1570:	0003      	movs	r3, r0
    1572:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    1574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1576:	2b00      	cmp	r3, #0
    1578:	da01      	bge.n	157e <_http_client_request+0x462>
				size = 0;
    157a:	2300      	movs	r3, #0
    157c:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    157e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1580:	220a      	movs	r2, #10
    1582:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    1584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1586:	220d      	movs	r2, #13
    1588:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    158a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    158c:	3305      	adds	r3, #5
    158e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1590:	210d      	movs	r1, #13
    1592:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    1594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1596:	3306      	adds	r3, #6
    1598:	6eba      	ldr	r2, [r7, #104]	; 0x68
    159a:	210a      	movs	r1, #10
    159c:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
    159e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    15a0:	2b00      	cmp	r3, #0
    15a2:	db14      	blt.n	15ce <_http_client_request+0x4b2>
				ptr = buffer + 2;
    15a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    15a6:	3302      	adds	r3, #2
    15a8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
    15aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    15ac:	4a9c      	ldr	r2, [pc, #624]	; (1820 <_http_client_request+0x704>)
    15ae:	4013      	ands	r3, r2
    15b0:	d504      	bpl.n	15bc <_http_client_request+0x4a0>
    15b2:	3b01      	subs	r3, #1
    15b4:	2210      	movs	r2, #16
    15b6:	4252      	negs	r2, r2
    15b8:	4313      	orrs	r3, r2
    15ba:	3301      	adds	r3, #1
    15bc:	001a      	movs	r2, r3
    15be:	2318      	movs	r3, #24
    15c0:	2118      	movs	r1, #24
    15c2:	468c      	mov	ip, r1
    15c4:	44bc      	add	ip, r7
    15c6:	4463      	add	r3, ip
    15c8:	5c9a      	ldrb	r2, [r3, r2]
    15ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    15cc:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
    15ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    15d0:	2b0f      	cmp	r3, #15
    15d2:	dd19      	ble.n	1608 <_http_client_request+0x4ec>
				ptr = buffer + 1;
    15d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    15d6:	3301      	adds	r3, #1
    15d8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
    15da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    15dc:	2b00      	cmp	r3, #0
    15de:	da00      	bge.n	15e2 <_http_client_request+0x4c6>
    15e0:	330f      	adds	r3, #15
    15e2:	111b      	asrs	r3, r3, #4
    15e4:	001a      	movs	r2, r3
    15e6:	4b8e      	ldr	r3, [pc, #568]	; (1820 <_http_client_request+0x704>)
    15e8:	4013      	ands	r3, r2
    15ea:	d504      	bpl.n	15f6 <_http_client_request+0x4da>
    15ec:	3b01      	subs	r3, #1
    15ee:	2210      	movs	r2, #16
    15f0:	4252      	negs	r2, r2
    15f2:	4313      	orrs	r3, r2
    15f4:	3301      	adds	r3, #1
    15f6:	001a      	movs	r2, r3
    15f8:	2318      	movs	r3, #24
    15fa:	2118      	movs	r1, #24
    15fc:	468c      	mov	ip, r1
    15fe:	44bc      	add	ip, r7
    1600:	4463      	add	r3, ip
    1602:	5c9a      	ldrb	r2, [r3, r2]
    1604:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1606:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
    1608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    160a:	2bff      	cmp	r3, #255	; 0xff
    160c:	dd18      	ble.n	1640 <_http_client_request+0x524>
				ptr = buffer;
    160e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1610:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
    1612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1614:	2b00      	cmp	r3, #0
    1616:	da00      	bge.n	161a <_http_client_request+0x4fe>
    1618:	33ff      	adds	r3, #255	; 0xff
    161a:	121b      	asrs	r3, r3, #8
    161c:	001a      	movs	r2, r3
    161e:	4b80      	ldr	r3, [pc, #512]	; (1820 <_http_client_request+0x704>)
    1620:	4013      	ands	r3, r2
    1622:	d504      	bpl.n	162e <_http_client_request+0x512>
    1624:	3b01      	subs	r3, #1
    1626:	2210      	movs	r2, #16
    1628:	4252      	negs	r2, r2
    162a:	4313      	orrs	r3, r2
    162c:	3301      	adds	r3, #1
    162e:	001a      	movs	r2, r3
    1630:	2318      	movs	r3, #24
    1632:	2118      	movs	r1, #24
    1634:	468c      	mov	ip, r1
    1636:	44bc      	add	ip, r7
    1638:	4463      	add	r3, ip
    163a:	5c9a      	ldrb	r2, [r3, r2]
    163c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    163e:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    1640:	69fb      	ldr	r3, [r7, #28]
    1642:	2000      	movs	r0, #0
    1644:	5618      	ldrsb	r0, [r3, r0]
    1646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1648:	3303      	adds	r3, #3
    164a:	001a      	movs	r2, r3
    164c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    164e:	1ad3      	subs	r3, r2, r3
    1650:	b29a      	uxth	r2, r3
    1652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1654:	b29b      	uxth	r3, r3
    1656:	18d3      	adds	r3, r2, r3
    1658:	b29b      	uxth	r3, r3
    165a:	3304      	adds	r3, #4
    165c:	b29a      	uxth	r2, r3
    165e:	6f39      	ldr	r1, [r7, #112]	; 0x70
    1660:	2300      	movs	r3, #0
    1662:	4c70      	ldr	r4, [pc, #448]	; (1824 <_http_client_request+0x708>)
    1664:	47a0      	blx	r4
    1666:	0003      	movs	r3, r0
    1668:	663b      	str	r3, [r7, #96]	; 0x60
    166a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    166c:	2b00      	cmp	r3, #0
    166e:	da07      	bge.n	1680 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
    1670:	2305      	movs	r3, #5
    1672:	425a      	negs	r2, r3
    1674:	69fb      	ldr	r3, [r7, #28]
    1676:	0011      	movs	r1, r2
    1678:	0018      	movs	r0, r3
    167a:	4b6b      	ldr	r3, [pc, #428]	; (1828 <_http_client_request+0x70c>)
    167c:	4798      	blx	r3
				return;
    167e:	e0e1      	b.n	1844 <_http_client_request+0x728>
			module->req.sent_length += size;
    1680:	69fb      	ldr	r3, [r7, #28]
    1682:	22d0      	movs	r2, #208	; 0xd0
    1684:	589a      	ldr	r2, [r3, r2]
    1686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1688:	18d2      	adds	r2, r2, r3
    168a:	69fb      	ldr	r3, [r7, #28]
    168c:	21d0      	movs	r1, #208	; 0xd0
    168e:	505a      	str	r2, [r3, r1]
			if(size == 0) {
    1690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1692:	2b00      	cmp	r3, #0
    1694:	d000      	beq.n	1698 <_http_client_request+0x57c>
    1696:	e0c9      	b.n	182c <_http_client_request+0x710>
				if (module->req.entity.close) {
    1698:	69fb      	ldr	r3, [r7, #28]
    169a:	22c0      	movs	r2, #192	; 0xc0
    169c:	589b      	ldr	r3, [r3, r2]
    169e:	2b00      	cmp	r3, #0
    16a0:	d007      	beq.n	16b2 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
    16a2:	69fb      	ldr	r3, [r7, #28]
    16a4:	22c0      	movs	r2, #192	; 0xc0
    16a6:	589b      	ldr	r3, [r3, r2]
    16a8:	69fa      	ldr	r2, [r7, #28]
    16aa:	21c4      	movs	r1, #196	; 0xc4
    16ac:	5852      	ldr	r2, [r2, r1]
    16ae:	0010      	movs	r0, r2
    16b0:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    16b2:	69fb      	ldr	r3, [r7, #28]
    16b4:	2202      	movs	r2, #2
    16b6:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    16b8:	69fb      	ldr	r3, [r7, #28]
    16ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    16bc:	2b00      	cmp	r3, #0
    16be:	d100      	bne.n	16c2 <_http_client_request+0x5a6>
    16c0:	e0b5      	b.n	182e <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    16c2:	69fb      	ldr	r3, [r7, #28]
    16c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    16c6:	220c      	movs	r2, #12
    16c8:	2118      	movs	r1, #24
    16ca:	468c      	mov	ip, r1
    16cc:	44bc      	add	ip, r7
    16ce:	4462      	add	r2, ip
    16d0:	69f8      	ldr	r0, [r7, #28]
    16d2:	2101      	movs	r1, #1
    16d4:	4798      	blx	r3
				break;
    16d6:	e0aa      	b.n	182e <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
    16d8:	69fb      	ldr	r3, [r7, #28]
    16da:	22cc      	movs	r2, #204	; 0xcc
    16dc:	589b      	ldr	r3, [r3, r2]
    16de:	2b00      	cmp	r3, #0
    16e0:	dc00      	bgt.n	16e4 <_http_client_request+0x5c8>
    16e2:	e07c      	b.n	17de <_http_client_request+0x6c2>
    16e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    16e6:	68db      	ldr	r3, [r3, #12]
    16e8:	2b00      	cmp	r3, #0
    16ea:	d100      	bne.n	16ee <_http_client_request+0x5d2>
    16ec:	e077      	b.n	17de <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
    16ee:	69fb      	ldr	r3, [r7, #28]
    16f0:	22d0      	movs	r2, #208	; 0xd0
    16f2:	589a      	ldr	r2, [r3, r2]
    16f4:	69fb      	ldr	r3, [r7, #28]
    16f6:	21cc      	movs	r1, #204	; 0xcc
    16f8:	585b      	ldr	r3, [r3, r1]
    16fa:	429a      	cmp	r2, r3
    16fc:	db1f      	blt.n	173e <_http_client_request+0x622>
				if (module->req.entity.close) {
    16fe:	69fb      	ldr	r3, [r7, #28]
    1700:	22c0      	movs	r2, #192	; 0xc0
    1702:	589b      	ldr	r3, [r3, r2]
    1704:	2b00      	cmp	r3, #0
    1706:	d007      	beq.n	1718 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
    1708:	69fb      	ldr	r3, [r7, #28]
    170a:	22c0      	movs	r2, #192	; 0xc0
    170c:	589b      	ldr	r3, [r3, r2]
    170e:	69fa      	ldr	r2, [r7, #28]
    1710:	21c4      	movs	r1, #196	; 0xc4
    1712:	5852      	ldr	r2, [r2, r1]
    1714:	0010      	movs	r0, r2
    1716:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    1718:	69fb      	ldr	r3, [r7, #28]
    171a:	2202      	movs	r2, #2
    171c:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    171e:	69fb      	ldr	r3, [r7, #28]
    1720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1722:	2b00      	cmp	r3, #0
    1724:	d100      	bne.n	1728 <_http_client_request+0x60c>
    1726:	e084      	b.n	1832 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    1728:	69fb      	ldr	r3, [r7, #28]
    172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    172c:	220c      	movs	r2, #12
    172e:	2118      	movs	r1, #24
    1730:	468c      	mov	ip, r1
    1732:	44bc      	add	ip, r7
    1734:	4462      	add	r2, ip
    1736:	69f8      	ldr	r0, [r7, #28]
    1738:	2101      	movs	r1, #1
    173a:	4798      	blx	r3
				break;
    173c:	e079      	b.n	1832 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    173e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1740:	68dc      	ldr	r4, [r3, #12]
    1742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1744:	6958      	ldr	r0, [r3, #20]
    1746:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    1748:	69fb      	ldr	r3, [r7, #28]
    174a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    174c:	69fb      	ldr	r3, [r7, #28]
    174e:	22d0      	movs	r2, #208	; 0xd0
    1750:	589b      	ldr	r3, [r3, r2]
    1752:	002a      	movs	r2, r5
    1754:	47a0      	blx	r4
    1756:	0003      	movs	r3, r0
    1758:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    175a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    175c:	2b00      	cmp	r3, #0
    175e:	da0d      	bge.n	177c <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    1760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1762:	2b00      	cmp	r3, #0
    1764:	d102      	bne.n	176c <_http_client_request+0x650>
    1766:	234d      	movs	r3, #77	; 0x4d
    1768:	425b      	negs	r3, r3
    176a:	e001      	b.n	1770 <_http_client_request+0x654>
    176c:	2305      	movs	r3, #5
    176e:	425b      	negs	r3, r3
    1770:	69fa      	ldr	r2, [r7, #28]
    1772:	0019      	movs	r1, r3
    1774:	0010      	movs	r0, r2
    1776:	4b2c      	ldr	r3, [pc, #176]	; (1828 <_http_client_request+0x70c>)
    1778:	4798      	blx	r3
			if (size < 0) {
    177a:	e057      	b.n	182c <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
    177c:	69fb      	ldr	r3, [r7, #28]
    177e:	22cc      	movs	r2, #204	; 0xcc
    1780:	589a      	ldr	r2, [r3, r2]
    1782:	69fb      	ldr	r3, [r7, #28]
    1784:	21d0      	movs	r1, #208	; 0xd0
    1786:	585b      	ldr	r3, [r3, r1]
    1788:	1ad2      	subs	r2, r2, r3
    178a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    178c:	429a      	cmp	r2, r3
    178e:	da07      	bge.n	17a0 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
    1790:	69fb      	ldr	r3, [r7, #28]
    1792:	22cc      	movs	r2, #204	; 0xcc
    1794:	589a      	ldr	r2, [r3, r2]
    1796:	69fb      	ldr	r3, [r7, #28]
    1798:	21d0      	movs	r1, #208	; 0xd0
    179a:	585b      	ldr	r3, [r3, r1]
    179c:	1ad3      	subs	r3, r2, r3
    179e:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    17a0:	69fb      	ldr	r3, [r7, #28]
    17a2:	2000      	movs	r0, #0
    17a4:	5618      	ldrsb	r0, [r3, r0]
    17a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    17a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    17aa:	b29a      	uxth	r2, r3
    17ac:	2300      	movs	r3, #0
    17ae:	4c1d      	ldr	r4, [pc, #116]	; (1824 <_http_client_request+0x708>)
    17b0:	47a0      	blx	r4
    17b2:	0003      	movs	r3, r0
    17b4:	663b      	str	r3, [r7, #96]	; 0x60
    17b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    17b8:	2b00      	cmp	r3, #0
    17ba:	da07      	bge.n	17cc <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
    17bc:	2305      	movs	r3, #5
    17be:	425a      	negs	r2, r3
    17c0:	69fb      	ldr	r3, [r7, #28]
    17c2:	0011      	movs	r1, r2
    17c4:	0018      	movs	r0, r3
    17c6:	4b18      	ldr	r3, [pc, #96]	; (1828 <_http_client_request+0x70c>)
    17c8:	4798      	blx	r3
					return;
    17ca:	e03b      	b.n	1844 <_http_client_request+0x728>
				module->req.sent_length += size;
    17cc:	69fb      	ldr	r3, [r7, #28]
    17ce:	22d0      	movs	r2, #208	; 0xd0
    17d0:	589a      	ldr	r2, [r3, r2]
    17d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    17d4:	18d2      	adds	r2, r2, r3
    17d6:	69fb      	ldr	r3, [r7, #28]
    17d8:	21d0      	movs	r1, #208	; 0xd0
    17da:	505a      	str	r2, [r3, r1]
			if (size < 0) {
    17dc:	e026      	b.n	182c <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
    17de:	69fb      	ldr	r3, [r7, #28]
    17e0:	2202      	movs	r2, #2
    17e2:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
    17e4:	69fb      	ldr	r3, [r7, #28]
    17e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    17e8:	2b00      	cmp	r3, #0
    17ea:	d024      	beq.n	1836 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    17ec:	69fb      	ldr	r3, [r7, #28]
    17ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    17f0:	220c      	movs	r2, #12
    17f2:	2118      	movs	r1, #24
    17f4:	468c      	mov	ip, r1
    17f6:	44bc      	add	ip, r7
    17f8:	4462      	add	r2, ip
    17fa:	69f8      	ldr	r0, [r7, #28]
    17fc:	2101      	movs	r1, #1
    17fe:	4798      	blx	r3
			break;
    1800:	e019      	b.n	1836 <_http_client_request+0x71a>
    1802:	46c0      	nop			; (mov r8, r8)
    1804:	000137c4 	.word	0x000137c4
    1808:	000123ed 	.word	0x000123ed
    180c:	000137c8 	.word	0x000137c8
    1810:	000020bd 	.word	0x000020bd
    1814:	000124ab 	.word	0x000124ab
    1818:	00013750 	.word	0x00013750
    181c:	000020f9 	.word	0x000020f9
    1820:	8000000f 	.word	0x8000000f
    1824:	00006799 	.word	0x00006799
    1828:	00000fc9 	.word	0x00000fc9
		break;
    182c:	e004      	b.n	1838 <_http_client_request+0x71c>
				break;
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	e002      	b.n	1838 <_http_client_request+0x71c>
				break;
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	e000      	b.n	1838 <_http_client_request+0x71c>
			break;
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	69bb      	ldr	r3, [r7, #24]
    183a:	469d      	mov	sp, r3
    183c:	e004      	b.n	1848 <_http_client_request+0x72c>
		return;
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	e000      	b.n	1844 <_http_client_request+0x728>
		return;
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	69bb      	ldr	r3, [r7, #24]
    1846:	469d      	mov	sp, r3
	}
}
    1848:	46bd      	mov	sp, r7
    184a:	b01e      	add	sp, #120	; 0x78
    184c:	bc04      	pop	{r2}
    184e:	4690      	mov	r8, r2
    1850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1852:	46c0      	nop			; (mov r8, r8)

00001854 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    1854:	b590      	push	{r4, r7, lr}
    1856:	b083      	sub	sp, #12
    1858:	af00      	add	r7, sp, #0
    185a:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	2b00      	cmp	r3, #0
    1860:	d021      	beq.n	18a6 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    1862:	687b      	ldr	r3, [r7, #4]
    1864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    186a:	429a      	cmp	r2, r3
    186c:	d307      	bcc.n	187e <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
    186e:	238b      	movs	r3, #139	; 0x8b
    1870:	425a      	negs	r2, r3
    1872:	687b      	ldr	r3, [r7, #4]
    1874:	0011      	movs	r1, r2
    1876:	0018      	movs	r0, r3
    1878:	4b0d      	ldr	r3, [pc, #52]	; (18b0 <_http_client_recv_packet+0x5c>)
    187a:	4798      	blx	r3
		return;
    187c:	e014      	b.n	18a8 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	2000      	movs	r0, #0
    1882:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
    1884:	687b      	ldr	r3, [r7, #4]
    1886:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    1888:	687b      	ldr	r3, [r7, #4]
    188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    188c:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    188e:	687b      	ldr	r3, [r7, #4]
    1890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
    1892:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
    1898:	b29b      	uxth	r3, r3
    189a:	1ad3      	subs	r3, r2, r3
    189c:	b29a      	uxth	r2, r3
    189e:	2300      	movs	r3, #0
    18a0:	4c04      	ldr	r4, [pc, #16]	; (18b4 <_http_client_recv_packet+0x60>)
    18a2:	47a0      	blx	r4
    18a4:	e000      	b.n	18a8 <_http_client_recv_packet+0x54>
		return;
    18a6:	46c0      	nop			; (mov r8, r8)
}
    18a8:	46bd      	mov	sp, r7
    18aa:	b003      	add	sp, #12
    18ac:	bd90      	pop	{r4, r7, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	00000fc9 	.word	0x00000fc9
    18b4:	000068fd 	.word	0x000068fd

000018b8 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
    18b8:	b580      	push	{r7, lr}
    18ba:	b082      	sub	sp, #8
    18bc:	af00      	add	r7, sp, #0
    18be:	6078      	str	r0, [r7, #4]
    18c0:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    18c6:	683b      	ldr	r3, [r7, #0]
    18c8:	18d2      	adds	r2, r2, r3
    18ca:	687b      	ldr	r3, [r7, #4]
    18cc:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
    18ce:	687b      	ldr	r3, [r7, #4]
    18d0:	2258      	movs	r2, #88	; 0x58
    18d2:	5a9b      	ldrh	r3, [r3, r2]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d007      	beq.n	18e8 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    18e0:	0019      	movs	r1, r3
    18e2:	0010      	movs	r0, r2
    18e4:	4b06      	ldr	r3, [pc, #24]	; (1900 <_http_client_recved_packet+0x48>)
    18e6:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
    18e8:	46c0      	nop			; (mov r8, r8)
    18ea:	687b      	ldr	r3, [r7, #4]
    18ec:	0018      	movs	r0, r3
    18ee:	4b05      	ldr	r3, [pc, #20]	; (1904 <_http_client_recved_packet+0x4c>)
    18f0:	4798      	blx	r3
    18f2:	1e03      	subs	r3, r0, #0
    18f4:	d1f9      	bne.n	18ea <_http_client_recved_packet+0x32>
}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	46bd      	mov	sp, r7
    18fa:	b002      	add	sp, #8
    18fc:	bd80      	pop	{r7, pc}
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	000023b5 	.word	0x000023b5
    1904:	00001909 	.word	0x00001909

00001908 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
    1908:	b580      	push	{r7, lr}
    190a:	b082      	sub	sp, #8
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	22d8      	movs	r2, #216	; 0xd8
    1914:	589b      	ldr	r3, [r3, r2]
    1916:	2b00      	cmp	r3, #0
    1918:	d002      	beq.n	1920 <_http_client_handle_response+0x18>
    191a:	2b01      	cmp	r3, #1
    191c:	d006      	beq.n	192c <_http_client_handle_response+0x24>
    191e:	e00b      	b.n	1938 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
    1920:	687b      	ldr	r3, [r7, #4]
    1922:	0018      	movs	r0, r3
    1924:	4b07      	ldr	r3, [pc, #28]	; (1944 <_http_client_handle_response+0x3c>)
    1926:	4798      	blx	r3
    1928:	0003      	movs	r3, r0
    192a:	e006      	b.n	193a <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
    192c:	687b      	ldr	r3, [r7, #4]
    192e:	0018      	movs	r0, r3
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <_http_client_handle_response+0x40>)
    1932:	4798      	blx	r3
    1934:	0003      	movs	r3, r0
    1936:	e000      	b.n	193a <_http_client_handle_response+0x32>
	}
	return 0;
    1938:	2300      	movs	r3, #0
}
    193a:	0018      	movs	r0, r3
    193c:	46bd      	mov	sp, r7
    193e:	b002      	add	sp, #8
    1940:	bd80      	pop	{r7, pc}
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	0000194d 	.word	0x0000194d
    1948:	00001e05 	.word	0x00001e05

0000194c <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
    194c:	b590      	push	{r4, r7, lr}
    194e:	b08b      	sub	sp, #44	; 0x2c
    1950:	af00      	add	r7, sp, #0
    1952:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
    1954:	687b      	ldr	r3, [r7, #4]
    1956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1958:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    195a:	4b9a      	ldr	r3, [pc, #616]	; (1bc4 <_http_client_handle_header+0x278>)
    195c:	681a      	ldr	r2, [r3, #0]
    195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1960:	0011      	movs	r1, r2
    1962:	0018      	movs	r0, r3
    1964:	4b98      	ldr	r3, [pc, #608]	; (1bc8 <_http_client_handle_header+0x27c>)
    1966:	4798      	blx	r3
    1968:	0003      	movs	r3, r0
    196a:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    196c:	69bb      	ldr	r3, [r7, #24]
    196e:	2b00      	cmp	r3, #0
    1970:	d007      	beq.n	1982 <_http_client_handle_header+0x36>
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    1976:	687b      	ldr	r3, [r7, #4]
    1978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    197a:	18d2      	adds	r2, r2, r3
    197c:	69bb      	ldr	r3, [r7, #24]
    197e:	429a      	cmp	r2, r3
    1980:	d807      	bhi.n	1992 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
    1982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1984:	687b      	ldr	r3, [r7, #4]
    1986:	0011      	movs	r1, r2
    1988:	0018      	movs	r0, r3
    198a:	4b90      	ldr	r3, [pc, #576]	; (1bcc <_http_client_handle_header+0x280>)
    198c:	4798      	blx	r3
			return 0;
    198e:	2300      	movs	r3, #0
    1990:	e114      	b.n	1bbc <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
    1992:	4b8c      	ldr	r3, [pc, #560]	; (1bc4 <_http_client_handle_header+0x278>)
    1994:	681c      	ldr	r4, [r3, #0]
    1996:	4b8b      	ldr	r3, [pc, #556]	; (1bc4 <_http_client_handle_header+0x278>)
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	0018      	movs	r0, r3
    199c:	4b8c      	ldr	r3, [pc, #560]	; (1bd0 <_http_client_handle_header+0x284>)
    199e:	4798      	blx	r3
    19a0:	0002      	movs	r2, r0
    19a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19a4:	0021      	movs	r1, r4
    19a6:	0018      	movs	r0, r3
    19a8:	4b8a      	ldr	r3, [pc, #552]	; (1bd4 <_http_client_handle_header+0x288>)
    19aa:	4798      	blx	r3
    19ac:	1e03      	subs	r3, r0, #0
    19ae:	d15d      	bne.n	1a6c <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
    19b0:	4b84      	ldr	r3, [pc, #528]	; (1bc4 <_http_client_handle_header+0x278>)
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	0018      	movs	r0, r3
    19b6:	4b86      	ldr	r3, [pc, #536]	; (1bd0 <_http_client_handle_header+0x284>)
    19b8:	4798      	blx	r3
    19ba:	0002      	movs	r2, r0
    19bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19be:	189a      	adds	r2, r3, r2
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	0011      	movs	r1, r2
    19c4:	0018      	movs	r0, r3
    19c6:	4b81      	ldr	r3, [pc, #516]	; (1bcc <_http_client_handle_header+0x280>)
    19c8:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    19ce:	2b00      	cmp	r3, #0
    19d0:	d046      	beq.n	1a60 <_http_client_handle_header+0x114>
    19d2:	687b      	ldr	r3, [r7, #4]
    19d4:	22e4      	movs	r2, #228	; 0xe4
    19d6:	5a9b      	ldrh	r3, [r3, r2]
    19d8:	2b00      	cmp	r3, #0
    19da:	d041      	beq.n	1a60 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	22dc      	movs	r2, #220	; 0xdc
    19e0:	589b      	ldr	r3, [r3, r2]
    19e2:	2b00      	cmp	r3, #0
    19e4:	da19      	bge.n	1a1a <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
    19e6:	687b      	ldr	r3, [r7, #4]
    19e8:	22e4      	movs	r2, #228	; 0xe4
    19ea:	5a9a      	ldrh	r2, [r3, r2]
    19ec:	230c      	movs	r3, #12
    19ee:	18fb      	adds	r3, r7, r3
    19f0:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
    19f2:	230c      	movs	r3, #12
    19f4:	18fb      	adds	r3, r7, r3
    19f6:	2201      	movs	r2, #1
    19f8:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	22e0      	movs	r2, #224	; 0xe0
    19fe:	2100      	movs	r1, #0
    1a00:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
    1a02:	230c      	movs	r3, #12
    1a04:	18fb      	adds	r3, r7, r3
    1a06:	2200      	movs	r2, #0
    1a08:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1a0e:	220c      	movs	r2, #12
    1a10:	18ba      	adds	r2, r7, r2
    1a12:	6878      	ldr	r0, [r7, #4]
    1a14:	2102      	movs	r1, #2
    1a16:	4798      	blx	r3
    1a18:	e022      	b.n	1a60 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    1a1a:	687b      	ldr	r3, [r7, #4]
    1a1c:	22dc      	movs	r2, #220	; 0xdc
    1a1e:	589a      	ldr	r2, [r3, r2]
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1a24:	429a      	cmp	r2, r3
    1a26:	dd1b      	ble.n	1a60 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	22e4      	movs	r2, #228	; 0xe4
    1a2c:	5a9a      	ldrh	r2, [r3, r2]
    1a2e:	230c      	movs	r3, #12
    1a30:	18fb      	adds	r3, r7, r3
    1a32:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
    1a34:	687b      	ldr	r3, [r7, #4]
    1a36:	22dc      	movs	r2, #220	; 0xdc
    1a38:	589b      	ldr	r3, [r3, r2]
    1a3a:	001a      	movs	r2, r3
    1a3c:	230c      	movs	r3, #12
    1a3e:	18fb      	adds	r3, r7, r3
    1a40:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
    1a42:	230c      	movs	r3, #12
    1a44:	18fb      	adds	r3, r7, r3
    1a46:	2200      	movs	r2, #0
    1a48:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
    1a4a:	687b      	ldr	r3, [r7, #4]
    1a4c:	22e0      	movs	r2, #224	; 0xe0
    1a4e:	2100      	movs	r1, #0
    1a50:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1a56:	220c      	movs	r2, #12
    1a58:	18ba      	adds	r2, r7, r2
    1a5a:	6878      	ldr	r0, [r7, #4]
    1a5c:	2102      	movs	r1, #2
    1a5e:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	22d8      	movs	r2, #216	; 0xd8
    1a64:	2101      	movs	r1, #1
    1a66:	5099      	str	r1, [r3, r2]
			return 1;
    1a68:	2301      	movs	r3, #1
    1a6a:	e0a7      	b.n	1bbc <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    1a6c:	495a      	ldr	r1, [pc, #360]	; (1bd8 <_http_client_handle_header+0x28c>)
    1a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a70:	2210      	movs	r2, #16
    1a72:	0018      	movs	r0, r3
    1a74:	4b57      	ldr	r3, [pc, #348]	; (1bd4 <_http_client_handle_header+0x288>)
    1a76:	4798      	blx	r3
    1a78:	1e03      	subs	r3, r0, #0
    1a7a:	d109      	bne.n	1a90 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    1a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a7e:	3310      	adds	r3, #16
    1a80:	0018      	movs	r0, r3
    1a82:	4b56      	ldr	r3, [pc, #344]	; (1bdc <_http_client_handle_header+0x290>)
    1a84:	4798      	blx	r3
    1a86:	0001      	movs	r1, r0
    1a88:	687b      	ldr	r3, [r7, #4]
    1a8a:	22dc      	movs	r2, #220	; 0xdc
    1a8c:	5099      	str	r1, [r3, r2]
    1a8e:	e08b      	b.n	1ba8 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    1a90:	4953      	ldr	r1, [pc, #332]	; (1be0 <_http_client_handle_header+0x294>)
    1a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a94:	2213      	movs	r2, #19
    1a96:	0018      	movs	r0, r3
    1a98:	4b4e      	ldr	r3, [pc, #312]	; (1bd4 <_http_client_handle_header+0x288>)
    1a9a:	4798      	blx	r3
    1a9c:	1e03      	subs	r3, r0, #0
    1a9e:	d127      	bne.n	1af0 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    1aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1aa2:	3313      	adds	r3, #19
    1aa4:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    1aa6:	e01e      	b.n	1ae6 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
    1aa8:	6a3b      	ldr	r3, [r7, #32]
    1aaa:	781b      	ldrb	r3, [r3, #0]
    1aac:	2b20      	cmp	r3, #32
    1aae:	d103      	bne.n	1ab8 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    1ab0:	6a3b      	ldr	r3, [r7, #32]
    1ab2:	3301      	adds	r3, #1
    1ab4:	623b      	str	r3, [r7, #32]
    1ab6:	e016      	b.n	1ae6 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    1ab8:	6a3b      	ldr	r3, [r7, #32]
    1aba:	781b      	ldrb	r3, [r3, #0]
    1abc:	2b43      	cmp	r3, #67	; 0x43
    1abe:	d003      	beq.n	1ac8 <_http_client_handle_header+0x17c>
    1ac0:	6a3b      	ldr	r3, [r7, #32]
    1ac2:	781b      	ldrb	r3, [r3, #0]
    1ac4:	2b63      	cmp	r3, #99	; 0x63
    1ac6:	d105      	bne.n	1ad4 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	21cc      	movs	r1, #204	; 0xcc
    1acc:	2201      	movs	r2, #1
    1ace:	4252      	negs	r2, r2
    1ad0:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
    1ad2:	e069      	b.n	1ba8 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
    1ad4:	2386      	movs	r3, #134	; 0x86
    1ad6:	425a      	negs	r2, r3
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	0011      	movs	r1, r2
    1adc:	0018      	movs	r0, r3
    1ade:	4b41      	ldr	r3, [pc, #260]	; (1be4 <_http_client_handle_header+0x298>)
    1ae0:	4798      	blx	r3
					return 0;
    1ae2:	2300      	movs	r3, #0
    1ae4:	e06a      	b.n	1bbc <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    1ae6:	69ba      	ldr	r2, [r7, #24]
    1ae8:	6a3b      	ldr	r3, [r7, #32]
    1aea:	429a      	cmp	r2, r3
    1aec:	d8dc      	bhi.n	1aa8 <_http_client_handle_header+0x15c>
    1aee:	e05b      	b.n	1ba8 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    1af0:	493d      	ldr	r1, [pc, #244]	; (1be8 <_http_client_handle_header+0x29c>)
    1af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1af4:	220c      	movs	r2, #12
    1af6:	0018      	movs	r0, r3
    1af8:	4b36      	ldr	r3, [pc, #216]	; (1bd4 <_http_client_handle_header+0x288>)
    1afa:	4798      	blx	r3
    1afc:	1e03      	subs	r3, r0, #0
    1afe:	d126      	bne.n	1b4e <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
    1b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b02:	330c      	adds	r3, #12
    1b04:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    1b06:	e01d      	b.n	1b44 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
    1b08:	69fb      	ldr	r3, [r7, #28]
    1b0a:	781b      	ldrb	r3, [r3, #0]
    1b0c:	2b20      	cmp	r3, #32
    1b0e:	d103      	bne.n	1b18 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    1b10:	69fb      	ldr	r3, [r7, #28]
    1b12:	3301      	adds	r3, #1
    1b14:	61fb      	str	r3, [r7, #28]
    1b16:	e015      	b.n	1b44 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    1b18:	69fb      	ldr	r3, [r7, #28]
    1b1a:	781b      	ldrb	r3, [r3, #0]
    1b1c:	2b4b      	cmp	r3, #75	; 0x4b
    1b1e:	d003      	beq.n	1b28 <_http_client_handle_header+0x1dc>
    1b20:	69fb      	ldr	r3, [r7, #28]
    1b22:	781b      	ldrb	r3, [r3, #0]
    1b24:	2b6b      	cmp	r3, #107	; 0x6b
    1b26:	d106      	bne.n	1b36 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	2241      	movs	r2, #65	; 0x41
    1b2c:	5c99      	ldrb	r1, [r3, r2]
    1b2e:	2002      	movs	r0, #2
    1b30:	4301      	orrs	r1, r0
    1b32:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
    1b34:	e038      	b.n	1ba8 <_http_client_handle_header+0x25c>
					module->permanent = 0;
    1b36:	687b      	ldr	r3, [r7, #4]
    1b38:	2241      	movs	r2, #65	; 0x41
    1b3a:	5c99      	ldrb	r1, [r3, r2]
    1b3c:	2002      	movs	r0, #2
    1b3e:	4381      	bics	r1, r0
    1b40:	5499      	strb	r1, [r3, r2]
				break;
    1b42:	e031      	b.n	1ba8 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    1b44:	69ba      	ldr	r2, [r7, #24]
    1b46:	69fb      	ldr	r3, [r7, #28]
    1b48:	429a      	cmp	r2, r3
    1b4a:	d8dd      	bhi.n	1b08 <_http_client_handle_header+0x1bc>
    1b4c:	e02c      	b.n	1ba8 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    1b4e:	4927      	ldr	r1, [pc, #156]	; (1bec <_http_client_handle_header+0x2a0>)
    1b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b52:	2205      	movs	r2, #5
    1b54:	0018      	movs	r0, r3
    1b56:	4b1f      	ldr	r3, [pc, #124]	; (1bd4 <_http_client_handle_header+0x288>)
    1b58:	4798      	blx	r3
    1b5a:	1e03      	subs	r3, r0, #0
    1b5c:	d124      	bne.n	1ba8 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    1b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b60:	3309      	adds	r3, #9
    1b62:	0018      	movs	r0, r3
    1b64:	4b1d      	ldr	r3, [pc, #116]	; (1bdc <_http_client_handle_header+0x290>)
    1b66:	4798      	blx	r3
    1b68:	0003      	movs	r3, r0
    1b6a:	b299      	uxth	r1, r3
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	22e4      	movs	r2, #228	; 0xe4
    1b70:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	22dc      	movs	r2, #220	; 0xdc
    1b76:	2100      	movs	r1, #0
    1b78:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
    1b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b7c:	3305      	adds	r3, #5
    1b7e:	781b      	ldrb	r3, [r3, #0]
    1b80:	2b31      	cmp	r3, #49	; 0x31
    1b82:	d804      	bhi.n	1b8e <_http_client_handle_header+0x242>
    1b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b86:	3307      	adds	r3, #7
    1b88:	781b      	ldrb	r3, [r3, #0]
    1b8a:	2b30      	cmp	r3, #48	; 0x30
    1b8c:	d906      	bls.n	1b9c <_http_client_handle_header+0x250>
				module->permanent = 1;
    1b8e:	687b      	ldr	r3, [r7, #4]
    1b90:	2241      	movs	r2, #65	; 0x41
    1b92:	5c99      	ldrb	r1, [r3, r2]
    1b94:	2002      	movs	r0, #2
    1b96:	4301      	orrs	r1, r0
    1b98:	5499      	strb	r1, [r3, r2]
    1b9a:	e005      	b.n	1ba8 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	2241      	movs	r2, #65	; 0x41
    1ba0:	5c99      	ldrb	r1, [r3, r2]
    1ba2:	2002      	movs	r0, #2
    1ba4:	4381      	bics	r1, r0
    1ba6:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
    1ba8:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <_http_client_handle_header+0x278>)
    1baa:	681b      	ldr	r3, [r3, #0]
    1bac:	0018      	movs	r0, r3
    1bae:	4b08      	ldr	r3, [pc, #32]	; (1bd0 <_http_client_handle_header+0x284>)
    1bb0:	4798      	blx	r3
    1bb2:	0002      	movs	r2, r0
    1bb4:	69bb      	ldr	r3, [r7, #24]
    1bb6:	189b      	adds	r3, r3, r2
    1bb8:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    1bba:	e6ce      	b.n	195a <_http_client_handle_header+0xe>
	}
}
    1bbc:	0018      	movs	r0, r3
    1bbe:	46bd      	mov	sp, r7
    1bc0:	b00b      	add	sp, #44	; 0x2c
    1bc2:	bd90      	pop	{r4, r7, pc}
    1bc4:	20000004 	.word	0x20000004
    1bc8:	000124db 	.word	0x000124db
    1bcc:	00001fb1 	.word	0x00001fb1
    1bd0:	000124ab 	.word	0x000124ab
    1bd4:	000124b9 	.word	0x000124b9
    1bd8:	000137c8 	.word	0x000137c8
    1bdc:	00011ec5 	.word	0x00011ec5
    1be0:	000137ec 	.word	0x000137ec
    1be4:	00000fc9 	.word	0x00000fc9
    1be8:	00013800 	.word	0x00013800
    1bec:	00013810 	.word	0x00013810

00001bf0 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b088      	sub	sp, #32
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1bfc:	61fb      	str	r3, [r7, #28]
	int extension = 0;
    1bfe:	2300      	movs	r3, #0
    1c00:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
    1c02:	687b      	ldr	r3, [r7, #4]
    1c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1c06:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	22e0      	movs	r2, #224	; 0xe0
    1c0c:	589b      	ldr	r3, [r3, r2]
    1c0e:	2b00      	cmp	r3, #0
    1c10:	db71      	blt.n	1cf6 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
    1c12:	687b      	ldr	r3, [r7, #4]
    1c14:	22e0      	movs	r2, #224	; 0xe0
    1c16:	589b      	ldr	r3, [r3, r2]
    1c18:	2b00      	cmp	r3, #0
    1c1a:	d134      	bne.n	1c86 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    1c1c:	687b      	ldr	r3, [r7, #4]
    1c1e:	22d8      	movs	r2, #216	; 0xd8
    1c20:	2100      	movs	r1, #0
    1c22:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	22e4      	movs	r2, #228	; 0xe4
    1c28:	2100      	movs	r1, #0
    1c2a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    1c2c:	2308      	movs	r3, #8
    1c2e:	18fb      	adds	r3, r7, r3
    1c30:	2201      	movs	r2, #1
    1c32:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
    1c34:	2308      	movs	r3, #8
    1c36:	18fb      	adds	r3, r7, r3
    1c38:	2200      	movs	r2, #0
    1c3a:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
    1c3c:	2308      	movs	r3, #8
    1c3e:	18fb      	adds	r3, r7, r3
    1c40:	2200      	movs	r2, #0
    1c42:	605a      	str	r2, [r3, #4]
				if (module->cb) {
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d006      	beq.n	1c5a <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1c50:	2208      	movs	r2, #8
    1c52:	18ba      	adds	r2, r7, r2
    1c54:	6878      	ldr	r0, [r7, #4]
    1c56:	2103      	movs	r1, #3
    1c58:	4798      	blx	r3
				}
				if (module->permanent == 0) {
    1c5a:	687b      	ldr	r3, [r7, #4]
    1c5c:	2241      	movs	r2, #65	; 0x41
    1c5e:	5c9b      	ldrb	r3, [r3, r2]
    1c60:	2202      	movs	r2, #2
    1c62:	4013      	ands	r3, r2
    1c64:	b2db      	uxtb	r3, r3
    1c66:	2b00      	cmp	r3, #0
    1c68:	d105      	bne.n	1c76 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	2100      	movs	r1, #0
    1c6e:	0018      	movs	r0, r3
    1c70:	4b62      	ldr	r3, [pc, #392]	; (1dfc <_http_client_read_chuked_entity+0x20c>)
    1c72:	4798      	blx	r3
					return;
    1c74:	e0bf      	b.n	1df6 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
    1c76:	697b      	ldr	r3, [r7, #20]
    1c78:	1c9a      	adds	r2, r3, #2
    1c7a:	687b      	ldr	r3, [r7, #4]
    1c7c:	0011      	movs	r1, r2
    1c7e:	0018      	movs	r0, r3
    1c80:	4b5f      	ldr	r3, [pc, #380]	; (1e00 <_http_client_read_chuked_entity+0x210>)
    1c82:	4798      	blx	r3
    1c84:	e0b2      	b.n	1dec <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	22e0      	movs	r2, #224	; 0xe0
    1c8a:	589a      	ldr	r2, [r3, r2]
    1c8c:	69fb      	ldr	r3, [r7, #28]
    1c8e:	429a      	cmp	r2, r3
    1c90:	dd00      	ble.n	1c94 <_http_client_read_chuked_entity+0xa4>
    1c92:	e0ab      	b.n	1dec <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	22e0      	movs	r2, #224	; 0xe0
    1c98:	589b      	ldr	r3, [r3, r2]
    1c9a:	001a      	movs	r2, r3
    1c9c:	2308      	movs	r3, #8
    1c9e:	18fb      	adds	r3, r7, r3
    1ca0:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
    1ca2:	2308      	movs	r3, #8
    1ca4:	18fb      	adds	r3, r7, r3
    1ca6:	697a      	ldr	r2, [r7, #20]
    1ca8:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
    1caa:	2308      	movs	r3, #8
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	2200      	movs	r2, #0
    1cb0:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	d006      	beq.n	1cc8 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1cbe:	2208      	movs	r2, #8
    1cc0:	18ba      	adds	r2, r7, r2
    1cc2:	6878      	ldr	r0, [r7, #4]
    1cc4:	2103      	movs	r1, #3
    1cc6:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    1cc8:	687b      	ldr	r3, [r7, #4]
    1cca:	22e0      	movs	r2, #224	; 0xe0
    1ccc:	589b      	ldr	r3, [r3, r2]
    1cce:	3302      	adds	r3, #2
    1cd0:	697a      	ldr	r2, [r7, #20]
    1cd2:	18d2      	adds	r2, r2, r3
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	0011      	movs	r1, r2
    1cd8:	0018      	movs	r0, r3
    1cda:	4b49      	ldr	r3, [pc, #292]	; (1e00 <_http_client_read_chuked_entity+0x210>)
    1cdc:	4798      	blx	r3
				length = (int)module->recved_size;
    1cde:	687b      	ldr	r3, [r7, #4]
    1ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1ce2:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1ce8:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
    1cea:	687b      	ldr	r3, [r7, #4]
    1cec:	21e0      	movs	r1, #224	; 0xe0
    1cee:	2201      	movs	r2, #1
    1cf0:	4252      	negs	r2, r2
    1cf2:	505a      	str	r2, [r3, r1]
    1cf4:	e07a      	b.n	1dec <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
    1cf6:	687b      	ldr	r3, [r7, #4]
    1cf8:	22e0      	movs	r2, #224	; 0xe0
    1cfa:	2100      	movs	r1, #0
    1cfc:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
    1cfe:	e05a      	b.n	1db6 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
    1d00:	697b      	ldr	r3, [r7, #20]
    1d02:	781b      	ldrb	r3, [r3, #0]
    1d04:	2b0a      	cmp	r3, #10
    1d06:	d106      	bne.n	1d16 <_http_client_read_chuked_entity+0x126>
					buffer++;
    1d08:	697b      	ldr	r3, [r7, #20]
    1d0a:	3301      	adds	r3, #1
    1d0c:	617b      	str	r3, [r7, #20]
					length--;
    1d0e:	69fb      	ldr	r3, [r7, #28]
    1d10:	3b01      	subs	r3, #1
    1d12:	61fb      	str	r3, [r7, #28]
					break;
    1d14:	e052      	b.n	1dbc <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
    1d16:	69bb      	ldr	r3, [r7, #24]
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d145      	bne.n	1da8 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
    1d1c:	697b      	ldr	r3, [r7, #20]
    1d1e:	781b      	ldrb	r3, [r3, #0]
    1d20:	2b2f      	cmp	r3, #47	; 0x2f
    1d22:	d910      	bls.n	1d46 <_http_client_read_chuked_entity+0x156>
    1d24:	697b      	ldr	r3, [r7, #20]
    1d26:	781b      	ldrb	r3, [r3, #0]
    1d28:	2b39      	cmp	r3, #57	; 0x39
    1d2a:	d80c      	bhi.n	1d46 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	22e0      	movs	r2, #224	; 0xe0
    1d30:	589b      	ldr	r3, [r3, r2]
    1d32:	011b      	lsls	r3, r3, #4
    1d34:	697a      	ldr	r2, [r7, #20]
    1d36:	7812      	ldrb	r2, [r2, #0]
    1d38:	189b      	adds	r3, r3, r2
    1d3a:	3b30      	subs	r3, #48	; 0x30
    1d3c:	001a      	movs	r2, r3
    1d3e:	687b      	ldr	r3, [r7, #4]
    1d40:	21e0      	movs	r1, #224	; 0xe0
    1d42:	505a      	str	r2, [r3, r1]
    1d44:	e031      	b.n	1daa <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    1d46:	697b      	ldr	r3, [r7, #20]
    1d48:	781b      	ldrb	r3, [r3, #0]
    1d4a:	2b60      	cmp	r3, #96	; 0x60
    1d4c:	d910      	bls.n	1d70 <_http_client_read_chuked_entity+0x180>
    1d4e:	697b      	ldr	r3, [r7, #20]
    1d50:	781b      	ldrb	r3, [r3, #0]
    1d52:	2b66      	cmp	r3, #102	; 0x66
    1d54:	d80c      	bhi.n	1d70 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	22e0      	movs	r2, #224	; 0xe0
    1d5a:	589b      	ldr	r3, [r3, r2]
    1d5c:	011b      	lsls	r3, r3, #4
    1d5e:	697a      	ldr	r2, [r7, #20]
    1d60:	7812      	ldrb	r2, [r2, #0]
    1d62:	189b      	adds	r3, r3, r2
    1d64:	3b61      	subs	r3, #97	; 0x61
    1d66:	001a      	movs	r2, r3
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	21e0      	movs	r1, #224	; 0xe0
    1d6c:	505a      	str	r2, [r3, r1]
    1d6e:	e01c      	b.n	1daa <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    1d70:	697b      	ldr	r3, [r7, #20]
    1d72:	781b      	ldrb	r3, [r3, #0]
    1d74:	2b40      	cmp	r3, #64	; 0x40
    1d76:	d910      	bls.n	1d9a <_http_client_read_chuked_entity+0x1aa>
    1d78:	697b      	ldr	r3, [r7, #20]
    1d7a:	781b      	ldrb	r3, [r3, #0]
    1d7c:	2b46      	cmp	r3, #70	; 0x46
    1d7e:	d80c      	bhi.n	1d9a <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	22e0      	movs	r2, #224	; 0xe0
    1d84:	589b      	ldr	r3, [r3, r2]
    1d86:	011b      	lsls	r3, r3, #4
    1d88:	697a      	ldr	r2, [r7, #20]
    1d8a:	7812      	ldrb	r2, [r2, #0]
    1d8c:	189b      	adds	r3, r3, r2
    1d8e:	3b41      	subs	r3, #65	; 0x41
    1d90:	001a      	movs	r2, r3
    1d92:	687b      	ldr	r3, [r7, #4]
    1d94:	21e0      	movs	r1, #224	; 0xe0
    1d96:	505a      	str	r2, [r3, r1]
    1d98:	e007      	b.n	1daa <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
    1d9a:	697b      	ldr	r3, [r7, #20]
    1d9c:	781b      	ldrb	r3, [r3, #0]
    1d9e:	2b3b      	cmp	r3, #59	; 0x3b
    1da0:	d103      	bne.n	1daa <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
    1da2:	2301      	movs	r3, #1
    1da4:	61bb      	str	r3, [r7, #24]
    1da6:	e000      	b.n	1daa <_http_client_read_chuked_entity+0x1ba>
					continue;
    1da8:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
    1daa:	697b      	ldr	r3, [r7, #20]
    1dac:	3301      	adds	r3, #1
    1dae:	617b      	str	r3, [r7, #20]
    1db0:	69fb      	ldr	r3, [r7, #28]
    1db2:	3b01      	subs	r3, #1
    1db4:	61fb      	str	r3, [r7, #28]
    1db6:	69fb      	ldr	r3, [r7, #28]
    1db8:	2b00      	cmp	r3, #0
    1dba:	dca1      	bgt.n	1d00 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    1dbc:	687b      	ldr	r3, [r7, #4]
    1dbe:	22e0      	movs	r2, #224	; 0xe0
    1dc0:	589a      	ldr	r2, [r3, r2]
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1dc6:	429a      	cmp	r2, r3
    1dc8:	dd07      	ble.n	1dda <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
    1dca:	238b      	movs	r3, #139	; 0x8b
    1dcc:	425a      	negs	r2, r3
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	0011      	movs	r1, r2
    1dd2:	0018      	movs	r0, r3
    1dd4:	4b09      	ldr	r3, [pc, #36]	; (1dfc <_http_client_read_chuked_entity+0x20c>)
    1dd6:	4798      	blx	r3
				return;
    1dd8:	e00d      	b.n	1df6 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
    1dda:	69fb      	ldr	r3, [r7, #28]
    1ddc:	2b00      	cmp	r3, #0
    1dde:	d105      	bne.n	1dec <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	21e0      	movs	r1, #224	; 0xe0
    1de4:	2201      	movs	r2, #1
    1de6:	4252      	negs	r2, r2
    1de8:	505a      	str	r2, [r3, r1]
				return;
    1dea:	e004      	b.n	1df6 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1df0:	2b00      	cmp	r3, #0
    1df2:	d000      	beq.n	1df6 <_http_client_read_chuked_entity+0x206>
    1df4:	e708      	b.n	1c08 <_http_client_read_chuked_entity+0x18>
}
    1df6:	46bd      	mov	sp, r7
    1df8:	b008      	add	sp, #32
    1dfa:	bd80      	pop	{r7, pc}
    1dfc:	00000fc9 	.word	0x00000fc9
    1e00:	00001fb1 	.word	0x00001fb1

00001e04 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b086      	sub	sp, #24
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1e10:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	22dc      	movs	r2, #220	; 0xdc
    1e16:	589b      	ldr	r3, [r3, r2]
    1e18:	2b00      	cmp	r3, #0
    1e1a:	db58      	blt.n	1ece <_http_client_handle_entity+0xca>
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	22dc      	movs	r2, #220	; 0xdc
    1e20:	589a      	ldr	r2, [r3, r2]
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1e26:	429a      	cmp	r2, r3
    1e28:	dc51      	bgt.n	1ece <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1e2e:	0019      	movs	r1, r3
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	22dc      	movs	r2, #220	; 0xdc
    1e34:	589b      	ldr	r3, [r3, r2]
    1e36:	4299      	cmp	r1, r3
    1e38:	da00      	bge.n	1e3c <_http_client_handle_entity+0x38>
    1e3a:	e0a9      	b.n	1f90 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1e40:	2b00      	cmp	r3, #0
    1e42:	d020      	beq.n	1e86 <_http_client_handle_entity+0x82>
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	22e4      	movs	r2, #228	; 0xe4
    1e48:	5a9b      	ldrh	r3, [r3, r2]
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d01b      	beq.n	1e86 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	22e4      	movs	r2, #228	; 0xe4
    1e52:	5a9a      	ldrh	r2, [r3, r2]
    1e54:	2308      	movs	r3, #8
    1e56:	18fb      	adds	r3, r7, r3
    1e58:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
    1e5a:	2308      	movs	r3, #8
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	2200      	movs	r2, #0
    1e60:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	22dc      	movs	r2, #220	; 0xdc
    1e66:	589b      	ldr	r3, [r3, r2]
    1e68:	001a      	movs	r2, r3
    1e6a:	2308      	movs	r3, #8
    1e6c:	18fb      	adds	r3, r7, r3
    1e6e:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
    1e70:	2308      	movs	r3, #8
    1e72:	18fb      	adds	r3, r7, r3
    1e74:	697a      	ldr	r2, [r7, #20]
    1e76:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1e7c:	2208      	movs	r2, #8
    1e7e:	18ba      	adds	r2, r7, r2
    1e80:	6878      	ldr	r0, [r7, #4]
    1e82:	2102      	movs	r1, #2
    1e84:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	22d8      	movs	r2, #216	; 0xd8
    1e8a:	2100      	movs	r1, #0
    1e8c:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	22e4      	movs	r2, #228	; 0xe4
    1e92:	2100      	movs	r1, #0
    1e94:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	2241      	movs	r2, #65	; 0x41
    1e9a:	5c9b      	ldrb	r3, [r3, r2]
    1e9c:	2202      	movs	r2, #2
    1e9e:	4013      	ands	r3, r2
    1ea0:	b2db      	uxtb	r3, r3
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d105      	bne.n	1eb2 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
    1ea6:	687b      	ldr	r3, [r7, #4]
    1ea8:	2100      	movs	r1, #0
    1eaa:	0018      	movs	r0, r3
    1eac:	4b3b      	ldr	r3, [pc, #236]	; (1f9c <_http_client_handle_entity+0x198>)
    1eae:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
    1eb0:	e06e      	b.n	1f90 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	22dc      	movs	r2, #220	; 0xdc
    1eb6:	589b      	ldr	r3, [r3, r2]
    1eb8:	001a      	movs	r2, r3
    1eba:	697b      	ldr	r3, [r7, #20]
    1ebc:	189a      	adds	r2, r3, r2
    1ebe:	687b      	ldr	r3, [r7, #4]
    1ec0:	0011      	movs	r1, r2
    1ec2:	0018      	movs	r0, r3
    1ec4:	4b36      	ldr	r3, [pc, #216]	; (1fa0 <_http_client_handle_entity+0x19c>)
    1ec6:	4798      	blx	r3
				return module->recved_size;
    1ec8:	687b      	ldr	r3, [r7, #4]
    1eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1ecc:	e061      	b.n	1f92 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
    1ece:	687b      	ldr	r3, [r7, #4]
    1ed0:	22dc      	movs	r2, #220	; 0xdc
    1ed2:	589b      	ldr	r3, [r3, r2]
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	db57      	blt.n	1f88 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
    1ed8:	687b      	ldr	r3, [r7, #4]
    1eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1edc:	2308      	movs	r3, #8
    1ede:	18fb      	adds	r3, r7, r3
    1ee0:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
    1ee2:	2308      	movs	r3, #8
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	697a      	ldr	r2, [r7, #20]
    1ee8:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
    1eea:	687b      	ldr	r3, [r7, #4]
    1eec:	22e0      	movs	r2, #224	; 0xe0
    1eee:	589a      	ldr	r2, [r3, r2]
    1ef0:	687b      	ldr	r3, [r7, #4]
    1ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1ef4:	18d2      	adds	r2, r2, r3
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	21e0      	movs	r1, #224	; 0xe0
    1efa:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	22dc      	movs	r2, #220	; 0xdc
    1f00:	589a      	ldr	r2, [r3, r2]
    1f02:	687b      	ldr	r3, [r7, #4]
    1f04:	21e0      	movs	r1, #224	; 0xe0
    1f06:	585b      	ldr	r3, [r3, r1]
    1f08:	429a      	cmp	r2, r3
    1f0a:	dc0c      	bgt.n	1f26 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	22d8      	movs	r2, #216	; 0xd8
    1f10:	2100      	movs	r1, #0
    1f12:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	22e4      	movs	r2, #228	; 0xe4
    1f18:	2100      	movs	r1, #0
    1f1a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    1f1c:	2308      	movs	r3, #8
    1f1e:	18fb      	adds	r3, r7, r3
    1f20:	2201      	movs	r2, #1
    1f22:	721a      	strb	r2, [r3, #8]
    1f24:	e003      	b.n	1f2e <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
    1f26:	2308      	movs	r3, #8
    1f28:	18fb      	adds	r3, r7, r3
    1f2a:	2200      	movs	r2, #0
    1f2c:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
    1f2e:	687b      	ldr	r3, [r7, #4]
    1f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1f32:	2b00      	cmp	r3, #0
    1f34:	d006      	beq.n	1f44 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    1f36:	687b      	ldr	r3, [r7, #4]
    1f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1f3a:	2208      	movs	r2, #8
    1f3c:	18ba      	adds	r2, r7, r2
    1f3e:	6878      	ldr	r0, [r7, #4]
    1f40:	2103      	movs	r1, #3
    1f42:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
    1f44:	2308      	movs	r3, #8
    1f46:	18fb      	adds	r3, r7, r3
    1f48:	7a1b      	ldrb	r3, [r3, #8]
    1f4a:	2b01      	cmp	r3, #1
    1f4c:	d112      	bne.n	1f74 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	2241      	movs	r2, #65	; 0x41
    1f52:	5c9b      	ldrb	r3, [r3, r2]
    1f54:	2202      	movs	r2, #2
    1f56:	4013      	ands	r3, r2
    1f58:	b2db      	uxtb	r3, r3
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d10a      	bne.n	1f74 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
    1f5e:	4b11      	ldr	r3, [pc, #68]	; (1fa4 <_http_client_handle_entity+0x1a0>)
    1f60:	0018      	movs	r0, r3
    1f62:	4b11      	ldr	r3, [pc, #68]	; (1fa8 <_http_client_handle_entity+0x1a4>)
    1f64:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	2100      	movs	r1, #0
    1f6a:	0018      	movs	r0, r3
    1f6c:	4b0b      	ldr	r3, [pc, #44]	; (1f9c <_http_client_handle_entity+0x198>)
    1f6e:	4798      	blx	r3
					return 0;
    1f70:	2300      	movs	r3, #0
    1f72:	e00e      	b.n	1f92 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
    1f74:	687b      	ldr	r3, [r7, #4]
    1f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1f78:	697a      	ldr	r2, [r7, #20]
    1f7a:	18d2      	adds	r2, r2, r3
    1f7c:	687b      	ldr	r3, [r7, #4]
    1f7e:	0011      	movs	r1, r2
    1f80:	0018      	movs	r0, r3
    1f82:	4b07      	ldr	r3, [pc, #28]	; (1fa0 <_http_client_handle_entity+0x19c>)
    1f84:	4798      	blx	r3
    1f86:	e003      	b.n	1f90 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
    1f88:	687b      	ldr	r3, [r7, #4]
    1f8a:	0018      	movs	r0, r3
    1f8c:	4b07      	ldr	r3, [pc, #28]	; (1fac <_http_client_handle_entity+0x1a8>)
    1f8e:	4798      	blx	r3
		}
	}

	return 0;
    1f90:	2300      	movs	r3, #0
}
    1f92:	0018      	movs	r0, r3
    1f94:	46bd      	mov	sp, r7
    1f96:	b006      	add	sp, #24
    1f98:	bd80      	pop	{r7, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	00000fc9 	.word	0x00000fc9
    1fa0:	00001fb1 	.word	0x00001fb1
    1fa4:	00013818 	.word	0x00013818
    1fa8:	00012249 	.word	0x00012249
    1fac:	00001bf1 	.word	0x00001bf1

00001fb0 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    1fb0:	b580      	push	{r7, lr}
    1fb2:	b084      	sub	sp, #16
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	6078      	str	r0, [r7, #4]
    1fb8:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
    1fba:	687b      	ldr	r3, [r7, #4]
    1fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    1fbe:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    1fc0:	687b      	ldr	r3, [r7, #4]
    1fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    1fc4:	001a      	movs	r2, r3
    1fc6:	683b      	ldr	r3, [r7, #0]
    1fc8:	1ad2      	subs	r2, r2, r3
    1fca:	68fb      	ldr	r3, [r7, #12]
    1fcc:	18d3      	adds	r3, r2, r3
    1fce:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
    1fd0:	68bb      	ldr	r3, [r7, #8]
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	dd09      	ble.n	1fea <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
    1fd6:	68ba      	ldr	r2, [r7, #8]
    1fd8:	6839      	ldr	r1, [r7, #0]
    1fda:	68fb      	ldr	r3, [r7, #12]
    1fdc:	0018      	movs	r0, r3
    1fde:	4b06      	ldr	r3, [pc, #24]	; (1ff8 <_http_client_move_buffer+0x48>)
    1fe0:	4798      	blx	r3
		module->recved_size = remain;
    1fe2:	68ba      	ldr	r2, [r7, #8]
    1fe4:	687b      	ldr	r3, [r7, #4]
    1fe6:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
    1fe8:	e002      	b.n	1ff0 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
    1fea:	687b      	ldr	r3, [r7, #4]
    1fec:	2200      	movs	r2, #0
    1fee:	645a      	str	r2, [r3, #68]	; 0x44
}
    1ff0:	46c0      	nop			; (mov r8, r8)
    1ff2:	46bd      	mov	sp, r7
    1ff4:	b004      	add	sp, #16
    1ff6:	bd80      	pop	{r7, pc}
    1ff8:	00011fa7 	.word	0x00011fa7

00001ffc <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    1ffc:	b580      	push	{r7, lr}
    1ffe:	b084      	sub	sp, #16
    2000:	af00      	add	r7, sp, #0
    2002:	60f8      	str	r0, [r7, #12]
    2004:	60b9      	str	r1, [r7, #8]
    2006:	607a      	str	r2, [r7, #4]
    2008:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    200a:	68fb      	ldr	r3, [r7, #12]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    2010:	68fb      	ldr	r3, [r7, #12]
    2012:	68ba      	ldr	r2, [r7, #8]
    2014:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    2016:	68fb      	ldr	r3, [r7, #12]
    2018:	2200      	movs	r2, #0
    201a:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    201c:	68fb      	ldr	r3, [r7, #12]
    201e:	683a      	ldr	r2, [r7, #0]
    2020:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    2022:	68fb      	ldr	r3, [r7, #12]
    2024:	69ba      	ldr	r2, [r7, #24]
    2026:	60da      	str	r2, [r3, #12]
}
    2028:	46c0      	nop			; (mov r8, r8)
    202a:	46bd      	mov	sp, r7
    202c:	b004      	add	sp, #16
    202e:	bd80      	pop	{r7, pc}

00002030 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    2030:	b580      	push	{r7, lr}
    2032:	b084      	sub	sp, #16
    2034:	af00      	add	r7, sp, #0
    2036:	6078      	str	r0, [r7, #4]
    2038:	000a      	movs	r2, r1
    203a:	1cfb      	adds	r3, r7, #3
    203c:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    203e:	687b      	ldr	r3, [r7, #4]
    2040:	681a      	ldr	r2, [r3, #0]
    2042:	687b      	ldr	r3, [r7, #4]
    2044:	685b      	ldr	r3, [r3, #4]
    2046:	1ad3      	subs	r3, r2, r3
    2048:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
    204a:	68fb      	ldr	r3, [r7, #12]
    204c:	2b00      	cmp	r3, #0
    204e:	dc03      	bgt.n	2058 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    2050:	687b      	ldr	r3, [r7, #4]
    2052:	0018      	movs	r0, r3
    2054:	4b08      	ldr	r3, [pc, #32]	; (2078 <stream_writer_send_8+0x48>)
    2056:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
    2058:	687b      	ldr	r3, [r7, #4]
    205a:	6919      	ldr	r1, [r3, #16]
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	685b      	ldr	r3, [r3, #4]
    2060:	1c58      	adds	r0, r3, #1
    2062:	687a      	ldr	r2, [r7, #4]
    2064:	6050      	str	r0, [r2, #4]
    2066:	18cb      	adds	r3, r1, r3
    2068:	1cfa      	adds	r2, r7, #3
    206a:	7812      	ldrb	r2, [r2, #0]
    206c:	701a      	strb	r2, [r3, #0]
}
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	46bd      	mov	sp, r7
    2072:	b004      	add	sp, #16
    2074:	bd80      	pop	{r7, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	000020f9 	.word	0x000020f9

0000207c <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    207c:	b580      	push	{r7, lr}
    207e:	b082      	sub	sp, #8
    2080:	af00      	add	r7, sp, #0
    2082:	6078      	str	r0, [r7, #4]
    2084:	000a      	movs	r2, r1
    2086:	1cbb      	adds	r3, r7, #2
    2088:	801a      	strh	r2, [r3, #0]
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    208a:	1cbb      	adds	r3, r7, #2
    208c:	2200      	movs	r2, #0
    208e:	5e9b      	ldrsh	r3, [r3, r2]
    2090:	121b      	asrs	r3, r3, #8
    2092:	b21b      	sxth	r3, r3
    2094:	b25a      	sxtb	r2, r3
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	0011      	movs	r1, r2
    209a:	0018      	movs	r0, r3
    209c:	4b06      	ldr	r3, [pc, #24]	; (20b8 <stream_writer_send_16BE+0x3c>)
    209e:	4798      	blx	r3
	stream_writer_send_8(writer, value & 0xFF);
    20a0:	1cbb      	adds	r3, r7, #2
    20a2:	881b      	ldrh	r3, [r3, #0]
    20a4:	b25a      	sxtb	r2, r3
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	0011      	movs	r1, r2
    20aa:	0018      	movs	r0, r3
    20ac:	4b02      	ldr	r3, [pc, #8]	; (20b8 <stream_writer_send_16BE+0x3c>)
    20ae:	4798      	blx	r3
}
    20b0:	46c0      	nop			; (mov r8, r8)
    20b2:	46bd      	mov	sp, r7
    20b4:	b002      	add	sp, #8
    20b6:	bd80      	pop	{r7, pc}
    20b8:	00002031 	.word	0x00002031

000020bc <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
    20bc:	b580      	push	{r7, lr}
    20be:	b084      	sub	sp, #16
    20c0:	af00      	add	r7, sp, #0
    20c2:	60f8      	str	r0, [r7, #12]
    20c4:	60b9      	str	r1, [r7, #8]
    20c6:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    20c8:	e00d      	b.n	20e6 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    20ca:	68bb      	ldr	r3, [r7, #8]
    20cc:	781b      	ldrb	r3, [r3, #0]
    20ce:	b25a      	sxtb	r2, r3
    20d0:	68fb      	ldr	r3, [r7, #12]
    20d2:	0011      	movs	r1, r2
    20d4:	0018      	movs	r0, r3
    20d6:	4b07      	ldr	r3, [pc, #28]	; (20f4 <stream_writer_send_buffer+0x38>)
    20d8:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	3b01      	subs	r3, #1
    20de:	607b      	str	r3, [r7, #4]
    20e0:	68bb      	ldr	r3, [r7, #8]
    20e2:	3301      	adds	r3, #1
    20e4:	60bb      	str	r3, [r7, #8]
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	2b00      	cmp	r3, #0
    20ea:	d1ee      	bne.n	20ca <stream_writer_send_buffer+0xe>
	}
}
    20ec:	46c0      	nop			; (mov r8, r8)
    20ee:	46bd      	mov	sp, r7
    20f0:	b004      	add	sp, #16
    20f2:	bd80      	pop	{r7, pc}
    20f4:	00002031 	.word	0x00002031

000020f8 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    20f8:	b590      	push	{r4, r7, lr}
    20fa:	b083      	sub	sp, #12
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	685b      	ldr	r3, [r3, #4]
    2104:	2b00      	cmp	r3, #0
    2106:	d00c      	beq.n	2122 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    2108:	687b      	ldr	r3, [r7, #4]
    210a:	689c      	ldr	r4, [r3, #8]
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	68d8      	ldr	r0, [r3, #12]
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	6919      	ldr	r1, [r3, #16]
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	685b      	ldr	r3, [r3, #4]
    2118:	001a      	movs	r2, r3
    211a:	47a0      	blx	r4
		writer->written = 0;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	2200      	movs	r2, #0
    2120:	605a      	str	r2, [r3, #4]
	}
}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	46bd      	mov	sp, r7
    2126:	b003      	add	sp, #12
    2128:	bd90      	pop	{r4, r7, pc}
	...

0000212c <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
    212c:	b580      	push	{r7, lr}
    212e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    2130:	2000      	movs	r0, #0
    2132:	4b05      	ldr	r3, [pc, #20]	; (2148 <system_cpu_clock_get_hz+0x1c>)
    2134:	4798      	blx	r3
    2136:	0002      	movs	r2, r0
    2138:	4b04      	ldr	r3, [pc, #16]	; (214c <system_cpu_clock_get_hz+0x20>)
    213a:	7a1b      	ldrb	r3, [r3, #8]
    213c:	b2db      	uxtb	r3, r3
    213e:	40da      	lsrs	r2, r3
    2140:	0013      	movs	r3, r2
}
    2142:	0018      	movs	r0, r3
    2144:	46bd      	mov	sp, r7
    2146:	bd80      	pop	{r7, pc}
    2148:	0000ae05 	.word	0x0000ae05
    214c:	40000400 	.word	0x40000400

00002150 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    2150:	b580      	push	{r7, lr}
    2152:	b084      	sub	sp, #16
    2154:	af00      	add	r7, sp, #0
    2156:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	681b      	ldr	r3, [r3, #0]
    215c:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	68fb      	ldr	r3, [r7, #12]
    2162:	689b      	ldr	r3, [r3, #8]
    2164:	2202      	movs	r2, #2
    2166:	4013      	ands	r3, r2
    2168:	d1fa      	bne.n	2160 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    216a:	68fb      	ldr	r3, [r7, #12]
    216c:	681b      	ldr	r3, [r3, #0]
    216e:	2202      	movs	r2, #2
    2170:	431a      	orrs	r2, r3
    2172:	68fb      	ldr	r3, [r7, #12]
    2174:	601a      	str	r2, [r3, #0]
}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	46bd      	mov	sp, r7
    217a:	b004      	add	sp, #16
    217c:	bd80      	pop	{r7, pc}
	...

00002180 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    2180:	b580      	push	{r7, lr}
    2182:	b082      	sub	sp, #8
    2184:	af00      	add	r7, sp, #0
    2186:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    2188:	4b04      	ldr	r3, [pc, #16]	; (219c <sw_timer_tcc_callback+0x1c>)
    218a:	681b      	ldr	r3, [r3, #0]
    218c:	1c5a      	adds	r2, r3, #1
    218e:	4b03      	ldr	r3, [pc, #12]	; (219c <sw_timer_tcc_callback+0x1c>)
    2190:	601a      	str	r2, [r3, #0]
}
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	46bd      	mov	sp, r7
    2196:	b002      	add	sp, #8
    2198:	bd80      	pop	{r7, pc}
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	20000270 	.word	0x20000270

000021a0 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    21a0:	b580      	push	{r7, lr}
    21a2:	b082      	sub	sp, #8
    21a4:	af00      	add	r7, sp, #0
    21a6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    21a8:	687b      	ldr	r3, [r7, #4]
    21aa:	2264      	movs	r2, #100	; 0x64
    21ac:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    21ae:	687b      	ldr	r3, [r7, #4]
    21b0:	2200      	movs	r2, #0
    21b2:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	2200      	movs	r2, #0
    21b8:	705a      	strb	r2, [r3, #1]
}
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	46bd      	mov	sp, r7
    21be:	b002      	add	sp, #8
    21c0:	bd80      	pop	{r7, pc}
	...

000021c4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    21c4:	b590      	push	{r4, r7, lr}
    21c6:	b0b1      	sub	sp, #196	; 0xc4
    21c8:	af00      	add	r7, sp, #0
    21ca:	6078      	str	r0, [r7, #4]
    21cc:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    21ce:	230c      	movs	r3, #12
    21d0:	18fb      	adds	r3, r7, r3
    21d2:	4a2e      	ldr	r2, [pc, #184]	; (228c <sw_timer_init+0xc8>)
    21d4:	ca13      	ldmia	r2!, {r0, r1, r4}
    21d6:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    21d8:	683b      	ldr	r3, [r7, #0]
    21da:	885b      	ldrh	r3, [r3, #2]
    21dc:	001a      	movs	r2, r3
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	3314      	adds	r3, #20
    21e6:	22bc      	movs	r2, #188	; 0xbc
    21e8:	18ba      	adds	r2, r7, r2
    21ea:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    21ec:	683b      	ldr	r3, [r7, #0]
    21ee:	781b      	ldrb	r3, [r3, #0]
    21f0:	001a      	movs	r2, r3
    21f2:	230c      	movs	r3, #12
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	0092      	lsls	r2, r2, #2
    21f8:	58d2      	ldr	r2, [r2, r3]
    21fa:	2318      	movs	r3, #24
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	0011      	movs	r1, r2
    2200:	0018      	movs	r0, r3
    2202:	4b23      	ldr	r3, [pc, #140]	; (2290 <sw_timer_init+0xcc>)
    2204:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    2206:	4b23      	ldr	r3, [pc, #140]	; (2294 <sw_timer_init+0xd0>)
    2208:	4798      	blx	r3
    220a:	0004      	movs	r4, r0
    220c:	683b      	ldr	r3, [r7, #0]
    220e:	885b      	ldrh	r3, [r3, #2]
    2210:	001a      	movs	r2, r3
    2212:	4b21      	ldr	r3, [pc, #132]	; (2298 <sw_timer_init+0xd4>)
    2214:	0011      	movs	r1, r2
    2216:	22fa      	movs	r2, #250	; 0xfa
    2218:	0210      	lsls	r0, r2, #8
    221a:	4798      	blx	r3
    221c:	0003      	movs	r3, r0
    221e:	001a      	movs	r2, r3
    2220:	4b1e      	ldr	r3, [pc, #120]	; (229c <sw_timer_init+0xd8>)
    2222:	0011      	movs	r1, r2
    2224:	0020      	movs	r0, r4
    2226:	4798      	blx	r3
    2228:	0003      	movs	r3, r0
    222a:	001a      	movs	r2, r3
    222c:	2318      	movs	r3, #24
    222e:	18fb      	adds	r3, r7, r3
    2230:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    2232:	2318      	movs	r3, #24
    2234:	18fb      	adds	r3, r7, r3
    2236:	2205      	movs	r2, #5
    2238:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    223a:	683b      	ldr	r3, [r7, #0]
    223c:	781b      	ldrb	r3, [r3, #0]
    223e:	001a      	movs	r2, r3
    2240:	230c      	movs	r3, #12
    2242:	18fb      	adds	r3, r7, r3
    2244:	0092      	lsls	r2, r2, #2
    2246:	58d1      	ldr	r1, [r2, r3]
    2248:	2318      	movs	r3, #24
    224a:	18fa      	adds	r2, r7, r3
    224c:	23bc      	movs	r3, #188	; 0xbc
    224e:	18fb      	adds	r3, r7, r3
    2250:	681b      	ldr	r3, [r3, #0]
    2252:	0018      	movs	r0, r3
    2254:	4b12      	ldr	r3, [pc, #72]	; (22a0 <sw_timer_init+0xdc>)
    2256:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    2258:	683b      	ldr	r3, [r7, #0]
    225a:	785b      	ldrb	r3, [r3, #1]
    225c:	3308      	adds	r3, #8
    225e:	b2da      	uxtb	r2, r3
    2260:	4910      	ldr	r1, [pc, #64]	; (22a4 <sw_timer_init+0xe0>)
    2262:	23bc      	movs	r3, #188	; 0xbc
    2264:	18fb      	adds	r3, r7, r3
    2266:	681b      	ldr	r3, [r3, #0]
    2268:	0018      	movs	r0, r3
    226a:	4b0f      	ldr	r3, [pc, #60]	; (22a8 <sw_timer_init+0xe4>)
    226c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    226e:	683b      	ldr	r3, [r7, #0]
    2270:	785b      	ldrb	r3, [r3, #1]
    2272:	3308      	adds	r3, #8
    2274:	b2da      	uxtb	r2, r3
    2276:	23bc      	movs	r3, #188	; 0xbc
    2278:	18fb      	adds	r3, r7, r3
    227a:	681b      	ldr	r3, [r3, #0]
    227c:	0011      	movs	r1, r2
    227e:	0018      	movs	r0, r3
    2280:	4b0a      	ldr	r3, [pc, #40]	; (22ac <sw_timer_init+0xe8>)
    2282:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    2284:	46c0      	nop			; (mov r8, r8)
    2286:	46bd      	mov	sp, r7
    2288:	b031      	add	sp, #196	; 0xc4
    228a:	bd90      	pop	{r4, r7, pc}
    228c:	00013858 	.word	0x00013858
    2290:	0000b329 	.word	0x0000b329
    2294:	0000212d 	.word	0x0000212d
    2298:	000100c5 	.word	0x000100c5
    229c:	0000ffb1 	.word	0x0000ffb1
    22a0:	0000b985 	.word	0x0000b985
    22a4:	00002181 	.word	0x00002181
    22a8:	0000bd9d 	.word	0x0000bd9d
    22ac:	0000bddd 	.word	0x0000bddd

000022b0 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    22b0:	b580      	push	{r7, lr}
    22b2:	b084      	sub	sp, #16
    22b4:	af00      	add	r7, sp, #0
    22b6:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	3314      	adds	r3, #20
    22bc:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    22be:	68fb      	ldr	r3, [r7, #12]
    22c0:	0018      	movs	r0, r3
    22c2:	4b03      	ldr	r3, [pc, #12]	; (22d0 <sw_timer_enable+0x20>)
    22c4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	46bd      	mov	sp, r7
    22ca:	b004      	add	sp, #16
    22cc:	bd80      	pop	{r7, pc}
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	00002151 	.word	0x00002151

000022d4 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    22d4:	b580      	push	{r7, lr}
    22d6:	b086      	sub	sp, #24
    22d8:	af00      	add	r7, sp, #0
    22da:	60f8      	str	r0, [r7, #12]
    22dc:	60b9      	str	r1, [r7, #8]
    22de:	607a      	str	r2, [r7, #4]
    22e0:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    22e2:	2300      	movs	r3, #0
    22e4:	617b      	str	r3, [r7, #20]
    22e6:	e032      	b.n	234e <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    22e8:	68f9      	ldr	r1, [r7, #12]
    22ea:	697a      	ldr	r2, [r7, #20]
    22ec:	0013      	movs	r3, r2
    22ee:	009b      	lsls	r3, r3, #2
    22f0:	189b      	adds	r3, r3, r2
    22f2:	009b      	lsls	r3, r3, #2
    22f4:	5c5b      	ldrb	r3, [r3, r1]
    22f6:	07db      	lsls	r3, r3, #31
    22f8:	0fdb      	lsrs	r3, r3, #31
    22fa:	b2db      	uxtb	r3, r3
    22fc:	2b00      	cmp	r3, #0
    22fe:	d123      	bne.n	2348 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    2300:	697a      	ldr	r2, [r7, #20]
    2302:	0013      	movs	r3, r2
    2304:	009b      	lsls	r3, r3, #2
    2306:	189b      	adds	r3, r3, r2
    2308:	009b      	lsls	r3, r3, #2
    230a:	68fa      	ldr	r2, [r7, #12]
    230c:	18d3      	adds	r3, r2, r3
    230e:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    2310:	693b      	ldr	r3, [r7, #16]
    2312:	68ba      	ldr	r2, [r7, #8]
    2314:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    2316:	693b      	ldr	r3, [r7, #16]
    2318:	781a      	ldrb	r2, [r3, #0]
    231a:	2102      	movs	r1, #2
    231c:	438a      	bics	r2, r1
    231e:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    2320:	693b      	ldr	r3, [r7, #16]
    2322:	687a      	ldr	r2, [r7, #4]
    2324:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    2326:	68fb      	ldr	r3, [r7, #12]
    2328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    232a:	4b0d      	ldr	r3, [pc, #52]	; (2360 <sw_timer_register_callback+0x8c>)
    232c:	0011      	movs	r1, r2
    232e:	6838      	ldr	r0, [r7, #0]
    2330:	4798      	blx	r3
    2332:	0003      	movs	r3, r0
    2334:	001a      	movs	r2, r3
    2336:	693b      	ldr	r3, [r7, #16]
    2338:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    233a:	693b      	ldr	r3, [r7, #16]
    233c:	781a      	ldrb	r2, [r3, #0]
    233e:	2101      	movs	r1, #1
    2340:	430a      	orrs	r2, r1
    2342:	701a      	strb	r2, [r3, #0]
			return index;
    2344:	697b      	ldr	r3, [r7, #20]
    2346:	e007      	b.n	2358 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    2348:	697b      	ldr	r3, [r7, #20]
    234a:	3301      	adds	r3, #1
    234c:	617b      	str	r3, [r7, #20]
    234e:	697b      	ldr	r3, [r7, #20]
    2350:	2b00      	cmp	r3, #0
    2352:	ddc9      	ble.n	22e8 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
    2354:	2301      	movs	r3, #1
    2356:	425b      	negs	r3, r3
}
    2358:	0018      	movs	r0, r3
    235a:	46bd      	mov	sp, r7
    235c:	b006      	add	sp, #24
    235e:	bd80      	pop	{r7, pc}
    2360:	0000ffb1 	.word	0x0000ffb1

00002364 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    2364:	b580      	push	{r7, lr}
    2366:	b086      	sub	sp, #24
    2368:	af00      	add	r7, sp, #0
    236a:	60f8      	str	r0, [r7, #12]
    236c:	60b9      	str	r1, [r7, #8]
    236e:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    2370:	68ba      	ldr	r2, [r7, #8]
    2372:	0013      	movs	r3, r2
    2374:	009b      	lsls	r3, r3, #2
    2376:	189b      	adds	r3, r3, r2
    2378:	009b      	lsls	r3, r3, #2
    237a:	68fa      	ldr	r2, [r7, #12]
    237c:	18d3      	adds	r3, r2, r3
    237e:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    2380:	697b      	ldr	r3, [r7, #20]
    2382:	781a      	ldrb	r2, [r3, #0]
    2384:	2102      	movs	r1, #2
    2386:	430a      	orrs	r2, r1
    2388:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    238a:	68fb      	ldr	r3, [r7, #12]
    238c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    238e:	4b07      	ldr	r3, [pc, #28]	; (23ac <sw_timer_enable_callback+0x48>)
    2390:	0011      	movs	r1, r2
    2392:	6878      	ldr	r0, [r7, #4]
    2394:	4798      	blx	r3
    2396:	0003      	movs	r3, r0
    2398:	001a      	movs	r2, r3
    239a:	4b05      	ldr	r3, [pc, #20]	; (23b0 <sw_timer_enable_callback+0x4c>)
    239c:	681b      	ldr	r3, [r3, #0]
    239e:	18d2      	adds	r2, r2, r3
    23a0:	697b      	ldr	r3, [r7, #20]
    23a2:	611a      	str	r2, [r3, #16]
}
    23a4:	46c0      	nop			; (mov r8, r8)
    23a6:	46bd      	mov	sp, r7
    23a8:	b006      	add	sp, #24
    23aa:	bd80      	pop	{r7, pc}
    23ac:	0000ffb1 	.word	0x0000ffb1
    23b0:	20000270 	.word	0x20000270

000023b4 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    23b4:	b580      	push	{r7, lr}
    23b6:	b084      	sub	sp, #16
    23b8:	af00      	add	r7, sp, #0
    23ba:	6078      	str	r0, [r7, #4]
    23bc:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    23be:	683a      	ldr	r2, [r7, #0]
    23c0:	0013      	movs	r3, r2
    23c2:	009b      	lsls	r3, r3, #2
    23c4:	189b      	adds	r3, r3, r2
    23c6:	009b      	lsls	r3, r3, #2
    23c8:	687a      	ldr	r2, [r7, #4]
    23ca:	18d3      	adds	r3, r2, r3
    23cc:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    23ce:	68fb      	ldr	r3, [r7, #12]
    23d0:	781a      	ldrb	r2, [r3, #0]
    23d2:	2102      	movs	r1, #2
    23d4:	438a      	bics	r2, r1
    23d6:	701a      	strb	r2, [r3, #0]
}
    23d8:	46c0      	nop			; (mov r8, r8)
    23da:	46bd      	mov	sp, r7
    23dc:	b004      	add	sp, #16
    23de:	bd80      	pop	{r7, pc}

000023e0 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    23e0:	b590      	push	{r4, r7, lr}
    23e2:	b085      	sub	sp, #20
    23e4:	af00      	add	r7, sp, #0
    23e6:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    23e8:	2300      	movs	r3, #0
    23ea:	60fb      	str	r3, [r7, #12]
    23ec:	e053      	b.n	2496 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    23ee:	6879      	ldr	r1, [r7, #4]
    23f0:	68fa      	ldr	r2, [r7, #12]
    23f2:	0013      	movs	r3, r2
    23f4:	009b      	lsls	r3, r3, #2
    23f6:	189b      	adds	r3, r3, r2
    23f8:	009b      	lsls	r3, r3, #2
    23fa:	5c5b      	ldrb	r3, [r3, r1]
    23fc:	07db      	lsls	r3, r3, #31
    23fe:	0fdb      	lsrs	r3, r3, #31
    2400:	b2db      	uxtb	r3, r3
    2402:	2b00      	cmp	r3, #0
    2404:	d044      	beq.n	2490 <sw_timer_task+0xb0>
    2406:	6879      	ldr	r1, [r7, #4]
    2408:	68fa      	ldr	r2, [r7, #12]
    240a:	0013      	movs	r3, r2
    240c:	009b      	lsls	r3, r3, #2
    240e:	189b      	adds	r3, r3, r2
    2410:	009b      	lsls	r3, r3, #2
    2412:	5c5b      	ldrb	r3, [r3, r1]
    2414:	079b      	lsls	r3, r3, #30
    2416:	0fdb      	lsrs	r3, r3, #31
    2418:	b2db      	uxtb	r3, r3
    241a:	2b00      	cmp	r3, #0
    241c:	d038      	beq.n	2490 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    241e:	68fa      	ldr	r2, [r7, #12]
    2420:	0013      	movs	r3, r2
    2422:	009b      	lsls	r3, r3, #2
    2424:	189b      	adds	r3, r3, r2
    2426:	009b      	lsls	r3, r3, #2
    2428:	687a      	ldr	r2, [r7, #4]
    242a:	18d3      	adds	r3, r2, r3
    242c:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    242e:	68bb      	ldr	r3, [r7, #8]
    2430:	691a      	ldr	r2, [r3, #16]
    2432:	4b1c      	ldr	r3, [pc, #112]	; (24a4 <sw_timer_task+0xc4>)
    2434:	681b      	ldr	r3, [r3, #0]
    2436:	1ad3      	subs	r3, r2, r3
    2438:	d52a      	bpl.n	2490 <sw_timer_task+0xb0>
    243a:	68bb      	ldr	r3, [r7, #8]
    243c:	781b      	ldrb	r3, [r3, #0]
    243e:	2204      	movs	r2, #4
    2440:	4013      	ands	r3, r2
    2442:	b2db      	uxtb	r3, r3
    2444:	2b00      	cmp	r3, #0
    2446:	d123      	bne.n	2490 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    2448:	68bb      	ldr	r3, [r7, #8]
    244a:	781a      	ldrb	r2, [r3, #0]
    244c:	2104      	movs	r1, #4
    244e:	430a      	orrs	r2, r1
    2450:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
    2452:	68bb      	ldr	r3, [r7, #8]
    2454:	68db      	ldr	r3, [r3, #12]
    2456:	2b00      	cmp	r3, #0
    2458:	d007      	beq.n	246a <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
    245a:	68bb      	ldr	r3, [r7, #8]
    245c:	68da      	ldr	r2, [r3, #12]
    245e:	4b11      	ldr	r3, [pc, #68]	; (24a4 <sw_timer_task+0xc4>)
    2460:	681b      	ldr	r3, [r3, #0]
    2462:	18d2      	adds	r2, r2, r3
    2464:	68bb      	ldr	r3, [r7, #8]
    2466:	611a      	str	r2, [r3, #16]
    2468:	e004      	b.n	2474 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    246a:	68bb      	ldr	r3, [r7, #8]
    246c:	781a      	ldrb	r2, [r3, #0]
    246e:	2102      	movs	r1, #2
    2470:	438a      	bics	r2, r1
    2472:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    2474:	68bb      	ldr	r3, [r7, #8]
    2476:	685c      	ldr	r4, [r3, #4]
    2478:	68bb      	ldr	r3, [r7, #8]
    247a:	689a      	ldr	r2, [r3, #8]
    247c:	68bb      	ldr	r3, [r7, #8]
    247e:	68db      	ldr	r3, [r3, #12]
    2480:	68f9      	ldr	r1, [r7, #12]
    2482:	6878      	ldr	r0, [r7, #4]
    2484:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
    2486:	68bb      	ldr	r3, [r7, #8]
    2488:	781a      	ldrb	r2, [r3, #0]
    248a:	2104      	movs	r1, #4
    248c:	438a      	bics	r2, r1
    248e:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    2490:	68fb      	ldr	r3, [r7, #12]
    2492:	3301      	adds	r3, #1
    2494:	60fb      	str	r3, [r7, #12]
    2496:	68fb      	ldr	r3, [r7, #12]
    2498:	2b00      	cmp	r3, #0
    249a:	dda8      	ble.n	23ee <sw_timer_task+0xe>
			}
		}
	}
}
    249c:	46c0      	nop			; (mov r8, r8)
    249e:	46bd      	mov	sp, r7
    24a0:	b005      	add	sp, #20
    24a2:	bd90      	pop	{r4, r7, pc}
    24a4:	20000270 	.word	0x20000270

000024a8 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    24a8:	b580      	push	{r7, lr}
    24aa:	b082      	sub	sp, #8
    24ac:	af00      	add	r7, sp, #0
    24ae:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d00c      	beq.n	24d0 <delay_cycles+0x28>
		SysTick->LOAD = n;
    24b6:	4b08      	ldr	r3, [pc, #32]	; (24d8 <delay_cycles+0x30>)
    24b8:	687a      	ldr	r2, [r7, #4]
    24ba:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    24bc:	4b06      	ldr	r3, [pc, #24]	; (24d8 <delay_cycles+0x30>)
    24be:	2200      	movs	r2, #0
    24c0:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    24c2:	46c0      	nop			; (mov r8, r8)
    24c4:	4b04      	ldr	r3, [pc, #16]	; (24d8 <delay_cycles+0x30>)
    24c6:	681a      	ldr	r2, [r3, #0]
    24c8:	2380      	movs	r3, #128	; 0x80
    24ca:	025b      	lsls	r3, r3, #9
    24cc:	4013      	ands	r3, r2
    24ce:	d0f9      	beq.n	24c4 <delay_cycles+0x1c>
		};
	}
}
    24d0:	46c0      	nop			; (mov r8, r8)
    24d2:	46bd      	mov	sp, r7
    24d4:	b002      	add	sp, #8
    24d6:	bd80      	pop	{r7, pc}
    24d8:	e000e010 	.word	0xe000e010

000024dc <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    24dc:	b580      	push	{r7, lr}
    24de:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    24e0:	2000      	movs	r0, #0
    24e2:	4b0f      	ldr	r3, [pc, #60]	; (2520 <delay_init+0x44>)
    24e4:	4798      	blx	r3
    24e6:	0002      	movs	r2, r0
    24e8:	4b0e      	ldr	r3, [pc, #56]	; (2524 <delay_init+0x48>)
    24ea:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    24ec:	4b0d      	ldr	r3, [pc, #52]	; (2524 <delay_init+0x48>)
    24ee:	6818      	ldr	r0, [r3, #0]
    24f0:	4b0d      	ldr	r3, [pc, #52]	; (2528 <delay_init+0x4c>)
    24f2:	22fa      	movs	r2, #250	; 0xfa
    24f4:	0091      	lsls	r1, r2, #2
    24f6:	4798      	blx	r3
    24f8:	0003      	movs	r3, r0
    24fa:	001a      	movs	r2, r3
    24fc:	4b09      	ldr	r3, [pc, #36]	; (2524 <delay_init+0x48>)
    24fe:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2500:	4b08      	ldr	r3, [pc, #32]	; (2524 <delay_init+0x48>)
    2502:	6818      	ldr	r0, [r3, #0]
    2504:	4b08      	ldr	r3, [pc, #32]	; (2528 <delay_init+0x4c>)
    2506:	22fa      	movs	r2, #250	; 0xfa
    2508:	0091      	lsls	r1, r2, #2
    250a:	4798      	blx	r3
    250c:	0003      	movs	r3, r0
    250e:	001a      	movs	r2, r3
    2510:	4b06      	ldr	r3, [pc, #24]	; (252c <delay_init+0x50>)
    2512:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2514:	4b06      	ldr	r3, [pc, #24]	; (2530 <delay_init+0x54>)
    2516:	2205      	movs	r2, #5
    2518:	601a      	str	r2, [r3, #0]
}
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	46bd      	mov	sp, r7
    251e:	bd80      	pop	{r7, pc}
    2520:	0000ae05 	.word	0x0000ae05
    2524:	20000008 	.word	0x20000008
    2528:	0000ffb1 	.word	0x0000ffb1
    252c:	2000000c 	.word	0x2000000c
    2530:	e000e010 	.word	0xe000e010

00002534 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    2534:	b580      	push	{r7, lr}
    2536:	b082      	sub	sp, #8
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
	while (n--) {
    253c:	e004      	b.n	2548 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    253e:	4b07      	ldr	r3, [pc, #28]	; (255c <delay_cycles_ms+0x28>)
    2540:	681b      	ldr	r3, [r3, #0]
    2542:	0018      	movs	r0, r3
    2544:	4b06      	ldr	r3, [pc, #24]	; (2560 <delay_cycles_ms+0x2c>)
    2546:	4798      	blx	r3
	while (n--) {
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	1e5a      	subs	r2, r3, #1
    254c:	607a      	str	r2, [r7, #4]
    254e:	2b00      	cmp	r3, #0
    2550:	d1f5      	bne.n	253e <delay_cycles_ms+0xa>
	}
}
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	46bd      	mov	sp, r7
    2556:	b002      	add	sp, #8
    2558:	bd80      	pop	{r7, pc}
    255a:	46c0      	nop			; (mov r8, r8)
    255c:	20000008 	.word	0x20000008
    2560:	000024a9 	.word	0x000024a9

00002564 <system_pinmux_get_group_from_gpio_pin>:
{
    2564:	b580      	push	{r7, lr}
    2566:	b084      	sub	sp, #16
    2568:	af00      	add	r7, sp, #0
    256a:	0002      	movs	r2, r0
    256c:	1dfb      	adds	r3, r7, #7
    256e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2570:	230f      	movs	r3, #15
    2572:	18fb      	adds	r3, r7, r3
    2574:	1dfa      	adds	r2, r7, #7
    2576:	7812      	ldrb	r2, [r2, #0]
    2578:	09d2      	lsrs	r2, r2, #7
    257a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    257c:	230e      	movs	r3, #14
    257e:	18fb      	adds	r3, r7, r3
    2580:	1dfa      	adds	r2, r7, #7
    2582:	7812      	ldrb	r2, [r2, #0]
    2584:	0952      	lsrs	r2, r2, #5
    2586:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2588:	4b0d      	ldr	r3, [pc, #52]	; (25c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    258a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    258c:	230f      	movs	r3, #15
    258e:	18fb      	adds	r3, r7, r3
    2590:	781b      	ldrb	r3, [r3, #0]
    2592:	2b00      	cmp	r3, #0
    2594:	d10f      	bne.n	25b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2596:	230f      	movs	r3, #15
    2598:	18fb      	adds	r3, r7, r3
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	009b      	lsls	r3, r3, #2
    259e:	2210      	movs	r2, #16
    25a0:	4694      	mov	ip, r2
    25a2:	44bc      	add	ip, r7
    25a4:	4463      	add	r3, ip
    25a6:	3b08      	subs	r3, #8
    25a8:	681a      	ldr	r2, [r3, #0]
    25aa:	230e      	movs	r3, #14
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	01db      	lsls	r3, r3, #7
    25b2:	18d3      	adds	r3, r2, r3
    25b4:	e000      	b.n	25b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    25b6:	2300      	movs	r3, #0
}
    25b8:	0018      	movs	r0, r3
    25ba:	46bd      	mov	sp, r7
    25bc:	b004      	add	sp, #16
    25be:	bd80      	pop	{r7, pc}
    25c0:	41004400 	.word	0x41004400

000025c4 <port_get_group_from_gpio_pin>:
{
    25c4:	b580      	push	{r7, lr}
    25c6:	b082      	sub	sp, #8
    25c8:	af00      	add	r7, sp, #0
    25ca:	0002      	movs	r2, r0
    25cc:	1dfb      	adds	r3, r7, #7
    25ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    25d0:	1dfb      	adds	r3, r7, #7
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	0018      	movs	r0, r3
    25d6:	4b03      	ldr	r3, [pc, #12]	; (25e4 <port_get_group_from_gpio_pin+0x20>)
    25d8:	4798      	blx	r3
    25da:	0003      	movs	r3, r0
}
    25dc:	0018      	movs	r0, r3
    25de:	46bd      	mov	sp, r7
    25e0:	b002      	add	sp, #8
    25e2:	bd80      	pop	{r7, pc}
    25e4:	00002565 	.word	0x00002565

000025e8 <port_get_config_defaults>:
{
    25e8:	b580      	push	{r7, lr}
    25ea:	b082      	sub	sp, #8
    25ec:	af00      	add	r7, sp, #0
    25ee:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    25f0:	687b      	ldr	r3, [r7, #4]
    25f2:	2200      	movs	r2, #0
    25f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    25f6:	687b      	ldr	r3, [r7, #4]
    25f8:	2201      	movs	r2, #1
    25fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	2200      	movs	r2, #0
    2600:	709a      	strb	r2, [r3, #2]
}
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	46bd      	mov	sp, r7
    2606:	b002      	add	sp, #8
    2608:	bd80      	pop	{r7, pc}
	...

0000260c <port_pin_set_output_level>:
{
    260c:	b580      	push	{r7, lr}
    260e:	b084      	sub	sp, #16
    2610:	af00      	add	r7, sp, #0
    2612:	0002      	movs	r2, r0
    2614:	1dfb      	adds	r3, r7, #7
    2616:	701a      	strb	r2, [r3, #0]
    2618:	1dbb      	adds	r3, r7, #6
    261a:	1c0a      	adds	r2, r1, #0
    261c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    261e:	1dfb      	adds	r3, r7, #7
    2620:	781b      	ldrb	r3, [r3, #0]
    2622:	0018      	movs	r0, r3
    2624:	4b0d      	ldr	r3, [pc, #52]	; (265c <port_pin_set_output_level+0x50>)
    2626:	4798      	blx	r3
    2628:	0003      	movs	r3, r0
    262a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    262c:	1dfb      	adds	r3, r7, #7
    262e:	781b      	ldrb	r3, [r3, #0]
    2630:	221f      	movs	r2, #31
    2632:	4013      	ands	r3, r2
    2634:	2201      	movs	r2, #1
    2636:	409a      	lsls	r2, r3
    2638:	0013      	movs	r3, r2
    263a:	60bb      	str	r3, [r7, #8]
	if (level) {
    263c:	1dbb      	adds	r3, r7, #6
    263e:	781b      	ldrb	r3, [r3, #0]
    2640:	2b00      	cmp	r3, #0
    2642:	d003      	beq.n	264c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2644:	68fb      	ldr	r3, [r7, #12]
    2646:	68ba      	ldr	r2, [r7, #8]
    2648:	619a      	str	r2, [r3, #24]
}
    264a:	e002      	b.n	2652 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    264c:	68fb      	ldr	r3, [r7, #12]
    264e:	68ba      	ldr	r2, [r7, #8]
    2650:	615a      	str	r2, [r3, #20]
}
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	46bd      	mov	sp, r7
    2656:	b004      	add	sp, #16
    2658:	bd80      	pop	{r7, pc}
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	000025c5 	.word	0x000025c5

00002660 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    2660:	b580      	push	{r7, lr}
    2662:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    2664:	4b04      	ldr	r3, [pc, #16]	; (2678 <system_interrupt_enable_global+0x18>)
    2666:	2201      	movs	r2, #1
    2668:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    266a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    266e:	b662      	cpsie	i
}
    2670:	46c0      	nop			; (mov r8, r8)
    2672:	46bd      	mov	sp, r7
    2674:	bd80      	pop	{r7, pc}
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	20000014 	.word	0x20000014

0000267c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    267c:	b580      	push	{r7, lr}
    267e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    2680:	4b04      	ldr	r3, [pc, #16]	; (2694 <chip_isr+0x18>)
    2682:	681b      	ldr	r3, [r3, #0]
    2684:	2b00      	cmp	r3, #0
    2686:	d002      	beq.n	268e <chip_isr+0x12>
		gpfIsr();
    2688:	4b02      	ldr	r3, [pc, #8]	; (2694 <chip_isr+0x18>)
    268a:	681b      	ldr	r3, [r3, #0]
    268c:	4798      	blx	r3
	}
}
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	46bd      	mov	sp, r7
    2692:	bd80      	pop	{r7, pc}
    2694:	20000274 	.word	0x20000274

00002698 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    2698:	b580      	push	{r7, lr}
    269a:	b082      	sub	sp, #8
    269c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    269e:	1d3b      	adds	r3, r7, #4
    26a0:	0018      	movs	r0, r3
    26a2:	4b0c      	ldr	r3, [pc, #48]	; (26d4 <init_chip_pins+0x3c>)
    26a4:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    26a6:	1d3b      	adds	r3, r7, #4
    26a8:	2201      	movs	r2, #1
    26aa:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    26ac:	1d3b      	adds	r3, r7, #4
    26ae:	0019      	movs	r1, r3
    26b0:	201b      	movs	r0, #27
    26b2:	4b09      	ldr	r3, [pc, #36]	; (26d8 <init_chip_pins+0x40>)
    26b4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    26b6:	1d3b      	adds	r3, r7, #4
    26b8:	0019      	movs	r1, r3
    26ba:	201c      	movs	r0, #28
    26bc:	4b06      	ldr	r3, [pc, #24]	; (26d8 <init_chip_pins+0x40>)
    26be:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    26c0:	1d3b      	adds	r3, r7, #4
    26c2:	0019      	movs	r1, r3
    26c4:	2028      	movs	r0, #40	; 0x28
    26c6:	4b04      	ldr	r3, [pc, #16]	; (26d8 <init_chip_pins+0x40>)
    26c8:	4798      	blx	r3
}
    26ca:	46c0      	nop			; (mov r8, r8)
    26cc:	46bd      	mov	sp, r7
    26ce:	b002      	add	sp, #8
    26d0:	bd80      	pop	{r7, pc}
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	000025e9 	.word	0x000025e9
    26d8:	00008735 	.word	0x00008735

000026dc <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    26dc:	b580      	push	{r7, lr}
    26de:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    26e0:	4b0c      	ldr	r3, [pc, #48]	; (2714 <nm_bsp_init+0x38>)
    26e2:	2200      	movs	r2, #0
    26e4:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    26e6:	4b0c      	ldr	r3, [pc, #48]	; (2718 <nm_bsp_init+0x3c>)
    26e8:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    26ea:	4b0c      	ldr	r3, [pc, #48]	; (271c <nm_bsp_init+0x40>)
    26ec:	681b      	ldr	r3, [r3, #0]
    26ee:	2201      	movs	r2, #1
    26f0:	4013      	ands	r3, r2
    26f2:	d004      	beq.n	26fe <nm_bsp_init+0x22>
    26f4:	4b09      	ldr	r3, [pc, #36]	; (271c <nm_bsp_init+0x40>)
    26f6:	681b      	ldr	r3, [r3, #0]
    26f8:	2202      	movs	r2, #2
    26fa:	4013      	ands	r3, r2
    26fc:	d101      	bne.n	2702 <nm_bsp_init+0x26>
	    delay_init();
    26fe:	4b08      	ldr	r3, [pc, #32]	; (2720 <nm_bsp_init+0x44>)
    2700:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    2702:	4b08      	ldr	r3, [pc, #32]	; (2724 <nm_bsp_init+0x48>)
    2704:	4798      	blx	r3

	system_interrupt_enable_global();
    2706:	4b08      	ldr	r3, [pc, #32]	; (2728 <nm_bsp_init+0x4c>)
    2708:	4798      	blx	r3

	return M2M_SUCCESS;
    270a:	2300      	movs	r3, #0
}
    270c:	0018      	movs	r0, r3
    270e:	46bd      	mov	sp, r7
    2710:	bd80      	pop	{r7, pc}
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	20000274 	.word	0x20000274
    2718:	00002699 	.word	0x00002699
    271c:	e000e010 	.word	0xe000e010
    2720:	000024dd 	.word	0x000024dd
    2724:	0000272d 	.word	0x0000272d
    2728:	00002661 	.word	0x00002661

0000272c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    272c:	b580      	push	{r7, lr}
    272e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    2730:	2100      	movs	r1, #0
    2732:	201c      	movs	r0, #28
    2734:	4b0c      	ldr	r3, [pc, #48]	; (2768 <nm_bsp_reset+0x3c>)
    2736:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    2738:	2100      	movs	r1, #0
    273a:	201b      	movs	r0, #27
    273c:	4b0a      	ldr	r3, [pc, #40]	; (2768 <nm_bsp_reset+0x3c>)
    273e:	4798      	blx	r3
	nm_bsp_sleep(100);
    2740:	2064      	movs	r0, #100	; 0x64
    2742:	4b0a      	ldr	r3, [pc, #40]	; (276c <nm_bsp_reset+0x40>)
    2744:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    2746:	2101      	movs	r1, #1
    2748:	201c      	movs	r0, #28
    274a:	4b07      	ldr	r3, [pc, #28]	; (2768 <nm_bsp_reset+0x3c>)
    274c:	4798      	blx	r3
	nm_bsp_sleep(10);
    274e:	200a      	movs	r0, #10
    2750:	4b06      	ldr	r3, [pc, #24]	; (276c <nm_bsp_reset+0x40>)
    2752:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    2754:	2101      	movs	r1, #1
    2756:	201b      	movs	r0, #27
    2758:	4b03      	ldr	r3, [pc, #12]	; (2768 <nm_bsp_reset+0x3c>)
    275a:	4798      	blx	r3
	nm_bsp_sleep(10);
    275c:	200a      	movs	r0, #10
    275e:	4b03      	ldr	r3, [pc, #12]	; (276c <nm_bsp_reset+0x40>)
    2760:	4798      	blx	r3
}
    2762:	46c0      	nop			; (mov r8, r8)
    2764:	46bd      	mov	sp, r7
    2766:	bd80      	pop	{r7, pc}
    2768:	0000260d 	.word	0x0000260d
    276c:	00002771 	.word	0x00002771

00002770 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    2770:	b580      	push	{r7, lr}
    2772:	b082      	sub	sp, #8
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    2778:	e002      	b.n	2780 <nm_bsp_sleep+0x10>
		delay_ms(1);
    277a:	2001      	movs	r0, #1
    277c:	4b05      	ldr	r3, [pc, #20]	; (2794 <nm_bsp_sleep+0x24>)
    277e:	4798      	blx	r3
	while (u32TimeMsec--) {
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	1e5a      	subs	r2, r3, #1
    2784:	607a      	str	r2, [r7, #4]
    2786:	2b00      	cmp	r3, #0
    2788:	d1f7      	bne.n	277a <nm_bsp_sleep+0xa>
	}
}
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	46bd      	mov	sp, r7
    278e:	b002      	add	sp, #8
    2790:	bd80      	pop	{r7, pc}
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	00002535 	.word	0x00002535

00002798 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    2798:	b580      	push	{r7, lr}
    279a:	b086      	sub	sp, #24
    279c:	af00      	add	r7, sp, #0
    279e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    27a0:	4b15      	ldr	r3, [pc, #84]	; (27f8 <nm_bsp_register_isr+0x60>)
    27a2:	687a      	ldr	r2, [r7, #4]
    27a4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    27a6:	230c      	movs	r3, #12
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	0018      	movs	r0, r3
    27ac:	4b13      	ldr	r3, [pc, #76]	; (27fc <nm_bsp_register_isr+0x64>)
    27ae:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    27b0:	230c      	movs	r3, #12
    27b2:	18fb      	adds	r3, r7, r3
    27b4:	2229      	movs	r2, #41	; 0x29
    27b6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    27b8:	230c      	movs	r3, #12
    27ba:	18fb      	adds	r3, r7, r3
    27bc:	2200      	movs	r2, #0
    27be:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    27c0:	230c      	movs	r3, #12
    27c2:	18fb      	adds	r3, r7, r3
    27c4:	2201      	movs	r2, #1
    27c6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    27c8:	230c      	movs	r3, #12
    27ca:	18fb      	adds	r3, r7, r3
    27cc:	2202      	movs	r2, #2
    27ce:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    27d0:	230c      	movs	r3, #12
    27d2:	18fb      	adds	r3, r7, r3
    27d4:	0019      	movs	r1, r3
    27d6:	2009      	movs	r0, #9
    27d8:	4b09      	ldr	r3, [pc, #36]	; (2800 <nm_bsp_register_isr+0x68>)
    27da:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    27dc:	4b09      	ldr	r3, [pc, #36]	; (2804 <nm_bsp_register_isr+0x6c>)
    27de:	2200      	movs	r2, #0
    27e0:	2109      	movs	r1, #9
    27e2:	0018      	movs	r0, r3
    27e4:	4b08      	ldr	r3, [pc, #32]	; (2808 <nm_bsp_register_isr+0x70>)
    27e6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    27e8:	2100      	movs	r1, #0
    27ea:	2009      	movs	r0, #9
    27ec:	4b07      	ldr	r3, [pc, #28]	; (280c <nm_bsp_register_isr+0x74>)
    27ee:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    27f0:	46c0      	nop			; (mov r8, r8)
    27f2:	46bd      	mov	sp, r7
    27f4:	b006      	add	sp, #24
    27f6:	bd80      	pop	{r7, pc}
    27f8:	20000274 	.word	0x20000274
    27fc:	00007a01 	.word	0x00007a01
    2800:	00007a35 	.word	0x00007a35
    2804:	0000267d 	.word	0x0000267d
    2808:	00007601 	.word	0x00007601
    280c:	00007665 	.word	0x00007665

00002810 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    2810:	b580      	push	{r7, lr}
    2812:	b082      	sub	sp, #8
    2814:	af00      	add	r7, sp, #0
    2816:	0002      	movs	r2, r0
    2818:	1dfb      	adds	r3, r7, #7
    281a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    281c:	1dfb      	adds	r3, r7, #7
    281e:	781b      	ldrb	r3, [r3, #0]
    2820:	2b00      	cmp	r3, #0
    2822:	d004      	beq.n	282e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    2824:	2100      	movs	r1, #0
    2826:	2009      	movs	r0, #9
    2828:	4b05      	ldr	r3, [pc, #20]	; (2840 <nm_bsp_interrupt_ctrl+0x30>)
    282a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    282c:	e003      	b.n	2836 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    282e:	2100      	movs	r1, #0
    2830:	2009      	movs	r0, #9
    2832:	4b04      	ldr	r3, [pc, #16]	; (2844 <nm_bsp_interrupt_ctrl+0x34>)
    2834:	4798      	blx	r3
}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	46bd      	mov	sp, r7
    283a:	b002      	add	sp, #8
    283c:	bd80      	pop	{r7, pc}
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	00007665 	.word	0x00007665
    2844:	000076ad 	.word	0x000076ad

00002848 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    2848:	b580      	push	{r7, lr}
    284a:	b084      	sub	sp, #16
    284c:	af00      	add	r7, sp, #0
    284e:	60f8      	str	r0, [r7, #12]
    2850:	60b9      	str	r1, [r7, #8]
    2852:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	2b00      	cmp	r3, #0
    2858:	d010      	beq.n	287c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    285a:	68bb      	ldr	r3, [r7, #8]
    285c:	781a      	ldrb	r2, [r3, #0]
    285e:	68fb      	ldr	r3, [r7, #12]
    2860:	701a      	strb	r2, [r3, #0]
		pDst++;
    2862:	68fb      	ldr	r3, [r7, #12]
    2864:	3301      	adds	r3, #1
    2866:	60fb      	str	r3, [r7, #12]
		pSrc++;
    2868:	68bb      	ldr	r3, [r7, #8]
    286a:	3301      	adds	r3, #1
    286c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	3b01      	subs	r3, #1
    2872:	607b      	str	r3, [r7, #4]
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	2b00      	cmp	r3, #0
    2878:	d1ef      	bne.n	285a <m2m_memcpy+0x12>
    287a:	e000      	b.n	287e <m2m_memcpy+0x36>
	if(sz == 0) return;
    287c:	46c0      	nop			; (mov r8, r8)
}
    287e:	46bd      	mov	sp, r7
    2880:	b004      	add	sp, #16
    2882:	bd80      	pop	{r7, pc}

00002884 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    2884:	b580      	push	{r7, lr}
    2886:	b084      	sub	sp, #16
    2888:	af00      	add	r7, sp, #0
    288a:	60f8      	str	r0, [r7, #12]
    288c:	607a      	str	r2, [r7, #4]
    288e:	230b      	movs	r3, #11
    2890:	18fb      	adds	r3, r7, r3
    2892:	1c0a      	adds	r2, r1, #0
    2894:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	2b00      	cmp	r3, #0
    289a:	d00e      	beq.n	28ba <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    289c:	68fb      	ldr	r3, [r7, #12]
    289e:	220b      	movs	r2, #11
    28a0:	18ba      	adds	r2, r7, r2
    28a2:	7812      	ldrb	r2, [r2, #0]
    28a4:	701a      	strb	r2, [r3, #0]
		pBuf++;
    28a6:	68fb      	ldr	r3, [r7, #12]
    28a8:	3301      	adds	r3, #1
    28aa:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	3b01      	subs	r3, #1
    28b0:	607b      	str	r3, [r7, #4]
    28b2:	687b      	ldr	r3, [r7, #4]
    28b4:	2b00      	cmp	r3, #0
    28b6:	d1f1      	bne.n	289c <m2m_memset+0x18>
    28b8:	e000      	b.n	28bc <m2m_memset+0x38>
	if(sz == 0) return;
    28ba:	46c0      	nop			; (mov r8, r8)
}
    28bc:	46bd      	mov	sp, r7
    28be:	b004      	add	sp, #16
    28c0:	bd80      	pop	{r7, pc}

000028c2 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    28c2:	b580      	push	{r7, lr}
    28c4:	b084      	sub	sp, #16
    28c6:	af00      	add	r7, sp, #0
    28c8:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    28ca:	230e      	movs	r3, #14
    28cc:	18fb      	adds	r3, r7, r3
    28ce:	2200      	movs	r2, #0
    28d0:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    28d2:	e009      	b.n	28e8 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    28d4:	230e      	movs	r3, #14
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	881a      	ldrh	r2, [r3, #0]
    28da:	230e      	movs	r3, #14
    28dc:	18fb      	adds	r3, r7, r3
    28de:	3201      	adds	r2, #1
    28e0:	801a      	strh	r2, [r3, #0]
		pcStr++;
    28e2:	687b      	ldr	r3, [r7, #4]
    28e4:	3301      	adds	r3, #1
    28e6:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	781b      	ldrb	r3, [r3, #0]
    28ec:	2b00      	cmp	r3, #0
    28ee:	d1f1      	bne.n	28d4 <m2m_strlen+0x12>
	}
	return u16StrLen;
    28f0:	230e      	movs	r3, #14
    28f2:	18fb      	adds	r3, r7, r3
    28f4:	881b      	ldrh	r3, [r3, #0]
}
    28f6:	0018      	movs	r0, r3
    28f8:	46bd      	mov	sp, r7
    28fa:	b004      	add	sp, #16
    28fc:	bd80      	pop	{r7, pc}
	...

00002900 <isr>:
tpfHifCallBack pfIpCb  = NULL;		/*!< pointer to Socket call back function */
tpfHifCallBack pfOtaCb = NULL;		/*!< pointer to OTA call back function */
tpfHifCallBack pfHifCb = NULL;

static void isr(void)
{
    2900:	b580      	push	{r7, lr}
    2902:	af00      	add	r7, sp, #0
	gu8Interrupt++;
    2904:	4b04      	ldr	r3, [pc, #16]	; (2918 <isr+0x18>)
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	b2db      	uxtb	r3, r3
    290a:	3301      	adds	r3, #1
    290c:	b2da      	uxtb	r2, r3
    290e:	4b02      	ldr	r3, [pc, #8]	; (2918 <isr+0x18>)
    2910:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	46bd      	mov	sp, r7
    2916:	bd80      	pop	{r7, pc}
    2918:	2000027b 	.word	0x2000027b

0000291c <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    291c:	b590      	push	{r4, r7, lr}
    291e:	b083      	sub	sp, #12
    2920:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    2922:	1dfb      	adds	r3, r7, #7
    2924:	2200      	movs	r2, #0
    2926:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    2928:	2001      	movs	r0, #1
    292a:	4b13      	ldr	r3, [pc, #76]	; (2978 <hif_set_rx_done+0x5c>)
    292c:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    292e:	1dfc      	adds	r4, r7, #7
    2930:	003b      	movs	r3, r7
    2932:	4a12      	ldr	r2, [pc, #72]	; (297c <hif_set_rx_done+0x60>)
    2934:	0019      	movs	r1, r3
    2936:	0010      	movs	r0, r2
    2938:	4b11      	ldr	r3, [pc, #68]	; (2980 <hif_set_rx_done+0x64>)
    293a:	4798      	blx	r3
    293c:	0003      	movs	r3, r0
    293e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2940:	1dfb      	adds	r3, r7, #7
    2942:	781b      	ldrb	r3, [r3, #0]
    2944:	b25b      	sxtb	r3, r3
    2946:	2b00      	cmp	r3, #0
    2948:	d10d      	bne.n	2966 <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	2202      	movs	r2, #2
    294e:	4313      	orrs	r3, r2
    2950:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    2952:	683b      	ldr	r3, [r7, #0]
    2954:	1dfc      	adds	r4, r7, #7
    2956:	4a09      	ldr	r2, [pc, #36]	; (297c <hif_set_rx_done+0x60>)
    2958:	0019      	movs	r1, r3
    295a:	0010      	movs	r0, r2
    295c:	4b09      	ldr	r3, [pc, #36]	; (2984 <hif_set_rx_done+0x68>)
    295e:	4798      	blx	r3
    2960:	0003      	movs	r3, r0
    2962:	7023      	strb	r3, [r4, #0]
    2964:	e000      	b.n	2968 <hif_set_rx_done+0x4c>
	if(ret != M2M_SUCCESS)goto ERR1;
    2966:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    2968:	1dfb      	adds	r3, r7, #7
    296a:	781b      	ldrb	r3, [r3, #0]
    296c:	b25b      	sxtb	r3, r3

}
    296e:	0018      	movs	r0, r3
    2970:	46bd      	mov	sp, r7
    2972:	b003      	add	sp, #12
    2974:	bd90      	pop	{r4, r7, pc}
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	00002811 	.word	0x00002811
    297c:	00001070 	.word	0x00001070
    2980:	000044f5 	.word	0x000044f5
    2984:	00004519 	.word	0x00004519

00002988 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    2988:	b580      	push	{r7, lr}
    298a:	b082      	sub	sp, #8
    298c:	af00      	add	r7, sp, #0
    298e:	603a      	str	r2, [r7, #0]
    2990:	1dfb      	adds	r3, r7, #7
    2992:	1c02      	adds	r2, r0, #0
    2994:	701a      	strb	r2, [r3, #0]
    2996:	1d3b      	adds	r3, r7, #4
    2998:	1c0a      	adds	r2, r1, #0
    299a:	801a      	strh	r2, [r3, #0]


}
    299c:	46c0      	nop			; (mov r8, r8)
    299e:	46bd      	mov	sp, r7
    29a0:	b002      	add	sp, #8
    29a2:	bd80      	pop	{r7, pc}

000029a4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    29a4:	b590      	push	{r4, r7, lr}
    29a6:	b083      	sub	sp, #12
    29a8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    29aa:	1dfb      	adds	r3, r7, #7
    29ac:	2200      	movs	r2, #0
    29ae:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
    29b0:	4b1c      	ldr	r3, [pc, #112]	; (2a24 <hif_chip_wake+0x80>)
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	b2db      	uxtb	r3, r3
    29b6:	2b00      	cmp	r3, #0
    29b8:	d121      	bne.n	29fe <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    29ba:	4b1b      	ldr	r3, [pc, #108]	; (2a28 <hif_chip_wake+0x84>)
    29bc:	781b      	ldrb	r3, [r3, #0]
    29be:	b2db      	uxtb	r3, r3
    29c0:	2b03      	cmp	r3, #3
    29c2:	d004      	beq.n	29ce <hif_chip_wake+0x2a>
    29c4:	4b18      	ldr	r3, [pc, #96]	; (2a28 <hif_chip_wake+0x84>)
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	b2db      	uxtb	r3, r3
    29ca:	2b04      	cmp	r3, #4
    29cc:	d117      	bne.n	29fe <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
    29ce:	1dfc      	adds	r4, r7, #7
    29d0:	4b16      	ldr	r3, [pc, #88]	; (2a2c <hif_chip_wake+0x88>)
    29d2:	4798      	blx	r3
    29d4:	0003      	movs	r3, r0
    29d6:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    29d8:	1dfb      	adds	r3, r7, #7
    29da:	781b      	ldrb	r3, [r3, #0]
    29dc:	b25b      	sxtb	r3, r3
    29de:	2b00      	cmp	r3, #0
    29e0:	d115      	bne.n	2a0e <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    29e2:	1dfc      	adds	r4, r7, #7
    29e4:	4a12      	ldr	r2, [pc, #72]	; (2a30 <hif_chip_wake+0x8c>)
    29e6:	4b13      	ldr	r3, [pc, #76]	; (2a34 <hif_chip_wake+0x90>)
    29e8:	0011      	movs	r1, r2
    29ea:	0018      	movs	r0, r3
    29ec:	4b12      	ldr	r3, [pc, #72]	; (2a38 <hif_chip_wake+0x94>)
    29ee:	4798      	blx	r3
    29f0:	0003      	movs	r3, r0
    29f2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    29f4:	1dfb      	adds	r3, r7, #7
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	b25b      	sxtb	r3, r3
    29fa:	2b00      	cmp	r3, #0
    29fc:	d109      	bne.n	2a12 <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    29fe:	4b09      	ldr	r3, [pc, #36]	; (2a24 <hif_chip_wake+0x80>)
    2a00:	781b      	ldrb	r3, [r3, #0]
    2a02:	b2db      	uxtb	r3, r3
    2a04:	3301      	adds	r3, #1
    2a06:	b2da      	uxtb	r2, r3
    2a08:	4b06      	ldr	r3, [pc, #24]	; (2a24 <hif_chip_wake+0x80>)
    2a0a:	701a      	strb	r2, [r3, #0]
    2a0c:	e002      	b.n	2a14 <hif_chip_wake+0x70>
			if(ret != M2M_SUCCESS)goto ERR1;
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	e000      	b.n	2a14 <hif_chip_wake+0x70>
			if(ret != M2M_SUCCESS)goto ERR1;
    2a12:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    2a14:	1dfb      	adds	r3, r7, #7
    2a16:	781b      	ldrb	r3, [r3, #0]
    2a18:	b25b      	sxtb	r3, r3
}
    2a1a:	0018      	movs	r0, r3
    2a1c:	46bd      	mov	sp, r7
    2a1e:	b003      	add	sp, #12
    2a20:	bd90      	pop	{r4, r7, pc}
    2a22:	46c0      	nop			; (mov r8, r8)
    2a24:	20000279 	.word	0x20000279
    2a28:	20000278 	.word	0x20000278
    2a2c:	00003e4d 	.word	0x00003e4d
    2a30:	00005678 	.word	0x00005678
    2a34:	00001074 	.word	0x00001074
    2a38:	00004519 	.word	0x00004519

00002a3c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    2a3c:	b590      	push	{r4, r7, lr}
    2a3e:	b083      	sub	sp, #12
    2a40:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2a42:	1dfb      	adds	r3, r7, #7
    2a44:	2200      	movs	r2, #0
    2a46:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
    2a48:	4b29      	ldr	r3, [pc, #164]	; (2af0 <hif_chip_sleep+0xb4>)
    2a4a:	781b      	ldrb	r3, [r3, #0]
    2a4c:	b2db      	uxtb	r3, r3
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d006      	beq.n	2a60 <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
    2a52:	4b27      	ldr	r3, [pc, #156]	; (2af0 <hif_chip_sleep+0xb4>)
    2a54:	781b      	ldrb	r3, [r3, #0]
    2a56:	b2db      	uxtb	r3, r3
    2a58:	3b01      	subs	r3, #1
    2a5a:	b2da      	uxtb	r2, r3
    2a5c:	4b24      	ldr	r3, [pc, #144]	; (2af0 <hif_chip_sleep+0xb4>)
    2a5e:	701a      	strb	r2, [r3, #0]
	}

	if(gu8ChipSleep == 0)
    2a60:	4b23      	ldr	r3, [pc, #140]	; (2af0 <hif_chip_sleep+0xb4>)
    2a62:	781b      	ldrb	r3, [r3, #0]
    2a64:	b2db      	uxtb	r3, r3
    2a66:	2b00      	cmp	r3, #0
    2a68:	d13a      	bne.n	2ae0 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    2a6a:	4b22      	ldr	r3, [pc, #136]	; (2af4 <hif_chip_sleep+0xb8>)
    2a6c:	781b      	ldrb	r3, [r3, #0]
    2a6e:	b2db      	uxtb	r3, r3
    2a70:	2b03      	cmp	r3, #3
    2a72:	d004      	beq.n	2a7e <hif_chip_sleep+0x42>
    2a74:	4b1f      	ldr	r3, [pc, #124]	; (2af4 <hif_chip_sleep+0xb8>)
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	b2db      	uxtb	r3, r3
    2a7a:	2b04      	cmp	r3, #4
    2a7c:	d130      	bne.n	2ae0 <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
    2a7e:	2300      	movs	r3, #0
    2a80:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    2a82:	1dfc      	adds	r4, r7, #7
    2a84:	4a1c      	ldr	r2, [pc, #112]	; (2af8 <hif_chip_sleep+0xbc>)
    2a86:	4b1d      	ldr	r3, [pc, #116]	; (2afc <hif_chip_sleep+0xc0>)
    2a88:	0011      	movs	r1, r2
    2a8a:	0018      	movs	r0, r3
    2a8c:	4b1c      	ldr	r3, [pc, #112]	; (2b00 <hif_chip_sleep+0xc4>)
    2a8e:	4798      	blx	r3
    2a90:	0003      	movs	r3, r0
    2a92:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    2a94:	1dfb      	adds	r3, r7, #7
    2a96:	781b      	ldrb	r3, [r3, #0]
    2a98:	b25b      	sxtb	r3, r3
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d11d      	bne.n	2ada <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    2a9e:	1dfc      	adds	r4, r7, #7
    2aa0:	003b      	movs	r3, r7
    2aa2:	0019      	movs	r1, r3
    2aa4:	2001      	movs	r0, #1
    2aa6:	4b17      	ldr	r3, [pc, #92]	; (2b04 <hif_chip_sleep+0xc8>)
    2aa8:	4798      	blx	r3
    2aaa:	0003      	movs	r3, r0
    2aac:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    2aae:	1dfb      	adds	r3, r7, #7
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	b25b      	sxtb	r3, r3
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	d112      	bne.n	2ade <hif_chip_sleep+0xa2>
			if(reg&0x2)
    2ab8:	683b      	ldr	r3, [r7, #0]
    2aba:	2202      	movs	r2, #2
    2abc:	4013      	ands	r3, r2
    2abe:	d00f      	beq.n	2ae0 <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
    2ac0:	683b      	ldr	r3, [r7, #0]
    2ac2:	2202      	movs	r2, #2
    2ac4:	4393      	bics	r3, r2
    2ac6:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
    2ac8:	683b      	ldr	r3, [r7, #0]
    2aca:	1dfc      	adds	r4, r7, #7
    2acc:	0019      	movs	r1, r3
    2ace:	2001      	movs	r0, #1
    2ad0:	4b0b      	ldr	r3, [pc, #44]	; (2b00 <hif_chip_sleep+0xc4>)
    2ad2:	4798      	blx	r3
    2ad4:	0003      	movs	r3, r0
    2ad6:	7023      	strb	r3, [r4, #0]
    2ad8:	e002      	b.n	2ae0 <hif_chip_sleep+0xa4>
			if(ret != M2M_SUCCESS)goto ERR1;
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	e000      	b.n	2ae0 <hif_chip_sleep+0xa4>
			if(ret != M2M_SUCCESS)goto ERR1;
    2ade:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
    2ae0:	1dfb      	adds	r3, r7, #7
    2ae2:	781b      	ldrb	r3, [r3, #0]
    2ae4:	b25b      	sxtb	r3, r3
}
    2ae6:	0018      	movs	r0, r3
    2ae8:	46bd      	mov	sp, r7
    2aea:	b003      	add	sp, #12
    2aec:	bd90      	pop	{r4, r7, pc}
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	20000279 	.word	0x20000279
    2af4:	20000278 	.word	0x20000278
    2af8:	00004321 	.word	0x00004321
    2afc:	00001074 	.word	0x00001074
    2b00:	00004519 	.word	0x00004519
    2b04:	000044f5 	.word	0x000044f5

00002b08 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    2b08:	b580      	push	{r7, lr}
    2b0a:	b082      	sub	sp, #8
    2b0c:	af00      	add	r7, sp, #0
    2b0e:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
    2b10:	4b0e      	ldr	r3, [pc, #56]	; (2b4c <hif_init+0x44>)
    2b12:	2200      	movs	r2, #0
    2b14:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
    2b16:	4b0e      	ldr	r3, [pc, #56]	; (2b50 <hif_init+0x48>)
    2b18:	2200      	movs	r2, #0
    2b1a:	601a      	str	r2, [r3, #0]

	gu8ChipSleep = 0;
    2b1c:	4b0d      	ldr	r3, [pc, #52]	; (2b54 <hif_init+0x4c>)
    2b1e:	2200      	movs	r2, #0
    2b20:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
    2b22:	4b0d      	ldr	r3, [pc, #52]	; (2b58 <hif_init+0x50>)
    2b24:	2200      	movs	r2, #0
    2b26:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
    2b28:	4b0c      	ldr	r3, [pc, #48]	; (2b5c <hif_init+0x54>)
    2b2a:	2200      	movs	r2, #0
    2b2c:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
    2b2e:	4b0c      	ldr	r3, [pc, #48]	; (2b60 <hif_init+0x58>)
    2b30:	0018      	movs	r0, r3
    2b32:	4b0c      	ldr	r3, [pc, #48]	; (2b64 <hif_init+0x5c>)
    2b34:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GRP_HIF,m2m_hif_cb);
    2b36:	4b0c      	ldr	r3, [pc, #48]	; (2b68 <hif_init+0x60>)
    2b38:	0019      	movs	r1, r3
    2b3a:	2003      	movs	r0, #3
    2b3c:	4b0b      	ldr	r3, [pc, #44]	; (2b6c <hif_init+0x64>)
    2b3e:	4798      	blx	r3

	return M2M_SUCCESS;
    2b40:	2300      	movs	r3, #0
}
    2b42:	0018      	movs	r0, r3
    2b44:	46bd      	mov	sp, r7
    2b46:	b002      	add	sp, #8
    2b48:	bd80      	pop	{r7, pc}
    2b4a:	46c0      	nop			; (mov r8, r8)
    2b4c:	2000027c 	.word	0x2000027c
    2b50:	20000280 	.word	0x20000280
    2b54:	20000279 	.word	0x20000279
    2b58:	20000278 	.word	0x20000278
    2b5c:	2000027b 	.word	0x2000027b
    2b60:	00002901 	.word	0x00002901
    2b64:	00002799 	.word	0x00002799
    2b68:	00002989 	.word	0x00002989
    2b6c:	00003555 	.word	0x00003555

00002b70 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    2b70:	b590      	push	{r4, r7, lr}
    2b72:	b089      	sub	sp, #36	; 0x24
    2b74:	af00      	add	r7, sp, #0
    2b76:	0004      	movs	r4, r0
    2b78:	0008      	movs	r0, r1
    2b7a:	603a      	str	r2, [r7, #0]
    2b7c:	0019      	movs	r1, r3
    2b7e:	1dfb      	adds	r3, r7, #7
    2b80:	1c22      	adds	r2, r4, #0
    2b82:	701a      	strb	r2, [r3, #0]
    2b84:	1dbb      	adds	r3, r7, #6
    2b86:	1c02      	adds	r2, r0, #0
    2b88:	701a      	strb	r2, [r3, #0]
    2b8a:	1d3b      	adds	r3, r7, #4
    2b8c:	1c0a      	adds	r2, r1, #0
    2b8e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    2b90:	231f      	movs	r3, #31
    2b92:	18fb      	adds	r3, r7, r3
    2b94:	22ff      	movs	r2, #255	; 0xff
    2b96:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    2b98:	1dbb      	adds	r3, r7, #6
    2b9a:	781b      	ldrb	r3, [r3, #0]
    2b9c:	227f      	movs	r2, #127	; 0x7f
    2b9e:	4013      	ands	r3, r2
    2ba0:	b2da      	uxtb	r2, r3
    2ba2:	2318      	movs	r3, #24
    2ba4:	18fb      	adds	r3, r7, r3
    2ba6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    2ba8:	2318      	movs	r3, #24
    2baa:	18fb      	adds	r3, r7, r3
    2bac:	1dfa      	adds	r2, r7, #7
    2bae:	7812      	ldrb	r2, [r2, #0]
    2bb0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    2bb2:	2318      	movs	r3, #24
    2bb4:	18fb      	adds	r3, r7, r3
    2bb6:	2208      	movs	r2, #8
    2bb8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    2bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d011      	beq.n	2be4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    2bc0:	2318      	movs	r3, #24
    2bc2:	18fb      	adds	r3, r7, r3
    2bc4:	885b      	ldrh	r3, [r3, #2]
    2bc6:	b29a      	uxth	r2, r3
    2bc8:	2338      	movs	r3, #56	; 0x38
    2bca:	18f9      	adds	r1, r7, r3
    2bcc:	2334      	movs	r3, #52	; 0x34
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	8809      	ldrh	r1, [r1, #0]
    2bd2:	881b      	ldrh	r3, [r3, #0]
    2bd4:	18cb      	adds	r3, r1, r3
    2bd6:	b29b      	uxth	r3, r3
    2bd8:	18d3      	adds	r3, r2, r3
    2bda:	b29a      	uxth	r2, r3
    2bdc:	2318      	movs	r3, #24
    2bde:	18fb      	adds	r3, r7, r3
    2be0:	805a      	strh	r2, [r3, #2]
    2be2:	e00a      	b.n	2bfa <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    2be4:	2318      	movs	r3, #24
    2be6:	18fb      	adds	r3, r7, r3
    2be8:	885b      	ldrh	r3, [r3, #2]
    2bea:	b29a      	uxth	r2, r3
    2bec:	1d3b      	adds	r3, r7, #4
    2bee:	881b      	ldrh	r3, [r3, #0]
    2bf0:	18d3      	adds	r3, r2, r3
    2bf2:	b29a      	uxth	r2, r3
    2bf4:	2318      	movs	r3, #24
    2bf6:	18fb      	adds	r3, r7, r3
    2bf8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    2bfa:	231f      	movs	r3, #31
    2bfc:	18fc      	adds	r4, r7, r3
    2bfe:	4b9b      	ldr	r3, [pc, #620]	; (2e6c <hif_send+0x2fc>)
    2c00:	4798      	blx	r3
    2c02:	0003      	movs	r3, r0
    2c04:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    2c06:	231f      	movs	r3, #31
    2c08:	18fb      	adds	r3, r7, r3
    2c0a:	781b      	ldrb	r3, [r3, #0]
    2c0c:	b25b      	sxtb	r3, r3
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d000      	beq.n	2c14 <hif_send+0xa4>
    2c12:	e103      	b.n	2e1c <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
    2c14:	2300      	movs	r3, #0
    2c16:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    2c18:	230e      	movs	r3, #14
    2c1a:	18fb      	adds	r3, r7, r3
    2c1c:	2200      	movs	r2, #0
    2c1e:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
    2c20:	2300      	movs	r3, #0
    2c22:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    2c24:	1dfb      	adds	r3, r7, #7
    2c26:	781a      	ldrb	r2, [r3, #0]
    2c28:	697b      	ldr	r3, [r7, #20]
    2c2a:	4313      	orrs	r3, r2
    2c2c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    2c2e:	1dbb      	adds	r3, r7, #6
    2c30:	781b      	ldrb	r3, [r3, #0]
    2c32:	021a      	lsls	r2, r3, #8
    2c34:	697b      	ldr	r3, [r7, #20]
    2c36:	4313      	orrs	r3, r2
    2c38:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    2c3a:	2318      	movs	r3, #24
    2c3c:	18fb      	adds	r3, r7, r3
    2c3e:	885b      	ldrh	r3, [r3, #2]
    2c40:	b29b      	uxth	r3, r3
    2c42:	041a      	lsls	r2, r3, #16
    2c44:	697b      	ldr	r3, [r7, #20]
    2c46:	4313      	orrs	r3, r2
    2c48:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    2c4a:	697b      	ldr	r3, [r7, #20]
    2c4c:	221f      	movs	r2, #31
    2c4e:	18bc      	adds	r4, r7, r2
    2c50:	4a87      	ldr	r2, [pc, #540]	; (2e70 <hif_send+0x300>)
    2c52:	0019      	movs	r1, r3
    2c54:	0010      	movs	r0, r2
    2c56:	4b87      	ldr	r3, [pc, #540]	; (2e74 <hif_send+0x304>)
    2c58:	4798      	blx	r3
    2c5a:	0003      	movs	r3, r0
    2c5c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    2c5e:	231f      	movs	r3, #31
    2c60:	18fb      	adds	r3, r7, r3
    2c62:	781b      	ldrb	r3, [r3, #0]
    2c64:	b25b      	sxtb	r3, r3
    2c66:	2b00      	cmp	r3, #0
    2c68:	d000      	beq.n	2c6c <hif_send+0xfc>
    2c6a:	e0ed      	b.n	2e48 <hif_send+0x2d8>


		reg = 0;
    2c6c:	2300      	movs	r3, #0
    2c6e:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    2c70:	697b      	ldr	r3, [r7, #20]
    2c72:	2202      	movs	r2, #2
    2c74:	4313      	orrs	r3, r2
    2c76:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    2c78:	697b      	ldr	r3, [r7, #20]
    2c7a:	221f      	movs	r2, #31
    2c7c:	18bc      	adds	r4, r7, r2
    2c7e:	4a7e      	ldr	r2, [pc, #504]	; (2e78 <hif_send+0x308>)
    2c80:	0019      	movs	r1, r3
    2c82:	0010      	movs	r0, r2
    2c84:	4b7b      	ldr	r3, [pc, #492]	; (2e74 <hif_send+0x304>)
    2c86:	4798      	blx	r3
    2c88:	0003      	movs	r3, r0
    2c8a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    2c8c:	231f      	movs	r3, #31
    2c8e:	18fb      	adds	r3, r7, r3
    2c90:	781b      	ldrb	r3, [r3, #0]
    2c92:	b25b      	sxtb	r3, r3
    2c94:	2b00      	cmp	r3, #0
    2c96:	d000      	beq.n	2c9a <hif_send+0x12a>
    2c98:	e0d8      	b.n	2e4c <hif_send+0x2dc>
		dma_addr = 0;
    2c9a:	2300      	movs	r3, #0
    2c9c:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    2c9e:	230e      	movs	r3, #14
    2ca0:	18fb      	adds	r3, r7, r3
    2ca2:	2200      	movs	r2, #0
    2ca4:	801a      	strh	r2, [r3, #0]
    2ca6:	e031      	b.n	2d0c <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    2ca8:	231f      	movs	r3, #31
    2caa:	18fc      	adds	r4, r7, r3
    2cac:	2314      	movs	r3, #20
    2cae:	18fb      	adds	r3, r7, r3
    2cb0:	4a71      	ldr	r2, [pc, #452]	; (2e78 <hif_send+0x308>)
    2cb2:	0019      	movs	r1, r3
    2cb4:	0010      	movs	r0, r2
    2cb6:	4b71      	ldr	r3, [pc, #452]	; (2e7c <hif_send+0x30c>)
    2cb8:	4798      	blx	r3
    2cba:	0003      	movs	r3, r0
    2cbc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    2cbe:	231f      	movs	r3, #31
    2cc0:	18fb      	adds	r3, r7, r3
    2cc2:	781b      	ldrb	r3, [r3, #0]
    2cc4:	b25b      	sxtb	r3, r3
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d128      	bne.n	2d1c <hif_send+0x1ac>
			if (!(reg & 0x2))
    2cca:	697b      	ldr	r3, [r7, #20]
    2ccc:	2202      	movs	r2, #2
    2cce:	4013      	ands	r3, r2
    2cd0:	d113      	bne.n	2cfa <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    2cd2:	231f      	movs	r3, #31
    2cd4:	18fc      	adds	r4, r7, r3
    2cd6:	2310      	movs	r3, #16
    2cd8:	18fb      	adds	r3, r7, r3
    2cda:	4a69      	ldr	r2, [pc, #420]	; (2e80 <hif_send+0x310>)
    2cdc:	0019      	movs	r1, r3
    2cde:	0010      	movs	r0, r2
    2ce0:	4b66      	ldr	r3, [pc, #408]	; (2e7c <hif_send+0x30c>)
    2ce2:	4798      	blx	r3
    2ce4:	0003      	movs	r3, r0
    2ce6:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    2ce8:	231f      	movs	r3, #31
    2cea:	18fb      	adds	r3, r7, r3
    2cec:	781b      	ldrb	r3, [r3, #0]
    2cee:	b25b      	sxtb	r3, r3
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	d015      	beq.n	2d20 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    2cf4:	2300      	movs	r3, #0
    2cf6:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
    2cf8:	e012      	b.n	2d20 <hif_send+0x1b0>
		for(cnt = 0; cnt < 1000; cnt ++)
    2cfa:	230e      	movs	r3, #14
    2cfc:	18fb      	adds	r3, r7, r3
    2cfe:	881b      	ldrh	r3, [r3, #0]
    2d00:	b29b      	uxth	r3, r3
    2d02:	3301      	adds	r3, #1
    2d04:	b29a      	uxth	r2, r3
    2d06:	230e      	movs	r3, #14
    2d08:	18fb      	adds	r3, r7, r3
    2d0a:	801a      	strh	r2, [r3, #0]
    2d0c:	230e      	movs	r3, #14
    2d0e:	18fb      	adds	r3, r7, r3
    2d10:	881b      	ldrh	r3, [r3, #0]
    2d12:	b29b      	uxth	r3, r3
    2d14:	4a5b      	ldr	r2, [pc, #364]	; (2e84 <hif_send+0x314>)
    2d16:	4293      	cmp	r3, r2
    2d18:	d9c6      	bls.n	2ca8 <hif_send+0x138>
    2d1a:	e002      	b.n	2d22 <hif_send+0x1b2>
			if(ret != M2M_SUCCESS) break;
    2d1c:	46c0      	nop			; (mov r8, r8)
    2d1e:	e000      	b.n	2d22 <hif_send+0x1b2>
				break;
    2d20:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    2d22:	693b      	ldr	r3, [r7, #16]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d100      	bne.n	2d2a <hif_send+0x1ba>
    2d28:	e073      	b.n	2e12 <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    2d2a:	693b      	ldr	r3, [r7, #16]
    2d2c:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    2d2e:	2318      	movs	r3, #24
    2d30:	18fb      	adds	r3, r7, r3
    2d32:	885b      	ldrh	r3, [r3, #2]
    2d34:	b29a      	uxth	r2, r3
    2d36:	2318      	movs	r3, #24
    2d38:	18fb      	adds	r3, r7, r3
    2d3a:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    2d3c:	68bb      	ldr	r3, [r7, #8]
    2d3e:	221f      	movs	r2, #31
    2d40:	18bc      	adds	r4, r7, r2
    2d42:	2218      	movs	r2, #24
    2d44:	18b9      	adds	r1, r7, r2
    2d46:	2208      	movs	r2, #8
    2d48:	0018      	movs	r0, r3
    2d4a:	4b4f      	ldr	r3, [pc, #316]	; (2e88 <hif_send+0x318>)
    2d4c:	4798      	blx	r3
    2d4e:	0003      	movs	r3, r0
    2d50:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    2d52:	231f      	movs	r3, #31
    2d54:	18fb      	adds	r3, r7, r3
    2d56:	781b      	ldrb	r3, [r3, #0]
    2d58:	b25b      	sxtb	r3, r3
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d000      	beq.n	2d60 <hif_send+0x1f0>
    2d5e:	e077      	b.n	2e50 <hif_send+0x2e0>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    2d60:	68bb      	ldr	r3, [r7, #8]
    2d62:	3308      	adds	r3, #8
    2d64:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    2d66:	683b      	ldr	r3, [r7, #0]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d015      	beq.n	2d98 <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    2d6c:	68b8      	ldr	r0, [r7, #8]
    2d6e:	1d3b      	adds	r3, r7, #4
    2d70:	881a      	ldrh	r2, [r3, #0]
    2d72:	231f      	movs	r3, #31
    2d74:	18fc      	adds	r4, r7, r3
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	0019      	movs	r1, r3
    2d7a:	4b43      	ldr	r3, [pc, #268]	; (2e88 <hif_send+0x318>)
    2d7c:	4798      	blx	r3
    2d7e:	0003      	movs	r3, r0
    2d80:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    2d82:	231f      	movs	r3, #31
    2d84:	18fb      	adds	r3, r7, r3
    2d86:	781b      	ldrb	r3, [r3, #0]
    2d88:	b25b      	sxtb	r3, r3
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d162      	bne.n	2e54 <hif_send+0x2e4>
				u32CurrAddr += u16CtrlBufSize;
    2d8e:	1d3b      	adds	r3, r7, #4
    2d90:	881a      	ldrh	r2, [r3, #0]
    2d92:	68bb      	ldr	r3, [r7, #8]
    2d94:	18d3      	adds	r3, r2, r3
    2d96:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    2d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d021      	beq.n	2de2 <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    2d9e:	2338      	movs	r3, #56	; 0x38
    2da0:	18fb      	adds	r3, r7, r3
    2da2:	881a      	ldrh	r2, [r3, #0]
    2da4:	1d3b      	adds	r3, r7, #4
    2da6:	881b      	ldrh	r3, [r3, #0]
    2da8:	1ad3      	subs	r3, r2, r3
    2daa:	001a      	movs	r2, r3
    2dac:	68bb      	ldr	r3, [r7, #8]
    2dae:	18d3      	adds	r3, r2, r3
    2db0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    2db2:	68b8      	ldr	r0, [r7, #8]
    2db4:	2334      	movs	r3, #52	; 0x34
    2db6:	18fb      	adds	r3, r7, r3
    2db8:	881a      	ldrh	r2, [r3, #0]
    2dba:	231f      	movs	r3, #31
    2dbc:	18fc      	adds	r4, r7, r3
    2dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2dc0:	0019      	movs	r1, r3
    2dc2:	4b31      	ldr	r3, [pc, #196]	; (2e88 <hif_send+0x318>)
    2dc4:	4798      	blx	r3
    2dc6:	0003      	movs	r3, r0
    2dc8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    2dca:	231f      	movs	r3, #31
    2dcc:	18fb      	adds	r3, r7, r3
    2dce:	781b      	ldrb	r3, [r3, #0]
    2dd0:	b25b      	sxtb	r3, r3
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d140      	bne.n	2e58 <hif_send+0x2e8>
				u32CurrAddr += u16DataSize;
    2dd6:	2334      	movs	r3, #52	; 0x34
    2dd8:	18fb      	adds	r3, r7, r3
    2dda:	881a      	ldrh	r2, [r3, #0]
    2ddc:	68bb      	ldr	r3, [r7, #8]
    2dde:	18d3      	adds	r3, r2, r3
    2de0:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    2de2:	693b      	ldr	r3, [r7, #16]
    2de4:	009b      	lsls	r3, r3, #2
    2de6:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    2de8:	697b      	ldr	r3, [r7, #20]
    2dea:	2202      	movs	r2, #2
    2dec:	4313      	orrs	r3, r2
    2dee:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    2df0:	697b      	ldr	r3, [r7, #20]
    2df2:	221f      	movs	r2, #31
    2df4:	18bc      	adds	r4, r7, r2
    2df6:	4a25      	ldr	r2, [pc, #148]	; (2e8c <hif_send+0x31c>)
    2df8:	0019      	movs	r1, r3
    2dfa:	0010      	movs	r0, r2
    2dfc:	4b1d      	ldr	r3, [pc, #116]	; (2e74 <hif_send+0x304>)
    2dfe:	4798      	blx	r3
    2e00:	0003      	movs	r3, r0
    2e02:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    2e04:	231f      	movs	r3, #31
    2e06:	18fb      	adds	r3, r7, r3
    2e08:	781b      	ldrb	r3, [r3, #0]
    2e0a:	b25b      	sxtb	r3, r3
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	d014      	beq.n	2e3a <hif_send+0x2ca>
    2e10:	e023      	b.n	2e5a <hif_send+0x2ea>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    2e12:	231f      	movs	r3, #31
    2e14:	18fb      	adds	r3, r7, r3
    2e16:	22fd      	movs	r2, #253	; 0xfd
    2e18:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2e1a:	e01e      	b.n	2e5a <hif_send+0x2ea>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    2e1c:	23ca      	movs	r3, #202	; 0xca
    2e1e:	005a      	lsls	r2, r3, #1
    2e20:	491b      	ldr	r1, [pc, #108]	; (2e90 <hif_send+0x320>)
    2e22:	4b1c      	ldr	r3, [pc, #112]	; (2e94 <hif_send+0x324>)
    2e24:	0018      	movs	r0, r3
    2e26:	4b1c      	ldr	r3, [pc, #112]	; (2e98 <hif_send+0x328>)
    2e28:	4798      	blx	r3
    2e2a:	4b1c      	ldr	r3, [pc, #112]	; (2e9c <hif_send+0x32c>)
    2e2c:	0018      	movs	r0, r3
    2e2e:	4b1c      	ldr	r3, [pc, #112]	; (2ea0 <hif_send+0x330>)
    2e30:	4798      	blx	r3
    2e32:	200d      	movs	r0, #13
    2e34:	4b1b      	ldr	r3, [pc, #108]	; (2ea4 <hif_send+0x334>)
    2e36:	4798      	blx	r3
		goto ERR1;
    2e38:	e00f      	b.n	2e5a <hif_send+0x2ea>
	}
	ret = hif_chip_sleep();
    2e3a:	231f      	movs	r3, #31
    2e3c:	18fc      	adds	r4, r7, r3
    2e3e:	4b1a      	ldr	r3, [pc, #104]	; (2ea8 <hif_send+0x338>)
    2e40:	4798      	blx	r3
    2e42:	0003      	movs	r3, r0
    2e44:	7023      	strb	r3, [r4, #0]
    2e46:	e008      	b.n	2e5a <hif_send+0x2ea>
		if(M2M_SUCCESS != ret) goto ERR1;
    2e48:	46c0      	nop			; (mov r8, r8)
    2e4a:	e006      	b.n	2e5a <hif_send+0x2ea>
		if(M2M_SUCCESS != ret) goto ERR1;
    2e4c:	46c0      	nop			; (mov r8, r8)
    2e4e:	e004      	b.n	2e5a <hif_send+0x2ea>
			if(M2M_SUCCESS != ret) goto ERR1;
    2e50:	46c0      	nop			; (mov r8, r8)
    2e52:	e002      	b.n	2e5a <hif_send+0x2ea>
				if(M2M_SUCCESS != ret) goto ERR1;
    2e54:	46c0      	nop			; (mov r8, r8)
    2e56:	e000      	b.n	2e5a <hif_send+0x2ea>
				if(M2M_SUCCESS != ret) goto ERR1;
    2e58:	46c0      	nop			; (mov r8, r8)

ERR1:
	return ret;
    2e5a:	231f      	movs	r3, #31
    2e5c:	18fb      	adds	r3, r7, r3
    2e5e:	781b      	ldrb	r3, [r3, #0]
    2e60:	b25b      	sxtb	r3, r3
}
    2e62:	0018      	movs	r0, r3
    2e64:	46bd      	mov	sp, r7
    2e66:	b009      	add	sp, #36	; 0x24
    2e68:	bd90      	pop	{r4, r7, pc}
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	000029a5 	.word	0x000029a5
    2e70:	0000108c 	.word	0x0000108c
    2e74:	00004519 	.word	0x00004519
    2e78:	00001078 	.word	0x00001078
    2e7c:	000044f5 	.word	0x000044f5
    2e80:	00150400 	.word	0x00150400
    2e84:	000003e7 	.word	0x000003e7
    2e88:	00004661 	.word	0x00004661
    2e8c:	0000106c 	.word	0x0000106c
    2e90:	00013ac8 	.word	0x00013ac8
    2e94:	00013864 	.word	0x00013864
    2e98:	0001212d 	.word	0x0001212d
    2e9c:	00013878 	.word	0x00013878
    2ea0:	00012249 	.word	0x00012249
    2ea4:	00012161 	.word	0x00012161
    2ea8:	00002a3d 	.word	0x00002a3d

00002eac <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    2eac:	b590      	push	{r4, r7, lr}
    2eae:	b087      	sub	sp, #28
    2eb0:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
    2eb2:	230f      	movs	r3, #15
    2eb4:	18fb      	adds	r3, r7, r3
    2eb6:	22fa      	movs	r2, #250	; 0xfa
    2eb8:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    2eba:	230f      	movs	r3, #15
    2ebc:	18fc      	adds	r4, r7, r3
    2ebe:	4bdf      	ldr	r3, [pc, #892]	; (323c <hif_isr+0x390>)
    2ec0:	4798      	blx	r3
    2ec2:	0003      	movs	r3, r0
    2ec4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    2ec6:	230f      	movs	r3, #15
    2ec8:	18fb      	adds	r3, r7, r3
    2eca:	781b      	ldrb	r3, [r3, #0]
    2ecc:	b25b      	sxtb	r3, r3
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d000      	beq.n	2ed4 <hif_isr+0x28>
    2ed2:	e19c      	b.n	320e <hif_isr+0x362>
	{
		ret = nm_read_reg_with_ret(0x1070, &reg);
    2ed4:	230f      	movs	r3, #15
    2ed6:	18fc      	adds	r4, r7, r3
    2ed8:	2308      	movs	r3, #8
    2eda:	18fb      	adds	r3, r7, r3
    2edc:	4ad8      	ldr	r2, [pc, #864]	; (3240 <hif_isr+0x394>)
    2ede:	0019      	movs	r1, r3
    2ee0:	0010      	movs	r0, r2
    2ee2:	4bd8      	ldr	r3, [pc, #864]	; (3244 <hif_isr+0x398>)
    2ee4:	4798      	blx	r3
    2ee6:	0003      	movs	r3, r0
    2ee8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
    2eea:	230f      	movs	r3, #15
    2eec:	18fb      	adds	r3, r7, r3
    2eee:	781b      	ldrb	r3, [r3, #0]
    2ef0:	b25b      	sxtb	r3, r3
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d000      	beq.n	2ef8 <hif_isr+0x4c>
    2ef6:	e17c      	b.n	31f2 <hif_isr+0x346>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    2ef8:	68bb      	ldr	r3, [r7, #8]
    2efa:	2201      	movs	r2, #1
    2efc:	4013      	ands	r3, r2
    2efe:	d100      	bne.n	2f02 <hif_isr+0x56>
    2f00:	e167      	b.n	31d2 <hif_isr+0x326>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    2f02:	2000      	movs	r0, #0
    2f04:	4bd0      	ldr	r3, [pc, #832]	; (3248 <hif_isr+0x39c>)
    2f06:	4798      	blx	r3
				/*Clearing RX interrupt*/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    2f08:	230f      	movs	r3, #15
    2f0a:	18fc      	adds	r4, r7, r3
    2f0c:	2308      	movs	r3, #8
    2f0e:	18fb      	adds	r3, r7, r3
    2f10:	4acb      	ldr	r2, [pc, #812]	; (3240 <hif_isr+0x394>)
    2f12:	0019      	movs	r1, r3
    2f14:	0010      	movs	r0, r2
    2f16:	4bcb      	ldr	r3, [pc, #812]	; (3244 <hif_isr+0x398>)
    2f18:	4798      	blx	r3
    2f1a:	0003      	movs	r3, r0
    2f1c:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    2f1e:	230f      	movs	r3, #15
    2f20:	18fb      	adds	r3, r7, r3
    2f22:	781b      	ldrb	r3, [r3, #0]
    2f24:	b25b      	sxtb	r3, r3
    2f26:	2b00      	cmp	r3, #0
    2f28:	d000      	beq.n	2f2c <hif_isr+0x80>
    2f2a:	e185      	b.n	3238 <hif_isr+0x38c>
				reg &= ~(1<<0);
    2f2c:	68bb      	ldr	r3, [r7, #8]
    2f2e:	2201      	movs	r2, #1
    2f30:	4393      	bics	r3, r2
    2f32:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    2f34:	68bb      	ldr	r3, [r7, #8]
    2f36:	220f      	movs	r2, #15
    2f38:	18bc      	adds	r4, r7, r2
    2f3a:	4ac1      	ldr	r2, [pc, #772]	; (3240 <hif_isr+0x394>)
    2f3c:	0019      	movs	r1, r3
    2f3e:	0010      	movs	r0, r2
    2f40:	4bc2      	ldr	r3, [pc, #776]	; (324c <hif_isr+0x3a0>)
    2f42:	4798      	blx	r3
    2f44:	0003      	movs	r3, r0
    2f46:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    2f48:	230f      	movs	r3, #15
    2f4a:	18fb      	adds	r3, r7, r3
    2f4c:	781b      	ldrb	r3, [r3, #0]
    2f4e:	b25b      	sxtb	r3, r3
    2f50:	2b00      	cmp	r3, #0
    2f52:	d000      	beq.n	2f56 <hif_isr+0xaa>
    2f54:	e1b2      	b.n	32bc <hif_isr+0x410>
				/* read the rx size */
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    2f56:	230f      	movs	r3, #15
    2f58:	18fc      	adds	r4, r7, r3
    2f5a:	2308      	movs	r3, #8
    2f5c:	18fb      	adds	r3, r7, r3
    2f5e:	4ab8      	ldr	r2, [pc, #736]	; (3240 <hif_isr+0x394>)
    2f60:	0019      	movs	r1, r3
    2f62:	0010      	movs	r0, r2
    2f64:	4bb7      	ldr	r3, [pc, #732]	; (3244 <hif_isr+0x398>)
    2f66:	4798      	blx	r3
    2f68:	0003      	movs	r3, r0
    2f6a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    2f6c:	230f      	movs	r3, #15
    2f6e:	18fb      	adds	r3, r7, r3
    2f70:	781b      	ldrb	r3, [r3, #0]
    2f72:	b25b      	sxtb	r3, r3
    2f74:	2b00      	cmp	r3, #0
    2f76:	d012      	beq.n	2f9e <hif_isr+0xf2>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_0 bus fail\n");
    2f78:	23c0      	movs	r3, #192	; 0xc0
    2f7a:	33ff      	adds	r3, #255	; 0xff
    2f7c:	001a      	movs	r2, r3
    2f7e:	49b4      	ldr	r1, [pc, #720]	; (3250 <hif_isr+0x3a4>)
    2f80:	4bb4      	ldr	r3, [pc, #720]	; (3254 <hif_isr+0x3a8>)
    2f82:	0018      	movs	r0, r3
    2f84:	4bb4      	ldr	r3, [pc, #720]	; (3258 <hif_isr+0x3ac>)
    2f86:	4798      	blx	r3
    2f88:	4bb4      	ldr	r3, [pc, #720]	; (325c <hif_isr+0x3b0>)
    2f8a:	0018      	movs	r0, r3
    2f8c:	4bb4      	ldr	r3, [pc, #720]	; (3260 <hif_isr+0x3b4>)
    2f8e:	4798      	blx	r3
    2f90:	200d      	movs	r0, #13
    2f92:	4bb4      	ldr	r3, [pc, #720]	; (3264 <hif_isr+0x3b8>)
    2f94:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    2f96:	2001      	movs	r0, #1
    2f98:	4bab      	ldr	r3, [pc, #684]	; (3248 <hif_isr+0x39c>)
    2f9a:	4798      	blx	r3
					goto ERR1;
    2f9c:	e18f      	b.n	32be <hif_isr+0x412>
				}
				gu8HifSizeDone = 0;
    2f9e:	4bb2      	ldr	r3, [pc, #712]	; (3268 <hif_isr+0x3bc>)
    2fa0:	2200      	movs	r2, #0
    2fa2:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    2fa4:	68bb      	ldr	r3, [r7, #8]
    2fa6:	089b      	lsrs	r3, r3, #2
    2fa8:	b29a      	uxth	r2, r3
    2faa:	230c      	movs	r3, #12
    2fac:	18fb      	adds	r3, r7, r3
    2fae:	0512      	lsls	r2, r2, #20
    2fb0:	0d12      	lsrs	r2, r2, #20
    2fb2:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    2fb4:	230c      	movs	r3, #12
    2fb6:	18fb      	adds	r3, r7, r3
    2fb8:	881b      	ldrh	r3, [r3, #0]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d100      	bne.n	2fc0 <hif_isr+0x114>
    2fbe:	e0f6      	b.n	31ae <hif_isr+0x302>
					uint32 address = 0;
    2fc0:	2300      	movs	r3, #0
    2fc2:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    2fc4:	230f      	movs	r3, #15
    2fc6:	18fc      	adds	r4, r7, r3
    2fc8:	003b      	movs	r3, r7
    2fca:	4aa8      	ldr	r2, [pc, #672]	; (326c <hif_isr+0x3c0>)
    2fcc:	0019      	movs	r1, r3
    2fce:	0010      	movs	r0, r2
    2fd0:	4b9c      	ldr	r3, [pc, #624]	; (3244 <hif_isr+0x398>)
    2fd2:	4798      	blx	r3
    2fd4:	0003      	movs	r3, r0
    2fd6:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    2fd8:	230f      	movs	r3, #15
    2fda:	18fb      	adds	r3, r7, r3
    2fdc:	781b      	ldrb	r3, [r3, #0]
    2fde:	b25b      	sxtb	r3, r3
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d012      	beq.n	300a <hif_isr+0x15e>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    2fe4:	23ce      	movs	r3, #206	; 0xce
    2fe6:	33ff      	adds	r3, #255	; 0xff
    2fe8:	001a      	movs	r2, r3
    2fea:	4999      	ldr	r1, [pc, #612]	; (3250 <hif_isr+0x3a4>)
    2fec:	4b99      	ldr	r3, [pc, #612]	; (3254 <hif_isr+0x3a8>)
    2fee:	0018      	movs	r0, r3
    2ff0:	4b99      	ldr	r3, [pc, #612]	; (3258 <hif_isr+0x3ac>)
    2ff2:	4798      	blx	r3
    2ff4:	4b9e      	ldr	r3, [pc, #632]	; (3270 <hif_isr+0x3c4>)
    2ff6:	0018      	movs	r0, r3
    2ff8:	4b99      	ldr	r3, [pc, #612]	; (3260 <hif_isr+0x3b4>)
    2ffa:	4798      	blx	r3
    2ffc:	200d      	movs	r0, #13
    2ffe:	4b99      	ldr	r3, [pc, #612]	; (3264 <hif_isr+0x3b8>)
    3000:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    3002:	2001      	movs	r0, #1
    3004:	4b90      	ldr	r3, [pc, #576]	; (3248 <hif_isr+0x39c>)
    3006:	4798      	blx	r3
						goto ERR1;
    3008:	e159      	b.n	32be <hif_isr+0x412>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    300a:	683b      	ldr	r3, [r7, #0]
    300c:	220f      	movs	r2, #15
    300e:	18bc      	adds	r4, r7, r2
    3010:	1d39      	adds	r1, r7, #4
    3012:	2204      	movs	r2, #4
    3014:	0018      	movs	r0, r3
    3016:	4b97      	ldr	r3, [pc, #604]	; (3274 <hif_isr+0x3c8>)
    3018:	4798      	blx	r3
    301a:	0003      	movs	r3, r0
    301c:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    301e:	1d3b      	adds	r3, r7, #4
    3020:	885b      	ldrh	r3, [r3, #2]
    3022:	b29a      	uxth	r2, r3
    3024:	1d3b      	adds	r3, r7, #4
    3026:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    3028:	230f      	movs	r3, #15
    302a:	18fb      	adds	r3, r7, r3
    302c:	781b      	ldrb	r3, [r3, #0]
    302e:	b25b      	sxtb	r3, r3
    3030:	2b00      	cmp	r3, #0
    3032:	d012      	beq.n	305a <hif_isr+0x1ae>
					{
						M2M_ERR("(hif) address bus fail\n");
    3034:	23d6      	movs	r3, #214	; 0xd6
    3036:	33ff      	adds	r3, #255	; 0xff
    3038:	001a      	movs	r2, r3
    303a:	4985      	ldr	r1, [pc, #532]	; (3250 <hif_isr+0x3a4>)
    303c:	4b85      	ldr	r3, [pc, #532]	; (3254 <hif_isr+0x3a8>)
    303e:	0018      	movs	r0, r3
    3040:	4b85      	ldr	r3, [pc, #532]	; (3258 <hif_isr+0x3ac>)
    3042:	4798      	blx	r3
    3044:	4b8c      	ldr	r3, [pc, #560]	; (3278 <hif_isr+0x3cc>)
    3046:	0018      	movs	r0, r3
    3048:	4b85      	ldr	r3, [pc, #532]	; (3260 <hif_isr+0x3b4>)
    304a:	4798      	blx	r3
    304c:	200d      	movs	r0, #13
    304e:	4b85      	ldr	r3, [pc, #532]	; (3264 <hif_isr+0x3b8>)
    3050:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    3052:	2001      	movs	r0, #1
    3054:	4b7c      	ldr	r3, [pc, #496]	; (3248 <hif_isr+0x39c>)
    3056:	4798      	blx	r3
						goto ERR1;
    3058:	e131      	b.n	32be <hif_isr+0x412>
					}
					if(strHif.u16Length != size)
    305a:	1d3b      	adds	r3, r7, #4
    305c:	885b      	ldrh	r3, [r3, #2]
    305e:	b29b      	uxth	r3, r3
    3060:	220c      	movs	r2, #12
    3062:	18ba      	adds	r2, r7, r2
    3064:	8812      	ldrh	r2, [r2, #0]
    3066:	429a      	cmp	r2, r3
    3068:	d02d      	beq.n	30c6 <hif_isr+0x21a>
					{
						if((size - strHif.u16Length) > 4)
    306a:	230c      	movs	r3, #12
    306c:	18fb      	adds	r3, r7, r3
    306e:	881b      	ldrh	r3, [r3, #0]
    3070:	1d3a      	adds	r2, r7, #4
    3072:	8852      	ldrh	r2, [r2, #2]
    3074:	b292      	uxth	r2, r2
    3076:	1a9b      	subs	r3, r3, r2
    3078:	2b04      	cmp	r3, #4
    307a:	dd24      	ble.n	30c6 <hif_isr+0x21a>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    307c:	23ef      	movs	r3, #239	; 0xef
    307e:	005a      	lsls	r2, r3, #1
    3080:	4973      	ldr	r1, [pc, #460]	; (3250 <hif_isr+0x3a4>)
    3082:	4b74      	ldr	r3, [pc, #464]	; (3254 <hif_isr+0x3a8>)
    3084:	0018      	movs	r0, r3
    3086:	4b74      	ldr	r3, [pc, #464]	; (3258 <hif_isr+0x3ac>)
    3088:	4798      	blx	r3
    308a:	230c      	movs	r3, #12
    308c:	18fb      	adds	r3, r7, r3
    308e:	8819      	ldrh	r1, [r3, #0]
    3090:	1d3b      	adds	r3, r7, #4
    3092:	885b      	ldrh	r3, [r3, #2]
    3094:	b29b      	uxth	r3, r3
    3096:	001a      	movs	r2, r3
    3098:	1d3b      	adds	r3, r7, #4
    309a:	781b      	ldrb	r3, [r3, #0]
    309c:	b2db      	uxtb	r3, r3
    309e:	001c      	movs	r4, r3
    30a0:	1d3b      	adds	r3, r7, #4
    30a2:	785b      	ldrb	r3, [r3, #1]
    30a4:	b2db      	uxtb	r3, r3
    30a6:	4875      	ldr	r0, [pc, #468]	; (327c <hif_isr+0x3d0>)
    30a8:	9300      	str	r3, [sp, #0]
    30aa:	0023      	movs	r3, r4
    30ac:	4c6a      	ldr	r4, [pc, #424]	; (3258 <hif_isr+0x3ac>)
    30ae:	47a0      	blx	r4
    30b0:	200d      	movs	r0, #13
    30b2:	4b6c      	ldr	r3, [pc, #432]	; (3264 <hif_isr+0x3b8>)
    30b4:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    30b6:	2001      	movs	r0, #1
    30b8:	4b63      	ldr	r3, [pc, #396]	; (3248 <hif_isr+0x39c>)
    30ba:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    30bc:	230f      	movs	r3, #15
    30be:	18fb      	adds	r3, r7, r3
    30c0:	22fa      	movs	r2, #250	; 0xfa
    30c2:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    30c4:	e0fb      	b.n	32be <hif_isr+0x412>
						}
					}

					if(M2M_REQ_GRP_WIFI == strHif.u8Gid)
    30c6:	1d3b      	adds	r3, r7, #4
    30c8:	781b      	ldrb	r3, [r3, #0]
    30ca:	b2db      	uxtb	r3, r3
    30cc:	2b01      	cmp	r3, #1
    30ce:	d111      	bne.n	30f4 <hif_isr+0x248>
					{
						if(pfWifiCb)
    30d0:	4b6b      	ldr	r3, [pc, #428]	; (3280 <hif_isr+0x3d4>)
    30d2:	681b      	ldr	r3, [r3, #0]
    30d4:	2b00      	cmp	r3, #0
    30d6:	d050      	beq.n	317a <hif_isr+0x2ce>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    30d8:	4b69      	ldr	r3, [pc, #420]	; (3280 <hif_isr+0x3d4>)
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	1d3a      	adds	r2, r7, #4
    30de:	7852      	ldrb	r2, [r2, #1]
    30e0:	b2d0      	uxtb	r0, r2
    30e2:	1d3a      	adds	r2, r7, #4
    30e4:	8852      	ldrh	r2, [r2, #2]
    30e6:	b292      	uxth	r2, r2
    30e8:	3a08      	subs	r2, #8
    30ea:	b291      	uxth	r1, r2
    30ec:	683a      	ldr	r2, [r7, #0]
    30ee:	3208      	adds	r2, #8
    30f0:	4798      	blx	r3
    30f2:	e042      	b.n	317a <hif_isr+0x2ce>

					}
					else if(M2M_REQ_GRP_IP == strHif.u8Gid)
    30f4:	1d3b      	adds	r3, r7, #4
    30f6:	781b      	ldrb	r3, [r3, #0]
    30f8:	b2db      	uxtb	r3, r3
    30fa:	2b02      	cmp	r3, #2
    30fc:	d111      	bne.n	3122 <hif_isr+0x276>
					{
						if(pfIpCb)
    30fe:	4b61      	ldr	r3, [pc, #388]	; (3284 <hif_isr+0x3d8>)
    3100:	681b      	ldr	r3, [r3, #0]
    3102:	2b00      	cmp	r3, #0
    3104:	d039      	beq.n	317a <hif_isr+0x2ce>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3106:	4b5f      	ldr	r3, [pc, #380]	; (3284 <hif_isr+0x3d8>)
    3108:	681b      	ldr	r3, [r3, #0]
    310a:	1d3a      	adds	r2, r7, #4
    310c:	7852      	ldrb	r2, [r2, #1]
    310e:	b2d0      	uxtb	r0, r2
    3110:	1d3a      	adds	r2, r7, #4
    3112:	8852      	ldrh	r2, [r2, #2]
    3114:	b292      	uxth	r2, r2
    3116:	3a08      	subs	r2, #8
    3118:	b291      	uxth	r1, r2
    311a:	683a      	ldr	r2, [r7, #0]
    311c:	3208      	adds	r2, #8
    311e:	4798      	blx	r3
    3120:	e02b      	b.n	317a <hif_isr+0x2ce>
					}
					else if(M2M_REQ_GRP_OTA == strHif.u8Gid)
    3122:	1d3b      	adds	r3, r7, #4
    3124:	781b      	ldrb	r3, [r3, #0]
    3126:	b2db      	uxtb	r3, r3
    3128:	2b04      	cmp	r3, #4
    312a:	d111      	bne.n	3150 <hif_isr+0x2a4>
					{
						if(pfOtaCb)
    312c:	4b56      	ldr	r3, [pc, #344]	; (3288 <hif_isr+0x3dc>)
    312e:	681b      	ldr	r3, [r3, #0]
    3130:	2b00      	cmp	r3, #0
    3132:	d022      	beq.n	317a <hif_isr+0x2ce>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3134:	4b54      	ldr	r3, [pc, #336]	; (3288 <hif_isr+0x3dc>)
    3136:	681b      	ldr	r3, [r3, #0]
    3138:	1d3a      	adds	r2, r7, #4
    313a:	7852      	ldrb	r2, [r2, #1]
    313c:	b2d0      	uxtb	r0, r2
    313e:	1d3a      	adds	r2, r7, #4
    3140:	8852      	ldrh	r2, [r2, #2]
    3142:	b292      	uxth	r2, r2
    3144:	3a08      	subs	r2, #8
    3146:	b291      	uxth	r1, r2
    3148:	683a      	ldr	r2, [r7, #0]
    314a:	3208      	adds	r2, #8
    314c:	4798      	blx	r3
    314e:	e014      	b.n	317a <hif_isr+0x2ce>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    3150:	23f8      	movs	r3, #248	; 0xf8
    3152:	33ff      	adds	r3, #255	; 0xff
    3154:	001a      	movs	r2, r3
    3156:	493e      	ldr	r1, [pc, #248]	; (3250 <hif_isr+0x3a4>)
    3158:	4b3e      	ldr	r3, [pc, #248]	; (3254 <hif_isr+0x3a8>)
    315a:	0018      	movs	r0, r3
    315c:	4b3e      	ldr	r3, [pc, #248]	; (3258 <hif_isr+0x3ac>)
    315e:	4798      	blx	r3
    3160:	4b4a      	ldr	r3, [pc, #296]	; (328c <hif_isr+0x3e0>)
    3162:	0018      	movs	r0, r3
    3164:	4b3e      	ldr	r3, [pc, #248]	; (3260 <hif_isr+0x3b4>)
    3166:	4798      	blx	r3
    3168:	200d      	movs	r0, #13
    316a:	4b3e      	ldr	r3, [pc, #248]	; (3264 <hif_isr+0x3b8>)
    316c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    316e:	230f      	movs	r3, #15
    3170:	18fb      	adds	r3, r7, r3
    3172:	22fa      	movs	r2, #250	; 0xfa
    3174:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    3176:	46c0      	nop			; (mov r8, r8)
    3178:	e0a1      	b.n	32be <hif_isr+0x412>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    317a:	4b3b      	ldr	r3, [pc, #236]	; (3268 <hif_isr+0x3bc>)
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	b2db      	uxtb	r3, r3
    3180:	2b00      	cmp	r3, #0
    3182:	d152      	bne.n	322a <hif_isr+0x37e>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    3184:	23ff      	movs	r3, #255	; 0xff
    3186:	005a      	lsls	r2, r3, #1
    3188:	4931      	ldr	r1, [pc, #196]	; (3250 <hif_isr+0x3a4>)
    318a:	4b32      	ldr	r3, [pc, #200]	; (3254 <hif_isr+0x3a8>)
    318c:	0018      	movs	r0, r3
    318e:	4b32      	ldr	r3, [pc, #200]	; (3258 <hif_isr+0x3ac>)
    3190:	4798      	blx	r3
    3192:	4b3f      	ldr	r3, [pc, #252]	; (3290 <hif_isr+0x3e4>)
    3194:	0018      	movs	r0, r3
    3196:	4b32      	ldr	r3, [pc, #200]	; (3260 <hif_isr+0x3b4>)
    3198:	4798      	blx	r3
    319a:	200d      	movs	r0, #13
    319c:	4b31      	ldr	r3, [pc, #196]	; (3264 <hif_isr+0x3b8>)
    319e:	4798      	blx	r3
						ret = hif_set_rx_done();
    31a0:	230f      	movs	r3, #15
    31a2:	18fc      	adds	r4, r7, r3
    31a4:	4b3b      	ldr	r3, [pc, #236]	; (3294 <hif_isr+0x3e8>)
    31a6:	4798      	blx	r3
    31a8:	0003      	movs	r3, r0
    31aa:	7023      	strb	r3, [r4, #0]
    31ac:	e03d      	b.n	322a <hif_isr+0x37e>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    31ae:	230f      	movs	r3, #15
    31b0:	18fb      	adds	r3, r7, r3
    31b2:	22fe      	movs	r2, #254	; 0xfe
    31b4:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    31b6:	4a38      	ldr	r2, [pc, #224]	; (3298 <hif_isr+0x3ec>)
    31b8:	4925      	ldr	r1, [pc, #148]	; (3250 <hif_isr+0x3a4>)
    31ba:	4b26      	ldr	r3, [pc, #152]	; (3254 <hif_isr+0x3a8>)
    31bc:	0018      	movs	r0, r3
    31be:	4b26      	ldr	r3, [pc, #152]	; (3258 <hif_isr+0x3ac>)
    31c0:	4798      	blx	r3
    31c2:	4b36      	ldr	r3, [pc, #216]	; (329c <hif_isr+0x3f0>)
    31c4:	0018      	movs	r0, r3
    31c6:	4b26      	ldr	r3, [pc, #152]	; (3260 <hif_isr+0x3b4>)
    31c8:	4798      	blx	r3
    31ca:	200d      	movs	r0, #13
    31cc:	4b25      	ldr	r3, [pc, #148]	; (3264 <hif_isr+0x3b8>)
    31ce:	4798      	blx	r3
					goto ERR1;
    31d0:	e075      	b.n	32be <hif_isr+0x412>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    31d2:	4a33      	ldr	r2, [pc, #204]	; (32a0 <hif_isr+0x3f4>)
    31d4:	491e      	ldr	r1, [pc, #120]	; (3250 <hif_isr+0x3a4>)
    31d6:	4b1f      	ldr	r3, [pc, #124]	; (3254 <hif_isr+0x3a8>)
    31d8:	0018      	movs	r0, r3
    31da:	4b1f      	ldr	r3, [pc, #124]	; (3258 <hif_isr+0x3ac>)
    31dc:	4798      	blx	r3
    31de:	68ba      	ldr	r2, [r7, #8]
    31e0:	4b30      	ldr	r3, [pc, #192]	; (32a4 <hif_isr+0x3f8>)
    31e2:	0011      	movs	r1, r2
    31e4:	0018      	movs	r0, r3
    31e6:	4b1c      	ldr	r3, [pc, #112]	; (3258 <hif_isr+0x3ac>)
    31e8:	4798      	blx	r3
    31ea:	200d      	movs	r0, #13
    31ec:	4b1d      	ldr	r3, [pc, #116]	; (3264 <hif_isr+0x3b8>)
    31ee:	4798      	blx	r3
    31f0:	e01b      	b.n	322a <hif_isr+0x37e>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    31f2:	4a2d      	ldr	r2, [pc, #180]	; (32a8 <hif_isr+0x3fc>)
    31f4:	4916      	ldr	r1, [pc, #88]	; (3250 <hif_isr+0x3a4>)
    31f6:	4b17      	ldr	r3, [pc, #92]	; (3254 <hif_isr+0x3a8>)
    31f8:	0018      	movs	r0, r3
    31fa:	4b17      	ldr	r3, [pc, #92]	; (3258 <hif_isr+0x3ac>)
    31fc:	4798      	blx	r3
    31fe:	4b2b      	ldr	r3, [pc, #172]	; (32ac <hif_isr+0x400>)
    3200:	0018      	movs	r0, r3
    3202:	4b17      	ldr	r3, [pc, #92]	; (3260 <hif_isr+0x3b4>)
    3204:	4798      	blx	r3
    3206:	200d      	movs	r0, #13
    3208:	4b16      	ldr	r3, [pc, #88]	; (3264 <hif_isr+0x3b8>)
    320a:	4798      	blx	r3
			goto ERR1;
    320c:	e057      	b.n	32be <hif_isr+0x412>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    320e:	4a28      	ldr	r2, [pc, #160]	; (32b0 <hif_isr+0x404>)
    3210:	490f      	ldr	r1, [pc, #60]	; (3250 <hif_isr+0x3a4>)
    3212:	4b10      	ldr	r3, [pc, #64]	; (3254 <hif_isr+0x3a8>)
    3214:	0018      	movs	r0, r3
    3216:	4b10      	ldr	r3, [pc, #64]	; (3258 <hif_isr+0x3ac>)
    3218:	4798      	blx	r3
    321a:	4b26      	ldr	r3, [pc, #152]	; (32b4 <hif_isr+0x408>)
    321c:	0018      	movs	r0, r3
    321e:	4b10      	ldr	r3, [pc, #64]	; (3260 <hif_isr+0x3b4>)
    3220:	4798      	blx	r3
    3222:	200d      	movs	r0, #13
    3224:	4b0f      	ldr	r3, [pc, #60]	; (3264 <hif_isr+0x3b8>)
    3226:	4798      	blx	r3
		goto ERR1;
    3228:	e049      	b.n	32be <hif_isr+0x412>
	}

	ret = hif_chip_sleep();
    322a:	230f      	movs	r3, #15
    322c:	18fc      	adds	r4, r7, r3
    322e:	4b22      	ldr	r3, [pc, #136]	; (32b8 <hif_isr+0x40c>)
    3230:	4798      	blx	r3
    3232:	0003      	movs	r3, r0
    3234:	7023      	strb	r3, [r4, #0]
    3236:	e042      	b.n	32be <hif_isr+0x412>
				if(ret != M2M_SUCCESS)goto ERR1;
    3238:	46c0      	nop			; (mov r8, r8)
    323a:	e040      	b.n	32be <hif_isr+0x412>
    323c:	000029a5 	.word	0x000029a5
    3240:	00001070 	.word	0x00001070
    3244:	000044f5 	.word	0x000044f5
    3248:	00002811 	.word	0x00002811
    324c:	00004519 	.word	0x00004519
    3250:	00013ad4 	.word	0x00013ad4
    3254:	00013864 	.word	0x00013864
    3258:	0001212d 	.word	0x0001212d
    325c:	00013894 	.word	0x00013894
    3260:	00012249 	.word	0x00012249
    3264:	00012161 	.word	0x00012161
    3268:	2000027a 	.word	0x2000027a
    326c:	00001084 	.word	0x00001084
    3270:	000138b8 	.word	0x000138b8
    3274:	00004569 	.word	0x00004569
    3278:	000138dc 	.word	0x000138dc
    327c:	000138f4 	.word	0x000138f4
    3280:	2000027c 	.word	0x2000027c
    3284:	20000280 	.word	0x20000280
    3288:	20000284 	.word	0x20000284
    328c:	00013934 	.word	0x00013934
    3290:	0001394c 	.word	0x0001394c
    3294:	0000291d 	.word	0x0000291d
    3298:	00000206 	.word	0x00000206
    329c:	00013970 	.word	0x00013970
    32a0:	0000020d 	.word	0x0000020d
    32a4:	00013984 	.word	0x00013984
    32a8:	00000213 	.word	0x00000213
    32ac:	000139a0 	.word	0x000139a0
    32b0:	00000219 	.word	0x00000219
    32b4:	000139c4 	.word	0x000139c4
    32b8:	00002a3d 	.word	0x00002a3d
				if(ret != M2M_SUCCESS)goto ERR1;
    32bc:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    32be:	230f      	movs	r3, #15
    32c0:	18fb      	adds	r3, r7, r3
    32c2:	781b      	ldrb	r3, [r3, #0]
    32c4:	b25b      	sxtb	r3, r3
}
    32c6:	0018      	movs	r0, r3
    32c8:	46bd      	mov	sp, r7
    32ca:	b005      	add	sp, #20
    32cc:	bd90      	pop	{r4, r7, pc}
    32ce:	46c0      	nop			; (mov r8, r8)

000032d0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    32d0:	b590      	push	{r4, r7, lr}
    32d2:	b083      	sub	sp, #12
    32d4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    32d6:	1dfb      	adds	r3, r7, #7
    32d8:	2200      	movs	r2, #0
    32da:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    32dc:	e024      	b.n	3328 <hif_handle_isr+0x58>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    32de:	4b18      	ldr	r3, [pc, #96]	; (3340 <hif_handle_isr+0x70>)
    32e0:	781b      	ldrb	r3, [r3, #0]
    32e2:	b2db      	uxtb	r3, r3
    32e4:	3b01      	subs	r3, #1
    32e6:	b2da      	uxtb	r2, r3
    32e8:	4b15      	ldr	r3, [pc, #84]	; (3340 <hif_handle_isr+0x70>)
    32ea:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    32ec:	1dfc      	adds	r4, r7, #7
    32ee:	4b15      	ldr	r3, [pc, #84]	; (3344 <hif_handle_isr+0x74>)
    32f0:	4798      	blx	r3
    32f2:	0003      	movs	r3, r0
    32f4:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    32f6:	1dfb      	adds	r3, r7, #7
    32f8:	781b      	ldrb	r3, [r3, #0]
    32fa:	b25b      	sxtb	r3, r3
    32fc:	2b00      	cmp	r3, #0
    32fe:	d100      	bne.n	3302 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    3300:	e012      	b.n	3328 <hif_handle_isr+0x58>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    3302:	238e      	movs	r3, #142	; 0x8e
    3304:	009a      	lsls	r2, r3, #2
    3306:	4910      	ldr	r1, [pc, #64]	; (3348 <hif_handle_isr+0x78>)
    3308:	4b10      	ldr	r3, [pc, #64]	; (334c <hif_handle_isr+0x7c>)
    330a:	0018      	movs	r0, r3
    330c:	4b10      	ldr	r3, [pc, #64]	; (3350 <hif_handle_isr+0x80>)
    330e:	4798      	blx	r3
    3310:	1dfb      	adds	r3, r7, #7
    3312:	2200      	movs	r2, #0
    3314:	569a      	ldrsb	r2, [r3, r2]
    3316:	4b0f      	ldr	r3, [pc, #60]	; (3354 <hif_handle_isr+0x84>)
    3318:	0011      	movs	r1, r2
    331a:	0018      	movs	r0, r3
    331c:	4b0c      	ldr	r3, [pc, #48]	; (3350 <hif_handle_isr+0x80>)
    331e:	4798      	blx	r3
    3320:	200d      	movs	r0, #13
    3322:	4b0d      	ldr	r3, [pc, #52]	; (3358 <hif_handle_isr+0x88>)
    3324:	4798      	blx	r3
			ret = hif_isr();
    3326:	e7e1      	b.n	32ec <hif_handle_isr+0x1c>
	while (gu8Interrupt) {
    3328:	4b05      	ldr	r3, [pc, #20]	; (3340 <hif_handle_isr+0x70>)
    332a:	781b      	ldrb	r3, [r3, #0]
    332c:	b2db      	uxtb	r3, r3
    332e:	2b00      	cmp	r3, #0
    3330:	d1d5      	bne.n	32de <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    3332:	1dfb      	adds	r3, r7, #7
    3334:	781b      	ldrb	r3, [r3, #0]
    3336:	b25b      	sxtb	r3, r3
}
    3338:	0018      	movs	r0, r3
    333a:	46bd      	mov	sp, r7
    333c:	b003      	add	sp, #12
    333e:	bd90      	pop	{r4, r7, pc}
    3340:	2000027b 	.word	0x2000027b
    3344:	00002ead 	.word	0x00002ead
    3348:	00013adc 	.word	0x00013adc
    334c:	00013864 	.word	0x00013864
    3350:	0001212d 	.word	0x0001212d
    3354:	000139e4 	.word	0x000139e4
    3358:	00012161 	.word	0x00012161

0000335c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    335c:	b590      	push	{r4, r7, lr}
    335e:	b089      	sub	sp, #36	; 0x24
    3360:	af00      	add	r7, sp, #0
    3362:	60f8      	str	r0, [r7, #12]
    3364:	60b9      	str	r1, [r7, #8]
    3366:	0019      	movs	r1, r3
    3368:	1dbb      	adds	r3, r7, #6
    336a:	801a      	strh	r2, [r3, #0]
    336c:	1d7b      	adds	r3, r7, #5
    336e:	1c0a      	adds	r2, r1, #0
    3370:	701a      	strb	r2, [r3, #0]
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;
    3372:	231f      	movs	r3, #31
    3374:	18fb      	adds	r3, r7, r3
    3376:	2200      	movs	r2, #0
    3378:	701a      	strb	r2, [r3, #0]

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    337a:	68fb      	ldr	r3, [r7, #12]
    337c:	2b00      	cmp	r3, #0
    337e:	d006      	beq.n	338e <hif_receive+0x32>
    3380:	68bb      	ldr	r3, [r7, #8]
    3382:	2b00      	cmp	r3, #0
    3384:	d003      	beq.n	338e <hif_receive+0x32>
    3386:	1dbb      	adds	r3, r7, #6
    3388:	881b      	ldrh	r3, [r3, #0]
    338a:	2b00      	cmp	r3, #0
    338c:	d11e      	bne.n	33cc <hif_receive+0x70>
	{
		if(isDone)
    338e:	1d7b      	adds	r3, r7, #5
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	2b00      	cmp	r3, #0
    3394:	d008      	beq.n	33a8 <hif_receive+0x4c>
		{
			gu8HifSizeDone = 1;
    3396:	4b5f      	ldr	r3, [pc, #380]	; (3514 <hif_receive+0x1b8>)
    3398:	2201      	movs	r2, #1
    339a:	701a      	strb	r2, [r3, #0]

			/* set RX done */
			ret = hif_set_rx_done();
    339c:	231f      	movs	r3, #31
    339e:	18fc      	adds	r4, r7, r3
    33a0:	4b5d      	ldr	r3, [pc, #372]	; (3518 <hif_receive+0x1bc>)
    33a2:	4798      	blx	r3
    33a4:	0003      	movs	r3, r0
    33a6:	7023      	strb	r3, [r4, #0]
		}
			
		ret = M2M_ERR_FAIL;
    33a8:	231f      	movs	r3, #31
    33aa:	18fb      	adds	r3, r7, r3
    33ac:	22f4      	movs	r2, #244	; 0xf4
    33ae:	701a      	strb	r2, [r3, #0]
		M2M_ERR(" hif_receive: Invalid argument\n");
    33b0:	4a5a      	ldr	r2, [pc, #360]	; (351c <hif_receive+0x1c0>)
    33b2:	495b      	ldr	r1, [pc, #364]	; (3520 <hif_receive+0x1c4>)
    33b4:	4b5b      	ldr	r3, [pc, #364]	; (3524 <hif_receive+0x1c8>)
    33b6:	0018      	movs	r0, r3
    33b8:	4b5b      	ldr	r3, [pc, #364]	; (3528 <hif_receive+0x1cc>)
    33ba:	4798      	blx	r3
    33bc:	4b5b      	ldr	r3, [pc, #364]	; (352c <hif_receive+0x1d0>)
    33be:	0018      	movs	r0, r3
    33c0:	4b5b      	ldr	r3, [pc, #364]	; (3530 <hif_receive+0x1d4>)
    33c2:	4798      	blx	r3
    33c4:	200d      	movs	r0, #13
    33c6:	4b5b      	ldr	r3, [pc, #364]	; (3534 <hif_receive+0x1d8>)
    33c8:	4798      	blx	r3
		goto ERR1;
    33ca:	e09a      	b.n	3502 <hif_receive+0x1a6>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    33cc:	231f      	movs	r3, #31
    33ce:	18fc      	adds	r4, r7, r3
    33d0:	2314      	movs	r3, #20
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	4a58      	ldr	r2, [pc, #352]	; (3538 <hif_receive+0x1dc>)
    33d6:	0019      	movs	r1, r3
    33d8:	0010      	movs	r0, r2
    33da:	4b58      	ldr	r3, [pc, #352]	; (353c <hif_receive+0x1e0>)
    33dc:	4798      	blx	r3
    33de:	0003      	movs	r3, r0
    33e0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    33e2:	231f      	movs	r3, #31
    33e4:	18fb      	adds	r3, r7, r3
    33e6:	781b      	ldrb	r3, [r3, #0]
    33e8:	b25b      	sxtb	r3, r3
    33ea:	2b00      	cmp	r3, #0
    33ec:	d000      	beq.n	33f0 <hif_receive+0x94>
    33ee:	e083      	b.n	34f8 <hif_receive+0x19c>


	size = (uint16)((reg >> 2) & 0xfff);
    33f0:	697b      	ldr	r3, [r7, #20]
    33f2:	089b      	lsrs	r3, r3, #2
    33f4:	b29a      	uxth	r2, r3
    33f6:	231c      	movs	r3, #28
    33f8:	18fb      	adds	r3, r7, r3
    33fa:	0512      	lsls	r2, r2, #20
    33fc:	0d12      	lsrs	r2, r2, #20
    33fe:	801a      	strh	r2, [r3, #0]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    3400:	231f      	movs	r3, #31
    3402:	18fc      	adds	r4, r7, r3
    3404:	2318      	movs	r3, #24
    3406:	18fb      	adds	r3, r7, r3
    3408:	4a4d      	ldr	r2, [pc, #308]	; (3540 <hif_receive+0x1e4>)
    340a:	0019      	movs	r1, r3
    340c:	0010      	movs	r0, r2
    340e:	4b4b      	ldr	r3, [pc, #300]	; (353c <hif_receive+0x1e0>)
    3410:	4798      	blx	r3
    3412:	0003      	movs	r3, r0
    3414:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3416:	231f      	movs	r3, #31
    3418:	18fb      	adds	r3, r7, r3
    341a:	781b      	ldrb	r3, [r3, #0]
    341c:	b25b      	sxtb	r3, r3
    341e:	2b00      	cmp	r3, #0
    3420:	d000      	beq.n	3424 <hif_receive+0xc8>
    3422:	e06b      	b.n	34fc <hif_receive+0x1a0>

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    3424:	1dbb      	adds	r3, r7, #6
    3426:	881a      	ldrh	r2, [r3, #0]
    3428:	231f      	movs	r3, #31
    342a:	18fc      	adds	r4, r7, r3
    342c:	68b9      	ldr	r1, [r7, #8]
    342e:	68fb      	ldr	r3, [r7, #12]
    3430:	0018      	movs	r0, r3
    3432:	4b44      	ldr	r3, [pc, #272]	; (3544 <hif_receive+0x1e8>)
    3434:	4798      	blx	r3
    3436:	0003      	movs	r3, r0
    3438:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    343a:	231f      	movs	r3, #31
    343c:	18fb      	adds	r3, r7, r3
    343e:	781b      	ldrb	r3, [r3, #0]
    3440:	b25b      	sxtb	r3, r3
    3442:	2b00      	cmp	r3, #0
    3444:	d15c      	bne.n	3500 <hif_receive+0x1a4>

	if(u16Sz > size)
    3446:	1dba      	adds	r2, r7, #6
    3448:	231c      	movs	r3, #28
    344a:	18fb      	adds	r3, r7, r3
    344c:	8812      	ldrh	r2, [r2, #0]
    344e:	881b      	ldrh	r3, [r3, #0]
    3450:	429a      	cmp	r2, r3
    3452:	d917      	bls.n	3484 <hif_receive+0x128>
	{
		ret = M2M_ERR_FAIL;
    3454:	231f      	movs	r3, #31
    3456:	18fb      	adds	r3, r7, r3
    3458:	22f4      	movs	r2, #244	; 0xf4
    345a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    345c:	239c      	movs	r3, #156	; 0x9c
    345e:	009a      	lsls	r2, r3, #2
    3460:	492f      	ldr	r1, [pc, #188]	; (3520 <hif_receive+0x1c4>)
    3462:	4b30      	ldr	r3, [pc, #192]	; (3524 <hif_receive+0x1c8>)
    3464:	0018      	movs	r0, r3
    3466:	4b30      	ldr	r3, [pc, #192]	; (3528 <hif_receive+0x1cc>)
    3468:	4798      	blx	r3
    346a:	1dbb      	adds	r3, r7, #6
    346c:	8819      	ldrh	r1, [r3, #0]
    346e:	231c      	movs	r3, #28
    3470:	18fb      	adds	r3, r7, r3
    3472:	881a      	ldrh	r2, [r3, #0]
    3474:	4b34      	ldr	r3, [pc, #208]	; (3548 <hif_receive+0x1ec>)
    3476:	0018      	movs	r0, r3
    3478:	4b2b      	ldr	r3, [pc, #172]	; (3528 <hif_receive+0x1cc>)
    347a:	4798      	blx	r3
    347c:	200d      	movs	r0, #13
    347e:	4b2d      	ldr	r3, [pc, #180]	; (3534 <hif_receive+0x1d8>)
    3480:	4798      	blx	r3
		goto ERR1;
    3482:	e03e      	b.n	3502 <hif_receive+0x1a6>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    3484:	69bb      	ldr	r3, [r7, #24]
    3486:	68fa      	ldr	r2, [r7, #12]
    3488:	429a      	cmp	r2, r3
    348a:	d30a      	bcc.n	34a2 <hif_receive+0x146>
    348c:	1dbb      	adds	r3, r7, #6
    348e:	881a      	ldrh	r2, [r3, #0]
    3490:	68fb      	ldr	r3, [r7, #12]
    3492:	18d2      	adds	r2, r2, r3
    3494:	231c      	movs	r3, #28
    3496:	18fb      	adds	r3, r7, r3
    3498:	8819      	ldrh	r1, [r3, #0]
    349a:	69bb      	ldr	r3, [r7, #24]
    349c:	18cb      	adds	r3, r1, r3
    349e:	429a      	cmp	r2, r3
    34a0:	d911      	bls.n	34c6 <hif_receive+0x16a>
	{
		ret = M2M_ERR_FAIL;
    34a2:	231f      	movs	r3, #31
    34a4:	18fb      	adds	r3, r7, r3
    34a6:	22f4      	movs	r2, #244	; 0xf4
    34a8:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    34aa:	4a28      	ldr	r2, [pc, #160]	; (354c <hif_receive+0x1f0>)
    34ac:	491c      	ldr	r1, [pc, #112]	; (3520 <hif_receive+0x1c4>)
    34ae:	4b1d      	ldr	r3, [pc, #116]	; (3524 <hif_receive+0x1c8>)
    34b0:	0018      	movs	r0, r3
    34b2:	4b1d      	ldr	r3, [pc, #116]	; (3528 <hif_receive+0x1cc>)
    34b4:	4798      	blx	r3
    34b6:	4b26      	ldr	r3, [pc, #152]	; (3550 <hif_receive+0x1f4>)
    34b8:	0018      	movs	r0, r3
    34ba:	4b1d      	ldr	r3, [pc, #116]	; (3530 <hif_receive+0x1d4>)
    34bc:	4798      	blx	r3
    34be:	200d      	movs	r0, #13
    34c0:	4b1c      	ldr	r3, [pc, #112]	; (3534 <hif_receive+0x1d8>)
    34c2:	4798      	blx	r3
		goto ERR1;
    34c4:	e01d      	b.n	3502 <hif_receive+0x1a6>
	}

	/* check if this is the last packet */
	if((((address+size) - (u32Addr+u16Sz)) <= 0) || isDone)
    34c6:	231c      	movs	r3, #28
    34c8:	18fb      	adds	r3, r7, r3
    34ca:	881a      	ldrh	r2, [r3, #0]
    34cc:	69bb      	ldr	r3, [r7, #24]
    34ce:	18d2      	adds	r2, r2, r3
    34d0:	1dbb      	adds	r3, r7, #6
    34d2:	8819      	ldrh	r1, [r3, #0]
    34d4:	68fb      	ldr	r3, [r7, #12]
    34d6:	18cb      	adds	r3, r1, r3
    34d8:	429a      	cmp	r2, r3
    34da:	d003      	beq.n	34e4 <hif_receive+0x188>
    34dc:	1d7b      	adds	r3, r7, #5
    34de:	781b      	ldrb	r3, [r3, #0]
    34e0:	2b00      	cmp	r3, #0
    34e2:	d00e      	beq.n	3502 <hif_receive+0x1a6>
	{
		gu8HifSizeDone = 1;
    34e4:	4b0b      	ldr	r3, [pc, #44]	; (3514 <hif_receive+0x1b8>)
    34e6:	2201      	movs	r2, #1
    34e8:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    34ea:	231f      	movs	r3, #31
    34ec:	18fc      	adds	r4, r7, r3
    34ee:	4b0a      	ldr	r3, [pc, #40]	; (3518 <hif_receive+0x1bc>)
    34f0:	4798      	blx	r3
    34f2:	0003      	movs	r3, r0
    34f4:	7023      	strb	r3, [r4, #0]
    34f6:	e004      	b.n	3502 <hif_receive+0x1a6>
	if(ret != M2M_SUCCESS)goto ERR1;
    34f8:	46c0      	nop			; (mov r8, r8)
    34fa:	e002      	b.n	3502 <hif_receive+0x1a6>
	if(ret != M2M_SUCCESS)goto ERR1;
    34fc:	46c0      	nop			; (mov r8, r8)
    34fe:	e000      	b.n	3502 <hif_receive+0x1a6>
	if(ret != M2M_SUCCESS)goto ERR1;
    3500:	46c0      	nop			; (mov r8, r8)
	}



ERR1:
	return ret;
    3502:	231f      	movs	r3, #31
    3504:	18fb      	adds	r3, r7, r3
    3506:	781b      	ldrb	r3, [r3, #0]
    3508:	b25b      	sxtb	r3, r3
}
    350a:	0018      	movs	r0, r3
    350c:	46bd      	mov	sp, r7
    350e:	b009      	add	sp, #36	; 0x24
    3510:	bd90      	pop	{r4, r7, pc}
    3512:	46c0      	nop			; (mov r8, r8)
    3514:	2000027a 	.word	0x2000027a
    3518:	0000291d 	.word	0x0000291d
    351c:	0000025d 	.word	0x0000025d
    3520:	00013aec 	.word	0x00013aec
    3524:	00013864 	.word	0x00013864
    3528:	0001212d 	.word	0x0001212d
    352c:	00013a14 	.word	0x00013a14
    3530:	00012249 	.word	0x00012249
    3534:	00012161 	.word	0x00012161
    3538:	00001070 	.word	0x00001070
    353c:	000044f5 	.word	0x000044f5
    3540:	00001084 	.word	0x00001084
    3544:	00004569 	.word	0x00004569
    3548:	00013a34 	.word	0x00013a34
    354c:	00000276 	.word	0x00000276
    3550:	00013a78 	.word	0x00013a78

00003554 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    3554:	b580      	push	{r7, lr}
    3556:	b084      	sub	sp, #16
    3558:	af00      	add	r7, sp, #0
    355a:	0002      	movs	r2, r0
    355c:	6039      	str	r1, [r7, #0]
    355e:	1dfb      	adds	r3, r7, #7
    3560:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    3562:	230f      	movs	r3, #15
    3564:	18fb      	adds	r3, r7, r3
    3566:	2200      	movs	r2, #0
    3568:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    356a:	1dfb      	adds	r3, r7, #7
    356c:	781b      	ldrb	r3, [r3, #0]
    356e:	2b02      	cmp	r3, #2
    3570:	d008      	beq.n	3584 <hif_register_cb+0x30>
    3572:	dc02      	bgt.n	357a <hif_register_cb+0x26>
    3574:	2b01      	cmp	r3, #1
    3576:	d009      	beq.n	358c <hif_register_cb+0x38>
    3578:	e014      	b.n	35a4 <hif_register_cb+0x50>
    357a:	2b03      	cmp	r3, #3
    357c:	d00e      	beq.n	359c <hif_register_cb+0x48>
    357e:	2b04      	cmp	r3, #4
    3580:	d008      	beq.n	3594 <hif_register_cb+0x40>
    3582:	e00f      	b.n	35a4 <hif_register_cb+0x50>
	{
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
    3584:	4b16      	ldr	r3, [pc, #88]	; (35e0 <hif_register_cb+0x8c>)
    3586:	683a      	ldr	r2, [r7, #0]
    3588:	601a      	str	r2, [r3, #0]
			break;
    358a:	e020      	b.n	35ce <hif_register_cb+0x7a>
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
    358c:	4b15      	ldr	r3, [pc, #84]	; (35e4 <hif_register_cb+0x90>)
    358e:	683a      	ldr	r2, [r7, #0]
    3590:	601a      	str	r2, [r3, #0]
			break;
    3592:	e01c      	b.n	35ce <hif_register_cb+0x7a>
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
    3594:	4b14      	ldr	r3, [pc, #80]	; (35e8 <hif_register_cb+0x94>)
    3596:	683a      	ldr	r2, [r7, #0]
    3598:	601a      	str	r2, [r3, #0]
			break;
    359a:	e018      	b.n	35ce <hif_register_cb+0x7a>
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
    359c:	4b13      	ldr	r3, [pc, #76]	; (35ec <hif_register_cb+0x98>)
    359e:	683a      	ldr	r2, [r7, #0]
    35a0:	601a      	str	r2, [r3, #0]
			break;
    35a2:	e014      	b.n	35ce <hif_register_cb+0x7a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    35a4:	4a12      	ldr	r2, [pc, #72]	; (35f0 <hif_register_cb+0x9c>)
    35a6:	4913      	ldr	r1, [pc, #76]	; (35f4 <hif_register_cb+0xa0>)
    35a8:	4b13      	ldr	r3, [pc, #76]	; (35f8 <hif_register_cb+0xa4>)
    35aa:	0018      	movs	r0, r3
    35ac:	4b13      	ldr	r3, [pc, #76]	; (35fc <hif_register_cb+0xa8>)
    35ae:	4798      	blx	r3
    35b0:	1dfb      	adds	r3, r7, #7
    35b2:	781a      	ldrb	r2, [r3, #0]
    35b4:	4b12      	ldr	r3, [pc, #72]	; (3600 <hif_register_cb+0xac>)
    35b6:	0011      	movs	r1, r2
    35b8:	0018      	movs	r0, r3
    35ba:	4b10      	ldr	r3, [pc, #64]	; (35fc <hif_register_cb+0xa8>)
    35bc:	4798      	blx	r3
    35be:	200d      	movs	r0, #13
    35c0:	4b10      	ldr	r3, [pc, #64]	; (3604 <hif_register_cb+0xb0>)
    35c2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    35c4:	230f      	movs	r3, #15
    35c6:	18fb      	adds	r3, r7, r3
    35c8:	22f4      	movs	r2, #244	; 0xf4
    35ca:	701a      	strb	r2, [r3, #0]
			break;
    35cc:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    35ce:	230f      	movs	r3, #15
    35d0:	18fb      	adds	r3, r7, r3
    35d2:	781b      	ldrb	r3, [r3, #0]
    35d4:	b25b      	sxtb	r3, r3
}
    35d6:	0018      	movs	r0, r3
    35d8:	46bd      	mov	sp, r7
    35da:	b004      	add	sp, #16
    35dc:	bd80      	pop	{r7, pc}
    35de:	46c0      	nop			; (mov r8, r8)
    35e0:	20000280 	.word	0x20000280
    35e4:	2000027c 	.word	0x2000027c
    35e8:	20000284 	.word	0x20000284
    35ec:	20000288 	.word	0x20000288
    35f0:	000002a5 	.word	0x000002a5
    35f4:	00013af8 	.word	0x00013af8
    35f8:	00013864 	.word	0x00013864
    35fc:	0001212d 	.word	0x0001212d
    3600:	00013abc 	.word	0x00013abc
    3604:	00012161 	.word	0x00012161

00003608 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    3608:	b590      	push	{r4, r7, lr}
    360a:	b0ab      	sub	sp, #172	; 0xac
    360c:	af02      	add	r7, sp, #8
    360e:	603a      	str	r2, [r7, #0]
    3610:	1dfb      	adds	r3, r7, #7
    3612:	1c02      	adds	r2, r0, #0
    3614:	701a      	strb	r2, [r3, #0]
    3616:	1d3b      	adds	r3, r7, #4
    3618:	1c0a      	adds	r2, r1, #0
    361a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    361c:	1dfb      	adds	r3, r7, #7
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	2b2c      	cmp	r3, #44	; 0x2c
    3622:	d116      	bne.n	3652 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    3624:	2394      	movs	r3, #148	; 0x94
    3626:	18f9      	adds	r1, r7, r3
    3628:	6838      	ldr	r0, [r7, #0]
    362a:	2300      	movs	r3, #0
    362c:	2204      	movs	r2, #4
    362e:	4cbb      	ldr	r4, [pc, #748]	; (391c <m2m_wifi_cb+0x314>)
    3630:	47a0      	blx	r4
    3632:	1e03      	subs	r3, r0, #0
    3634:	d000      	beq.n	3638 <m2m_wifi_cb+0x30>
    3636:	e16c      	b.n	3912 <m2m_wifi_cb+0x30a>
		{
			if (gpfAppWifiCb)
    3638:	4bb9      	ldr	r3, [pc, #740]	; (3920 <m2m_wifi_cb+0x318>)
    363a:	681b      	ldr	r3, [r3, #0]
    363c:	2b00      	cmp	r3, #0
    363e:	d100      	bne.n	3642 <m2m_wifi_cb+0x3a>
    3640:	e167      	b.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    3642:	4bb7      	ldr	r3, [pc, #732]	; (3920 <m2m_wifi_cb+0x318>)
    3644:	681b      	ldr	r3, [r3, #0]
    3646:	2294      	movs	r2, #148	; 0x94
    3648:	18ba      	adds	r2, r7, r2
    364a:	0011      	movs	r1, r2
    364c:	202c      	movs	r0, #44	; 0x2c
    364e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3650:	e15f      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    3652:	1dfb      	adds	r3, r7, #7
    3654:	781b      	ldrb	r3, [r3, #0]
    3656:	2b1b      	cmp	r3, #27
    3658:	d116      	bne.n	3688 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    365a:	238c      	movs	r3, #140	; 0x8c
    365c:	18f9      	adds	r1, r7, r3
    365e:	6838      	ldr	r0, [r7, #0]
    3660:	2300      	movs	r3, #0
    3662:	2208      	movs	r2, #8
    3664:	4cad      	ldr	r4, [pc, #692]	; (391c <m2m_wifi_cb+0x314>)
    3666:	47a0      	blx	r4
    3668:	1e03      	subs	r3, r0, #0
    366a:	d000      	beq.n	366e <m2m_wifi_cb+0x66>
    366c:	e151      	b.n	3912 <m2m_wifi_cb+0x30a>
			if (gpfAppWifiCb)
    366e:	4bac      	ldr	r3, [pc, #688]	; (3920 <m2m_wifi_cb+0x318>)
    3670:	681b      	ldr	r3, [r3, #0]
    3672:	2b00      	cmp	r3, #0
    3674:	d100      	bne.n	3678 <m2m_wifi_cb+0x70>
    3676:	e14c      	b.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    3678:	4ba9      	ldr	r3, [pc, #676]	; (3920 <m2m_wifi_cb+0x318>)
    367a:	681b      	ldr	r3, [r3, #0]
    367c:	228c      	movs	r2, #140	; 0x8c
    367e:	18ba      	adds	r2, r7, r2
    3680:	0011      	movs	r1, r2
    3682:	201b      	movs	r0, #27
    3684:	4798      	blx	r3
}
    3686:	e144      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    3688:	1dfb      	adds	r3, r7, #7
    368a:	781b      	ldrb	r3, [r3, #0]
    368c:	2b06      	cmp	r3, #6
    368e:	d116      	bne.n	36be <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    3690:	230c      	movs	r3, #12
    3692:	18f9      	adds	r1, r7, r3
    3694:	6838      	ldr	r0, [r7, #0]
    3696:	2301      	movs	r3, #1
    3698:	2230      	movs	r2, #48	; 0x30
    369a:	4ca0      	ldr	r4, [pc, #640]	; (391c <m2m_wifi_cb+0x314>)
    369c:	47a0      	blx	r4
    369e:	1e03      	subs	r3, r0, #0
    36a0:	d000      	beq.n	36a4 <m2m_wifi_cb+0x9c>
    36a2:	e136      	b.n	3912 <m2m_wifi_cb+0x30a>
			if(gpfAppWifiCb)
    36a4:	4b9e      	ldr	r3, [pc, #632]	; (3920 <m2m_wifi_cb+0x318>)
    36a6:	681b      	ldr	r3, [r3, #0]
    36a8:	2b00      	cmp	r3, #0
    36aa:	d100      	bne.n	36ae <m2m_wifi_cb+0xa6>
    36ac:	e131      	b.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    36ae:	4b9c      	ldr	r3, [pc, #624]	; (3920 <m2m_wifi_cb+0x318>)
    36b0:	681b      	ldr	r3, [r3, #0]
    36b2:	220c      	movs	r2, #12
    36b4:	18ba      	adds	r2, r7, r2
    36b6:	0011      	movs	r1, r2
    36b8:	2006      	movs	r0, #6
    36ba:	4798      	blx	r3
}
    36bc:	e129      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    36be:	1dfb      	adds	r3, r7, #7
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	2b0e      	cmp	r3, #14
    36c4:	d100      	bne.n	36c8 <m2m_wifi_cb+0xc0>
    36c6:	e124      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    36c8:	1dfb      	adds	r3, r7, #7
    36ca:	781b      	ldrb	r3, [r3, #0]
    36cc:	2b32      	cmp	r3, #50	; 0x32
    36ce:	d116      	bne.n	36fe <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    36d0:	237c      	movs	r3, #124	; 0x7c
    36d2:	18f9      	adds	r1, r7, r3
    36d4:	6838      	ldr	r0, [r7, #0]
    36d6:	2300      	movs	r3, #0
    36d8:	2210      	movs	r2, #16
    36da:	4c90      	ldr	r4, [pc, #576]	; (391c <m2m_wifi_cb+0x314>)
    36dc:	47a0      	blx	r4
    36de:	1e03      	subs	r3, r0, #0
    36e0:	d000      	beq.n	36e4 <m2m_wifi_cb+0xdc>
    36e2:	e116      	b.n	3912 <m2m_wifi_cb+0x30a>
			if (gpfAppWifiCb)
    36e4:	4b8e      	ldr	r3, [pc, #568]	; (3920 <m2m_wifi_cb+0x318>)
    36e6:	681b      	ldr	r3, [r3, #0]
    36e8:	2b00      	cmp	r3, #0
    36ea:	d100      	bne.n	36ee <m2m_wifi_cb+0xe6>
    36ec:	e111      	b.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    36ee:	4b8c      	ldr	r3, [pc, #560]	; (3920 <m2m_wifi_cb+0x318>)
    36f0:	681b      	ldr	r3, [r3, #0]
    36f2:	227c      	movs	r2, #124	; 0x7c
    36f4:	18ba      	adds	r2, r7, r2
    36f6:	0011      	movs	r1, r2
    36f8:	2032      	movs	r0, #50	; 0x32
    36fa:	4798      	blx	r3
}
    36fc:	e109      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    36fe:	1dfb      	adds	r3, r7, #7
    3700:	781b      	ldrb	r3, [r3, #0]
    3702:	2b2f      	cmp	r3, #47	; 0x2f
    3704:	d11d      	bne.n	3742 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    3706:	230c      	movs	r3, #12
    3708:	18fb      	adds	r3, r7, r3
    370a:	2264      	movs	r2, #100	; 0x64
    370c:	2100      	movs	r1, #0
    370e:	0018      	movs	r0, r3
    3710:	4b84      	ldr	r3, [pc, #528]	; (3924 <m2m_wifi_cb+0x31c>)
    3712:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    3714:	230c      	movs	r3, #12
    3716:	18f9      	adds	r1, r7, r3
    3718:	6838      	ldr	r0, [r7, #0]
    371a:	2300      	movs	r3, #0
    371c:	2264      	movs	r2, #100	; 0x64
    371e:	4c7f      	ldr	r4, [pc, #508]	; (391c <m2m_wifi_cb+0x314>)
    3720:	47a0      	blx	r4
    3722:	1e03      	subs	r3, r0, #0
    3724:	d000      	beq.n	3728 <m2m_wifi_cb+0x120>
    3726:	e0f4      	b.n	3912 <m2m_wifi_cb+0x30a>
			if (gpfAppWifiCb)
    3728:	4b7d      	ldr	r3, [pc, #500]	; (3920 <m2m_wifi_cb+0x318>)
    372a:	681b      	ldr	r3, [r3, #0]
    372c:	2b00      	cmp	r3, #0
    372e:	d100      	bne.n	3732 <m2m_wifi_cb+0x12a>
    3730:	e0ef      	b.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    3732:	4b7b      	ldr	r3, [pc, #492]	; (3920 <m2m_wifi_cb+0x318>)
    3734:	681b      	ldr	r3, [r3, #0]
    3736:	220c      	movs	r2, #12
    3738:	18ba      	adds	r2, r7, r2
    373a:	0011      	movs	r1, r2
    373c:	202f      	movs	r0, #47	; 0x2f
    373e:	4798      	blx	r3
}
    3740:	e0e7      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    3742:	1dfb      	adds	r3, r7, #7
    3744:	781b      	ldrb	r3, [r3, #0]
    3746:	2b34      	cmp	r3, #52	; 0x34
    3748:	d12e      	bne.n	37a8 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    374a:	2378      	movs	r3, #120	; 0x78
    374c:	18f9      	adds	r1, r7, r3
    374e:	6838      	ldr	r0, [r7, #0]
    3750:	2300      	movs	r3, #0
    3752:	2204      	movs	r2, #4
    3754:	4c71      	ldr	r4, [pc, #452]	; (391c <m2m_wifi_cb+0x314>)
    3756:	47a0      	blx	r4
    3758:	1e03      	subs	r3, r0, #0
    375a:	d000      	beq.n	375e <m2m_wifi_cb+0x156>
    375c:	e0d9      	b.n	3912 <m2m_wifi_cb+0x30a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
    375e:	4b72      	ldr	r3, [pc, #456]	; (3928 <m2m_wifi_cb+0x320>)
    3760:	0018      	movs	r0, r3
    3762:	4b72      	ldr	r3, [pc, #456]	; (392c <m2m_wifi_cb+0x324>)
    3764:	4798      	blx	r3
    3766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3768:	0e1b      	lsrs	r3, r3, #24
    376a:	b2db      	uxtb	r3, r3
    376c:	0019      	movs	r1, r3
    376e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3770:	0c1b      	lsrs	r3, r3, #16
    3772:	b2db      	uxtb	r3, r3
    3774:	001a      	movs	r2, r3
    3776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3778:	0a1b      	lsrs	r3, r3, #8
    377a:	b2db      	uxtb	r3, r3
    377c:	001c      	movs	r4, r3
    377e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3780:	b2db      	uxtb	r3, r3
    3782:	486b      	ldr	r0, [pc, #428]	; (3930 <m2m_wifi_cb+0x328>)
    3784:	9300      	str	r3, [sp, #0]
    3786:	0023      	movs	r3, r4
    3788:	4c68      	ldr	r4, [pc, #416]	; (392c <m2m_wifi_cb+0x324>)
    378a:	47a0      	blx	r4
    378c:	200d      	movs	r0, #13
    378e:	4b69      	ldr	r3, [pc, #420]	; (3934 <m2m_wifi_cb+0x32c>)
    3790:	4798      	blx	r3
			if (gpfAppWifiCb)
    3792:	4b63      	ldr	r3, [pc, #396]	; (3920 <m2m_wifi_cb+0x318>)
    3794:	681b      	ldr	r3, [r3, #0]
    3796:	2b00      	cmp	r3, #0
    3798:	d100      	bne.n	379c <m2m_wifi_cb+0x194>
    379a:	e0ba      	b.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    379c:	4b60      	ldr	r3, [pc, #384]	; (3920 <m2m_wifi_cb+0x318>)
    379e:	681b      	ldr	r3, [r3, #0]
    37a0:	2100      	movs	r1, #0
    37a2:	2034      	movs	r0, #52	; 0x34
    37a4:	4798      	blx	r3
}
    37a6:	e0b4      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    37a8:	1dfb      	adds	r3, r7, #7
    37aa:	781b      	ldrb	r3, [r3, #0]
    37ac:	2b11      	cmp	r3, #17
    37ae:	d11e      	bne.n	37ee <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    37b0:	4b61      	ldr	r3, [pc, #388]	; (3938 <m2m_wifi_cb+0x330>)
    37b2:	2200      	movs	r2, #0
    37b4:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    37b6:	2374      	movs	r3, #116	; 0x74
    37b8:	18f9      	adds	r1, r7, r3
    37ba:	6838      	ldr	r0, [r7, #0]
    37bc:	2300      	movs	r3, #0
    37be:	2204      	movs	r2, #4
    37c0:	4c56      	ldr	r4, [pc, #344]	; (391c <m2m_wifi_cb+0x314>)
    37c2:	47a0      	blx	r4
    37c4:	1e03      	subs	r3, r0, #0
    37c6:	d000      	beq.n	37ca <m2m_wifi_cb+0x1c2>
    37c8:	e0a3      	b.n	3912 <m2m_wifi_cb+0x30a>
			gu8ChNum = strState.u8NumofCh;
    37ca:	2374      	movs	r3, #116	; 0x74
    37cc:	18fb      	adds	r3, r7, r3
    37ce:	781a      	ldrb	r2, [r3, #0]
    37d0:	4b5a      	ldr	r3, [pc, #360]	; (393c <m2m_wifi_cb+0x334>)
    37d2:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    37d4:	4b52      	ldr	r3, [pc, #328]	; (3920 <m2m_wifi_cb+0x318>)
    37d6:	681b      	ldr	r3, [r3, #0]
    37d8:	2b00      	cmp	r3, #0
    37da:	d100      	bne.n	37de <m2m_wifi_cb+0x1d6>
    37dc:	e099      	b.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    37de:	4b50      	ldr	r3, [pc, #320]	; (3920 <m2m_wifi_cb+0x318>)
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	2274      	movs	r2, #116	; 0x74
    37e4:	18ba      	adds	r2, r7, r2
    37e6:	0011      	movs	r1, r2
    37e8:	2011      	movs	r0, #17
    37ea:	4798      	blx	r3
}
    37ec:	e091      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    37ee:	1dfb      	adds	r3, r7, #7
    37f0:	781b      	ldrb	r3, [r3, #0]
    37f2:	2b13      	cmp	r3, #19
    37f4:	d116      	bne.n	3824 <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    37f6:	230c      	movs	r3, #12
    37f8:	18f9      	adds	r1, r7, r3
    37fa:	6838      	ldr	r0, [r7, #0]
    37fc:	2300      	movs	r3, #0
    37fe:	222c      	movs	r2, #44	; 0x2c
    3800:	4c46      	ldr	r4, [pc, #280]	; (391c <m2m_wifi_cb+0x314>)
    3802:	47a0      	blx	r4
    3804:	1e03      	subs	r3, r0, #0
    3806:	d000      	beq.n	380a <m2m_wifi_cb+0x202>
    3808:	e083      	b.n	3912 <m2m_wifi_cb+0x30a>
			if (gpfAppWifiCb)
    380a:	4b45      	ldr	r3, [pc, #276]	; (3920 <m2m_wifi_cb+0x318>)
    380c:	681b      	ldr	r3, [r3, #0]
    380e:	2b00      	cmp	r3, #0
    3810:	d100      	bne.n	3814 <m2m_wifi_cb+0x20c>
    3812:	e07e      	b.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    3814:	4b42      	ldr	r3, [pc, #264]	; (3920 <m2m_wifi_cb+0x318>)
    3816:	681b      	ldr	r3, [r3, #0]
    3818:	220c      	movs	r2, #12
    381a:	18ba      	adds	r2, r7, r2
    381c:	0011      	movs	r1, r2
    381e:	2013      	movs	r0, #19
    3820:	4798      	blx	r3
}
    3822:	e076      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    3824:	1dfb      	adds	r3, r7, #7
    3826:	781b      	ldrb	r3, [r3, #0]
    3828:	2b04      	cmp	r3, #4
    382a:	d115      	bne.n	3858 <m2m_wifi_cb+0x250>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    382c:	2398      	movs	r3, #152	; 0x98
    382e:	18f9      	adds	r1, r7, r3
    3830:	6838      	ldr	r0, [r7, #0]
    3832:	2300      	movs	r3, #0
    3834:	2204      	movs	r2, #4
    3836:	4c39      	ldr	r4, [pc, #228]	; (391c <m2m_wifi_cb+0x314>)
    3838:	47a0      	blx	r4
    383a:	1e03      	subs	r3, r0, #0
    383c:	d000      	beq.n	3840 <m2m_wifi_cb+0x238>
    383e:	e068      	b.n	3912 <m2m_wifi_cb+0x30a>
			if (gpfAppWifiCb)
    3840:	4b37      	ldr	r3, [pc, #220]	; (3920 <m2m_wifi_cb+0x318>)
    3842:	681b      	ldr	r3, [r3, #0]
    3844:	2b00      	cmp	r3, #0
    3846:	d064      	beq.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    3848:	4b35      	ldr	r3, [pc, #212]	; (3920 <m2m_wifi_cb+0x318>)
    384a:	681b      	ldr	r3, [r3, #0]
    384c:	2298      	movs	r2, #152	; 0x98
    384e:	18ba      	adds	r2, r7, r2
    3850:	0011      	movs	r1, r2
    3852:	2004      	movs	r0, #4
    3854:	4798      	blx	r3
}
    3856:	e05c      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    3858:	1dfb      	adds	r3, r7, #7
    385a:	781b      	ldrb	r3, [r3, #0]
    385c:	2b79      	cmp	r3, #121	; 0x79
    385e:	d114      	bne.n	388a <m2m_wifi_cb+0x282>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    3860:	2398      	movs	r3, #152	; 0x98
    3862:	18f9      	adds	r1, r7, r3
    3864:	6838      	ldr	r0, [r7, #0]
    3866:	2300      	movs	r3, #0
    3868:	2204      	movs	r2, #4
    386a:	4c2c      	ldr	r4, [pc, #176]	; (391c <m2m_wifi_cb+0x314>)
    386c:	47a0      	blx	r4
    386e:	1e03      	subs	r3, r0, #0
    3870:	d14f      	bne.n	3912 <m2m_wifi_cb+0x30a>
			if (gpfAppWifiCb)
    3872:	4b2b      	ldr	r3, [pc, #172]	; (3920 <m2m_wifi_cb+0x318>)
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	2b00      	cmp	r3, #0
    3878:	d04b      	beq.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    387a:	4b29      	ldr	r3, [pc, #164]	; (3920 <m2m_wifi_cb+0x318>)
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	2298      	movs	r2, #152	; 0x98
    3880:	18ba      	adds	r2, r7, r2
    3882:	0011      	movs	r1, r2
    3884:	2079      	movs	r0, #121	; 0x79
    3886:	4798      	blx	r3
}
    3888:	e043      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    388a:	1dfb      	adds	r3, r7, #7
    388c:	781b      	ldrb	r3, [r3, #0]
    388e:	2b09      	cmp	r3, #9
    3890:	d114      	bne.n	38bc <m2m_wifi_cb+0x2b4>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    3892:	230c      	movs	r3, #12
    3894:	18f9      	adds	r1, r7, r3
    3896:	6838      	ldr	r0, [r7, #0]
    3898:	2301      	movs	r3, #1
    389a:	2264      	movs	r2, #100	; 0x64
    389c:	4c1f      	ldr	r4, [pc, #124]	; (391c <m2m_wifi_cb+0x314>)
    389e:	47a0      	blx	r4
    38a0:	1e03      	subs	r3, r0, #0
    38a2:	d136      	bne.n	3912 <m2m_wifi_cb+0x30a>
			if(gpfAppWifiCb)
    38a4:	4b1e      	ldr	r3, [pc, #120]	; (3920 <m2m_wifi_cb+0x318>)
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	2b00      	cmp	r3, #0
    38aa:	d032      	beq.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    38ac:	4b1c      	ldr	r3, [pc, #112]	; (3920 <m2m_wifi_cb+0x318>)
    38ae:	681b      	ldr	r3, [r3, #0]
    38b0:	220c      	movs	r2, #12
    38b2:	18ba      	adds	r2, r7, r2
    38b4:	0011      	movs	r1, r2
    38b6:	2009      	movs	r0, #9
    38b8:	4798      	blx	r3
}
    38ba:	e02a      	b.n	3912 <m2m_wifi_cb+0x30a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    38bc:	1dfb      	adds	r3, r7, #7
    38be:	781b      	ldrb	r3, [r3, #0]
    38c0:	2b2a      	cmp	r3, #42	; 0x2a
    38c2:	d114      	bne.n	38ee <m2m_wifi_cb+0x2e6>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    38c4:	2370      	movs	r3, #112	; 0x70
    38c6:	18f9      	adds	r1, r7, r3
    38c8:	6838      	ldr	r0, [r7, #0]
    38ca:	2301      	movs	r3, #1
    38cc:	2204      	movs	r2, #4
    38ce:	4c13      	ldr	r4, [pc, #76]	; (391c <m2m_wifi_cb+0x314>)
    38d0:	47a0      	blx	r4
    38d2:	1e03      	subs	r3, r0, #0
    38d4:	d11d      	bne.n	3912 <m2m_wifi_cb+0x30a>
			if(gpfAppWifiCb)
    38d6:	4b12      	ldr	r3, [pc, #72]	; (3920 <m2m_wifi_cb+0x318>)
    38d8:	681b      	ldr	r3, [r3, #0]
    38da:	2b00      	cmp	r3, #0
    38dc:	d019      	beq.n	3912 <m2m_wifi_cb+0x30a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    38de:	4b10      	ldr	r3, [pc, #64]	; (3920 <m2m_wifi_cb+0x318>)
    38e0:	681b      	ldr	r3, [r3, #0]
    38e2:	2270      	movs	r2, #112	; 0x70
    38e4:	18ba      	adds	r2, r7, r2
    38e6:	0011      	movs	r1, r2
    38e8:	202a      	movs	r0, #42	; 0x2a
    38ea:	4798      	blx	r3
}
    38ec:	e011      	b.n	3912 <m2m_wifi_cb+0x30a>
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    38ee:	2318      	movs	r3, #24
    38f0:	33ff      	adds	r3, #255	; 0xff
    38f2:	001a      	movs	r2, r3
    38f4:	4912      	ldr	r1, [pc, #72]	; (3940 <m2m_wifi_cb+0x338>)
    38f6:	4b13      	ldr	r3, [pc, #76]	; (3944 <m2m_wifi_cb+0x33c>)
    38f8:	0018      	movs	r0, r3
    38fa:	4b0c      	ldr	r3, [pc, #48]	; (392c <m2m_wifi_cb+0x324>)
    38fc:	4798      	blx	r3
    38fe:	1dfb      	adds	r3, r7, #7
    3900:	781a      	ldrb	r2, [r3, #0]
    3902:	4b11      	ldr	r3, [pc, #68]	; (3948 <m2m_wifi_cb+0x340>)
    3904:	0011      	movs	r1, r2
    3906:	0018      	movs	r0, r3
    3908:	4b08      	ldr	r3, [pc, #32]	; (392c <m2m_wifi_cb+0x324>)
    390a:	4798      	blx	r3
    390c:	200d      	movs	r0, #13
    390e:	4b09      	ldr	r3, [pc, #36]	; (3934 <m2m_wifi_cb+0x32c>)
    3910:	4798      	blx	r3
}
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	46bd      	mov	sp, r7
    3916:	b029      	add	sp, #164	; 0xa4
    3918:	bd90      	pop	{r4, r7, pc}
    391a:	46c0      	nop			; (mov r8, r8)
    391c:	0000335d 	.word	0x0000335d
    3920:	20000290 	.word	0x20000290
    3924:	00002885 	.word	0x00002885
    3928:	00013b08 	.word	0x00013b08
    392c:	0001212d 	.word	0x0001212d
    3930:	00013b14 	.word	0x00013b14
    3934:	00012161 	.word	0x00012161
    3938:	2000028d 	.word	0x2000028d
    393c:	2000028c 	.word	0x2000028c
    3940:	00013d78 	.word	0x00013d78
    3944:	00013b34 	.word	0x00013b34
    3948:	00013b48 	.word	0x00013b48

0000394c <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    394c:	b590      	push	{r4, r7, lr}
    394e:	b085      	sub	sp, #20
    3950:	af00      	add	r7, sp, #0
    3952:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3954:	230f      	movs	r3, #15
    3956:	18fb      	adds	r3, r7, r3
    3958:	2200      	movs	r2, #0
    395a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    395c:	687b      	ldr	r3, [r7, #4]
    395e:	2b00      	cmp	r3, #0
    3960:	d104      	bne.n	396c <m2m_wifi_init+0x20>
		ret = M2M_ERR_FAIL;
    3962:	230f      	movs	r3, #15
    3964:	18fb      	adds	r3, r7, r3
    3966:	22f4      	movs	r2, #244	; 0xf4
    3968:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    396a:	e02c      	b.n	39c6 <m2m_wifi_init+0x7a>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    396c:	687b      	ldr	r3, [r7, #4]
    396e:	681a      	ldr	r2, [r3, #0]
    3970:	4b19      	ldr	r3, [pc, #100]	; (39d8 <m2m_wifi_init+0x8c>)
    3972:	601a      	str	r2, [r3, #0]
#endif

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    3974:	4b19      	ldr	r3, [pc, #100]	; (39dc <m2m_wifi_init+0x90>)
    3976:	2200      	movs	r2, #0
    3978:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(NULL);
    397a:	230f      	movs	r3, #15
    397c:	18fc      	adds	r4, r7, r3
    397e:	2000      	movs	r0, #0
    3980:	4b17      	ldr	r3, [pc, #92]	; (39e0 <m2m_wifi_init+0x94>)
    3982:	4798      	blx	r3
    3984:	0003      	movs	r3, r0
    3986:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    3988:	230f      	movs	r3, #15
    398a:	18fb      	adds	r3, r7, r3
    398c:	781b      	ldrb	r3, [r3, #0]
    398e:	b25b      	sxtb	r3, r3
    3990:	2b00      	cmp	r3, #0
    3992:	d117      	bne.n	39c4 <m2m_wifi_init+0x78>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    3994:	230f      	movs	r3, #15
    3996:	18fc      	adds	r4, r7, r3
    3998:	2000      	movs	r0, #0
    399a:	4b12      	ldr	r3, [pc, #72]	; (39e4 <m2m_wifi_init+0x98>)
    399c:	4798      	blx	r3
    399e:	0003      	movs	r3, r0
    39a0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    39a2:	230f      	movs	r3, #15
    39a4:	18fb      	adds	r3, r7, r3
    39a6:	781b      	ldrb	r3, [r3, #0]
    39a8:	b25b      	sxtb	r3, r3
    39aa:	2b00      	cmp	r3, #0
    39ac:	d105      	bne.n	39ba <m2m_wifi_init+0x6e>

	hif_register_cb(M2M_REQ_GRP_WIFI,m2m_wifi_cb);
    39ae:	4b0e      	ldr	r3, [pc, #56]	; (39e8 <m2m_wifi_init+0x9c>)
    39b0:	0019      	movs	r1, r3
    39b2:	2001      	movs	r0, #1
    39b4:	4b0d      	ldr	r3, [pc, #52]	; (39ec <m2m_wifi_init+0xa0>)
    39b6:	4798      	blx	r3

	goto _EXIT0;
    39b8:	e005      	b.n	39c6 <m2m_wifi_init+0x7a>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    39ba:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    39bc:	2000      	movs	r0, #0
    39be:	4b0c      	ldr	r3, [pc, #48]	; (39f0 <m2m_wifi_init+0xa4>)
    39c0:	4798      	blx	r3
    39c2:	e000      	b.n	39c6 <m2m_wifi_init+0x7a>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    39c4:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    39c6:	230f      	movs	r3, #15
    39c8:	18fb      	adds	r3, r7, r3
    39ca:	781b      	ldrb	r3, [r3, #0]
    39cc:	b25b      	sxtb	r3, r3
}
    39ce:	0018      	movs	r0, r3
    39d0:	46bd      	mov	sp, r7
    39d2:	b005      	add	sp, #20
    39d4:	bd90      	pop	{r4, r7, pc}
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	20000290 	.word	0x20000290
    39dc:	2000028d 	.word	0x2000028d
    39e0:	00004881 	.word	0x00004881
    39e4:	00002b09 	.word	0x00002b09
    39e8:	00003609 	.word	0x00003609
    39ec:	00003555 	.word	0x00003555
    39f0:	00004abd 	.word	0x00004abd

000039f4 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    39f4:	b580      	push	{r7, lr}
    39f6:	b082      	sub	sp, #8
    39f8:	af00      	add	r7, sp, #0
    39fa:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    39fc:	4b03      	ldr	r3, [pc, #12]	; (3a0c <m2m_wifi_handle_events+0x18>)
    39fe:	4798      	blx	r3
    3a00:	0003      	movs	r3, r0
}
    3a02:	0018      	movs	r0, r3
    3a04:	46bd      	mov	sp, r7
    3a06:	b002      	add	sp, #8
    3a08:	bd80      	pop	{r7, pc}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	000032d1 	.word	0x000032d1

00003a10 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    3a10:	b590      	push	{r4, r7, lr}
    3a12:	b087      	sub	sp, #28
    3a14:	af02      	add	r7, sp, #8
    3a16:	60f8      	str	r0, [r7, #12]
    3a18:	0008      	movs	r0, r1
    3a1a:	0011      	movs	r1, r2
    3a1c:	607b      	str	r3, [r7, #4]
    3a1e:	230b      	movs	r3, #11
    3a20:	18fb      	adds	r3, r7, r3
    3a22:	1c02      	adds	r2, r0, #0
    3a24:	701a      	strb	r2, [r3, #0]
    3a26:	230a      	movs	r3, #10
    3a28:	18fb      	adds	r3, r7, r3
    3a2a:	1c0a      	adds	r2, r1, #0
    3a2c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    3a2e:	687c      	ldr	r4, [r7, #4]
    3a30:	230a      	movs	r3, #10
    3a32:	18fb      	adds	r3, r7, r3
    3a34:	781a      	ldrb	r2, [r3, #0]
    3a36:	230b      	movs	r3, #11
    3a38:	18fb      	adds	r3, r7, r3
    3a3a:	7819      	ldrb	r1, [r3, #0]
    3a3c:	68f8      	ldr	r0, [r7, #12]
    3a3e:	2300      	movs	r3, #0
    3a40:	9301      	str	r3, [sp, #4]
    3a42:	2320      	movs	r3, #32
    3a44:	18fb      	adds	r3, r7, r3
    3a46:	881b      	ldrh	r3, [r3, #0]
    3a48:	9300      	str	r3, [sp, #0]
    3a4a:	0023      	movs	r3, r4
    3a4c:	4c03      	ldr	r4, [pc, #12]	; (3a5c <m2m_wifi_connect+0x4c>)
    3a4e:	47a0      	blx	r4
    3a50:	0003      	movs	r3, r0
}
    3a52:	0018      	movs	r0, r3
    3a54:	46bd      	mov	sp, r7
    3a56:	b005      	add	sp, #20
    3a58:	bd90      	pop	{r4, r7, pc}
    3a5a:	46c0      	nop			; (mov r8, r8)
    3a5c:	00003a61 	.word	0x00003a61

00003a60 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    3a60:	b5b0      	push	{r4, r5, r7, lr}
    3a62:	b0a8      	sub	sp, #160	; 0xa0
    3a64:	af04      	add	r7, sp, #16
    3a66:	60f8      	str	r0, [r7, #12]
    3a68:	0008      	movs	r0, r1
    3a6a:	0011      	movs	r1, r2
    3a6c:	607b      	str	r3, [r7, #4]
    3a6e:	230b      	movs	r3, #11
    3a70:	18fb      	adds	r3, r7, r3
    3a72:	1c02      	adds	r2, r0, #0
    3a74:	701a      	strb	r2, [r3, #0]
    3a76:	230a      	movs	r3, #10
    3a78:	18fb      	adds	r3, r7, r3
    3a7a:	1c0a      	adds	r2, r1, #0
    3a7c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    3a7e:	238f      	movs	r3, #143	; 0x8f
    3a80:	18fb      	adds	r3, r7, r3
    3a82:	2200      	movs	r2, #0
    3a84:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    3a86:	230a      	movs	r3, #10
    3a88:	18fb      	adds	r3, r7, r3
    3a8a:	781b      	ldrb	r3, [r3, #0]
    3a8c:	2b01      	cmp	r3, #1
    3a8e:	d016      	beq.n	3abe <m2m_wifi_connect_sc+0x5e>
	{
		if(pvAuthInfo == NULL)
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	2b00      	cmp	r3, #0
    3a94:	d113      	bne.n	3abe <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
    3a96:	23e4      	movs	r3, #228	; 0xe4
    3a98:	33ff      	adds	r3, #255	; 0xff
    3a9a:	001a      	movs	r2, r3
    3a9c:	49ba      	ldr	r1, [pc, #744]	; (3d88 <m2m_wifi_connect_sc+0x328>)
    3a9e:	4bbb      	ldr	r3, [pc, #748]	; (3d8c <m2m_wifi_connect_sc+0x32c>)
    3aa0:	0018      	movs	r0, r3
    3aa2:	4bbb      	ldr	r3, [pc, #748]	; (3d90 <m2m_wifi_connect_sc+0x330>)
    3aa4:	4798      	blx	r3
    3aa6:	4bbb      	ldr	r3, [pc, #748]	; (3d94 <m2m_wifi_connect_sc+0x334>)
    3aa8:	0018      	movs	r0, r3
    3aaa:	4bbb      	ldr	r3, [pc, #748]	; (3d98 <m2m_wifi_connect_sc+0x338>)
    3aac:	4798      	blx	r3
    3aae:	200d      	movs	r0, #13
    3ab0:	4bba      	ldr	r3, [pc, #744]	; (3d9c <m2m_wifi_connect_sc+0x33c>)
    3ab2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3ab4:	238f      	movs	r3, #143	; 0x8f
    3ab6:	18fb      	adds	r3, r7, r3
    3ab8:	22f4      	movs	r2, #244	; 0xf4
    3aba:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3abc:	e15c      	b.n	3d78 <m2m_wifi_connect_sc+0x318>
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    3abe:	230b      	movs	r3, #11
    3ac0:	18fb      	adds	r3, r7, r3
    3ac2:	781b      	ldrb	r3, [r3, #0]
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d004      	beq.n	3ad2 <m2m_wifi_connect_sc+0x72>
    3ac8:	230b      	movs	r3, #11
    3aca:	18fb      	adds	r3, r7, r3
    3acc:	781b      	ldrb	r3, [r3, #0]
    3ace:	2b20      	cmp	r3, #32
    3ad0:	d912      	bls.n	3af8 <m2m_wifi_connect_sc+0x98>
	{
		M2M_ERR("SSID LEN INVALID\n");
    3ad2:	23f5      	movs	r3, #245	; 0xf5
    3ad4:	005a      	lsls	r2, r3, #1
    3ad6:	49ac      	ldr	r1, [pc, #688]	; (3d88 <m2m_wifi_connect_sc+0x328>)
    3ad8:	4bac      	ldr	r3, [pc, #688]	; (3d8c <m2m_wifi_connect_sc+0x32c>)
    3ada:	0018      	movs	r0, r3
    3adc:	4bac      	ldr	r3, [pc, #688]	; (3d90 <m2m_wifi_connect_sc+0x330>)
    3ade:	4798      	blx	r3
    3ae0:	4baf      	ldr	r3, [pc, #700]	; (3da0 <m2m_wifi_connect_sc+0x340>)
    3ae2:	0018      	movs	r0, r3
    3ae4:	4bac      	ldr	r3, [pc, #688]	; (3d98 <m2m_wifi_connect_sc+0x338>)
    3ae6:	4798      	blx	r3
    3ae8:	200d      	movs	r0, #13
    3aea:	4bac      	ldr	r3, [pc, #688]	; (3d9c <m2m_wifi_connect_sc+0x33c>)
    3aec:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    3aee:	238f      	movs	r3, #143	; 0x8f
    3af0:	18fb      	adds	r3, r7, r3
    3af2:	22f4      	movs	r2, #244	; 0xf4
    3af4:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    3af6:	e13f      	b.n	3d78 <m2m_wifi_connect_sc+0x318>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    3af8:	23a0      	movs	r3, #160	; 0xa0
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	881b      	ldrh	r3, [r3, #0]
    3afe:	2b0d      	cmp	r3, #13
    3b00:	d918      	bls.n	3b34 <m2m_wifi_connect_sc+0xd4>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    3b02:	23a0      	movs	r3, #160	; 0xa0
    3b04:	18fb      	adds	r3, r7, r3
    3b06:	881b      	ldrh	r3, [r3, #0]
    3b08:	2bff      	cmp	r3, #255	; 0xff
    3b0a:	d013      	beq.n	3b34 <m2m_wifi_connect_sc+0xd4>
		{
			M2M_ERR("CH INVALID\n");
    3b0c:	23f4      	movs	r3, #244	; 0xf4
    3b0e:	33ff      	adds	r3, #255	; 0xff
    3b10:	001a      	movs	r2, r3
    3b12:	499d      	ldr	r1, [pc, #628]	; (3d88 <m2m_wifi_connect_sc+0x328>)
    3b14:	4b9d      	ldr	r3, [pc, #628]	; (3d8c <m2m_wifi_connect_sc+0x32c>)
    3b16:	0018      	movs	r0, r3
    3b18:	4b9d      	ldr	r3, [pc, #628]	; (3d90 <m2m_wifi_connect_sc+0x330>)
    3b1a:	4798      	blx	r3
    3b1c:	4ba1      	ldr	r3, [pc, #644]	; (3da4 <m2m_wifi_connect_sc+0x344>)
    3b1e:	0018      	movs	r0, r3
    3b20:	4b9d      	ldr	r3, [pc, #628]	; (3d98 <m2m_wifi_connect_sc+0x338>)
    3b22:	4798      	blx	r3
    3b24:	200d      	movs	r0, #13
    3b26:	4b9d      	ldr	r3, [pc, #628]	; (3d9c <m2m_wifi_connect_sc+0x33c>)
    3b28:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3b2a:	238f      	movs	r3, #143	; 0x8f
    3b2c:	18fb      	adds	r3, r7, r3
    3b2e:	22f4      	movs	r2, #244	; 0xf4
    3b30:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3b32:	e121      	b.n	3d78 <m2m_wifi_connect_sc+0x318>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    3b34:	230b      	movs	r3, #11
    3b36:	18fb      	adds	r3, r7, r3
    3b38:	781a      	ldrb	r2, [r3, #0]
    3b3a:	68f9      	ldr	r1, [r7, #12]
    3b3c:	2310      	movs	r3, #16
    3b3e:	18fb      	adds	r3, r7, r3
    3b40:	3346      	adds	r3, #70	; 0x46
    3b42:	0018      	movs	r0, r3
    3b44:	4b98      	ldr	r3, [pc, #608]	; (3da8 <m2m_wifi_connect_sc+0x348>)
    3b46:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    3b48:	230b      	movs	r3, #11
    3b4a:	18fb      	adds	r3, r7, r3
    3b4c:	781b      	ldrb	r3, [r3, #0]
    3b4e:	2210      	movs	r2, #16
    3b50:	18ba      	adds	r2, r7, r2
    3b52:	2146      	movs	r1, #70	; 0x46
    3b54:	18d3      	adds	r3, r2, r3
    3b56:	185b      	adds	r3, r3, r1
    3b58:	2200      	movs	r2, #0
    3b5a:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    3b5c:	2310      	movs	r3, #16
    3b5e:	18fb      	adds	r3, r7, r3
    3b60:	22a0      	movs	r2, #160	; 0xa0
    3b62:	18ba      	adds	r2, r7, r2
    3b64:	2144      	movs	r1, #68	; 0x44
    3b66:	8812      	ldrh	r2, [r2, #0]
    3b68:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    3b6a:	23a4      	movs	r3, #164	; 0xa4
    3b6c:	18fb      	adds	r3, r7, r3
    3b6e:	781b      	ldrb	r3, [r3, #0]
    3b70:	1e5a      	subs	r2, r3, #1
    3b72:	4193      	sbcs	r3, r2
    3b74:	b2db      	uxtb	r3, r3
    3b76:	0019      	movs	r1, r3
    3b78:	2310      	movs	r3, #16
    3b7a:	18fb      	adds	r3, r7, r3
    3b7c:	2267      	movs	r2, #103	; 0x67
    3b7e:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    3b80:	2310      	movs	r3, #16
    3b82:	18fb      	adds	r3, r7, r3
    3b84:	2288      	movs	r2, #136	; 0x88
    3b86:	18ba      	adds	r2, r7, r2
    3b88:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    3b8a:	2388      	movs	r3, #136	; 0x88
    3b8c:	18fb      	adds	r3, r7, r3
    3b8e:	681b      	ldr	r3, [r3, #0]
    3b90:	220a      	movs	r2, #10
    3b92:	18ba      	adds	r2, r7, r2
    3b94:	2141      	movs	r1, #65	; 0x41
    3b96:	7812      	ldrb	r2, [r2, #0]
    3b98:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    3b9a:	230a      	movs	r3, #10
    3b9c:	18fb      	adds	r3, r7, r3
    3b9e:	781b      	ldrb	r3, [r3, #0]
    3ba0:	2b03      	cmp	r3, #3
    3ba2:	d000      	beq.n	3ba6 <m2m_wifi_connect_sc+0x146>
    3ba4:	e07a      	b.n	3c9c <m2m_wifi_connect_sc+0x23c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    3ba6:	687b      	ldr	r3, [r7, #4]
    3ba8:	2284      	movs	r2, #132	; 0x84
    3baa:	18ba      	adds	r2, r7, r2
    3bac:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    3bae:	2388      	movs	r3, #136	; 0x88
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	681b      	ldr	r3, [r3, #0]
    3bb4:	2280      	movs	r2, #128	; 0x80
    3bb6:	18ba      	adds	r2, r7, r2
    3bb8:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    3bba:	2384      	movs	r3, #132	; 0x84
    3bbc:	18fb      	adds	r3, r7, r3
    3bbe:	681b      	ldr	r3, [r3, #0]
    3bc0:	781b      	ldrb	r3, [r3, #0]
    3bc2:	3b01      	subs	r3, #1
    3bc4:	b2da      	uxtb	r2, r3
    3bc6:	2380      	movs	r3, #128	; 0x80
    3bc8:	18fb      	adds	r3, r7, r3
    3bca:	681b      	ldr	r3, [r3, #0]
    3bcc:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    3bce:	2380      	movs	r3, #128	; 0x80
    3bd0:	18fb      	adds	r3, r7, r3
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	781b      	ldrb	r3, [r3, #0]
    3bd6:	2b03      	cmp	r3, #3
    3bd8:	d917      	bls.n	3c0a <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    3bda:	4a74      	ldr	r2, [pc, #464]	; (3dac <m2m_wifi_connect_sc+0x34c>)
    3bdc:	496a      	ldr	r1, [pc, #424]	; (3d88 <m2m_wifi_connect_sc+0x328>)
    3bde:	4b6b      	ldr	r3, [pc, #428]	; (3d8c <m2m_wifi_connect_sc+0x32c>)
    3be0:	0018      	movs	r0, r3
    3be2:	4b6b      	ldr	r3, [pc, #428]	; (3d90 <m2m_wifi_connect_sc+0x330>)
    3be4:	4798      	blx	r3
    3be6:	2380      	movs	r3, #128	; 0x80
    3be8:	18fb      	adds	r3, r7, r3
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	781b      	ldrb	r3, [r3, #0]
    3bee:	001a      	movs	r2, r3
    3bf0:	4b6f      	ldr	r3, [pc, #444]	; (3db0 <m2m_wifi_connect_sc+0x350>)
    3bf2:	0011      	movs	r1, r2
    3bf4:	0018      	movs	r0, r3
    3bf6:	4b66      	ldr	r3, [pc, #408]	; (3d90 <m2m_wifi_connect_sc+0x330>)
    3bf8:	4798      	blx	r3
    3bfa:	200d      	movs	r0, #13
    3bfc:	4b67      	ldr	r3, [pc, #412]	; (3d9c <m2m_wifi_connect_sc+0x33c>)
    3bfe:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3c00:	238f      	movs	r3, #143	; 0x8f
    3c02:	18fb      	adds	r3, r7, r3
    3c04:	22f4      	movs	r2, #244	; 0xf4
    3c06:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3c08:	e0b6      	b.n	3d78 <m2m_wifi_connect_sc+0x318>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    3c0a:	2384      	movs	r3, #132	; 0x84
    3c0c:	18fb      	adds	r3, r7, r3
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	785b      	ldrb	r3, [r3, #1]
    3c12:	3b01      	subs	r3, #1
    3c14:	b2da      	uxtb	r2, r3
    3c16:	2380      	movs	r3, #128	; 0x80
    3c18:	18fb      	adds	r3, r7, r3
    3c1a:	681b      	ldr	r3, [r3, #0]
    3c1c:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    3c1e:	2380      	movs	r3, #128	; 0x80
    3c20:	18fb      	adds	r3, r7, r3
    3c22:	681b      	ldr	r3, [r3, #0]
    3c24:	785b      	ldrb	r3, [r3, #1]
    3c26:	2b0a      	cmp	r3, #10
    3c28:	d01d      	beq.n	3c66 <m2m_wifi_connect_sc+0x206>
    3c2a:	2380      	movs	r3, #128	; 0x80
    3c2c:	18fb      	adds	r3, r7, r3
    3c2e:	681b      	ldr	r3, [r3, #0]
    3c30:	785b      	ldrb	r3, [r3, #1]
    3c32:	2b1a      	cmp	r3, #26
    3c34:	d017      	beq.n	3c66 <m2m_wifi_connect_sc+0x206>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    3c36:	4a5f      	ldr	r2, [pc, #380]	; (3db4 <m2m_wifi_connect_sc+0x354>)
    3c38:	4953      	ldr	r1, [pc, #332]	; (3d88 <m2m_wifi_connect_sc+0x328>)
    3c3a:	4b54      	ldr	r3, [pc, #336]	; (3d8c <m2m_wifi_connect_sc+0x32c>)
    3c3c:	0018      	movs	r0, r3
    3c3e:	4b54      	ldr	r3, [pc, #336]	; (3d90 <m2m_wifi_connect_sc+0x330>)
    3c40:	4798      	blx	r3
    3c42:	2380      	movs	r3, #128	; 0x80
    3c44:	18fb      	adds	r3, r7, r3
    3c46:	681b      	ldr	r3, [r3, #0]
    3c48:	785b      	ldrb	r3, [r3, #1]
    3c4a:	001a      	movs	r2, r3
    3c4c:	4b5a      	ldr	r3, [pc, #360]	; (3db8 <m2m_wifi_connect_sc+0x358>)
    3c4e:	0011      	movs	r1, r2
    3c50:	0018      	movs	r0, r3
    3c52:	4b4f      	ldr	r3, [pc, #316]	; (3d90 <m2m_wifi_connect_sc+0x330>)
    3c54:	4798      	blx	r3
    3c56:	200d      	movs	r0, #13
    3c58:	4b50      	ldr	r3, [pc, #320]	; (3d9c <m2m_wifi_connect_sc+0x33c>)
    3c5a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3c5c:	238f      	movs	r3, #143	; 0x8f
    3c5e:	18fb      	adds	r3, r7, r3
    3c60:	22f4      	movs	r2, #244	; 0xf4
    3c62:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3c64:	e088      	b.n	3d78 <m2m_wifi_connect_sc+0x318>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    3c66:	2380      	movs	r3, #128	; 0x80
    3c68:	18fb      	adds	r3, r7, r3
    3c6a:	681b      	ldr	r3, [r3, #0]
    3c6c:	1c98      	adds	r0, r3, #2
    3c6e:	2384      	movs	r3, #132	; 0x84
    3c70:	18fb      	adds	r3, r7, r3
    3c72:	681b      	ldr	r3, [r3, #0]
    3c74:	1c99      	adds	r1, r3, #2
    3c76:	2384      	movs	r3, #132	; 0x84
    3c78:	18fb      	adds	r3, r7, r3
    3c7a:	681b      	ldr	r3, [r3, #0]
    3c7c:	785b      	ldrb	r3, [r3, #1]
    3c7e:	001a      	movs	r2, r3
    3c80:	4b49      	ldr	r3, [pc, #292]	; (3da8 <m2m_wifi_connect_sc+0x348>)
    3c82:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    3c84:	2384      	movs	r3, #132	; 0x84
    3c86:	18fb      	adds	r3, r7, r3
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	785b      	ldrb	r3, [r3, #1]
    3c8c:	001a      	movs	r2, r3
    3c8e:	2380      	movs	r3, #128	; 0x80
    3c90:	18fb      	adds	r3, r7, r3
    3c92:	681b      	ldr	r3, [r3, #0]
    3c94:	189b      	adds	r3, r3, r2
    3c96:	2200      	movs	r2, #0
    3c98:	709a      	strb	r2, [r3, #2]
    3c9a:	e05c      	b.n	3d56 <m2m_wifi_connect_sc+0x2f6>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    3c9c:	230a      	movs	r3, #10
    3c9e:	18fb      	adds	r3, r7, r3
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	2b02      	cmp	r3, #2
    3ca4:	d131      	bne.n	3d0a <m2m_wifi_connect_sc+0x2aa>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    3ca6:	237e      	movs	r3, #126	; 0x7e
    3ca8:	18fc      	adds	r4, r7, r3
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	0018      	movs	r0, r3
    3cae:	4b43      	ldr	r3, [pc, #268]	; (3dbc <m2m_wifi_connect_sc+0x35c>)
    3cb0:	4798      	blx	r3
    3cb2:	0003      	movs	r3, r0
    3cb4:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    3cb6:	237e      	movs	r3, #126	; 0x7e
    3cb8:	18fb      	adds	r3, r7, r3
    3cba:	881b      	ldrh	r3, [r3, #0]
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d004      	beq.n	3cca <m2m_wifi_connect_sc+0x26a>
    3cc0:	237e      	movs	r3, #126	; 0x7e
    3cc2:	18fb      	adds	r3, r7, r3
    3cc4:	881b      	ldrh	r3, [r3, #0]
    3cc6:	2b40      	cmp	r3, #64	; 0x40
    3cc8:	d912      	bls.n	3cf0 <m2m_wifi_connect_sc+0x290>
		{
			M2M_ERR("Incorrect PSK key length\n");
    3cca:	2388      	movs	r3, #136	; 0x88
    3ccc:	009a      	lsls	r2, r3, #2
    3cce:	492e      	ldr	r1, [pc, #184]	; (3d88 <m2m_wifi_connect_sc+0x328>)
    3cd0:	4b2e      	ldr	r3, [pc, #184]	; (3d8c <m2m_wifi_connect_sc+0x32c>)
    3cd2:	0018      	movs	r0, r3
    3cd4:	4b2e      	ldr	r3, [pc, #184]	; (3d90 <m2m_wifi_connect_sc+0x330>)
    3cd6:	4798      	blx	r3
    3cd8:	4b39      	ldr	r3, [pc, #228]	; (3dc0 <m2m_wifi_connect_sc+0x360>)
    3cda:	0018      	movs	r0, r3
    3cdc:	4b2e      	ldr	r3, [pc, #184]	; (3d98 <m2m_wifi_connect_sc+0x338>)
    3cde:	4798      	blx	r3
    3ce0:	200d      	movs	r0, #13
    3ce2:	4b2e      	ldr	r3, [pc, #184]	; (3d9c <m2m_wifi_connect_sc+0x33c>)
    3ce4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3ce6:	238f      	movs	r3, #143	; 0x8f
    3ce8:	18fb      	adds	r3, r7, r3
    3cea:	22f4      	movs	r2, #244	; 0xf4
    3cec:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3cee:	e043      	b.n	3d78 <m2m_wifi_connect_sc+0x318>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    3cf0:	2388      	movs	r3, #136	; 0x88
    3cf2:	18fb      	adds	r3, r7, r3
    3cf4:	6818      	ldr	r0, [r3, #0]
    3cf6:	237e      	movs	r3, #126	; 0x7e
    3cf8:	18fb      	adds	r3, r7, r3
    3cfa:	881b      	ldrh	r3, [r3, #0]
    3cfc:	3301      	adds	r3, #1
    3cfe:	001a      	movs	r2, r3
    3d00:	687b      	ldr	r3, [r7, #4]
    3d02:	0019      	movs	r1, r3
    3d04:	4b28      	ldr	r3, [pc, #160]	; (3da8 <m2m_wifi_connect_sc+0x348>)
    3d06:	4798      	blx	r3
    3d08:	e025      	b.n	3d56 <m2m_wifi_connect_sc+0x2f6>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    3d0a:	230a      	movs	r3, #10
    3d0c:	18fb      	adds	r3, r7, r3
    3d0e:	781b      	ldrb	r3, [r3, #0]
    3d10:	2b04      	cmp	r3, #4
    3d12:	d108      	bne.n	3d26 <m2m_wifi_connect_sc+0x2c6>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    3d14:	2388      	movs	r3, #136	; 0x88
    3d16:	18fb      	adds	r3, r7, r3
    3d18:	681b      	ldr	r3, [r3, #0]
    3d1a:	6879      	ldr	r1, [r7, #4]
    3d1c:	223e      	movs	r2, #62	; 0x3e
    3d1e:	0018      	movs	r0, r3
    3d20:	4b21      	ldr	r3, [pc, #132]	; (3da8 <m2m_wifi_connect_sc+0x348>)
    3d22:	4798      	blx	r3
    3d24:	e017      	b.n	3d56 <m2m_wifi_connect_sc+0x2f6>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    3d26:	230a      	movs	r3, #10
    3d28:	18fb      	adds	r3, r7, r3
    3d2a:	781b      	ldrb	r3, [r3, #0]
    3d2c:	2b01      	cmp	r3, #1
    3d2e:	d012      	beq.n	3d56 <m2m_wifi_connect_sc+0x2f6>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    3d30:	238c      	movs	r3, #140	; 0x8c
    3d32:	009a      	lsls	r2, r3, #2
    3d34:	4914      	ldr	r1, [pc, #80]	; (3d88 <m2m_wifi_connect_sc+0x328>)
    3d36:	4b15      	ldr	r3, [pc, #84]	; (3d8c <m2m_wifi_connect_sc+0x32c>)
    3d38:	0018      	movs	r0, r3
    3d3a:	4b15      	ldr	r3, [pc, #84]	; (3d90 <m2m_wifi_connect_sc+0x330>)
    3d3c:	4798      	blx	r3
    3d3e:	4b21      	ldr	r3, [pc, #132]	; (3dc4 <m2m_wifi_connect_sc+0x364>)
    3d40:	0018      	movs	r0, r3
    3d42:	4b15      	ldr	r3, [pc, #84]	; (3d98 <m2m_wifi_connect_sc+0x338>)
    3d44:	4798      	blx	r3
    3d46:	200d      	movs	r0, #13
    3d48:	4b14      	ldr	r3, [pc, #80]	; (3d9c <m2m_wifi_connect_sc+0x33c>)
    3d4a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    3d4c:	238f      	movs	r3, #143	; 0x8f
    3d4e:	18fb      	adds	r3, r7, r3
    3d50:	22f4      	movs	r2, #244	; 0xf4
    3d52:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    3d54:	e010      	b.n	3d78 <m2m_wifi_connect_sc+0x318>
	}

	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    3d56:	238f      	movs	r3, #143	; 0x8f
    3d58:	18fc      	adds	r4, r7, r3
    3d5a:	2310      	movs	r3, #16
    3d5c:	18fa      	adds	r2, r7, r3
    3d5e:	2300      	movs	r3, #0
    3d60:	9302      	str	r3, [sp, #8]
    3d62:	2300      	movs	r3, #0
    3d64:	9301      	str	r3, [sp, #4]
    3d66:	2300      	movs	r3, #0
    3d68:	9300      	str	r3, [sp, #0]
    3d6a:	236c      	movs	r3, #108	; 0x6c
    3d6c:	2128      	movs	r1, #40	; 0x28
    3d6e:	2001      	movs	r0, #1
    3d70:	4d15      	ldr	r5, [pc, #84]	; (3dc8 <m2m_wifi_connect_sc+0x368>)
    3d72:	47a8      	blx	r5
    3d74:	0003      	movs	r3, r0
    3d76:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    3d78:	238f      	movs	r3, #143	; 0x8f
    3d7a:	18fb      	adds	r3, r7, r3
    3d7c:	781b      	ldrb	r3, [r3, #0]
    3d7e:	b25b      	sxtb	r3, r3
}
    3d80:	0018      	movs	r0, r3
    3d82:	46bd      	mov	sp, r7
    3d84:	b024      	add	sp, #144	; 0x90
    3d86:	bdb0      	pop	{r4, r5, r7, pc}
    3d88:	00013d84 	.word	0x00013d84
    3d8c:	00013b34 	.word	0x00013b34
    3d90:	0001212d 	.word	0x0001212d
    3d94:	00013c70 	.word	0x00013c70
    3d98:	00012249 	.word	0x00012249
    3d9c:	00012161 	.word	0x00012161
    3da0:	00013c84 	.word	0x00013c84
    3da4:	00013c98 	.word	0x00013c98
    3da8:	00002849 	.word	0x00002849
    3dac:	0000020a 	.word	0x0000020a
    3db0:	00013ca4 	.word	0x00013ca4
    3db4:	00000211 	.word	0x00000211
    3db8:	00013cc0 	.word	0x00013cc0
    3dbc:	000028c3 	.word	0x000028c3
    3dc0:	00013cdc 	.word	0x00013cdc
    3dc4:	00013cf8 	.word	0x00013cf8
    3dc8:	00002b71 	.word	0x00002b71

00003dcc <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GRP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    3dcc:	b580      	push	{r7, lr}
    3dce:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    3dd0:	2300      	movs	r3, #0
}
    3dd2:	0018      	movs	r0, r3
    3dd4:	46bd      	mov	sp, r7
    3dd6:	bd80      	pop	{r7, pc}

00003dd8 <chip_apply_conf>:
#define M2M_DISABLE_PS        0xD0UL

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    3dd8:	b590      	push	{r4, r7, lr}
    3dda:	b087      	sub	sp, #28
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3de0:	2317      	movs	r3, #23
    3de2:	18fb      	adds	r3, r7, r3
    3de4:	2200      	movs	r2, #0
    3de6:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    3de8:	687b      	ldr	r3, [r7, #4]
    3dea:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    3dec:	693a      	ldr	r2, [r7, #16]
    3dee:	23a5      	movs	r3, #165	; 0xa5
    3df0:	015b      	lsls	r3, r3, #5
    3df2:	0011      	movs	r1, r2
    3df4:	0018      	movs	r0, r3
    3df6:	4b13      	ldr	r3, [pc, #76]	; (3e44 <chip_apply_conf+0x6c>)
    3df8:	4798      	blx	r3
		if(val32 != 0) {		
    3dfa:	693b      	ldr	r3, [r7, #16]
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d018      	beq.n	3e32 <chip_apply_conf+0x5a>
			uint32 reg = 0;
    3e00:	2300      	movs	r3, #0
    3e02:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    3e04:	2317      	movs	r3, #23
    3e06:	18fc      	adds	r4, r7, r3
    3e08:	230c      	movs	r3, #12
    3e0a:	18fa      	adds	r2, r7, r3
    3e0c:	23a5      	movs	r3, #165	; 0xa5
    3e0e:	015b      	lsls	r3, r3, #5
    3e10:	0011      	movs	r1, r2
    3e12:	0018      	movs	r0, r3
    3e14:	4b0c      	ldr	r3, [pc, #48]	; (3e48 <chip_apply_conf+0x70>)
    3e16:	4798      	blx	r3
    3e18:	0003      	movs	r3, r0
    3e1a:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    3e1c:	2317      	movs	r3, #23
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	781b      	ldrb	r3, [r3, #0]
    3e22:	b25b      	sxtb	r3, r3
    3e24:	2b00      	cmp	r3, #0
    3e26:	d1e1      	bne.n	3dec <chip_apply_conf+0x14>
				if(reg == val32)
    3e28:	68fa      	ldr	r2, [r7, #12]
    3e2a:	693b      	ldr	r3, [r7, #16]
    3e2c:	429a      	cmp	r2, r3
    3e2e:	d002      	beq.n	3e36 <chip_apply_conf+0x5e>
		nm_write_reg(rNMI_GP_REG_1, val32);
    3e30:	e7dc      	b.n	3dec <chip_apply_conf+0x14>
					break;
			}
		} else {
			break;
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	e000      	b.n	3e38 <chip_apply_conf+0x60>
					break;
    3e36:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    3e38:	2300      	movs	r3, #0
}
    3e3a:	0018      	movs	r0, r3
    3e3c:	46bd      	mov	sp, r7
    3e3e:	b007      	add	sp, #28
    3e40:	bd90      	pop	{r4, r7, pc}
    3e42:	46c0      	nop			; (mov r8, r8)
    3e44:	00004519 	.word	0x00004519
    3e48:	000044f5 	.word	0x000044f5

00003e4c <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    3e4c:	b590      	push	{r4, r7, lr}
    3e4e:	b085      	sub	sp, #20
    3e50:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3e52:	230f      	movs	r3, #15
    3e54:	18fb      	adds	r3, r7, r3
    3e56:	2200      	movs	r2, #0
    3e58:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    3e5a:	2300      	movs	r3, #0
    3e5c:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    3e5e:	2001      	movs	r0, #1
    3e60:	4b54      	ldr	r3, [pc, #336]	; (3fb4 <nm_clkless_wake+0x168>)
    3e62:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    3e64:	230f      	movs	r3, #15
    3e66:	18fc      	adds	r4, r7, r3
    3e68:	1d3b      	adds	r3, r7, #4
    3e6a:	0019      	movs	r1, r3
    3e6c:	2001      	movs	r0, #1
    3e6e:	4b52      	ldr	r3, [pc, #328]	; (3fb8 <nm_clkless_wake+0x16c>)
    3e70:	4798      	blx	r3
    3e72:	0003      	movs	r3, r0
    3e74:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    3e76:	230f      	movs	r3, #15
    3e78:	18fb      	adds	r3, r7, r3
    3e7a:	781b      	ldrb	r3, [r3, #0]
    3e7c:	b25b      	sxtb	r3, r3
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d00d      	beq.n	3e9e <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    3e82:	494e      	ldr	r1, [pc, #312]	; (3fbc <nm_clkless_wake+0x170>)
    3e84:	4b4e      	ldr	r3, [pc, #312]	; (3fc0 <nm_clkless_wake+0x174>)
    3e86:	2271      	movs	r2, #113	; 0x71
    3e88:	0018      	movs	r0, r3
    3e8a:	4b4e      	ldr	r3, [pc, #312]	; (3fc4 <nm_clkless_wake+0x178>)
    3e8c:	4798      	blx	r3
    3e8e:	4b4e      	ldr	r3, [pc, #312]	; (3fc8 <nm_clkless_wake+0x17c>)
    3e90:	0018      	movs	r0, r3
    3e92:	4b4e      	ldr	r3, [pc, #312]	; (3fcc <nm_clkless_wake+0x180>)
    3e94:	4798      	blx	r3
    3e96:	200d      	movs	r0, #13
    3e98:	4b4d      	ldr	r3, [pc, #308]	; (3fd0 <nm_clkless_wake+0x184>)
    3e9a:	4798      	blx	r3
		goto _WAKE_EXIT;
    3e9c:	e081      	b.n	3fa2 <nm_clkless_wake+0x156>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	2202      	movs	r2, #2
    3ea2:	4313      	orrs	r3, r2
    3ea4:	0019      	movs	r1, r3
    3ea6:	2001      	movs	r0, #1
    3ea8:	4b4a      	ldr	r3, [pc, #296]	; (3fd4 <nm_clkless_wake+0x188>)
    3eaa:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    3eac:	2001      	movs	r0, #1
    3eae:	4b41      	ldr	r3, [pc, #260]	; (3fb4 <nm_clkless_wake+0x168>)
    3eb0:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    3eb2:	4b49      	ldr	r3, [pc, #292]	; (3fd8 <nm_clkless_wake+0x18c>)
    3eb4:	681b      	ldr	r3, [r3, #0]
    3eb6:	220f      	movs	r2, #15
    3eb8:	18bc      	adds	r4, r7, r2
    3eba:	003a      	movs	r2, r7
    3ebc:	0011      	movs	r1, r2
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b3d      	ldr	r3, [pc, #244]	; (3fb8 <nm_clkless_wake+0x16c>)
    3ec2:	4798      	blx	r3
    3ec4:	0003      	movs	r3, r0
    3ec6:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    3ec8:	230f      	movs	r3, #15
    3eca:	18fb      	adds	r3, r7, r3
    3ecc:	781b      	ldrb	r3, [r3, #0]
    3ece:	b25b      	sxtb	r3, r3
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d108      	bne.n	3ee6 <nm_clkless_wake+0x9a>
    3ed4:	230f      	movs	r3, #15
    3ed6:	18fb      	adds	r3, r7, r3
    3ed8:	781b      	ldrb	r3, [r3, #0]
    3eda:	b25b      	sxtb	r3, r3
    3edc:	2b00      	cmp	r3, #0
    3ede:	d142      	bne.n	3f66 <nm_clkless_wake+0x11a>
    3ee0:	683b      	ldr	r3, [r7, #0]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d13f      	bne.n	3f66 <nm_clkless_wake+0x11a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    3ee6:	4b3c      	ldr	r3, [pc, #240]	; (3fd8 <nm_clkless_wake+0x18c>)
    3ee8:	220e      	movs	r2, #14
    3eea:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    3eec:	2001      	movs	r0, #1
    3eee:	4b31      	ldr	r3, [pc, #196]	; (3fb4 <nm_clkless_wake+0x168>)
    3ef0:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    3ef2:	4b39      	ldr	r3, [pc, #228]	; (3fd8 <nm_clkless_wake+0x18c>)
    3ef4:	681b      	ldr	r3, [r3, #0]
    3ef6:	220f      	movs	r2, #15
    3ef8:	18bc      	adds	r4, r7, r2
    3efa:	003a      	movs	r2, r7
    3efc:	0011      	movs	r1, r2
    3efe:	0018      	movs	r0, r3
    3f00:	4b2d      	ldr	r3, [pc, #180]	; (3fb8 <nm_clkless_wake+0x16c>)
    3f02:	4798      	blx	r3
    3f04:	0003      	movs	r3, r0
    3f06:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) {
    3f08:	230f      	movs	r3, #15
    3f0a:	18fb      	adds	r3, r7, r3
    3f0c:	781b      	ldrb	r3, [r3, #0]
    3f0e:	b25b      	sxtb	r3, r3
    3f10:	2b00      	cmp	r3, #0
    3f12:	d028      	beq.n	3f66 <nm_clkless_wake+0x11a>
				M2M_ERR("Bus error (2). Wake up failed\n");
    3f14:	4929      	ldr	r1, [pc, #164]	; (3fbc <nm_clkless_wake+0x170>)
    3f16:	4b2a      	ldr	r3, [pc, #168]	; (3fc0 <nm_clkless_wake+0x174>)
    3f18:	228b      	movs	r2, #139	; 0x8b
    3f1a:	0018      	movs	r0, r3
    3f1c:	4b29      	ldr	r3, [pc, #164]	; (3fc4 <nm_clkless_wake+0x178>)
    3f1e:	4798      	blx	r3
    3f20:	4b2e      	ldr	r3, [pc, #184]	; (3fdc <nm_clkless_wake+0x190>)
    3f22:	0018      	movs	r0, r3
    3f24:	4b29      	ldr	r3, [pc, #164]	; (3fcc <nm_clkless_wake+0x180>)
    3f26:	4798      	blx	r3
    3f28:	200d      	movs	r0, #13
    3f2a:	4b29      	ldr	r3, [pc, #164]	; (3fd0 <nm_clkless_wake+0x184>)
    3f2c:	4798      	blx	r3
				goto _WAKE_EXIT;
    3f2e:	e038      	b.n	3fa2 <nm_clkless_wake+0x156>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    3f30:	2002      	movs	r0, #2
    3f32:	4b20      	ldr	r3, [pc, #128]	; (3fb4 <nm_clkless_wake+0x168>)
    3f34:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    3f36:	4b28      	ldr	r3, [pc, #160]	; (3fd8 <nm_clkless_wake+0x18c>)
    3f38:	681b      	ldr	r3, [r3, #0]
    3f3a:	003a      	movs	r2, r7
    3f3c:	0011      	movs	r1, r2
    3f3e:	0018      	movs	r0, r3
    3f40:	4b1d      	ldr	r3, [pc, #116]	; (3fb8 <nm_clkless_wake+0x16c>)
    3f42:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    3f44:	683b      	ldr	r3, [r7, #0]
    3f46:	2204      	movs	r2, #4
    3f48:	4013      	ands	r3, r2
    3f4a:	d10c      	bne.n	3f66 <nm_clkless_wake+0x11a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    3f4c:	491b      	ldr	r1, [pc, #108]	; (3fbc <nm_clkless_wake+0x170>)
    3f4e:	4b1c      	ldr	r3, [pc, #112]	; (3fc0 <nm_clkless_wake+0x174>)
    3f50:	229e      	movs	r2, #158	; 0x9e
    3f52:	0018      	movs	r0, r3
    3f54:	4b1b      	ldr	r3, [pc, #108]	; (3fc4 <nm_clkless_wake+0x178>)
    3f56:	4798      	blx	r3
    3f58:	4b21      	ldr	r3, [pc, #132]	; (3fe0 <nm_clkless_wake+0x194>)
    3f5a:	0018      	movs	r0, r3
    3f5c:	4b1b      	ldr	r3, [pc, #108]	; (3fcc <nm_clkless_wake+0x180>)
    3f5e:	4798      	blx	r3
    3f60:	200d      	movs	r0, #13
    3f62:	4b1b      	ldr	r3, [pc, #108]	; (3fd0 <nm_clkless_wake+0x184>)
    3f64:	4798      	blx	r3
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    3f66:	683b      	ldr	r3, [r7, #0]
    3f68:	2204      	movs	r2, #4
    3f6a:	4013      	ands	r3, r2
    3f6c:	d109      	bne.n	3f82 <nm_clkless_wake+0x136>
    3f6e:	68bb      	ldr	r3, [r7, #8]
    3f70:	3301      	adds	r3, #1
    3f72:	60bb      	str	r3, [r7, #8]
    3f74:	68ba      	ldr	r2, [r7, #8]
    3f76:	4b1b      	ldr	r3, [pc, #108]	; (3fe4 <nm_clkless_wake+0x198>)
    3f78:	2103      	movs	r1, #3
    3f7a:	0010      	movs	r0, r2
    3f7c:	4798      	blx	r3
    3f7e:	1e0b      	subs	r3, r1, #0
    3f80:	d0d6      	beq.n	3f30 <nm_clkless_wake+0xe4>
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    3f82:	683b      	ldr	r3, [r7, #0]
    3f84:	2204      	movs	r2, #4
    3f86:	4013      	ands	r3, r2
    3f88:	d106      	bne.n	3f98 <nm_clkless_wake+0x14c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	2202      	movs	r2, #2
    3f8e:	4313      	orrs	r3, r2
    3f90:	0019      	movs	r1, r3
    3f92:	2001      	movs	r0, #1
    3f94:	4b0f      	ldr	r3, [pc, #60]	; (3fd4 <nm_clkless_wake+0x188>)
    3f96:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    3f98:	683b      	ldr	r3, [r7, #0]
    3f9a:	2204      	movs	r2, #4
    3f9c:	4013      	ands	r3, r2
    3f9e:	d100      	bne.n	3fa2 <nm_clkless_wake+0x156>
    3fa0:	e77d      	b.n	3e9e <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    3fa2:	230f      	movs	r3, #15
    3fa4:	18fb      	adds	r3, r7, r3
    3fa6:	781b      	ldrb	r3, [r3, #0]
    3fa8:	b25b      	sxtb	r3, r3
}
    3faa:	0018      	movs	r0, r3
    3fac:	46bd      	mov	sp, r7
    3fae:	b005      	add	sp, #20
    3fb0:	bd90      	pop	{r4, r7, pc}
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	00002771 	.word	0x00002771
    3fb8:	000044f5 	.word	0x000044f5
    3fbc:	00013ec0 	.word	0x00013ec0
    3fc0:	00013d98 	.word	0x00013d98
    3fc4:	0001212d 	.word	0x0001212d
    3fc8:	00013dac 	.word	0x00013dac
    3fcc:	00012249 	.word	0x00012249
    3fd0:	00012161 	.word	0x00012161
    3fd4:	00004519 	.word	0x00004519
    3fd8:	20000010 	.word	0x20000010
    3fdc:	00013dcc 	.word	0x00013dcc
    3fe0:	00013dec 	.word	0x00013dec
    3fe4:	000100bd 	.word	0x000100bd

00003fe8 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    3fe8:	b590      	push	{r4, r7, lr}
    3fea:	b083      	sub	sp, #12
    3fec:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    3fee:	1dfc      	adds	r4, r7, #7
    3ff0:	003b      	movs	r3, r7
    3ff2:	4a29      	ldr	r2, [pc, #164]	; (4098 <enable_interrupts+0xb0>)
    3ff4:	0019      	movs	r1, r3
    3ff6:	0010      	movs	r0, r2
    3ff8:	4b28      	ldr	r3, [pc, #160]	; (409c <enable_interrupts+0xb4>)
    3ffa:	4798      	blx	r3
    3ffc:	0003      	movs	r3, r0
    3ffe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4000:	1dfb      	adds	r3, r7, #7
    4002:	781b      	ldrb	r3, [r3, #0]
    4004:	b25b      	sxtb	r3, r3
    4006:	2b00      	cmp	r3, #0
    4008:	d002      	beq.n	4010 <enable_interrupts+0x28>
		return M2M_ERR_BUS_FAIL;
    400a:	2306      	movs	r3, #6
    400c:	425b      	negs	r3, r3
    400e:	e03f      	b.n	4090 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 8);
    4010:	683b      	ldr	r3, [r7, #0]
    4012:	2280      	movs	r2, #128	; 0x80
    4014:	0052      	lsls	r2, r2, #1
    4016:	4313      	orrs	r3, r2
    4018:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    401a:	683b      	ldr	r3, [r7, #0]
    401c:	1dfc      	adds	r4, r7, #7
    401e:	4a1e      	ldr	r2, [pc, #120]	; (4098 <enable_interrupts+0xb0>)
    4020:	0019      	movs	r1, r3
    4022:	0010      	movs	r0, r2
    4024:	4b1e      	ldr	r3, [pc, #120]	; (40a0 <enable_interrupts+0xb8>)
    4026:	4798      	blx	r3
    4028:	0003      	movs	r3, r0
    402a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    402c:	1dfb      	adds	r3, r7, #7
    402e:	781b      	ldrb	r3, [r3, #0]
    4030:	b25b      	sxtb	r3, r3
    4032:	2b00      	cmp	r3, #0
    4034:	d002      	beq.n	403c <enable_interrupts+0x54>
		return M2M_ERR_BUS_FAIL;
    4036:	2306      	movs	r3, #6
    4038:	425b      	negs	r3, r3
    403a:	e029      	b.n	4090 <enable_interrupts+0xa8>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    403c:	1dfc      	adds	r4, r7, #7
    403e:	003a      	movs	r2, r7
    4040:	23d0      	movs	r3, #208	; 0xd0
    4042:	015b      	lsls	r3, r3, #5
    4044:	0011      	movs	r1, r2
    4046:	0018      	movs	r0, r3
    4048:	4b14      	ldr	r3, [pc, #80]	; (409c <enable_interrupts+0xb4>)
    404a:	4798      	blx	r3
    404c:	0003      	movs	r3, r0
    404e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4050:	1dfb      	adds	r3, r7, #7
    4052:	781b      	ldrb	r3, [r3, #0]
    4054:	b25b      	sxtb	r3, r3
    4056:	2b00      	cmp	r3, #0
    4058:	d002      	beq.n	4060 <enable_interrupts+0x78>
		return M2M_ERR_BUS_FAIL;
    405a:	2306      	movs	r3, #6
    405c:	425b      	negs	r3, r3
    405e:	e017      	b.n	4090 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 16);
    4060:	683b      	ldr	r3, [r7, #0]
    4062:	2280      	movs	r2, #128	; 0x80
    4064:	0252      	lsls	r2, r2, #9
    4066:	4313      	orrs	r3, r2
    4068:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    406a:	683a      	ldr	r2, [r7, #0]
    406c:	1dfc      	adds	r4, r7, #7
    406e:	23d0      	movs	r3, #208	; 0xd0
    4070:	015b      	lsls	r3, r3, #5
    4072:	0011      	movs	r1, r2
    4074:	0018      	movs	r0, r3
    4076:	4b0a      	ldr	r3, [pc, #40]	; (40a0 <enable_interrupts+0xb8>)
    4078:	4798      	blx	r3
    407a:	0003      	movs	r3, r0
    407c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    407e:	1dfb      	adds	r3, r7, #7
    4080:	781b      	ldrb	r3, [r3, #0]
    4082:	b25b      	sxtb	r3, r3
    4084:	2b00      	cmp	r3, #0
    4086:	d002      	beq.n	408e <enable_interrupts+0xa6>
		return M2M_ERR_BUS_FAIL;
    4088:	2306      	movs	r3, #6
    408a:	425b      	negs	r3, r3
    408c:	e000      	b.n	4090 <enable_interrupts+0xa8>
	}
	return M2M_SUCCESS;
    408e:	2300      	movs	r3, #0
}
    4090:	0018      	movs	r0, r3
    4092:	46bd      	mov	sp, r7
    4094:	b003      	add	sp, #12
    4096:	bd90      	pop	{r4, r7, pc}
    4098:	00001408 	.word	0x00001408
    409c:	000044f5 	.word	0x000044f5
    40a0:	00004519 	.word	0x00004519

000040a4 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    40a4:	b580      	push	{r7, lr}
    40a6:	b082      	sub	sp, #8
    40a8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    40aa:	4b28      	ldr	r3, [pc, #160]	; (414c <nmi_get_chipid+0xa8>)
    40ac:	681b      	ldr	r3, [r3, #0]
    40ae:	2b00      	cmp	r3, #0
    40b0:	d145      	bne.n	413e <nmi_get_chipid+0x9a>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    40b2:	4a26      	ldr	r2, [pc, #152]	; (414c <nmi_get_chipid+0xa8>)
    40b4:	2380      	movs	r3, #128	; 0x80
    40b6:	015b      	lsls	r3, r3, #5
    40b8:	0011      	movs	r1, r2
    40ba:	0018      	movs	r0, r3
    40bc:	4b24      	ldr	r3, [pc, #144]	; (4150 <nmi_get_chipid+0xac>)
    40be:	4798      	blx	r3
    40c0:	1e03      	subs	r3, r0, #0
    40c2:	d004      	beq.n	40ce <nmi_get_chipid+0x2a>
			chipid = 0;
    40c4:	4b21      	ldr	r3, [pc, #132]	; (414c <nmi_get_chipid+0xa8>)
    40c6:	2200      	movs	r2, #0
    40c8:	601a      	str	r2, [r3, #0]
			return 0;
    40ca:	2300      	movs	r3, #0
    40cc:	e039      	b.n	4142 <nmi_get_chipid+0x9e>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    40ce:	1d3b      	adds	r3, r7, #4
    40d0:	4a20      	ldr	r2, [pc, #128]	; (4154 <nmi_get_chipid+0xb0>)
    40d2:	0019      	movs	r1, r3
    40d4:	0010      	movs	r0, r2
    40d6:	4b1e      	ldr	r3, [pc, #120]	; (4150 <nmi_get_chipid+0xac>)
    40d8:	4798      	blx	r3
    40da:	1e03      	subs	r3, r0, #0
    40dc:	d004      	beq.n	40e8 <nmi_get_chipid+0x44>
			chipid = 0;
    40de:	4b1b      	ldr	r3, [pc, #108]	; (414c <nmi_get_chipid+0xa8>)
    40e0:	2200      	movs	r2, #0
    40e2:	601a      	str	r2, [r3, #0]
			return 0;
    40e4:	2300      	movs	r3, #0
    40e6:	e02c      	b.n	4142 <nmi_get_chipid+0x9e>
		}

		if (chipid == 0x1002a0)  {
    40e8:	4b18      	ldr	r3, [pc, #96]	; (414c <nmi_get_chipid+0xa8>)
    40ea:	681b      	ldr	r3, [r3, #0]
    40ec:	4a1a      	ldr	r2, [pc, #104]	; (4158 <nmi_get_chipid+0xb4>)
    40ee:	4293      	cmp	r3, r2
    40f0:	d106      	bne.n	4100 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	2b01      	cmp	r3, #1
    40f6:	d015      	beq.n	4124 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    40f8:	4b14      	ldr	r3, [pc, #80]	; (414c <nmi_get_chipid+0xa8>)
    40fa:	4a18      	ldr	r2, [pc, #96]	; (415c <nmi_get_chipid+0xb8>)
    40fc:	601a      	str	r2, [r3, #0]
    40fe:	e011      	b.n	4124 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
    4100:	4b12      	ldr	r3, [pc, #72]	; (414c <nmi_get_chipid+0xa8>)
    4102:	681b      	ldr	r3, [r3, #0]
    4104:	4a16      	ldr	r2, [pc, #88]	; (4160 <nmi_get_chipid+0xbc>)
    4106:	4293      	cmp	r3, r2
    4108:	d10c      	bne.n	4124 <nmi_get_chipid+0x80>
			if(rfrevid == 3) { /* 1002B0 */
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	2b03      	cmp	r3, #3
    410e:	d009      	beq.n	4124 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
    4110:	687b      	ldr	r3, [r7, #4]
    4112:	2b04      	cmp	r3, #4
    4114:	d103      	bne.n	411e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    4116:	4b0d      	ldr	r3, [pc, #52]	; (414c <nmi_get_chipid+0xa8>)
    4118:	4a12      	ldr	r2, [pc, #72]	; (4164 <nmi_get_chipid+0xc0>)
    411a:	601a      	str	r2, [r3, #0]
    411c:	e002      	b.n	4124 <nmi_get_chipid+0x80>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    411e:	4b0b      	ldr	r3, [pc, #44]	; (414c <nmi_get_chipid+0xa8>)
    4120:	4a11      	ldr	r2, [pc, #68]	; (4168 <nmi_get_chipid+0xc4>)
    4122:	601a      	str	r2, [r3, #0]
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    4124:	4b09      	ldr	r3, [pc, #36]	; (414c <nmi_get_chipid+0xa8>)
    4126:	681b      	ldr	r3, [r3, #0]
    4128:	4a10      	ldr	r2, [pc, #64]	; (416c <nmi_get_chipid+0xc8>)
    412a:	401a      	ands	r2, r3
    412c:	4b07      	ldr	r3, [pc, #28]	; (414c <nmi_get_chipid+0xa8>)
    412e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    4130:	4b06      	ldr	r3, [pc, #24]	; (414c <nmi_get_chipid+0xa8>)
    4132:	681b      	ldr	r3, [r3, #0]
    4134:	22a0      	movs	r2, #160	; 0xa0
    4136:	02d2      	lsls	r2, r2, #11
    4138:	431a      	orrs	r2, r3
    413a:	4b04      	ldr	r3, [pc, #16]	; (414c <nmi_get_chipid+0xa8>)
    413c:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    413e:	4b03      	ldr	r3, [pc, #12]	; (414c <nmi_get_chipid+0xa8>)
    4140:	681b      	ldr	r3, [r3, #0]
}
    4142:	0018      	movs	r0, r3
    4144:	46bd      	mov	sp, r7
    4146:	b002      	add	sp, #8
    4148:	bd80      	pop	{r7, pc}
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	20000294 	.word	0x20000294
    4150:	000044f5 	.word	0x000044f5
    4154:	000013f4 	.word	0x000013f4
    4158:	001002a0 	.word	0x001002a0
    415c:	001002a1 	.word	0x001002a1
    4160:	001002b0 	.word	0x001002b0
    4164:	001002b1 	.word	0x001002b1
    4168:	001002b2 	.word	0x001002b2
    416c:	fff0ffff 	.word	0xfff0ffff

00004170 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    4170:	b580      	push	{r7, lr}
    4172:	b086      	sub	sp, #24
    4174:	af00      	add	r7, sp, #0
    4176:	0002      	movs	r2, r0
    4178:	1dfb      	adds	r3, r7, #7
    417a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    417c:	2317      	movs	r3, #23
    417e:	18fb      	adds	r3, r7, r3
    4180:	2200      	movs	r2, #0
    4182:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    4184:	2300      	movs	r3, #0
    4186:	613b      	str	r3, [r7, #16]
    4188:	2300      	movs	r3, #0
    418a:	60fb      	str	r3, [r7, #12]

	reg = 0;
    418c:	2300      	movs	r3, #0
    418e:	613b      	str	r3, [r7, #16]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    4190:	4b2f      	ldr	r3, [pc, #188]	; (4250 <wait_for_bootrom+0xe0>)
    4192:	0018      	movs	r0, r3
    4194:	4b2f      	ldr	r3, [pc, #188]	; (4254 <wait_for_bootrom+0xe4>)
    4196:	4798      	blx	r3
    4198:	0003      	movs	r3, r0
    419a:	613b      	str	r3, [r7, #16]
		if (reg & 0x80000000) {
    419c:	693b      	ldr	r3, [r7, #16]
    419e:	2b00      	cmp	r3, #0
    41a0:	db03      	blt.n	41aa <wait_for_bootrom+0x3a>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    41a2:	2001      	movs	r0, #1
    41a4:	4b2c      	ldr	r3, [pc, #176]	; (4258 <wait_for_bootrom+0xe8>)
    41a6:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    41a8:	e7f2      	b.n	4190 <wait_for_bootrom+0x20>
			break;
    41aa:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    41ac:	4b2b      	ldr	r3, [pc, #172]	; (425c <wait_for_bootrom+0xec>)
    41ae:	0018      	movs	r0, r3
    41b0:	4b28      	ldr	r3, [pc, #160]	; (4254 <wait_for_bootrom+0xe4>)
    41b2:	4798      	blx	r3
    41b4:	0003      	movs	r3, r0
    41b6:	613b      	str	r3, [r7, #16]
	reg &= 0x1;
    41b8:	693b      	ldr	r3, [r7, #16]
    41ba:	2201      	movs	r2, #1
    41bc:	4013      	ands	r3, r2
    41be:	613b      	str	r3, [r7, #16]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    41c0:	693b      	ldr	r3, [r7, #16]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d11c      	bne.n	4200 <wait_for_bootrom+0x90>
	{
		reg = 0;
    41c6:	2300      	movs	r3, #0
    41c8:	613b      	str	r3, [r7, #16]
		while(reg != M2M_FINISH_BOOT_ROM)
    41ca:	e015      	b.n	41f8 <wait_for_bootrom+0x88>
		{
			nm_bsp_sleep(1);
    41cc:	2001      	movs	r0, #1
    41ce:	4b22      	ldr	r3, [pc, #136]	; (4258 <wait_for_bootrom+0xe8>)
    41d0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    41d2:	4b23      	ldr	r3, [pc, #140]	; (4260 <wait_for_bootrom+0xf0>)
    41d4:	0018      	movs	r0, r3
    41d6:	4b1f      	ldr	r3, [pc, #124]	; (4254 <wait_for_bootrom+0xe4>)
    41d8:	4798      	blx	r3
    41da:	0003      	movs	r3, r0
    41dc:	613b      	str	r3, [r7, #16]

			if(++cnt > TIMEOUT)
    41de:	68fb      	ldr	r3, [r7, #12]
    41e0:	3301      	adds	r3, #1
    41e2:	60fb      	str	r3, [r7, #12]
    41e4:	68fa      	ldr	r2, [r7, #12]
    41e6:	23fa      	movs	r3, #250	; 0xfa
    41e8:	00db      	lsls	r3, r3, #3
    41ea:	429a      	cmp	r2, r3
    41ec:	d904      	bls.n	41f8 <wait_for_bootrom+0x88>
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
    41ee:	2317      	movs	r3, #23
    41f0:	18fb      	adds	r3, r7, r3
    41f2:	22fb      	movs	r2, #251	; 0xfb
    41f4:	701a      	strb	r2, [r3, #0]
				goto ERR2;
    41f6:	e023      	b.n	4240 <wait_for_bootrom+0xd0>
		while(reg != M2M_FINISH_BOOT_ROM)
    41f8:	693b      	ldr	r3, [r7, #16]
    41fa:	4a1a      	ldr	r2, [pc, #104]	; (4264 <wait_for_bootrom+0xf4>)
    41fc:	4293      	cmp	r3, r2
    41fe:	d1e5      	bne.n	41cc <wait_for_bootrom+0x5c>
			}
		}
	}

	if(2 == arg) {
    4200:	1dfb      	adds	r3, r7, #7
    4202:	781b      	ldrb	r3, [r3, #0]
    4204:	2b02      	cmp	r3, #2
    4206:	d105      	bne.n	4214 <wait_for_bootrom+0xa4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4208:	4a17      	ldr	r2, [pc, #92]	; (4268 <wait_for_bootrom+0xf8>)
    420a:	4b18      	ldr	r3, [pc, #96]	; (426c <wait_for_bootrom+0xfc>)
    420c:	0011      	movs	r1, r2
    420e:	0018      	movs	r0, r3
    4210:	4b17      	ldr	r3, [pc, #92]	; (4270 <wait_for_bootrom+0x100>)
    4212:	4798      	blx	r3
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    4214:	4b17      	ldr	r3, [pc, #92]	; (4274 <wait_for_bootrom+0x104>)
    4216:	4798      	blx	r3
    4218:	0003      	movs	r3, r0
    421a:	051b      	lsls	r3, r3, #20
    421c:	0d1a      	lsrs	r2, r3, #20
    421e:	23e8      	movs	r3, #232	; 0xe8
    4220:	009b      	lsls	r3, r3, #2
    4222:	429a      	cmp	r2, r3
    4224:	d103      	bne.n	422e <wait_for_bootrom+0xbe>
	{
		chip_apply_conf(rHAVE_USE_PMU_BIT);
    4226:	2002      	movs	r0, #2
    4228:	4b13      	ldr	r3, [pc, #76]	; (4278 <wait_for_bootrom+0x108>)
    422a:	4798      	blx	r3
    422c:	e002      	b.n	4234 <wait_for_bootrom+0xc4>
	}
	else
	{
		chip_apply_conf(0);
    422e:	2000      	movs	r0, #0
    4230:	4b11      	ldr	r3, [pc, #68]	; (4278 <wait_for_bootrom+0x108>)
    4232:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    4234:	4a11      	ldr	r2, [pc, #68]	; (427c <wait_for_bootrom+0x10c>)
    4236:	4b0a      	ldr	r3, [pc, #40]	; (4260 <wait_for_bootrom+0xf0>)
    4238:	0011      	movs	r1, r2
    423a:	0018      	movs	r0, r3
    423c:	4b0c      	ldr	r3, [pc, #48]	; (4270 <wait_for_bootrom+0x100>)
    423e:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    4240:	2317      	movs	r3, #23
    4242:	18fb      	adds	r3, r7, r3
    4244:	781b      	ldrb	r3, [r3, #0]
    4246:	b25b      	sxtb	r3, r3
}
    4248:	0018      	movs	r0, r3
    424a:	46bd      	mov	sp, r7
    424c:	b006      	add	sp, #24
    424e:	bd80      	pop	{r7, pc}
    4250:	00001014 	.word	0x00001014
    4254:	000044d5 	.word	0x000044d5
    4258:	00002771 	.word	0x00002771
    425c:	000207bc 	.word	0x000207bc
    4260:	000c000c 	.word	0x000c000c
    4264:	10add09e 	.word	0x10add09e
    4268:	3c1cd57d 	.word	0x3c1cd57d
    426c:	000207ac 	.word	0x000207ac
    4270:	00004519 	.word	0x00004519
    4274:	000040a5 	.word	0x000040a5
    4278:	00003dd9 	.word	0x00003dd9
    427c:	ef522f61 	.word	0xef522f61

00004280 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    4280:	b580      	push	{r7, lr}
    4282:	b088      	sub	sp, #32
    4284:	af00      	add	r7, sp, #0
    4286:	0002      	movs	r2, r0
    4288:	1dfb      	adds	r3, r7, #7
    428a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    428c:	231f      	movs	r3, #31
    428e:	18fb      	adds	r3, r7, r3
    4290:	2200      	movs	r2, #0
    4292:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    4294:	2300      	movs	r3, #0
    4296:	61bb      	str	r3, [r7, #24]
    4298:	2300      	movs	r3, #0
    429a:	617b      	str	r3, [r7, #20]
	volatile uint32 regAddress = NMI_STATE_REG;
    429c:	4b1b      	ldr	r3, [pc, #108]	; (430c <wait_for_firmware_start+0x8c>)
    429e:	613b      	str	r3, [r7, #16]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    42a0:	4b1b      	ldr	r3, [pc, #108]	; (4310 <wait_for_firmware_start+0x90>)
    42a2:	60fb      	str	r3, [r7, #12]

	if(2 == arg) {
    42a4:	1dfb      	adds	r3, r7, #7
    42a6:	781b      	ldrb	r3, [r3, #0]
    42a8:	2b02      	cmp	r3, #2
    42aa:	d11a      	bne.n	42e2 <wait_for_firmware_start+0x62>
		regAddress = NMI_REV_REG;
    42ac:	4b19      	ldr	r3, [pc, #100]	; (4314 <wait_for_firmware_start+0x94>)
    42ae:	613b      	str	r3, [r7, #16]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    42b0:	4b19      	ldr	r3, [pc, #100]	; (4318 <wait_for_firmware_start+0x98>)
    42b2:	60fb      	str	r3, [r7, #12]
	} else {
		/*bypass this step*/
	}

	while (checkValue != reg)
    42b4:	e015      	b.n	42e2 <wait_for_firmware_start+0x62>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    42b6:	2002      	movs	r0, #2
    42b8:	4b18      	ldr	r3, [pc, #96]	; (431c <wait_for_firmware_start+0x9c>)
    42ba:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    42bc:	693b      	ldr	r3, [r7, #16]
    42be:	0018      	movs	r0, r3
    42c0:	4b17      	ldr	r3, [pc, #92]	; (4320 <wait_for_firmware_start+0xa0>)
    42c2:	4798      	blx	r3
    42c4:	0003      	movs	r3, r0
    42c6:	61bb      	str	r3, [r7, #24]
		if(++cnt > TIMEOUT)
    42c8:	697b      	ldr	r3, [r7, #20]
    42ca:	3301      	adds	r3, #1
    42cc:	617b      	str	r3, [r7, #20]
    42ce:	697a      	ldr	r2, [r7, #20]
    42d0:	23fa      	movs	r3, #250	; 0xfa
    42d2:	00db      	lsls	r3, r3, #3
    42d4:	429a      	cmp	r2, r3
    42d6:	d904      	bls.n	42e2 <wait_for_firmware_start+0x62>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    42d8:	231f      	movs	r3, #31
    42da:	18fb      	adds	r3, r7, r3
    42dc:	22fb      	movs	r2, #251	; 0xfb
    42de:	701a      	strb	r2, [r3, #0]
			goto ERR;
    42e0:	e00c      	b.n	42fc <wait_for_firmware_start+0x7c>
	while (checkValue != reg)
    42e2:	68fa      	ldr	r2, [r7, #12]
    42e4:	69bb      	ldr	r3, [r7, #24]
    42e6:	429a      	cmp	r2, r3
    42e8:	d1e5      	bne.n	42b6 <wait_for_firmware_start+0x36>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	4a08      	ldr	r2, [pc, #32]	; (4310 <wait_for_firmware_start+0x90>)
    42ee:	4293      	cmp	r3, r2
    42f0:	d104      	bne.n	42fc <wait_for_firmware_start+0x7c>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    42f2:	4b06      	ldr	r3, [pc, #24]	; (430c <wait_for_firmware_start+0x8c>)
    42f4:	2100      	movs	r1, #0
    42f6:	0018      	movs	r0, r3
    42f8:	4b0a      	ldr	r3, [pc, #40]	; (4324 <wait_for_firmware_start+0xa4>)
    42fa:	4798      	blx	r3
	}
ERR:
	return ret;
    42fc:	231f      	movs	r3, #31
    42fe:	18fb      	adds	r3, r7, r3
    4300:	781b      	ldrb	r3, [r3, #0]
    4302:	b25b      	sxtb	r3, r3
}
    4304:	0018      	movs	r0, r3
    4306:	46bd      	mov	sp, r7
    4308:	b008      	add	sp, #32
    430a:	bd80      	pop	{r7, pc}
    430c:	0000108c 	.word	0x0000108c
    4310:	02532636 	.word	0x02532636
    4314:	000207ac 	.word	0x000207ac
    4318:	d75dc1c3 	.word	0xd75dc1c3
    431c:	00002771 	.word	0x00002771
    4320:	000044d5 	.word	0x000044d5
    4324:	00004519 	.word	0x00004519

00004328 <chip_deinit>:

sint8 chip_deinit(void)
{
    4328:	b590      	push	{r4, r7, lr}
    432a:	b083      	sub	sp, #12
    432c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    432e:	2300      	movs	r3, #0
    4330:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
    4332:	1dbb      	adds	r3, r7, #6
    4334:	220a      	movs	r2, #10
    4336:	701a      	strb	r2, [r3, #0]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    4338:	1dfc      	adds	r4, r7, #7
    433a:	003a      	movs	r2, r7
    433c:	23a0      	movs	r3, #160	; 0xa0
    433e:	015b      	lsls	r3, r3, #5
    4340:	0011      	movs	r1, r2
    4342:	0018      	movs	r0, r3
    4344:	4b3f      	ldr	r3, [pc, #252]	; (4444 <chip_deinit+0x11c>)
    4346:	4798      	blx	r3
    4348:	0003      	movs	r3, r0
    434a:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    434c:	1dfb      	adds	r3, r7, #7
    434e:	781b      	ldrb	r3, [r3, #0]
    4350:	b25b      	sxtb	r3, r3
    4352:	2b00      	cmp	r3, #0
    4354:	d00c      	beq.n	4370 <chip_deinit+0x48>
		M2M_ERR("failed to de-initialize\n");
    4356:	4a3c      	ldr	r2, [pc, #240]	; (4448 <chip_deinit+0x120>)
    4358:	493c      	ldr	r1, [pc, #240]	; (444c <chip_deinit+0x124>)
    435a:	4b3d      	ldr	r3, [pc, #244]	; (4450 <chip_deinit+0x128>)
    435c:	0018      	movs	r0, r3
    435e:	4b3d      	ldr	r3, [pc, #244]	; (4454 <chip_deinit+0x12c>)
    4360:	4798      	blx	r3
    4362:	4b3d      	ldr	r3, [pc, #244]	; (4458 <chip_deinit+0x130>)
    4364:	0018      	movs	r0, r3
    4366:	4b3d      	ldr	r3, [pc, #244]	; (445c <chip_deinit+0x134>)
    4368:	4798      	blx	r3
    436a:	200d      	movs	r0, #13
    436c:	4b3c      	ldr	r3, [pc, #240]	; (4460 <chip_deinit+0x138>)
    436e:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    4370:	683b      	ldr	r3, [r7, #0]
    4372:	4a3c      	ldr	r2, [pc, #240]	; (4464 <chip_deinit+0x13c>)
    4374:	4013      	ands	r3, r2
    4376:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    4378:	683a      	ldr	r2, [r7, #0]
    437a:	1dfc      	adds	r4, r7, #7
    437c:	23a0      	movs	r3, #160	; 0xa0
    437e:	015b      	lsls	r3, r3, #5
    4380:	0011      	movs	r1, r2
    4382:	0018      	movs	r0, r3
    4384:	4b38      	ldr	r3, [pc, #224]	; (4468 <chip_deinit+0x140>)
    4386:	4798      	blx	r3
    4388:	0003      	movs	r3, r0
    438a:	7023      	strb	r3, [r4, #0]

	if (ret != M2M_SUCCESS) {
    438c:	1dfb      	adds	r3, r7, #7
    438e:	781b      	ldrb	r3, [r3, #0]
    4390:	b25b      	sxtb	r3, r3
    4392:	2b00      	cmp	r3, #0
    4394:	d010      	beq.n	43b8 <chip_deinit+0x90>
		M2M_ERR("Error while writing reg\n");
    4396:	4a35      	ldr	r2, [pc, #212]	; (446c <chip_deinit+0x144>)
    4398:	492c      	ldr	r1, [pc, #176]	; (444c <chip_deinit+0x124>)
    439a:	4b2d      	ldr	r3, [pc, #180]	; (4450 <chip_deinit+0x128>)
    439c:	0018      	movs	r0, r3
    439e:	4b2d      	ldr	r3, [pc, #180]	; (4454 <chip_deinit+0x12c>)
    43a0:	4798      	blx	r3
    43a2:	4b33      	ldr	r3, [pc, #204]	; (4470 <chip_deinit+0x148>)
    43a4:	0018      	movs	r0, r3
    43a6:	4b2d      	ldr	r3, [pc, #180]	; (445c <chip_deinit+0x134>)
    43a8:	4798      	blx	r3
    43aa:	200d      	movs	r0, #13
    43ac:	4b2c      	ldr	r3, [pc, #176]	; (4460 <chip_deinit+0x138>)
    43ae:	4798      	blx	r3
		return ret;
    43b0:	1dfb      	adds	r3, r7, #7
    43b2:	781b      	ldrb	r3, [r3, #0]
    43b4:	b25b      	sxtb	r3, r3
    43b6:	e041      	b.n	443c <chip_deinit+0x114>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    43b8:	1dfc      	adds	r4, r7, #7
    43ba:	003a      	movs	r2, r7
    43bc:	23a0      	movs	r3, #160	; 0xa0
    43be:	015b      	lsls	r3, r3, #5
    43c0:	0011      	movs	r1, r2
    43c2:	0018      	movs	r0, r3
    43c4:	4b1f      	ldr	r3, [pc, #124]	; (4444 <chip_deinit+0x11c>)
    43c6:	4798      	blx	r3
    43c8:	0003      	movs	r3, r0
    43ca:	7023      	strb	r3, [r4, #0]
		if (ret != M2M_SUCCESS) {
    43cc:	1dfb      	adds	r3, r7, #7
    43ce:	781b      	ldrb	r3, [r3, #0]
    43d0:	b25b      	sxtb	r3, r3
    43d2:	2b00      	cmp	r3, #0
    43d4:	d011      	beq.n	43fa <chip_deinit+0xd2>
			M2M_ERR("Error while reading reg\n");
    43d6:	2387      	movs	r3, #135	; 0x87
    43d8:	009a      	lsls	r2, r3, #2
    43da:	491c      	ldr	r1, [pc, #112]	; (444c <chip_deinit+0x124>)
    43dc:	4b1c      	ldr	r3, [pc, #112]	; (4450 <chip_deinit+0x128>)
    43de:	0018      	movs	r0, r3
    43e0:	4b1c      	ldr	r3, [pc, #112]	; (4454 <chip_deinit+0x12c>)
    43e2:	4798      	blx	r3
    43e4:	4b23      	ldr	r3, [pc, #140]	; (4474 <chip_deinit+0x14c>)
    43e6:	0018      	movs	r0, r3
    43e8:	4b1c      	ldr	r3, [pc, #112]	; (445c <chip_deinit+0x134>)
    43ea:	4798      	blx	r3
    43ec:	200d      	movs	r0, #13
    43ee:	4b1c      	ldr	r3, [pc, #112]	; (4460 <chip_deinit+0x138>)
    43f0:	4798      	blx	r3
			return ret;
    43f2:	1dfb      	adds	r3, r7, #7
    43f4:	781b      	ldrb	r3, [r3, #0]
    43f6:	b25b      	sxtb	r3, r3
    43f8:	e020      	b.n	443c <chip_deinit+0x114>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    43fa:	683a      	ldr	r2, [r7, #0]
    43fc:	2380      	movs	r3, #128	; 0x80
    43fe:	00db      	lsls	r3, r3, #3
    4400:	4013      	ands	r3, r2
    4402:	d017      	beq.n	4434 <chip_deinit+0x10c>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    4404:	683b      	ldr	r3, [r7, #0]
    4406:	4a17      	ldr	r2, [pc, #92]	; (4464 <chip_deinit+0x13c>)
    4408:	4013      	ands	r3, r2
    440a:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    440c:	683a      	ldr	r2, [r7, #0]
    440e:	1dfc      	adds	r4, r7, #7
    4410:	23a0      	movs	r3, #160	; 0xa0
    4412:	015b      	lsls	r3, r3, #5
    4414:	0011      	movs	r1, r2
    4416:	0018      	movs	r0, r3
    4418:	4b13      	ldr	r3, [pc, #76]	; (4468 <chip_deinit+0x140>)
    441a:	4798      	blx	r3
    441c:	0003      	movs	r3, r0
    441e:	7023      	strb	r3, [r4, #0]
			timeout--;
    4420:	1dbb      	adds	r3, r7, #6
    4422:	781a      	ldrb	r2, [r3, #0]
    4424:	1dbb      	adds	r3, r7, #6
    4426:	3a01      	subs	r2, #1
    4428:	701a      	strb	r2, [r3, #0]
		} else {
			break;
		}

	} while (timeout);
    442a:	1dbb      	adds	r3, r7, #6
    442c:	781b      	ldrb	r3, [r3, #0]
    442e:	2b00      	cmp	r3, #0
    4430:	d1c2      	bne.n	43b8 <chip_deinit+0x90>
    4432:	e000      	b.n	4436 <chip_deinit+0x10e>
			break;
    4434:	46c0      	nop			; (mov r8, r8)

	return ret;
    4436:	1dfb      	adds	r3, r7, #7
    4438:	781b      	ldrb	r3, [r3, #0]
    443a:	b25b      	sxtb	r3, r3
}
    443c:	0018      	movs	r0, r3
    443e:	46bd      	mov	sp, r7
    4440:	b003      	add	sp, #12
    4442:	bd90      	pop	{r4, r7, pc}
    4444:	000044f5 	.word	0x000044f5
    4448:	0000020f 	.word	0x0000020f
    444c:	00013ed0 	.word	0x00013ed0
    4450:	00013d98 	.word	0x00013d98
    4454:	0001212d 	.word	0x0001212d
    4458:	00013e38 	.word	0x00013e38
    445c:	00012249 	.word	0x00012249
    4460:	00012161 	.word	0x00012161
    4464:	fffffbff 	.word	0xfffffbff
    4468:	00004519 	.word	0x00004519
    446c:	00000215 	.word	0x00000215
    4470:	00013e50 	.word	0x00013e50
    4474:	00013e68 	.word	0x00013e68

00004478 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    4478:	b590      	push	{r4, r7, lr}
    447a:	b085      	sub	sp, #20
    447c:	af00      	add	r7, sp, #0
    447e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    4480:	230f      	movs	r3, #15
    4482:	18fb      	adds	r3, r7, r3
    4484:	2200      	movs	r2, #0
    4486:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    4488:	230f      	movs	r3, #15
    448a:	18fc      	adds	r4, r7, r3
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	0018      	movs	r0, r3
    4490:	4b05      	ldr	r3, [pc, #20]	; (44a8 <nm_bus_iface_init+0x30>)
    4492:	4798      	blx	r3
    4494:	0003      	movs	r3, r0
    4496:	7023      	strb	r3, [r4, #0]

	return ret;
    4498:	230f      	movs	r3, #15
    449a:	18fb      	adds	r3, r7, r3
    449c:	781b      	ldrb	r3, [r3, #0]
    449e:	b25b      	sxtb	r3, r3
}
    44a0:	0018      	movs	r0, r3
    44a2:	46bd      	mov	sp, r7
    44a4:	b005      	add	sp, #20
    44a6:	bd90      	pop	{r4, r7, pc}
    44a8:	00000661 	.word	0x00000661

000044ac <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    44ac:	b590      	push	{r4, r7, lr}
    44ae:	b083      	sub	sp, #12
    44b0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    44b2:	1dfb      	adds	r3, r7, #7
    44b4:	2200      	movs	r2, #0
    44b6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    44b8:	1dfc      	adds	r4, r7, #7
    44ba:	4b05      	ldr	r3, [pc, #20]	; (44d0 <nm_bus_iface_deinit+0x24>)
    44bc:	4798      	blx	r3
    44be:	0003      	movs	r3, r0
    44c0:	7023      	strb	r3, [r4, #0]

	return ret;
    44c2:	1dfb      	adds	r3, r7, #7
    44c4:	781b      	ldrb	r3, [r3, #0]
    44c6:	b25b      	sxtb	r3, r3
}
    44c8:	0018      	movs	r0, r3
    44ca:	46bd      	mov	sp, r7
    44cc:	b003      	add	sp, #12
    44ce:	bd90      	pop	{r4, r7, pc}
    44d0:	000007d9 	.word	0x000007d9

000044d4 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    44d4:	b580      	push	{r7, lr}
    44d6:	b082      	sub	sp, #8
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	0018      	movs	r0, r3
    44e0:	4b03      	ldr	r3, [pc, #12]	; (44f0 <nm_read_reg+0x1c>)
    44e2:	4798      	blx	r3
    44e4:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    44e6:	0018      	movs	r0, r3
    44e8:	46bd      	mov	sp, r7
    44ea:	b002      	add	sp, #8
    44ec:	bd80      	pop	{r7, pc}
    44ee:	46c0      	nop			; (mov r8, r8)
    44f0:	00005bc9 	.word	0x00005bc9

000044f4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    44f4:	b580      	push	{r7, lr}
    44f6:	b082      	sub	sp, #8
    44f8:	af00      	add	r7, sp, #0
    44fa:	6078      	str	r0, [r7, #4]
    44fc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    44fe:	683a      	ldr	r2, [r7, #0]
    4500:	687b      	ldr	r3, [r7, #4]
    4502:	0011      	movs	r1, r2
    4504:	0018      	movs	r0, r3
    4506:	4b03      	ldr	r3, [pc, #12]	; (4514 <nm_read_reg_with_ret+0x20>)
    4508:	4798      	blx	r3
    450a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    450c:	0018      	movs	r0, r3
    450e:	46bd      	mov	sp, r7
    4510:	b002      	add	sp, #8
    4512:	bd80      	pop	{r7, pc}
    4514:	00005bed 	.word	0x00005bed

00004518 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4518:	b580      	push	{r7, lr}
    451a:	b082      	sub	sp, #8
    451c:	af00      	add	r7, sp, #0
    451e:	6078      	str	r0, [r7, #4]
    4520:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    4522:	683a      	ldr	r2, [r7, #0]
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	0011      	movs	r1, r2
    4528:	0018      	movs	r0, r3
    452a:	4b03      	ldr	r3, [pc, #12]	; (4538 <nm_write_reg+0x20>)
    452c:	4798      	blx	r3
    452e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    4530:	0018      	movs	r0, r3
    4532:	46bd      	mov	sp, r7
    4534:	b002      	add	sp, #8
    4536:	bd80      	pop	{r7, pc}
    4538:	00005c3d 	.word	0x00005c3d

0000453c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    453c:	b580      	push	{r7, lr}
    453e:	b084      	sub	sp, #16
    4540:	af00      	add	r7, sp, #0
    4542:	60f8      	str	r0, [r7, #12]
    4544:	60b9      	str	r1, [r7, #8]
    4546:	1dbb      	adds	r3, r7, #6
    4548:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    454a:	1dbb      	adds	r3, r7, #6
    454c:	881a      	ldrh	r2, [r3, #0]
    454e:	68b9      	ldr	r1, [r7, #8]
    4550:	68fb      	ldr	r3, [r7, #12]
    4552:	0018      	movs	r0, r3
    4554:	4b03      	ldr	r3, [pc, #12]	; (4564 <p_nm_read_block+0x28>)
    4556:	4798      	blx	r3
    4558:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    455a:	0018      	movs	r0, r3
    455c:	46bd      	mov	sp, r7
    455e:	b004      	add	sp, #16
    4560:	bd80      	pop	{r7, pc}
    4562:	46c0      	nop			; (mov r8, r8)
    4564:	00005c8d 	.word	0x00005c8d

00004568 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4568:	b580      	push	{r7, lr}
    456a:	b086      	sub	sp, #24
    456c:	af00      	add	r7, sp, #0
    456e:	60f8      	str	r0, [r7, #12]
    4570:	60b9      	str	r1, [r7, #8]
    4572:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    4574:	4b2d      	ldr	r3, [pc, #180]	; (462c <nm_read_block+0xc4>)
    4576:	881a      	ldrh	r2, [r3, #0]
    4578:	2310      	movs	r3, #16
    457a:	18fb      	adds	r3, r7, r3
    457c:	3a08      	subs	r2, #8
    457e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    4580:	2300      	movs	r3, #0
    4582:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    4584:	2313      	movs	r3, #19
    4586:	18fb      	adds	r3, r7, r3
    4588:	2200      	movs	r2, #0
    458a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    458c:	2310      	movs	r3, #16
    458e:	18fb      	adds	r3, r7, r3
    4590:	881a      	ldrh	r2, [r3, #0]
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	429a      	cmp	r2, r3
    4596:	d313      	bcc.n	45c0 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    4598:	68ba      	ldr	r2, [r7, #8]
    459a:	697b      	ldr	r3, [r7, #20]
    459c:	18d1      	adds	r1, r2, r3
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	b29a      	uxth	r2, r3
    45a2:	68fb      	ldr	r3, [r7, #12]
    45a4:	0018      	movs	r0, r3
    45a6:	4b22      	ldr	r3, [pc, #136]	; (4630 <nm_read_block+0xc8>)
    45a8:	4798      	blx	r3
    45aa:	0003      	movs	r3, r0
    45ac:	b2da      	uxtb	r2, r3
    45ae:	2313      	movs	r3, #19
    45b0:	18fb      	adds	r3, r7, r3
    45b2:	781b      	ldrb	r3, [r3, #0]
    45b4:	18d3      	adds	r3, r2, r3
    45b6:	b2da      	uxtb	r2, r3
    45b8:	2313      	movs	r3, #19
    45ba:	18fb      	adds	r3, r7, r3
    45bc:	701a      	strb	r2, [r3, #0]
			break;
    45be:	e02d      	b.n	461c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    45c0:	68ba      	ldr	r2, [r7, #8]
    45c2:	697b      	ldr	r3, [r7, #20]
    45c4:	18d1      	adds	r1, r2, r3
    45c6:	2310      	movs	r3, #16
    45c8:	18fb      	adds	r3, r7, r3
    45ca:	881a      	ldrh	r2, [r3, #0]
    45cc:	68fb      	ldr	r3, [r7, #12]
    45ce:	0018      	movs	r0, r3
    45d0:	4b17      	ldr	r3, [pc, #92]	; (4630 <nm_read_block+0xc8>)
    45d2:	4798      	blx	r3
    45d4:	0003      	movs	r3, r0
    45d6:	b2da      	uxtb	r2, r3
    45d8:	2313      	movs	r3, #19
    45da:	18fb      	adds	r3, r7, r3
    45dc:	781b      	ldrb	r3, [r3, #0]
    45de:	18d3      	adds	r3, r2, r3
    45e0:	b2da      	uxtb	r2, r3
    45e2:	2313      	movs	r3, #19
    45e4:	18fb      	adds	r3, r7, r3
    45e6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    45e8:	2313      	movs	r3, #19
    45ea:	18fb      	adds	r3, r7, r3
    45ec:	781b      	ldrb	r3, [r3, #0]
    45ee:	b25b      	sxtb	r3, r3
    45f0:	2b00      	cmp	r3, #0
    45f2:	d112      	bne.n	461a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    45f4:	2310      	movs	r3, #16
    45f6:	18fb      	adds	r3, r7, r3
    45f8:	881b      	ldrh	r3, [r3, #0]
    45fa:	687a      	ldr	r2, [r7, #4]
    45fc:	1ad3      	subs	r3, r2, r3
    45fe:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    4600:	2310      	movs	r3, #16
    4602:	18fb      	adds	r3, r7, r3
    4604:	881b      	ldrh	r3, [r3, #0]
    4606:	697a      	ldr	r2, [r7, #20]
    4608:	18d3      	adds	r3, r2, r3
    460a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    460c:	2310      	movs	r3, #16
    460e:	18fb      	adds	r3, r7, r3
    4610:	881b      	ldrh	r3, [r3, #0]
    4612:	68fa      	ldr	r2, [r7, #12]
    4614:	18d3      	adds	r3, r2, r3
    4616:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    4618:	e7b8      	b.n	458c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    461a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    461c:	2313      	movs	r3, #19
    461e:	18fb      	adds	r3, r7, r3
    4620:	781b      	ldrb	r3, [r3, #0]
    4622:	b25b      	sxtb	r3, r3
}
    4624:	0018      	movs	r0, r3
    4626:	46bd      	mov	sp, r7
    4628:	b006      	add	sp, #24
    462a:	bd80      	pop	{r7, pc}
    462c:	20000000 	.word	0x20000000
    4630:	0000453d 	.word	0x0000453d

00004634 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4634:	b580      	push	{r7, lr}
    4636:	b084      	sub	sp, #16
    4638:	af00      	add	r7, sp, #0
    463a:	60f8      	str	r0, [r7, #12]
    463c:	60b9      	str	r1, [r7, #8]
    463e:	1dbb      	adds	r3, r7, #6
    4640:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    4642:	1dbb      	adds	r3, r7, #6
    4644:	881a      	ldrh	r2, [r3, #0]
    4646:	68b9      	ldr	r1, [r7, #8]
    4648:	68fb      	ldr	r3, [r7, #12]
    464a:	0018      	movs	r0, r3
    464c:	4b03      	ldr	r3, [pc, #12]	; (465c <p_nm_write_block+0x28>)
    464e:	4798      	blx	r3
    4650:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4652:	0018      	movs	r0, r3
    4654:	46bd      	mov	sp, r7
    4656:	b004      	add	sp, #16
    4658:	bd80      	pop	{r7, pc}
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	00005ce5 	.word	0x00005ce5

00004660 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4660:	b580      	push	{r7, lr}
    4662:	b086      	sub	sp, #24
    4664:	af00      	add	r7, sp, #0
    4666:	60f8      	str	r0, [r7, #12]
    4668:	60b9      	str	r1, [r7, #8]
    466a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    466c:	4b2d      	ldr	r3, [pc, #180]	; (4724 <nm_write_block+0xc4>)
    466e:	881a      	ldrh	r2, [r3, #0]
    4670:	2310      	movs	r3, #16
    4672:	18fb      	adds	r3, r7, r3
    4674:	3a08      	subs	r2, #8
    4676:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    4678:	2300      	movs	r3, #0
    467a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    467c:	2313      	movs	r3, #19
    467e:	18fb      	adds	r3, r7, r3
    4680:	2200      	movs	r2, #0
    4682:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    4684:	2310      	movs	r3, #16
    4686:	18fb      	adds	r3, r7, r3
    4688:	881a      	ldrh	r2, [r3, #0]
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	429a      	cmp	r2, r3
    468e:	d313      	bcc.n	46b8 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    4690:	68ba      	ldr	r2, [r7, #8]
    4692:	697b      	ldr	r3, [r7, #20]
    4694:	18d1      	adds	r1, r2, r3
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	b29a      	uxth	r2, r3
    469a:	68fb      	ldr	r3, [r7, #12]
    469c:	0018      	movs	r0, r3
    469e:	4b22      	ldr	r3, [pc, #136]	; (4728 <nm_write_block+0xc8>)
    46a0:	4798      	blx	r3
    46a2:	0003      	movs	r3, r0
    46a4:	b2da      	uxtb	r2, r3
    46a6:	2313      	movs	r3, #19
    46a8:	18fb      	adds	r3, r7, r3
    46aa:	781b      	ldrb	r3, [r3, #0]
    46ac:	18d3      	adds	r3, r2, r3
    46ae:	b2da      	uxtb	r2, r3
    46b0:	2313      	movs	r3, #19
    46b2:	18fb      	adds	r3, r7, r3
    46b4:	701a      	strb	r2, [r3, #0]
			break;
    46b6:	e02d      	b.n	4714 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    46b8:	68ba      	ldr	r2, [r7, #8]
    46ba:	697b      	ldr	r3, [r7, #20]
    46bc:	18d1      	adds	r1, r2, r3
    46be:	2310      	movs	r3, #16
    46c0:	18fb      	adds	r3, r7, r3
    46c2:	881a      	ldrh	r2, [r3, #0]
    46c4:	68fb      	ldr	r3, [r7, #12]
    46c6:	0018      	movs	r0, r3
    46c8:	4b17      	ldr	r3, [pc, #92]	; (4728 <nm_write_block+0xc8>)
    46ca:	4798      	blx	r3
    46cc:	0003      	movs	r3, r0
    46ce:	b2da      	uxtb	r2, r3
    46d0:	2313      	movs	r3, #19
    46d2:	18fb      	adds	r3, r7, r3
    46d4:	781b      	ldrb	r3, [r3, #0]
    46d6:	18d3      	adds	r3, r2, r3
    46d8:	b2da      	uxtb	r2, r3
    46da:	2313      	movs	r3, #19
    46dc:	18fb      	adds	r3, r7, r3
    46de:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    46e0:	2313      	movs	r3, #19
    46e2:	18fb      	adds	r3, r7, r3
    46e4:	781b      	ldrb	r3, [r3, #0]
    46e6:	b25b      	sxtb	r3, r3
    46e8:	2b00      	cmp	r3, #0
    46ea:	d112      	bne.n	4712 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    46ec:	2310      	movs	r3, #16
    46ee:	18fb      	adds	r3, r7, r3
    46f0:	881b      	ldrh	r3, [r3, #0]
    46f2:	687a      	ldr	r2, [r7, #4]
    46f4:	1ad3      	subs	r3, r2, r3
    46f6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    46f8:	2310      	movs	r3, #16
    46fa:	18fb      	adds	r3, r7, r3
    46fc:	881b      	ldrh	r3, [r3, #0]
    46fe:	697a      	ldr	r2, [r7, #20]
    4700:	18d3      	adds	r3, r2, r3
    4702:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    4704:	2310      	movs	r3, #16
    4706:	18fb      	adds	r3, r7, r3
    4708:	881b      	ldrh	r3, [r3, #0]
    470a:	68fa      	ldr	r2, [r7, #12]
    470c:	18d3      	adds	r3, r2, r3
    470e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    4710:	e7b8      	b.n	4684 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    4712:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    4714:	2313      	movs	r3, #19
    4716:	18fb      	adds	r3, r7, r3
    4718:	781b      	ldrb	r3, [r3, #0]
    471a:	b25b      	sxtb	r3, r3
}
    471c:	0018      	movs	r0, r3
    471e:	46bd      	mov	sp, r7
    4720:	b006      	add	sp, #24
    4722:	bd80      	pop	{r7, pc}
    4724:	20000000 	.word	0x20000000
    4728:	00004635 	.word	0x00004635

0000472c <nm_get_firmware_info>:
*   @author		Ahmad.Mohammad.Yahya
*   @date		27 MARCH 2013
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    472c:	b590      	push	{r4, r7, lr}
    472e:	b087      	sub	sp, #28
    4730:	af00      	add	r7, sp, #0
    4732:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    4734:	2300      	movs	r3, #0
    4736:	60fb      	str	r3, [r7, #12]
	sint8	ret = M2M_SUCCESS;
    4738:	2317      	movs	r3, #23
    473a:	18fb      	adds	r3, r7, r3
    473c:	2200      	movs	r2, #0
    473e:	701a      	strb	r2, [r3, #0]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    4740:	2317      	movs	r3, #23
    4742:	18fc      	adds	r4, r7, r3
    4744:	230c      	movs	r3, #12
    4746:	18fb      	adds	r3, r7, r3
    4748:	4a49      	ldr	r2, [pc, #292]	; (4870 <nm_get_firmware_info+0x144>)
    474a:	0019      	movs	r1, r3
    474c:	0010      	movs	r0, r2
    474e:	4b49      	ldr	r3, [pc, #292]	; (4874 <nm_get_firmware_info+0x148>)
    4750:	4798      	blx	r3
    4752:	0003      	movs	r3, r0
    4754:	7023      	strb	r3, [r4, #0]

	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    4756:	68fb      	ldr	r3, [r7, #12]
    4758:	0c1b      	lsrs	r3, r3, #16
    475a:	b29b      	uxth	r3, r3
    475c:	0a1b      	lsrs	r3, r3, #8
    475e:	b29b      	uxth	r3, r3
    4760:	b2da      	uxtb	r2, r3
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	70da      	strb	r2, [r3, #3]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    4766:	68fb      	ldr	r3, [r7, #12]
    4768:	0c1b      	lsrs	r3, r3, #16
    476a:	b29b      	uxth	r3, r3
    476c:	091b      	lsrs	r3, r3, #4
    476e:	b29b      	uxth	r3, r3
    4770:	b2db      	uxtb	r3, r3
    4772:	220f      	movs	r2, #15
    4774:	4013      	ands	r3, r2
    4776:	b2da      	uxtb	r2, r3
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	711a      	strb	r2, [r3, #4]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    477c:	68fb      	ldr	r3, [r7, #12]
    477e:	0c1b      	lsrs	r3, r3, #16
    4780:	b2db      	uxtb	r3, r3
    4782:	220f      	movs	r2, #15
    4784:	4013      	ands	r3, r2
    4786:	b2da      	uxtb	r2, r3
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	715a      	strb	r2, [r3, #5]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    478c:	68fb      	ldr	r3, [r7, #12]
    478e:	b29b      	uxth	r3, r3
    4790:	0a1b      	lsrs	r3, r3, #8
    4792:	b29b      	uxth	r3, r3
    4794:	b2da      	uxtb	r2, r3
    4796:	687b      	ldr	r3, [r7, #4]
    4798:	701a      	strb	r2, [r3, #0]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    479a:	68fb      	ldr	r3, [r7, #12]
    479c:	b29b      	uxth	r3, r3
    479e:	091b      	lsrs	r3, r3, #4
    47a0:	b29b      	uxth	r3, r3
    47a2:	b2db      	uxtb	r3, r3
    47a4:	220f      	movs	r2, #15
    47a6:	4013      	ands	r3, r2
    47a8:	b2da      	uxtb	r2, r3
    47aa:	687b      	ldr	r3, [r7, #4]
    47ac:	705a      	strb	r2, [r3, #1]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    47ae:	68fb      	ldr	r3, [r7, #12]
    47b0:	b2db      	uxtb	r3, r3
    47b2:	220f      	movs	r2, #15
    47b4:	4013      	ands	r3, r2
    47b6:	b2da      	uxtb	r2, r3
    47b8:	687b      	ldr	r3, [r7, #4]
    47ba:	709a      	strb	r2, [r3, #2]
	M2mRev->u32Chipid	= nmi_get_chipid();
    47bc:	4b2e      	ldr	r3, [pc, #184]	; (4878 <nm_get_firmware_info+0x14c>)
    47be:	4798      	blx	r3
    47c0:	0002      	movs	r2, r0
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	61da      	str	r2, [r3, #28]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    47c6:	687b      	ldr	r3, [r7, #4]
    47c8:	781b      	ldrb	r3, [r3, #0]
    47ca:	021b      	lsls	r3, r3, #8
    47cc:	b21a      	sxth	r2, r3
    47ce:	687b      	ldr	r3, [r7, #4]
    47d0:	785b      	ldrb	r3, [r3, #1]
    47d2:	011b      	lsls	r3, r3, #4
    47d4:	b21b      	sxth	r3, r3
    47d6:	21ff      	movs	r1, #255	; 0xff
    47d8:	400b      	ands	r3, r1
    47da:	b21b      	sxth	r3, r3
    47dc:	4313      	orrs	r3, r2
    47de:	b21a      	sxth	r2, r3
    47e0:	687b      	ldr	r3, [r7, #4]
    47e2:	789b      	ldrb	r3, [r3, #2]
    47e4:	b21b      	sxth	r3, r3
    47e6:	210f      	movs	r1, #15
    47e8:	400b      	ands	r3, r1
    47ea:	b21b      	sxth	r3, r3
    47ec:	4313      	orrs	r3, r2
    47ee:	b21a      	sxth	r2, r3
    47f0:	2314      	movs	r3, #20
    47f2:	18fb      	adds	r3, r7, r3
    47f4:	801a      	strh	r2, [r3, #0]
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    47f6:	2312      	movs	r3, #18
    47f8:	18fb      	adds	r3, r7, r3
    47fa:	4a20      	ldr	r2, [pc, #128]	; (487c <nm_get_firmware_info+0x150>)
    47fc:	801a      	strh	r2, [r3, #0]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    47fe:	687b      	ldr	r3, [r7, #4]
    4800:	78db      	ldrb	r3, [r3, #3]
    4802:	021b      	lsls	r3, r3, #8
    4804:	b21a      	sxth	r2, r3
    4806:	687b      	ldr	r3, [r7, #4]
    4808:	791b      	ldrb	r3, [r3, #4]
    480a:	011b      	lsls	r3, r3, #4
    480c:	b21b      	sxth	r3, r3
    480e:	21ff      	movs	r1, #255	; 0xff
    4810:	400b      	ands	r3, r1
    4812:	b21b      	sxth	r3, r3
    4814:	4313      	orrs	r3, r2
    4816:	b21a      	sxth	r2, r3
    4818:	687b      	ldr	r3, [r7, #4]
    481a:	795b      	ldrb	r3, [r3, #5]
    481c:	b21b      	sxth	r3, r3
    481e:	210f      	movs	r1, #15
    4820:	400b      	ands	r3, r1
    4822:	b21b      	sxth	r3, r3
    4824:	4313      	orrs	r3, r2
    4826:	b21a      	sxth	r2, r3
    4828:	2310      	movs	r3, #16
    482a:	18fb      	adds	r3, r7, r3
    482c:	801a      	strh	r2, [r3, #0]
	if(curr_drv_ver <  min_req_drv_ver) {
    482e:	2312      	movs	r3, #18
    4830:	18fa      	adds	r2, r7, r3
    4832:	2310      	movs	r3, #16
    4834:	18fb      	adds	r3, r7, r3
    4836:	8812      	ldrh	r2, [r2, #0]
    4838:	881b      	ldrh	r3, [r3, #0]
    483a:	429a      	cmp	r2, r3
    483c:	d203      	bcs.n	4846 <nm_get_firmware_info+0x11a>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    483e:	2317      	movs	r3, #23
    4840:	18fb      	adds	r3, r7, r3
    4842:	22f3      	movs	r2, #243	; 0xf3
    4844:	701a      	strb	r2, [r3, #0]
	}
	if(curr_drv_ver >  curr_firm_ver) {
    4846:	2312      	movs	r3, #18
    4848:	18fa      	adds	r2, r7, r3
    484a:	2314      	movs	r3, #20
    484c:	18fb      	adds	r3, r7, r3
    484e:	8812      	ldrh	r2, [r2, #0]
    4850:	881b      	ldrh	r3, [r3, #0]
    4852:	429a      	cmp	r2, r3
    4854:	d903      	bls.n	485e <nm_get_firmware_info+0x132>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    4856:	2317      	movs	r3, #23
    4858:	18fb      	adds	r3, r7, r3
    485a:	22f3      	movs	r2, #243	; 0xf3
    485c:	701a      	strb	r2, [r3, #0]
	}
	return ret;
    485e:	2317      	movs	r3, #23
    4860:	18fb      	adds	r3, r7, r3
    4862:	781b      	ldrb	r3, [r3, #0]
    4864:	b25b      	sxtb	r3, r3
}
    4866:	0018      	movs	r0, r3
    4868:	46bd      	mov	sp, r7
    486a:	b007      	add	sp, #28
    486c:	bd90      	pop	{r4, r7, pc}
    486e:	46c0      	nop			; (mov r8, r8)
    4870:	000207ac 	.word	0x000207ac
    4874:	000044f5 	.word	0x000044f5
    4878:	000040a5 	.word	0x000040a5
    487c:	00001352 	.word	0x00001352

00004880 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    4880:	b590      	push	{r4, r7, lr}
    4882:	b08d      	sub	sp, #52	; 0x34
    4884:	af00      	add	r7, sp, #0
    4886:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    4888:	232f      	movs	r3, #47	; 0x2f
    488a:	18fb      	adds	r3, r7, r3
    488c:	2200      	movs	r2, #0
    488e:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
    4890:	232e      	movs	r3, #46	; 0x2e
    4892:	18fb      	adds	r3, r7, r3
    4894:	2201      	movs	r2, #1
    4896:	701a      	strb	r2, [r3, #0]
	
	if(NULL != arg) {
    4898:	687b      	ldr	r3, [r7, #4]
    489a:	2b00      	cmp	r3, #0
    489c:	d007      	beq.n	48ae <nm_drv_init+0x2e>
		if(M2M_WIFI_MODE_CONFIG == *((uint8 *)arg)) {
    489e:	687b      	ldr	r3, [r7, #4]
    48a0:	781b      	ldrb	r3, [r3, #0]
    48a2:	2b02      	cmp	r3, #2
    48a4:	d103      	bne.n	48ae <nm_drv_init+0x2e>
			u8Mode = M2M_WIFI_MODE_CONFIG;
    48a6:	232e      	movs	r3, #46	; 0x2e
    48a8:	18fb      	adds	r3, r7, r3
    48aa:	2202      	movs	r2, #2
    48ac:	701a      	strb	r2, [r3, #0]
		}
	} else {
		/*continue running*/
	}
	
	ret = nm_bus_iface_init(NULL);
    48ae:	232f      	movs	r3, #47	; 0x2f
    48b0:	18fc      	adds	r4, r7, r3
    48b2:	2000      	movs	r0, #0
    48b4:	4b6c      	ldr	r3, [pc, #432]	; (4a68 <nm_drv_init+0x1e8>)
    48b6:	4798      	blx	r3
    48b8:	0003      	movs	r3, r0
    48ba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    48bc:	232f      	movs	r3, #47	; 0x2f
    48be:	18fb      	adds	r3, r7, r3
    48c0:	781b      	ldrb	r3, [r3, #0]
    48c2:	b25b      	sxtb	r3, r3
    48c4:	2b00      	cmp	r3, #0
    48c6:	d00d      	beq.n	48e4 <nm_drv_init+0x64>
		M2M_ERR("[nmi start]: fail init bus\n");
    48c8:	4968      	ldr	r1, [pc, #416]	; (4a6c <nm_drv_init+0x1ec>)
    48ca:	4b69      	ldr	r3, [pc, #420]	; (4a70 <nm_drv_init+0x1f0>)
    48cc:	22a0      	movs	r2, #160	; 0xa0
    48ce:	0018      	movs	r0, r3
    48d0:	4b68      	ldr	r3, [pc, #416]	; (4a74 <nm_drv_init+0x1f4>)
    48d2:	4798      	blx	r3
    48d4:	4b68      	ldr	r3, [pc, #416]	; (4a78 <nm_drv_init+0x1f8>)
    48d6:	0018      	movs	r0, r3
    48d8:	4b68      	ldr	r3, [pc, #416]	; (4a7c <nm_drv_init+0x1fc>)
    48da:	4798      	blx	r3
    48dc:	200d      	movs	r0, #13
    48de:	4b68      	ldr	r3, [pc, #416]	; (4a80 <nm_drv_init+0x200>)
    48e0:	4798      	blx	r3
		goto ERR1;
    48e2:	e0b9      	b.n	4a58 <nm_drv_init+0x1d8>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    48e4:	4b67      	ldr	r3, [pc, #412]	; (4a84 <nm_drv_init+0x204>)
    48e6:	0018      	movs	r0, r3
    48e8:	4b62      	ldr	r3, [pc, #392]	; (4a74 <nm_drv_init+0x1f4>)
    48ea:	4798      	blx	r3
    48ec:	4b66      	ldr	r3, [pc, #408]	; (4a88 <nm_drv_init+0x208>)
    48ee:	4798      	blx	r3
    48f0:	0002      	movs	r2, r0
    48f2:	4b66      	ldr	r3, [pc, #408]	; (4a8c <nm_drv_init+0x20c>)
    48f4:	0011      	movs	r1, r2
    48f6:	0018      	movs	r0, r3
    48f8:	4b5e      	ldr	r3, [pc, #376]	; (4a74 <nm_drv_init+0x1f4>)
    48fa:	4798      	blx	r3
    48fc:	200d      	movs	r0, #13
    48fe:	4b60      	ldr	r3, [pc, #384]	; (4a80 <nm_drv_init+0x200>)
    4900:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    4902:	4b63      	ldr	r3, [pc, #396]	; (4a90 <nm_drv_init+0x210>)
    4904:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    4906:	232f      	movs	r3, #47	; 0x2f
    4908:	18fc      	adds	r4, r7, r3
    490a:	232e      	movs	r3, #46	; 0x2e
    490c:	18fb      	adds	r3, r7, r3
    490e:	781b      	ldrb	r3, [r3, #0]
    4910:	0018      	movs	r0, r3
    4912:	4b60      	ldr	r3, [pc, #384]	; (4a94 <nm_drv_init+0x214>)
    4914:	4798      	blx	r3
    4916:	0003      	movs	r3, r0
    4918:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    491a:	232f      	movs	r3, #47	; 0x2f
    491c:	18fb      	adds	r3, r7, r3
    491e:	781b      	ldrb	r3, [r3, #0]
    4920:	b25b      	sxtb	r3, r3
    4922:	2b00      	cmp	r3, #0
    4924:	d000      	beq.n	4928 <nm_drv_init+0xa8>
    4926:	e090      	b.n	4a4a <nm_drv_init+0x1ca>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    4928:	232f      	movs	r3, #47	; 0x2f
    492a:	18fc      	adds	r4, r7, r3
    492c:	232e      	movs	r3, #46	; 0x2e
    492e:	18fb      	adds	r3, r7, r3
    4930:	781b      	ldrb	r3, [r3, #0]
    4932:	0018      	movs	r0, r3
    4934:	4b58      	ldr	r3, [pc, #352]	; (4a98 <nm_drv_init+0x218>)
    4936:	4798      	blx	r3
    4938:	0003      	movs	r3, r0
    493a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    493c:	232f      	movs	r3, #47	; 0x2f
    493e:	18fb      	adds	r3, r7, r3
    4940:	781b      	ldrb	r3, [r3, #0]
    4942:	b25b      	sxtb	r3, r3
    4944:	2b00      	cmp	r3, #0
    4946:	d000      	beq.n	494a <nm_drv_init+0xca>
    4948:	e081      	b.n	4a4e <nm_drv_init+0x1ce>
		goto ERR2;
	}
	
	if(M2M_WIFI_MODE_CONFIG == u8Mode) {
    494a:	232e      	movs	r3, #46	; 0x2e
    494c:	18fb      	adds	r3, r7, r3
    494e:	781b      	ldrb	r3, [r3, #0]
    4950:	2b02      	cmp	r3, #2
    4952:	d100      	bne.n	4956 <nm_drv_init+0xd6>
    4954:	e07f      	b.n	4a56 <nm_drv_init+0x1d6>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    4956:	232f      	movs	r3, #47	; 0x2f
    4958:	18fc      	adds	r4, r7, r3
    495a:	4b50      	ldr	r3, [pc, #320]	; (4a9c <nm_drv_init+0x21c>)
    495c:	4798      	blx	r3
    495e:	0003      	movs	r3, r0
    4960:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4962:	232f      	movs	r3, #47	; 0x2f
    4964:	18fb      	adds	r3, r7, r3
    4966:	781b      	ldrb	r3, [r3, #0]
    4968:	b25b      	sxtb	r3, r3
    496a:	2b00      	cmp	r3, #0
    496c:	d00d      	beq.n	498a <nm_drv_init+0x10a>
		M2M_ERR("failed to enable interrupts..\n");
    496e:	493f      	ldr	r1, [pc, #252]	; (4a6c <nm_drv_init+0x1ec>)
    4970:	4b3f      	ldr	r3, [pc, #252]	; (4a70 <nm_drv_init+0x1f0>)
    4972:	22d8      	movs	r2, #216	; 0xd8
    4974:	0018      	movs	r0, r3
    4976:	4b3f      	ldr	r3, [pc, #252]	; (4a74 <nm_drv_init+0x1f4>)
    4978:	4798      	blx	r3
    497a:	4b49      	ldr	r3, [pc, #292]	; (4aa0 <nm_drv_init+0x220>)
    497c:	0018      	movs	r0, r3
    497e:	4b3f      	ldr	r3, [pc, #252]	; (4a7c <nm_drv_init+0x1fc>)
    4980:	4798      	blx	r3
    4982:	200d      	movs	r0, #13
    4984:	4b3e      	ldr	r3, [pc, #248]	; (4a80 <nm_drv_init+0x200>)
    4986:	4798      	blx	r3
		goto ERR2;
    4988:	e062      	b.n	4a50 <nm_drv_init+0x1d0>
	}
	
	ret = nm_get_firmware_info(&strtmp);
    498a:	232f      	movs	r3, #47	; 0x2f
    498c:	18fc      	adds	r4, r7, r3
    498e:	230c      	movs	r3, #12
    4990:	18fb      	adds	r3, r7, r3
    4992:	0018      	movs	r0, r3
    4994:	4b43      	ldr	r3, [pc, #268]	; (4aa4 <nm_drv_init+0x224>)
    4996:	4798      	blx	r3
    4998:	0003      	movs	r3, r0
    499a:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    499c:	4b39      	ldr	r3, [pc, #228]	; (4a84 <nm_drv_init+0x204>)
    499e:	0018      	movs	r0, r3
    49a0:	4b34      	ldr	r3, [pc, #208]	; (4a74 <nm_drv_init+0x1f4>)
    49a2:	4798      	blx	r3
    49a4:	230c      	movs	r3, #12
    49a6:	18fb      	adds	r3, r7, r3
    49a8:	781b      	ldrb	r3, [r3, #0]
    49aa:	0019      	movs	r1, r3
    49ac:	230c      	movs	r3, #12
    49ae:	18fb      	adds	r3, r7, r3
    49b0:	785b      	ldrb	r3, [r3, #1]
    49b2:	001a      	movs	r2, r3
    49b4:	230c      	movs	r3, #12
    49b6:	18fb      	adds	r3, r7, r3
    49b8:	789b      	ldrb	r3, [r3, #2]
    49ba:	483b      	ldr	r0, [pc, #236]	; (4aa8 <nm_drv_init+0x228>)
    49bc:	4c2d      	ldr	r4, [pc, #180]	; (4a74 <nm_drv_init+0x1f4>)
    49be:	47a0      	blx	r4
    49c0:	200d      	movs	r0, #13
    49c2:	4b2f      	ldr	r3, [pc, #188]	; (4a80 <nm_drv_init+0x200>)
    49c4:	4798      	blx	r3
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    49c6:	4b2f      	ldr	r3, [pc, #188]	; (4a84 <nm_drv_init+0x204>)
    49c8:	0018      	movs	r0, r3
    49ca:	4b2a      	ldr	r3, [pc, #168]	; (4a74 <nm_drv_init+0x1f4>)
    49cc:	4798      	blx	r3
    49ce:	230c      	movs	r3, #12
    49d0:	18fb      	adds	r3, r7, r3
    49d2:	78db      	ldrb	r3, [r3, #3]
    49d4:	0019      	movs	r1, r3
    49d6:	230c      	movs	r3, #12
    49d8:	18fb      	adds	r3, r7, r3
    49da:	791b      	ldrb	r3, [r3, #4]
    49dc:	001a      	movs	r2, r3
    49de:	230c      	movs	r3, #12
    49e0:	18fb      	adds	r3, r7, r3
    49e2:	795b      	ldrb	r3, [r3, #5]
    49e4:	4831      	ldr	r0, [pc, #196]	; (4aac <nm_drv_init+0x22c>)
    49e6:	4c23      	ldr	r4, [pc, #140]	; (4a74 <nm_drv_init+0x1f4>)
    49e8:	47a0      	blx	r4
    49ea:	200d      	movs	r0, #13
    49ec:	4b24      	ldr	r3, [pc, #144]	; (4a80 <nm_drv_init+0x200>)
    49ee:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    49f0:	4b24      	ldr	r3, [pc, #144]	; (4a84 <nm_drv_init+0x204>)
    49f2:	0018      	movs	r0, r3
    49f4:	4b1f      	ldr	r3, [pc, #124]	; (4a74 <nm_drv_init+0x1f4>)
    49f6:	4798      	blx	r3
    49f8:	482d      	ldr	r0, [pc, #180]	; (4ab0 <nm_drv_init+0x230>)
    49fa:	2302      	movs	r3, #2
    49fc:	2205      	movs	r2, #5
    49fe:	2113      	movs	r1, #19
    4a00:	4c1c      	ldr	r4, [pc, #112]	; (4a74 <nm_drv_init+0x1f4>)
    4a02:	47a0      	blx	r4
    4a04:	200d      	movs	r0, #13
    4a06:	4b1e      	ldr	r3, [pc, #120]	; (4a80 <nm_drv_init+0x200>)
    4a08:	4798      	blx	r3

	if(strtmp.u8FirmwareMajor != M2M_DRIVER_VERSION_MAJOR_NO
    4a0a:	230c      	movs	r3, #12
    4a0c:	18fb      	adds	r3, r7, r3
    4a0e:	781b      	ldrb	r3, [r3, #0]
    4a10:	2b13      	cmp	r3, #19
    4a12:	d104      	bne.n	4a1e <nm_drv_init+0x19e>
			|| strtmp.u8FirmwareMinor != M2M_DRIVER_VERSION_MINOR_NO)
    4a14:	230c      	movs	r3, #12
    4a16:	18fb      	adds	r3, r7, r3
    4a18:	785b      	ldrb	r3, [r3, #1]
    4a1a:	2b05      	cmp	r3, #5
    4a1c:	d010      	beq.n	4a40 <nm_drv_init+0x1c0>
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
    4a1e:	232f      	movs	r3, #47	; 0x2f
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	22f3      	movs	r2, #243	; 0xf3
    4a24:	701a      	strb	r2, [r3, #0]
		M2M_ERR("Firmware version mismatch!\n");
    4a26:	4911      	ldr	r1, [pc, #68]	; (4a6c <nm_drv_init+0x1ec>)
    4a28:	4b11      	ldr	r3, [pc, #68]	; (4a70 <nm_drv_init+0x1f0>)
    4a2a:	22e6      	movs	r2, #230	; 0xe6
    4a2c:	0018      	movs	r0, r3
    4a2e:	4b11      	ldr	r3, [pc, #68]	; (4a74 <nm_drv_init+0x1f4>)
    4a30:	4798      	blx	r3
    4a32:	4b20      	ldr	r3, [pc, #128]	; (4ab4 <nm_drv_init+0x234>)
    4a34:	0018      	movs	r0, r3
    4a36:	4b11      	ldr	r3, [pc, #68]	; (4a7c <nm_drv_init+0x1fc>)
    4a38:	4798      	blx	r3
    4a3a:	200d      	movs	r0, #13
    4a3c:	4b10      	ldr	r3, [pc, #64]	; (4a80 <nm_drv_init+0x200>)
    4a3e:	4798      	blx	r3
	}
	return ret;
    4a40:	232f      	movs	r3, #47	; 0x2f
    4a42:	18fb      	adds	r3, r7, r3
    4a44:	781b      	ldrb	r3, [r3, #0]
    4a46:	b25b      	sxtb	r3, r3
    4a48:	e00a      	b.n	4a60 <nm_drv_init+0x1e0>
		goto ERR2;
    4a4a:	46c0      	nop			; (mov r8, r8)
    4a4c:	e000      	b.n	4a50 <nm_drv_init+0x1d0>
		goto ERR2;
    4a4e:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    4a50:	4b19      	ldr	r3, [pc, #100]	; (4ab8 <nm_drv_init+0x238>)
    4a52:	4798      	blx	r3
    4a54:	e000      	b.n	4a58 <nm_drv_init+0x1d8>
		goto ERR1;
    4a56:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    4a58:	232f      	movs	r3, #47	; 0x2f
    4a5a:	18fb      	adds	r3, r7, r3
    4a5c:	781b      	ldrb	r3, [r3, #0]
    4a5e:	b25b      	sxtb	r3, r3
}
    4a60:	0018      	movs	r0, r3
    4a62:	46bd      	mov	sp, r7
    4a64:	b00d      	add	sp, #52	; 0x34
    4a66:	bd90      	pop	{r4, r7, pc}
    4a68:	00004479 	.word	0x00004479
    4a6c:	00013ff4 	.word	0x00013ff4
    4a70:	00013edc 	.word	0x00013edc
    4a74:	0001212d 	.word	0x0001212d
    4a78:	00013ef0 	.word	0x00013ef0
    4a7c:	00012249 	.word	0x00012249
    4a80:	00012161 	.word	0x00012161
    4a84:	00013f0c 	.word	0x00013f0c
    4a88:	000040a5 	.word	0x000040a5
    4a8c:	00013f18 	.word	0x00013f18
    4a90:	00005a65 	.word	0x00005a65
    4a94:	00004171 	.word	0x00004171
    4a98:	00004281 	.word	0x00004281
    4a9c:	00003fe9 	.word	0x00003fe9
    4aa0:	00013f28 	.word	0x00013f28
    4aa4:	0000472d 	.word	0x0000472d
    4aa8:	00013f48 	.word	0x00013f48
    4aac:	00013f64 	.word	0x00013f64
    4ab0:	00013f80 	.word	0x00013f80
    4ab4:	00013f9c 	.word	0x00013f9c
    4ab8:	000044ad 	.word	0x000044ad

00004abc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    4abc:	b590      	push	{r4, r7, lr}
    4abe:	b085      	sub	sp, #20
    4ac0:	af00      	add	r7, sp, #0
    4ac2:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    4ac4:	230f      	movs	r3, #15
    4ac6:	18fc      	adds	r4, r7, r3
    4ac8:	4b1e      	ldr	r3, [pc, #120]	; (4b44 <nm_drv_deinit+0x88>)
    4aca:	4798      	blx	r3
    4acc:	0003      	movs	r3, r0
    4ace:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4ad0:	230f      	movs	r3, #15
    4ad2:	18fb      	adds	r3, r7, r3
    4ad4:	781b      	ldrb	r3, [r3, #0]
    4ad6:	b25b      	sxtb	r3, r3
    4ad8:	2b00      	cmp	r3, #0
    4ada:	d00d      	beq.n	4af8 <nm_drv_deinit+0x3c>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    4adc:	491a      	ldr	r1, [pc, #104]	; (4b48 <nm_drv_deinit+0x8c>)
    4ade:	4b1b      	ldr	r3, [pc, #108]	; (4b4c <nm_drv_deinit+0x90>)
    4ae0:	22fc      	movs	r2, #252	; 0xfc
    4ae2:	0018      	movs	r0, r3
    4ae4:	4b1a      	ldr	r3, [pc, #104]	; (4b50 <nm_drv_deinit+0x94>)
    4ae6:	4798      	blx	r3
    4ae8:	4b1a      	ldr	r3, [pc, #104]	; (4b54 <nm_drv_deinit+0x98>)
    4aea:	0018      	movs	r0, r3
    4aec:	4b1a      	ldr	r3, [pc, #104]	; (4b58 <nm_drv_deinit+0x9c>)
    4aee:	4798      	blx	r3
    4af0:	200d      	movs	r0, #13
    4af2:	4b1a      	ldr	r3, [pc, #104]	; (4b5c <nm_drv_deinit+0xa0>)
    4af4:	4798      	blx	r3
		goto ERR1;
    4af6:	e01c      	b.n	4b32 <nm_drv_deinit+0x76>
	}

	ret = nm_bus_iface_deinit();
    4af8:	230f      	movs	r3, #15
    4afa:	18fc      	adds	r4, r7, r3
    4afc:	4b18      	ldr	r3, [pc, #96]	; (4b60 <nm_drv_deinit+0xa4>)
    4afe:	4798      	blx	r3
    4b00:	0003      	movs	r3, r0
    4b02:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4b04:	230f      	movs	r3, #15
    4b06:	18fb      	adds	r3, r7, r3
    4b08:	781b      	ldrb	r3, [r3, #0]
    4b0a:	b25b      	sxtb	r3, r3
    4b0c:	2b00      	cmp	r3, #0
    4b0e:	d00e      	beq.n	4b2e <nm_drv_deinit+0x72>
		M2M_ERR("[nmi stop]: fail init bus\n");
    4b10:	2381      	movs	r3, #129	; 0x81
    4b12:	005a      	lsls	r2, r3, #1
    4b14:	490c      	ldr	r1, [pc, #48]	; (4b48 <nm_drv_deinit+0x8c>)
    4b16:	4b0d      	ldr	r3, [pc, #52]	; (4b4c <nm_drv_deinit+0x90>)
    4b18:	0018      	movs	r0, r3
    4b1a:	4b0d      	ldr	r3, [pc, #52]	; (4b50 <nm_drv_deinit+0x94>)
    4b1c:	4798      	blx	r3
    4b1e:	4b11      	ldr	r3, [pc, #68]	; (4b64 <nm_drv_deinit+0xa8>)
    4b20:	0018      	movs	r0, r3
    4b22:	4b0d      	ldr	r3, [pc, #52]	; (4b58 <nm_drv_deinit+0x9c>)
    4b24:	4798      	blx	r3
    4b26:	200d      	movs	r0, #13
    4b28:	4b0c      	ldr	r3, [pc, #48]	; (4b5c <nm_drv_deinit+0xa0>)
    4b2a:	4798      	blx	r3
		goto ERR1;
    4b2c:	e001      	b.n	4b32 <nm_drv_deinit+0x76>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    4b2e:	4b0e      	ldr	r3, [pc, #56]	; (4b68 <nm_drv_deinit+0xac>)
    4b30:	4798      	blx	r3
#endif

ERR1:
	return ret;
    4b32:	230f      	movs	r3, #15
    4b34:	18fb      	adds	r3, r7, r3
    4b36:	781b      	ldrb	r3, [r3, #0]
    4b38:	b25b      	sxtb	r3, r3
}
    4b3a:	0018      	movs	r0, r3
    4b3c:	46bd      	mov	sp, r7
    4b3e:	b005      	add	sp, #20
    4b40:	bd90      	pop	{r4, r7, pc}
    4b42:	46c0      	nop			; (mov r8, r8)
    4b44:	00004329 	.word	0x00004329
    4b48:	00014000 	.word	0x00014000
    4b4c:	00013edc 	.word	0x00013edc
    4b50:	0001212d 	.word	0x0001212d
    4b54:	00013fb8 	.word	0x00013fb8
    4b58:	00012249 	.word	0x00012249
    4b5c:	00012161 	.word	0x00012161
    4b60:	000044ad 	.word	0x000044ad
    4b64:	00013fd8 	.word	0x00013fd8
    4b68:	00005bb1 	.word	0x00005bb1

00004b6c <nmi_spi_read>:
#endif

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    4b6c:	b580      	push	{r7, lr}
    4b6e:	b086      	sub	sp, #24
    4b70:	af00      	add	r7, sp, #0
    4b72:	6078      	str	r0, [r7, #4]
    4b74:	000a      	movs	r2, r1
    4b76:	1cbb      	adds	r3, r7, #2
    4b78:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    4b7a:	230c      	movs	r3, #12
    4b7c:	18fb      	adds	r3, r7, r3
    4b7e:	2200      	movs	r2, #0
    4b80:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    4b82:	230c      	movs	r3, #12
    4b84:	18fb      	adds	r3, r7, r3
    4b86:	687a      	ldr	r2, [r7, #4]
    4b88:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    4b8a:	230c      	movs	r3, #12
    4b8c:	18fb      	adds	r3, r7, r3
    4b8e:	1cba      	adds	r2, r7, #2
    4b90:	8812      	ldrh	r2, [r2, #0]
    4b92:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4b94:	230c      	movs	r3, #12
    4b96:	18fb      	adds	r3, r7, r3
    4b98:	0019      	movs	r1, r3
    4b9a:	2003      	movs	r0, #3
    4b9c:	4b03      	ldr	r3, [pc, #12]	; (4bac <nmi_spi_read+0x40>)
    4b9e:	4798      	blx	r3
    4ba0:	0003      	movs	r3, r0
}
    4ba2:	0018      	movs	r0, r3
    4ba4:	46bd      	mov	sp, r7
    4ba6:	b006      	add	sp, #24
    4ba8:	bd80      	pop	{r7, pc}
    4baa:	46c0      	nop			; (mov r8, r8)
    4bac:	00000749 	.word	0x00000749

00004bb0 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    4bb0:	b580      	push	{r7, lr}
    4bb2:	b086      	sub	sp, #24
    4bb4:	af00      	add	r7, sp, #0
    4bb6:	6078      	str	r0, [r7, #4]
    4bb8:	000a      	movs	r2, r1
    4bba:	1cbb      	adds	r3, r7, #2
    4bbc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    4bbe:	230c      	movs	r3, #12
    4bc0:	18fb      	adds	r3, r7, r3
    4bc2:	687a      	ldr	r2, [r7, #4]
    4bc4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    4bc6:	230c      	movs	r3, #12
    4bc8:	18fb      	adds	r3, r7, r3
    4bca:	2200      	movs	r2, #0
    4bcc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    4bce:	230c      	movs	r3, #12
    4bd0:	18fb      	adds	r3, r7, r3
    4bd2:	1cba      	adds	r2, r7, #2
    4bd4:	8812      	ldrh	r2, [r2, #0]
    4bd6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4bd8:	230c      	movs	r3, #12
    4bda:	18fb      	adds	r3, r7, r3
    4bdc:	0019      	movs	r1, r3
    4bde:	2003      	movs	r0, #3
    4be0:	4b03      	ldr	r3, [pc, #12]	; (4bf0 <nmi_spi_write+0x40>)
    4be2:	4798      	blx	r3
    4be4:	0003      	movs	r3, r0
}
    4be6:	0018      	movs	r0, r3
    4be8:	46bd      	mov	sp, r7
    4bea:	b006      	add	sp, #24
    4bec:	bd80      	pop	{r7, pc}
    4bee:	46c0      	nop			; (mov r8, r8)
    4bf0:	00000749 	.word	0x00000749

00004bf4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b082      	sub	sp, #8
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	0002      	movs	r2, r0
    4bfc:	1dfb      	adds	r3, r7, #7
    4bfe:	701a      	strb	r2, [r3, #0]
    4c00:	1dbb      	adds	r3, r7, #6
    4c02:	1c0a      	adds	r2, r1, #0
    4c04:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    4c06:	1dfb      	adds	r3, r7, #7
    4c08:	781b      	ldrb	r3, [r3, #0]
    4c0a:	005a      	lsls	r2, r3, #1
    4c0c:	1dbb      	adds	r3, r7, #6
    4c0e:	781b      	ldrb	r3, [r3, #0]
    4c10:	4053      	eors	r3, r2
    4c12:	4a03      	ldr	r2, [pc, #12]	; (4c20 <crc7_byte+0x2c>)
    4c14:	5cd3      	ldrb	r3, [r2, r3]
}
    4c16:	0018      	movs	r0, r3
    4c18:	46bd      	mov	sp, r7
    4c1a:	b002      	add	sp, #8
    4c1c:	bd80      	pop	{r7, pc}
    4c1e:	46c0      	nop			; (mov r8, r8)
    4c20:	00014010 	.word	0x00014010

00004c24 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    4c24:	b590      	push	{r4, r7, lr}
    4c26:	b085      	sub	sp, #20
    4c28:	af00      	add	r7, sp, #0
    4c2a:	60b9      	str	r1, [r7, #8]
    4c2c:	607a      	str	r2, [r7, #4]
    4c2e:	230f      	movs	r3, #15
    4c30:	18fb      	adds	r3, r7, r3
    4c32:	1c02      	adds	r2, r0, #0
    4c34:	701a      	strb	r2, [r3, #0]
	while (len--)
    4c36:	e00e      	b.n	4c56 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    4c38:	68bb      	ldr	r3, [r7, #8]
    4c3a:	1c5a      	adds	r2, r3, #1
    4c3c:	60ba      	str	r2, [r7, #8]
    4c3e:	781a      	ldrb	r2, [r3, #0]
    4c40:	230f      	movs	r3, #15
    4c42:	18fc      	adds	r4, r7, r3
    4c44:	230f      	movs	r3, #15
    4c46:	18fb      	adds	r3, r7, r3
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	0011      	movs	r1, r2
    4c4c:	0018      	movs	r0, r3
    4c4e:	4b08      	ldr	r3, [pc, #32]	; (4c70 <crc7+0x4c>)
    4c50:	4798      	blx	r3
    4c52:	0003      	movs	r3, r0
    4c54:	7023      	strb	r3, [r4, #0]
	while (len--)
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	1e5a      	subs	r2, r3, #1
    4c5a:	607a      	str	r2, [r7, #4]
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	d1eb      	bne.n	4c38 <crc7+0x14>
	return crc;
    4c60:	230f      	movs	r3, #15
    4c62:	18fb      	adds	r3, r7, r3
    4c64:	781b      	ldrb	r3, [r3, #0]
}
    4c66:	0018      	movs	r0, r3
    4c68:	46bd      	mov	sp, r7
    4c6a:	b005      	add	sp, #20
    4c6c:	bd90      	pop	{r4, r7, pc}
    4c6e:	46c0      	nop			; (mov r8, r8)
    4c70:	00004bf5 	.word	0x00004bf5

00004c74 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    4c74:	b590      	push	{r4, r7, lr}
    4c76:	b089      	sub	sp, #36	; 0x24
    4c78:	af00      	add	r7, sp, #0
    4c7a:	60b9      	str	r1, [r7, #8]
    4c7c:	607a      	str	r2, [r7, #4]
    4c7e:	603b      	str	r3, [r7, #0]
    4c80:	230f      	movs	r3, #15
    4c82:	18fb      	adds	r3, r7, r3
    4c84:	1c02      	adds	r2, r0, #0
    4c86:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    4c88:	231f      	movs	r3, #31
    4c8a:	18fb      	adds	r3, r7, r3
    4c8c:	2205      	movs	r2, #5
    4c8e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    4c90:	231e      	movs	r3, #30
    4c92:	18fb      	adds	r3, r7, r3
    4c94:	2201      	movs	r2, #1
    4c96:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    4c98:	2314      	movs	r3, #20
    4c9a:	18fb      	adds	r3, r7, r3
    4c9c:	220f      	movs	r2, #15
    4c9e:	18ba      	adds	r2, r7, r2
    4ca0:	7812      	ldrb	r2, [r2, #0]
    4ca2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    4ca4:	230f      	movs	r3, #15
    4ca6:	18fb      	adds	r3, r7, r3
    4ca8:	781b      	ldrb	r3, [r3, #0]
    4caa:	3bc1      	subs	r3, #193	; 0xc1
    4cac:	2b0e      	cmp	r3, #14
    4cae:	d900      	bls.n	4cb2 <spi_cmd+0x3e>
    4cb0:	e11b      	b.n	4eea <spi_cmd+0x276>
    4cb2:	009a      	lsls	r2, r3, #2
    4cb4:	4bb6      	ldr	r3, [pc, #728]	; (4f90 <spi_cmd+0x31c>)
    4cb6:	18d3      	adds	r3, r2, r3
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    4cbc:	68bb      	ldr	r3, [r7, #8]
    4cbe:	0c1b      	lsrs	r3, r3, #16
    4cc0:	b2da      	uxtb	r2, r3
    4cc2:	2314      	movs	r3, #20
    4cc4:	18fb      	adds	r3, r7, r3
    4cc6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4cc8:	68bb      	ldr	r3, [r7, #8]
    4cca:	0a1b      	lsrs	r3, r3, #8
    4ccc:	b2da      	uxtb	r2, r3
    4cce:	2314      	movs	r3, #20
    4cd0:	18fb      	adds	r3, r7, r3
    4cd2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    4cd4:	68bb      	ldr	r3, [r7, #8]
    4cd6:	b2da      	uxtb	r2, r3
    4cd8:	2314      	movs	r3, #20
    4cda:	18fb      	adds	r3, r7, r3
    4cdc:	70da      	strb	r2, [r3, #3]
		len = 5;
    4cde:	231f      	movs	r3, #31
    4ce0:	18fb      	adds	r3, r7, r3
    4ce2:	2205      	movs	r2, #5
    4ce4:	701a      	strb	r2, [r3, #0]
		break;
    4ce6:	e105      	b.n	4ef4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    4ce8:	68bb      	ldr	r3, [r7, #8]
    4cea:	0a1b      	lsrs	r3, r3, #8
    4cec:	b2da      	uxtb	r2, r3
    4cee:	2314      	movs	r3, #20
    4cf0:	18fb      	adds	r3, r7, r3
    4cf2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    4cf4:	2330      	movs	r3, #48	; 0x30
    4cf6:	18fb      	adds	r3, r7, r3
    4cf8:	781b      	ldrb	r3, [r3, #0]
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d009      	beq.n	4d12 <spi_cmd+0x9e>
    4cfe:	2314      	movs	r3, #20
    4d00:	18fb      	adds	r3, r7, r3
    4d02:	785b      	ldrb	r3, [r3, #1]
    4d04:	2280      	movs	r2, #128	; 0x80
    4d06:	4252      	negs	r2, r2
    4d08:	4313      	orrs	r3, r2
    4d0a:	b2da      	uxtb	r2, r3
    4d0c:	2314      	movs	r3, #20
    4d0e:	18fb      	adds	r3, r7, r3
    4d10:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    4d12:	68bb      	ldr	r3, [r7, #8]
    4d14:	b2da      	uxtb	r2, r3
    4d16:	2314      	movs	r3, #20
    4d18:	18fb      	adds	r3, r7, r3
    4d1a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    4d1c:	2314      	movs	r3, #20
    4d1e:	18fb      	adds	r3, r7, r3
    4d20:	2200      	movs	r2, #0
    4d22:	70da      	strb	r2, [r3, #3]
		len = 5;
    4d24:	231f      	movs	r3, #31
    4d26:	18fb      	adds	r3, r7, r3
    4d28:	2205      	movs	r2, #5
    4d2a:	701a      	strb	r2, [r3, #0]
		break;
    4d2c:	e0e2      	b.n	4ef4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    4d2e:	2314      	movs	r3, #20
    4d30:	18fb      	adds	r3, r7, r3
    4d32:	2200      	movs	r2, #0
    4d34:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    4d36:	2314      	movs	r3, #20
    4d38:	18fb      	adds	r3, r7, r3
    4d3a:	2200      	movs	r2, #0
    4d3c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    4d3e:	2314      	movs	r3, #20
    4d40:	18fb      	adds	r3, r7, r3
    4d42:	2200      	movs	r2, #0
    4d44:	70da      	strb	r2, [r3, #3]
		len = 5;
    4d46:	231f      	movs	r3, #31
    4d48:	18fb      	adds	r3, r7, r3
    4d4a:	2205      	movs	r2, #5
    4d4c:	701a      	strb	r2, [r3, #0]
		break;
    4d4e:	e0d1      	b.n	4ef4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    4d50:	2314      	movs	r3, #20
    4d52:	18fb      	adds	r3, r7, r3
    4d54:	2200      	movs	r2, #0
    4d56:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    4d58:	2314      	movs	r3, #20
    4d5a:	18fb      	adds	r3, r7, r3
    4d5c:	2200      	movs	r2, #0
    4d5e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    4d60:	2314      	movs	r3, #20
    4d62:	18fb      	adds	r3, r7, r3
    4d64:	2200      	movs	r2, #0
    4d66:	70da      	strb	r2, [r3, #3]
		len = 5;
    4d68:	231f      	movs	r3, #31
    4d6a:	18fb      	adds	r3, r7, r3
    4d6c:	2205      	movs	r2, #5
    4d6e:	701a      	strb	r2, [r3, #0]
		break;
    4d70:	e0c0      	b.n	4ef4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    4d72:	2314      	movs	r3, #20
    4d74:	18fb      	adds	r3, r7, r3
    4d76:	22ff      	movs	r2, #255	; 0xff
    4d78:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    4d7a:	2314      	movs	r3, #20
    4d7c:	18fb      	adds	r3, r7, r3
    4d7e:	22ff      	movs	r2, #255	; 0xff
    4d80:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    4d82:	2314      	movs	r3, #20
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	22ff      	movs	r2, #255	; 0xff
    4d88:	70da      	strb	r2, [r3, #3]
		len = 5;
    4d8a:	231f      	movs	r3, #31
    4d8c:	18fb      	adds	r3, r7, r3
    4d8e:	2205      	movs	r2, #5
    4d90:	701a      	strb	r2, [r3, #0]
		break;
    4d92:	e0af      	b.n	4ef4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    4d94:	68bb      	ldr	r3, [r7, #8]
    4d96:	0c1b      	lsrs	r3, r3, #16
    4d98:	b2da      	uxtb	r2, r3
    4d9a:	2314      	movs	r3, #20
    4d9c:	18fb      	adds	r3, r7, r3
    4d9e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4da0:	68bb      	ldr	r3, [r7, #8]
    4da2:	0a1b      	lsrs	r3, r3, #8
    4da4:	b2da      	uxtb	r2, r3
    4da6:	2314      	movs	r3, #20
    4da8:	18fb      	adds	r3, r7, r3
    4daa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    4dac:	68bb      	ldr	r3, [r7, #8]
    4dae:	b2da      	uxtb	r2, r3
    4db0:	2314      	movs	r3, #20
    4db2:	18fb      	adds	r3, r7, r3
    4db4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    4db6:	683b      	ldr	r3, [r7, #0]
    4db8:	0a1b      	lsrs	r3, r3, #8
    4dba:	b2da      	uxtb	r2, r3
    4dbc:	2314      	movs	r3, #20
    4dbe:	18fb      	adds	r3, r7, r3
    4dc0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    4dc2:	683b      	ldr	r3, [r7, #0]
    4dc4:	b2da      	uxtb	r2, r3
    4dc6:	2314      	movs	r3, #20
    4dc8:	18fb      	adds	r3, r7, r3
    4dca:	715a      	strb	r2, [r3, #5]
		len = 7;
    4dcc:	231f      	movs	r3, #31
    4dce:	18fb      	adds	r3, r7, r3
    4dd0:	2207      	movs	r2, #7
    4dd2:	701a      	strb	r2, [r3, #0]
		break;
    4dd4:	e08e      	b.n	4ef4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    4dd6:	68bb      	ldr	r3, [r7, #8]
    4dd8:	0c1b      	lsrs	r3, r3, #16
    4dda:	b2da      	uxtb	r2, r3
    4ddc:	2314      	movs	r3, #20
    4dde:	18fb      	adds	r3, r7, r3
    4de0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4de2:	68bb      	ldr	r3, [r7, #8]
    4de4:	0a1b      	lsrs	r3, r3, #8
    4de6:	b2da      	uxtb	r2, r3
    4de8:	2314      	movs	r3, #20
    4dea:	18fb      	adds	r3, r7, r3
    4dec:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    4dee:	68bb      	ldr	r3, [r7, #8]
    4df0:	b2da      	uxtb	r2, r3
    4df2:	2314      	movs	r3, #20
    4df4:	18fb      	adds	r3, r7, r3
    4df6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    4df8:	683b      	ldr	r3, [r7, #0]
    4dfa:	0c1b      	lsrs	r3, r3, #16
    4dfc:	b2da      	uxtb	r2, r3
    4dfe:	2314      	movs	r3, #20
    4e00:	18fb      	adds	r3, r7, r3
    4e02:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    4e04:	683b      	ldr	r3, [r7, #0]
    4e06:	0a1b      	lsrs	r3, r3, #8
    4e08:	b2da      	uxtb	r2, r3
    4e0a:	2314      	movs	r3, #20
    4e0c:	18fb      	adds	r3, r7, r3
    4e0e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    4e10:	683b      	ldr	r3, [r7, #0]
    4e12:	b2da      	uxtb	r2, r3
    4e14:	2314      	movs	r3, #20
    4e16:	18fb      	adds	r3, r7, r3
    4e18:	719a      	strb	r2, [r3, #6]
		len = 8;
    4e1a:	231f      	movs	r3, #31
    4e1c:	18fb      	adds	r3, r7, r3
    4e1e:	2208      	movs	r2, #8
    4e20:	701a      	strb	r2, [r3, #0]
		break;
    4e22:	e067      	b.n	4ef4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    4e24:	68bb      	ldr	r3, [r7, #8]
    4e26:	0a1b      	lsrs	r3, r3, #8
    4e28:	b2da      	uxtb	r2, r3
    4e2a:	2314      	movs	r3, #20
    4e2c:	18fb      	adds	r3, r7, r3
    4e2e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    4e30:	2330      	movs	r3, #48	; 0x30
    4e32:	18fb      	adds	r3, r7, r3
    4e34:	781b      	ldrb	r3, [r3, #0]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d009      	beq.n	4e4e <spi_cmd+0x1da>
    4e3a:	2314      	movs	r3, #20
    4e3c:	18fb      	adds	r3, r7, r3
    4e3e:	785b      	ldrb	r3, [r3, #1]
    4e40:	2280      	movs	r2, #128	; 0x80
    4e42:	4252      	negs	r2, r2
    4e44:	4313      	orrs	r3, r2
    4e46:	b2da      	uxtb	r2, r3
    4e48:	2314      	movs	r3, #20
    4e4a:	18fb      	adds	r3, r7, r3
    4e4c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    4e4e:	68bb      	ldr	r3, [r7, #8]
    4e50:	b2da      	uxtb	r2, r3
    4e52:	2314      	movs	r3, #20
    4e54:	18fb      	adds	r3, r7, r3
    4e56:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    4e58:	687b      	ldr	r3, [r7, #4]
    4e5a:	0e1b      	lsrs	r3, r3, #24
    4e5c:	b2da      	uxtb	r2, r3
    4e5e:	2314      	movs	r3, #20
    4e60:	18fb      	adds	r3, r7, r3
    4e62:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	0c1b      	lsrs	r3, r3, #16
    4e68:	b2da      	uxtb	r2, r3
    4e6a:	2314      	movs	r3, #20
    4e6c:	18fb      	adds	r3, r7, r3
    4e6e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	0a1b      	lsrs	r3, r3, #8
    4e74:	b2da      	uxtb	r2, r3
    4e76:	2314      	movs	r3, #20
    4e78:	18fb      	adds	r3, r7, r3
    4e7a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	b2da      	uxtb	r2, r3
    4e80:	2314      	movs	r3, #20
    4e82:	18fb      	adds	r3, r7, r3
    4e84:	719a      	strb	r2, [r3, #6]
		len = 8;
    4e86:	231f      	movs	r3, #31
    4e88:	18fb      	adds	r3, r7, r3
    4e8a:	2208      	movs	r2, #8
    4e8c:	701a      	strb	r2, [r3, #0]
		break;
    4e8e:	e031      	b.n	4ef4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    4e90:	68bb      	ldr	r3, [r7, #8]
    4e92:	0c1b      	lsrs	r3, r3, #16
    4e94:	b2da      	uxtb	r2, r3
    4e96:	2314      	movs	r3, #20
    4e98:	18fb      	adds	r3, r7, r3
    4e9a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4e9c:	68bb      	ldr	r3, [r7, #8]
    4e9e:	0a1b      	lsrs	r3, r3, #8
    4ea0:	b2da      	uxtb	r2, r3
    4ea2:	2314      	movs	r3, #20
    4ea4:	18fb      	adds	r3, r7, r3
    4ea6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    4ea8:	68bb      	ldr	r3, [r7, #8]
    4eaa:	b2da      	uxtb	r2, r3
    4eac:	2314      	movs	r3, #20
    4eae:	18fb      	adds	r3, r7, r3
    4eb0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	0e1b      	lsrs	r3, r3, #24
    4eb6:	b2da      	uxtb	r2, r3
    4eb8:	2314      	movs	r3, #20
    4eba:	18fb      	adds	r3, r7, r3
    4ebc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    4ebe:	687b      	ldr	r3, [r7, #4]
    4ec0:	0c1b      	lsrs	r3, r3, #16
    4ec2:	b2da      	uxtb	r2, r3
    4ec4:	2314      	movs	r3, #20
    4ec6:	18fb      	adds	r3, r7, r3
    4ec8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    4eca:	687b      	ldr	r3, [r7, #4]
    4ecc:	0a1b      	lsrs	r3, r3, #8
    4ece:	b2da      	uxtb	r2, r3
    4ed0:	2314      	movs	r3, #20
    4ed2:	18fb      	adds	r3, r7, r3
    4ed4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	b2da      	uxtb	r2, r3
    4eda:	2314      	movs	r3, #20
    4edc:	18fb      	adds	r3, r7, r3
    4ede:	71da      	strb	r2, [r3, #7]
		len = 9;
    4ee0:	231f      	movs	r3, #31
    4ee2:	18fb      	adds	r3, r7, r3
    4ee4:	2209      	movs	r2, #9
    4ee6:	701a      	strb	r2, [r3, #0]
		break;
    4ee8:	e004      	b.n	4ef4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    4eea:	231e      	movs	r3, #30
    4eec:	18fb      	adds	r3, r7, r3
    4eee:	2200      	movs	r2, #0
    4ef0:	701a      	strb	r2, [r3, #0]
		break;
    4ef2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    4ef4:	231e      	movs	r3, #30
    4ef6:	18fb      	adds	r3, r7, r3
    4ef8:	781b      	ldrb	r3, [r3, #0]
    4efa:	b25b      	sxtb	r3, r3
    4efc:	2b00      	cmp	r3, #0
    4efe:	d03e      	beq.n	4f7e <spi_cmd+0x30a>
		if (!gu8Crc_off)
    4f00:	4b24      	ldr	r3, [pc, #144]	; (4f94 <spi_cmd+0x320>)
    4f02:	781b      	ldrb	r3, [r3, #0]
    4f04:	2b00      	cmp	r3, #0
    4f06:	d115      	bne.n	4f34 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    4f08:	231f      	movs	r3, #31
    4f0a:	18fb      	adds	r3, r7, r3
    4f0c:	781b      	ldrb	r3, [r3, #0]
    4f0e:	1e5c      	subs	r4, r3, #1
    4f10:	231f      	movs	r3, #31
    4f12:	18fb      	adds	r3, r7, r3
    4f14:	781b      	ldrb	r3, [r3, #0]
    4f16:	3b01      	subs	r3, #1
    4f18:	001a      	movs	r2, r3
    4f1a:	2314      	movs	r3, #20
    4f1c:	18fb      	adds	r3, r7, r3
    4f1e:	0019      	movs	r1, r3
    4f20:	207f      	movs	r0, #127	; 0x7f
    4f22:	4b1d      	ldr	r3, [pc, #116]	; (4f98 <spi_cmd+0x324>)
    4f24:	4798      	blx	r3
    4f26:	0003      	movs	r3, r0
    4f28:	18db      	adds	r3, r3, r3
    4f2a:	b2da      	uxtb	r2, r3
    4f2c:	2314      	movs	r3, #20
    4f2e:	18fb      	adds	r3, r7, r3
    4f30:	551a      	strb	r2, [r3, r4]
    4f32:	e006      	b.n	4f42 <spi_cmd+0x2ce>
		else
			len-=1;
    4f34:	231f      	movs	r3, #31
    4f36:	18fb      	adds	r3, r7, r3
    4f38:	221f      	movs	r2, #31
    4f3a:	18ba      	adds	r2, r7, r2
    4f3c:	7812      	ldrb	r2, [r2, #0]
    4f3e:	3a01      	subs	r2, #1
    4f40:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    4f42:	231f      	movs	r3, #31
    4f44:	18fb      	adds	r3, r7, r3
    4f46:	781b      	ldrb	r3, [r3, #0]
    4f48:	b29a      	uxth	r2, r3
    4f4a:	2314      	movs	r3, #20
    4f4c:	18fb      	adds	r3, r7, r3
    4f4e:	0011      	movs	r1, r2
    4f50:	0018      	movs	r0, r3
    4f52:	4b12      	ldr	r3, [pc, #72]	; (4f9c <spi_cmd+0x328>)
    4f54:	4798      	blx	r3
    4f56:	1e03      	subs	r3, r0, #0
    4f58:	d011      	beq.n	4f7e <spi_cmd+0x30a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    4f5a:	2390      	movs	r3, #144	; 0x90
    4f5c:	005a      	lsls	r2, r3, #1
    4f5e:	4910      	ldr	r1, [pc, #64]	; (4fa0 <spi_cmd+0x32c>)
    4f60:	4b10      	ldr	r3, [pc, #64]	; (4fa4 <spi_cmd+0x330>)
    4f62:	0018      	movs	r0, r3
    4f64:	4b10      	ldr	r3, [pc, #64]	; (4fa8 <spi_cmd+0x334>)
    4f66:	4798      	blx	r3
    4f68:	4b10      	ldr	r3, [pc, #64]	; (4fac <spi_cmd+0x338>)
    4f6a:	0018      	movs	r0, r3
    4f6c:	4b10      	ldr	r3, [pc, #64]	; (4fb0 <spi_cmd+0x33c>)
    4f6e:	4798      	blx	r3
    4f70:	200d      	movs	r0, #13
    4f72:	4b10      	ldr	r3, [pc, #64]	; (4fb4 <spi_cmd+0x340>)
    4f74:	4798      	blx	r3
			result = N_FAIL;
    4f76:	231e      	movs	r3, #30
    4f78:	18fb      	adds	r3, r7, r3
    4f7a:	2200      	movs	r2, #0
    4f7c:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    4f7e:	231e      	movs	r3, #30
    4f80:	18fb      	adds	r3, r7, r3
    4f82:	781b      	ldrb	r3, [r3, #0]
    4f84:	b25b      	sxtb	r3, r3
}
    4f86:	0018      	movs	r0, r3
    4f88:	46bd      	mov	sp, r7
    4f8a:	b009      	add	sp, #36	; 0x24
    4f8c:	bd90      	pop	{r4, r7, pc}
    4f8e:	46c0      	nop			; (mov r8, r8)
    4f90:	000145c8 	.word	0x000145c8
    4f94:	20000298 	.word	0x20000298
    4f98:	00004c25 	.word	0x00004c25
    4f9c:	00004bb1 	.word	0x00004bb1
    4fa0:	00014604 	.word	0x00014604
    4fa4:	00014110 	.word	0x00014110
    4fa8:	0001212d 	.word	0x0001212d
    4fac:	00014124 	.word	0x00014124
    4fb0:	00012249 	.word	0x00012249
    4fb4:	00012161 	.word	0x00012161

00004fb8 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    4fb8:	b580      	push	{r7, lr}
    4fba:	b084      	sub	sp, #16
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	0002      	movs	r2, r0
    4fc0:	1dfb      	adds	r3, r7, #7
    4fc2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    4fc4:	230f      	movs	r3, #15
    4fc6:	18fb      	adds	r3, r7, r3
    4fc8:	2201      	movs	r2, #1
    4fca:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    4fcc:	1dfb      	adds	r3, r7, #7
    4fce:	781b      	ldrb	r3, [r3, #0]
    4fd0:	2bcf      	cmp	r3, #207	; 0xcf
    4fd2:	d007      	beq.n	4fe4 <spi_cmd_rsp+0x2c>
    4fd4:	1dfb      	adds	r3, r7, #7
    4fd6:	781b      	ldrb	r3, [r3, #0]
    4fd8:	2bc5      	cmp	r3, #197	; 0xc5
    4fda:	d003      	beq.n	4fe4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    4fdc:	1dfb      	adds	r3, r7, #7
    4fde:	781b      	ldrb	r3, [r3, #0]
    4fe0:	2bc6      	cmp	r3, #198	; 0xc6
    4fe2:	d10c      	bne.n	4ffe <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    4fe4:	230d      	movs	r3, #13
    4fe6:	18fb      	adds	r3, r7, r3
    4fe8:	2101      	movs	r1, #1
    4fea:	0018      	movs	r0, r3
    4fec:	4b3a      	ldr	r3, [pc, #232]	; (50d8 <spi_cmd_rsp+0x120>)
    4fee:	4798      	blx	r3
    4ff0:	1e03      	subs	r3, r0, #0
    4ff2:	d004      	beq.n	4ffe <spi_cmd_rsp+0x46>
			result = N_FAIL;
    4ff4:	230f      	movs	r3, #15
    4ff6:	18fb      	adds	r3, r7, r3
    4ff8:	2200      	movs	r2, #0
    4ffa:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    4ffc:	e063      	b.n	50c6 <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    4ffe:	230e      	movs	r3, #14
    5000:	18fb      	adds	r3, r7, r3
    5002:	220a      	movs	r2, #10
    5004:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5006:	230d      	movs	r3, #13
    5008:	18fb      	adds	r3, r7, r3
    500a:	2101      	movs	r1, #1
    500c:	0018      	movs	r0, r3
    500e:	4b32      	ldr	r3, [pc, #200]	; (50d8 <spi_cmd_rsp+0x120>)
    5010:	4798      	blx	r3
    5012:	1e03      	subs	r3, r0, #0
    5014:	d013      	beq.n	503e <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    5016:	2340      	movs	r3, #64	; 0x40
    5018:	33ff      	adds	r3, #255	; 0xff
    501a:	001a      	movs	r2, r3
    501c:	492f      	ldr	r1, [pc, #188]	; (50dc <spi_cmd_rsp+0x124>)
    501e:	4b30      	ldr	r3, [pc, #192]	; (50e0 <spi_cmd_rsp+0x128>)
    5020:	0018      	movs	r0, r3
    5022:	4b30      	ldr	r3, [pc, #192]	; (50e4 <spi_cmd_rsp+0x12c>)
    5024:	4798      	blx	r3
    5026:	4b30      	ldr	r3, [pc, #192]	; (50e8 <spi_cmd_rsp+0x130>)
    5028:	0018      	movs	r0, r3
    502a:	4b30      	ldr	r3, [pc, #192]	; (50ec <spi_cmd_rsp+0x134>)
    502c:	4798      	blx	r3
    502e:	200d      	movs	r0, #13
    5030:	4b2f      	ldr	r3, [pc, #188]	; (50f0 <spi_cmd_rsp+0x138>)
    5032:	4798      	blx	r3
			result = N_FAIL;
    5034:	230f      	movs	r3, #15
    5036:	18fb      	adds	r3, r7, r3
    5038:	2200      	movs	r2, #0
    503a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    503c:	e043      	b.n	50c6 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    503e:	230d      	movs	r3, #13
    5040:	18fb      	adds	r3, r7, r3
    5042:	781b      	ldrb	r3, [r3, #0]
    5044:	1dfa      	adds	r2, r7, #7
    5046:	7812      	ldrb	r2, [r2, #0]
    5048:	429a      	cmp	r2, r3
    504a:	d00b      	beq.n	5064 <spi_cmd_rsp+0xac>
    504c:	230e      	movs	r3, #14
    504e:	18fb      	adds	r3, r7, r3
    5050:	781b      	ldrb	r3, [r3, #0]
    5052:	b25b      	sxtb	r3, r3
    5054:	b2da      	uxtb	r2, r3
    5056:	3a01      	subs	r2, #1
    5058:	b2d1      	uxtb	r1, r2
    505a:	220e      	movs	r2, #14
    505c:	18ba      	adds	r2, r7, r2
    505e:	7011      	strb	r1, [r2, #0]
    5060:	2b00      	cmp	r3, #0
    5062:	dcd0      	bgt.n	5006 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    5064:	230e      	movs	r3, #14
    5066:	18fb      	adds	r3, r7, r3
    5068:	220a      	movs	r2, #10
    506a:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    506c:	230d      	movs	r3, #13
    506e:	18fb      	adds	r3, r7, r3
    5070:	2101      	movs	r1, #1
    5072:	0018      	movs	r0, r3
    5074:	4b18      	ldr	r3, [pc, #96]	; (50d8 <spi_cmd_rsp+0x120>)
    5076:	4798      	blx	r3
    5078:	1e03      	subs	r3, r0, #0
    507a:	d013      	beq.n	50a4 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    507c:	234e      	movs	r3, #78	; 0x4e
    507e:	33ff      	adds	r3, #255	; 0xff
    5080:	001a      	movs	r2, r3
    5082:	4916      	ldr	r1, [pc, #88]	; (50dc <spi_cmd_rsp+0x124>)
    5084:	4b16      	ldr	r3, [pc, #88]	; (50e0 <spi_cmd_rsp+0x128>)
    5086:	0018      	movs	r0, r3
    5088:	4b16      	ldr	r3, [pc, #88]	; (50e4 <spi_cmd_rsp+0x12c>)
    508a:	4798      	blx	r3
    508c:	4b16      	ldr	r3, [pc, #88]	; (50e8 <spi_cmd_rsp+0x130>)
    508e:	0018      	movs	r0, r3
    5090:	4b16      	ldr	r3, [pc, #88]	; (50ec <spi_cmd_rsp+0x134>)
    5092:	4798      	blx	r3
    5094:	200d      	movs	r0, #13
    5096:	4b16      	ldr	r3, [pc, #88]	; (50f0 <spi_cmd_rsp+0x138>)
    5098:	4798      	blx	r3
			result = N_FAIL;
    509a:	230f      	movs	r3, #15
    509c:	18fb      	adds	r3, r7, r3
    509e:	2200      	movs	r2, #0
    50a0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    50a2:	e010      	b.n	50c6 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    50a4:	230d      	movs	r3, #13
    50a6:	18fb      	adds	r3, r7, r3
    50a8:	781b      	ldrb	r3, [r3, #0]
    50aa:	2b00      	cmp	r3, #0
    50ac:	d00b      	beq.n	50c6 <spi_cmd_rsp+0x10e>
    50ae:	230e      	movs	r3, #14
    50b0:	18fb      	adds	r3, r7, r3
    50b2:	781b      	ldrb	r3, [r3, #0]
    50b4:	b25b      	sxtb	r3, r3
    50b6:	b2da      	uxtb	r2, r3
    50b8:	3a01      	subs	r2, #1
    50ba:	b2d1      	uxtb	r1, r2
    50bc:	220e      	movs	r2, #14
    50be:	18ba      	adds	r2, r7, r2
    50c0:	7011      	strb	r1, [r2, #0]
    50c2:	2b00      	cmp	r3, #0
    50c4:	dcd2      	bgt.n	506c <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    50c6:	230f      	movs	r3, #15
    50c8:	18fb      	adds	r3, r7, r3
    50ca:	781b      	ldrb	r3, [r3, #0]
    50cc:	b25b      	sxtb	r3, r3
}
    50ce:	0018      	movs	r0, r3
    50d0:	46bd      	mov	sp, r7
    50d2:	b004      	add	sp, #16
    50d4:	bd80      	pop	{r7, pc}
    50d6:	46c0      	nop			; (mov r8, r8)
    50d8:	00004b6d 	.word	0x00004b6d
    50dc:	0001460c 	.word	0x0001460c
    50e0:	00014110 	.word	0x00014110
    50e4:	0001212d 	.word	0x0001212d
    50e8:	00014150 	.word	0x00014150
    50ec:	00012249 	.word	0x00012249
    50f0:	00012161 	.word	0x00012161

000050f4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    50f4:	b580      	push	{r7, lr}
    50f6:	b086      	sub	sp, #24
    50f8:	af00      	add	r7, sp, #0
    50fa:	6078      	str	r0, [r7, #4]
    50fc:	0008      	movs	r0, r1
    50fe:	0011      	movs	r1, r2
    5100:	1cbb      	adds	r3, r7, #2
    5102:	1c02      	adds	r2, r0, #0
    5104:	801a      	strh	r2, [r3, #0]
    5106:	1c7b      	adds	r3, r7, #1
    5108:	1c0a      	adds	r2, r1, #0
    510a:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    510c:	2311      	movs	r3, #17
    510e:	18fb      	adds	r3, r7, r3
    5110:	2201      	movs	r2, #1
    5112:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    5114:	2314      	movs	r3, #20
    5116:	18fb      	adds	r3, r7, r3
    5118:	2200      	movs	r2, #0
    511a:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    511c:	1cbb      	adds	r3, r7, #2
    511e:	881a      	ldrh	r2, [r3, #0]
    5120:	2380      	movs	r3, #128	; 0x80
    5122:	019b      	lsls	r3, r3, #6
    5124:	429a      	cmp	r2, r3
    5126:	d805      	bhi.n	5134 <spi_data_read+0x40>
			nbytes = sz;
    5128:	2312      	movs	r3, #18
    512a:	18fb      	adds	r3, r7, r3
    512c:	1cba      	adds	r2, r7, #2
    512e:	8812      	ldrh	r2, [r2, #0]
    5130:	801a      	strh	r2, [r3, #0]
    5132:	e004      	b.n	513e <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    5134:	2312      	movs	r3, #18
    5136:	18fb      	adds	r3, r7, r3
    5138:	2280      	movs	r2, #128	; 0x80
    513a:	0192      	lsls	r2, r2, #6
    513c:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    513e:	2316      	movs	r3, #22
    5140:	18fb      	adds	r3, r7, r3
    5142:	220a      	movs	r2, #10
    5144:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5146:	230b      	movs	r3, #11
    5148:	18fb      	adds	r3, r7, r3
    514a:	2101      	movs	r1, #1
    514c:	0018      	movs	r0, r3
    514e:	4b5f      	ldr	r3, [pc, #380]	; (52cc <spi_data_read+0x1d8>)
    5150:	4798      	blx	r3
    5152:	1e03      	subs	r3, r0, #0
    5154:	d013      	beq.n	517e <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    5156:	2370      	movs	r3, #112	; 0x70
    5158:	33ff      	adds	r3, #255	; 0xff
    515a:	001a      	movs	r2, r3
    515c:	495c      	ldr	r1, [pc, #368]	; (52d0 <spi_data_read+0x1dc>)
    515e:	4b5d      	ldr	r3, [pc, #372]	; (52d4 <spi_data_read+0x1e0>)
    5160:	0018      	movs	r0, r3
    5162:	4b5d      	ldr	r3, [pc, #372]	; (52d8 <spi_data_read+0x1e4>)
    5164:	4798      	blx	r3
    5166:	4b5d      	ldr	r3, [pc, #372]	; (52dc <spi_data_read+0x1e8>)
    5168:	0018      	movs	r0, r3
    516a:	4b5d      	ldr	r3, [pc, #372]	; (52e0 <spi_data_read+0x1ec>)
    516c:	4798      	blx	r3
    516e:	200d      	movs	r0, #13
    5170:	4b5c      	ldr	r3, [pc, #368]	; (52e4 <spi_data_read+0x1f0>)
    5172:	4798      	blx	r3
				result = N_FAIL;
    5174:	2311      	movs	r3, #17
    5176:	18fb      	adds	r3, r7, r3
    5178:	2200      	movs	r2, #0
    517a:	701a      	strb	r2, [r3, #0]
				break;
    517c:	e017      	b.n	51ae <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    517e:	230b      	movs	r3, #11
    5180:	18fb      	adds	r3, r7, r3
    5182:	781b      	ldrb	r3, [r3, #0]
    5184:	091b      	lsrs	r3, r3, #4
    5186:	b2db      	uxtb	r3, r3
    5188:	001a      	movs	r2, r3
    518a:	230f      	movs	r3, #15
    518c:	4013      	ands	r3, r2
    518e:	2b0f      	cmp	r3, #15
    5190:	d00c      	beq.n	51ac <spi_data_read+0xb8>
				break;
		} while (retry--);
    5192:	2316      	movs	r3, #22
    5194:	18fb      	adds	r3, r7, r3
    5196:	2200      	movs	r2, #0
    5198:	5e9b      	ldrsh	r3, [r3, r2]
    519a:	b29a      	uxth	r2, r3
    519c:	3a01      	subs	r2, #1
    519e:	b291      	uxth	r1, r2
    51a0:	2216      	movs	r2, #22
    51a2:	18ba      	adds	r2, r7, r2
    51a4:	8011      	strh	r1, [r2, #0]
    51a6:	2b00      	cmp	r3, #0
    51a8:	d1cd      	bne.n	5146 <spi_data_read+0x52>
    51aa:	e000      	b.n	51ae <spi_data_read+0xba>
				break;
    51ac:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    51ae:	2311      	movs	r3, #17
    51b0:	18fb      	adds	r3, r7, r3
    51b2:	781b      	ldrb	r3, [r3, #0]
    51b4:	b25b      	sxtb	r3, r3
    51b6:	2b00      	cmp	r3, #0
    51b8:	d100      	bne.n	51bc <spi_data_read+0xc8>
    51ba:	e07d      	b.n	52b8 <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    51bc:	2316      	movs	r3, #22
    51be:	18fb      	adds	r3, r7, r3
    51c0:	2200      	movs	r2, #0
    51c2:	5e9b      	ldrsh	r3, [r3, r2]
    51c4:	2b00      	cmp	r3, #0
    51c6:	dc18      	bgt.n	51fa <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    51c8:	237c      	movs	r3, #124	; 0x7c
    51ca:	33ff      	adds	r3, #255	; 0xff
    51cc:	001a      	movs	r2, r3
    51ce:	4940      	ldr	r1, [pc, #256]	; (52d0 <spi_data_read+0x1dc>)
    51d0:	4b40      	ldr	r3, [pc, #256]	; (52d4 <spi_data_read+0x1e0>)
    51d2:	0018      	movs	r0, r3
    51d4:	4b40      	ldr	r3, [pc, #256]	; (52d8 <spi_data_read+0x1e4>)
    51d6:	4798      	blx	r3
    51d8:	230b      	movs	r3, #11
    51da:	18fb      	adds	r3, r7, r3
    51dc:	781b      	ldrb	r3, [r3, #0]
    51de:	001a      	movs	r2, r3
    51e0:	4b41      	ldr	r3, [pc, #260]	; (52e8 <spi_data_read+0x1f4>)
    51e2:	0011      	movs	r1, r2
    51e4:	0018      	movs	r0, r3
    51e6:	4b3c      	ldr	r3, [pc, #240]	; (52d8 <spi_data_read+0x1e4>)
    51e8:	4798      	blx	r3
    51ea:	200d      	movs	r0, #13
    51ec:	4b3d      	ldr	r3, [pc, #244]	; (52e4 <spi_data_read+0x1f0>)
    51ee:	4798      	blx	r3
			result = N_FAIL;
    51f0:	2311      	movs	r3, #17
    51f2:	18fb      	adds	r3, r7, r3
    51f4:	2200      	movs	r2, #0
    51f6:	701a      	strb	r2, [r3, #0]
			break;
    51f8:	e05f      	b.n	52ba <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    51fa:	2314      	movs	r3, #20
    51fc:	18fb      	adds	r3, r7, r3
    51fe:	2200      	movs	r2, #0
    5200:	5e9b      	ldrsh	r3, [r3, r2]
    5202:	687a      	ldr	r2, [r7, #4]
    5204:	18d2      	adds	r2, r2, r3
    5206:	2312      	movs	r3, #18
    5208:	18fb      	adds	r3, r7, r3
    520a:	881b      	ldrh	r3, [r3, #0]
    520c:	0019      	movs	r1, r3
    520e:	0010      	movs	r0, r2
    5210:	4b2e      	ldr	r3, [pc, #184]	; (52cc <spi_data_read+0x1d8>)
    5212:	4798      	blx	r3
    5214:	1e03      	subs	r3, r0, #0
    5216:	d012      	beq.n	523e <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    5218:	23c2      	movs	r3, #194	; 0xc2
    521a:	005a      	lsls	r2, r3, #1
    521c:	492c      	ldr	r1, [pc, #176]	; (52d0 <spi_data_read+0x1dc>)
    521e:	4b2d      	ldr	r3, [pc, #180]	; (52d4 <spi_data_read+0x1e0>)
    5220:	0018      	movs	r0, r3
    5222:	4b2d      	ldr	r3, [pc, #180]	; (52d8 <spi_data_read+0x1e4>)
    5224:	4798      	blx	r3
    5226:	4b31      	ldr	r3, [pc, #196]	; (52ec <spi_data_read+0x1f8>)
    5228:	0018      	movs	r0, r3
    522a:	4b2d      	ldr	r3, [pc, #180]	; (52e0 <spi_data_read+0x1ec>)
    522c:	4798      	blx	r3
    522e:	200d      	movs	r0, #13
    5230:	4b2c      	ldr	r3, [pc, #176]	; (52e4 <spi_data_read+0x1f0>)
    5232:	4798      	blx	r3
			result = N_FAIL;
    5234:	2311      	movs	r3, #17
    5236:	18fb      	adds	r3, r7, r3
    5238:	2200      	movs	r2, #0
    523a:	701a      	strb	r2, [r3, #0]
			break;
    523c:	e03d      	b.n	52ba <spi_data_read+0x1c6>
		}
		if(!clockless)
    523e:	1c7b      	adds	r3, r7, #1
    5240:	781b      	ldrb	r3, [r3, #0]
    5242:	2b00      	cmp	r3, #0
    5244:	d11f      	bne.n	5286 <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    5246:	4b2a      	ldr	r3, [pc, #168]	; (52f0 <spi_data_read+0x1fc>)
    5248:	781b      	ldrb	r3, [r3, #0]
    524a:	2b00      	cmp	r3, #0
    524c:	d11b      	bne.n	5286 <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    524e:	230c      	movs	r3, #12
    5250:	18fb      	adds	r3, r7, r3
    5252:	2102      	movs	r1, #2
    5254:	0018      	movs	r0, r3
    5256:	4b1d      	ldr	r3, [pc, #116]	; (52cc <spi_data_read+0x1d8>)
    5258:	4798      	blx	r3
    525a:	1e03      	subs	r3, r0, #0
    525c:	d013      	beq.n	5286 <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    525e:	2390      	movs	r3, #144	; 0x90
    5260:	33ff      	adds	r3, #255	; 0xff
    5262:	001a      	movs	r2, r3
    5264:	491a      	ldr	r1, [pc, #104]	; (52d0 <spi_data_read+0x1dc>)
    5266:	4b1b      	ldr	r3, [pc, #108]	; (52d4 <spi_data_read+0x1e0>)
    5268:	0018      	movs	r0, r3
    526a:	4b1b      	ldr	r3, [pc, #108]	; (52d8 <spi_data_read+0x1e4>)
    526c:	4798      	blx	r3
    526e:	4b21      	ldr	r3, [pc, #132]	; (52f4 <spi_data_read+0x200>)
    5270:	0018      	movs	r0, r3
    5272:	4b1b      	ldr	r3, [pc, #108]	; (52e0 <spi_data_read+0x1ec>)
    5274:	4798      	blx	r3
    5276:	200d      	movs	r0, #13
    5278:	4b1a      	ldr	r3, [pc, #104]	; (52e4 <spi_data_read+0x1f0>)
    527a:	4798      	blx	r3
					result = N_FAIL;
    527c:	2311      	movs	r3, #17
    527e:	18fb      	adds	r3, r7, r3
    5280:	2200      	movs	r2, #0
    5282:	701a      	strb	r2, [r3, #0]
					break;
    5284:	e019      	b.n	52ba <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    5286:	2314      	movs	r3, #20
    5288:	18fb      	adds	r3, r7, r3
    528a:	881a      	ldrh	r2, [r3, #0]
    528c:	2312      	movs	r3, #18
    528e:	18fb      	adds	r3, r7, r3
    5290:	881b      	ldrh	r3, [r3, #0]
    5292:	18d3      	adds	r3, r2, r3
    5294:	b29a      	uxth	r2, r3
    5296:	2314      	movs	r3, #20
    5298:	18fb      	adds	r3, r7, r3
    529a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    529c:	2312      	movs	r3, #18
    529e:	18fb      	adds	r3, r7, r3
    52a0:	881a      	ldrh	r2, [r3, #0]
    52a2:	1cbb      	adds	r3, r7, #2
    52a4:	1cb9      	adds	r1, r7, #2
    52a6:	8809      	ldrh	r1, [r1, #0]
    52a8:	1a8a      	subs	r2, r1, r2
    52aa:	801a      	strh	r2, [r3, #0]

	} while (sz);
    52ac:	1cbb      	adds	r3, r7, #2
    52ae:	881b      	ldrh	r3, [r3, #0]
    52b0:	2b00      	cmp	r3, #0
    52b2:	d000      	beq.n	52b6 <spi_data_read+0x1c2>
    52b4:	e732      	b.n	511c <spi_data_read+0x28>
    52b6:	e000      	b.n	52ba <spi_data_read+0x1c6>
			break;
    52b8:	46c0      	nop			; (mov r8, r8)

	return result;
    52ba:	2311      	movs	r3, #17
    52bc:	18fb      	adds	r3, r7, r3
    52be:	781b      	ldrb	r3, [r3, #0]
    52c0:	b25b      	sxtb	r3, r3
}
    52c2:	0018      	movs	r0, r3
    52c4:	46bd      	mov	sp, r7
    52c6:	b006      	add	sp, #24
    52c8:	bd80      	pop	{r7, pc}
    52ca:	46c0      	nop			; (mov r8, r8)
    52cc:	00004b6d 	.word	0x00004b6d
    52d0:	00014618 	.word	0x00014618
    52d4:	00014110 	.word	0x00014110
    52d8:	0001212d 	.word	0x0001212d
    52dc:	00014184 	.word	0x00014184
    52e0:	00012249 	.word	0x00012249
    52e4:	00012161 	.word	0x00012161
    52e8:	000141b8 	.word	0x000141b8
    52ec:	000141e8 	.word	0x000141e8
    52f0:	20000298 	.word	0x20000298
    52f4:	00014218 	.word	0x00014218

000052f8 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    52f8:	b580      	push	{r7, lr}
    52fa:	b086      	sub	sp, #24
    52fc:	af00      	add	r7, sp, #0
    52fe:	6078      	str	r0, [r7, #4]
    5300:	000a      	movs	r2, r1
    5302:	1cbb      	adds	r3, r7, #2
    5304:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    5306:	2313      	movs	r3, #19
    5308:	18fb      	adds	r3, r7, r3
    530a:	2201      	movs	r2, #1
    530c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    530e:	230c      	movs	r3, #12
    5310:	18fb      	adds	r3, r7, r3
    5312:	2200      	movs	r2, #0
    5314:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    5316:	2316      	movs	r3, #22
    5318:	18fb      	adds	r3, r7, r3
    531a:	2200      	movs	r2, #0
    531c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    531e:	1cbb      	adds	r3, r7, #2
    5320:	881a      	ldrh	r2, [r3, #0]
    5322:	2380      	movs	r3, #128	; 0x80
    5324:	019b      	lsls	r3, r3, #6
    5326:	429a      	cmp	r2, r3
    5328:	d805      	bhi.n	5336 <spi_data_write+0x3e>
			nbytes = sz;
    532a:	2314      	movs	r3, #20
    532c:	18fb      	adds	r3, r7, r3
    532e:	1cba      	adds	r2, r7, #2
    5330:	8812      	ldrh	r2, [r2, #0]
    5332:	801a      	strh	r2, [r3, #0]
    5334:	e004      	b.n	5340 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    5336:	2314      	movs	r3, #20
    5338:	18fb      	adds	r3, r7, r3
    533a:	2280      	movs	r2, #128	; 0x80
    533c:	0192      	lsls	r2, r2, #6
    533e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    5340:	2311      	movs	r3, #17
    5342:	18fb      	adds	r3, r7, r3
    5344:	22f0      	movs	r2, #240	; 0xf0
    5346:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    5348:	2316      	movs	r3, #22
    534a:	18fb      	adds	r3, r7, r3
    534c:	2200      	movs	r2, #0
    534e:	5e9b      	ldrsh	r3, [r3, r2]
    5350:	2b00      	cmp	r3, #0
    5352:	d10f      	bne.n	5374 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    5354:	1cbb      	adds	r3, r7, #2
    5356:	881a      	ldrh	r2, [r3, #0]
    5358:	2380      	movs	r3, #128	; 0x80
    535a:	019b      	lsls	r3, r3, #6
    535c:	429a      	cmp	r2, r3
    535e:	d804      	bhi.n	536a <spi_data_write+0x72>
				order = 0x3;
    5360:	2312      	movs	r3, #18
    5362:	18fb      	adds	r3, r7, r3
    5364:	2203      	movs	r2, #3
    5366:	701a      	strb	r2, [r3, #0]
    5368:	e013      	b.n	5392 <spi_data_write+0x9a>
			else
				order = 0x1;
    536a:	2312      	movs	r3, #18
    536c:	18fb      	adds	r3, r7, r3
    536e:	2201      	movs	r2, #1
    5370:	701a      	strb	r2, [r3, #0]
    5372:	e00e      	b.n	5392 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    5374:	1cbb      	adds	r3, r7, #2
    5376:	881a      	ldrh	r2, [r3, #0]
    5378:	2380      	movs	r3, #128	; 0x80
    537a:	019b      	lsls	r3, r3, #6
    537c:	429a      	cmp	r2, r3
    537e:	d804      	bhi.n	538a <spi_data_write+0x92>
				order = 0x3;
    5380:	2312      	movs	r3, #18
    5382:	18fb      	adds	r3, r7, r3
    5384:	2203      	movs	r2, #3
    5386:	701a      	strb	r2, [r3, #0]
    5388:	e003      	b.n	5392 <spi_data_write+0x9a>
			else
				order = 0x2;
    538a:	2312      	movs	r3, #18
    538c:	18fb      	adds	r3, r7, r3
    538e:	2202      	movs	r2, #2
    5390:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    5392:	2311      	movs	r3, #17
    5394:	18fb      	adds	r3, r7, r3
    5396:	781a      	ldrb	r2, [r3, #0]
    5398:	2312      	movs	r3, #18
    539a:	18fb      	adds	r3, r7, r3
    539c:	781b      	ldrb	r3, [r3, #0]
    539e:	4313      	orrs	r3, r2
    53a0:	b2da      	uxtb	r2, r3
    53a2:	2311      	movs	r3, #17
    53a4:	18fb      	adds	r3, r7, r3
    53a6:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    53a8:	2311      	movs	r3, #17
    53aa:	18fb      	adds	r3, r7, r3
    53ac:	2101      	movs	r1, #1
    53ae:	0018      	movs	r0, r3
    53b0:	4b3c      	ldr	r3, [pc, #240]	; (54a4 <spi_data_write+0x1ac>)
    53b2:	4798      	blx	r3
    53b4:	1e03      	subs	r3, r0, #0
    53b6:	d012      	beq.n	53de <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    53b8:	23e0      	movs	r3, #224	; 0xe0
    53ba:	005a      	lsls	r2, r3, #1
    53bc:	493a      	ldr	r1, [pc, #232]	; (54a8 <spi_data_write+0x1b0>)
    53be:	4b3b      	ldr	r3, [pc, #236]	; (54ac <spi_data_write+0x1b4>)
    53c0:	0018      	movs	r0, r3
    53c2:	4b3b      	ldr	r3, [pc, #236]	; (54b0 <spi_data_write+0x1b8>)
    53c4:	4798      	blx	r3
    53c6:	4b3b      	ldr	r3, [pc, #236]	; (54b4 <spi_data_write+0x1bc>)
    53c8:	0018      	movs	r0, r3
    53ca:	4b3b      	ldr	r3, [pc, #236]	; (54b8 <spi_data_write+0x1c0>)
    53cc:	4798      	blx	r3
    53ce:	200d      	movs	r0, #13
    53d0:	4b3a      	ldr	r3, [pc, #232]	; (54bc <spi_data_write+0x1c4>)
    53d2:	4798      	blx	r3
			result = N_FAIL;
    53d4:	2313      	movs	r3, #19
    53d6:	18fb      	adds	r3, r7, r3
    53d8:	2200      	movs	r2, #0
    53da:	701a      	strb	r2, [r3, #0]
			break;
    53dc:	e05a      	b.n	5494 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    53de:	2316      	movs	r3, #22
    53e0:	18fb      	adds	r3, r7, r3
    53e2:	2200      	movs	r2, #0
    53e4:	5e9b      	ldrsh	r3, [r3, r2]
    53e6:	687a      	ldr	r2, [r7, #4]
    53e8:	18d2      	adds	r2, r2, r3
    53ea:	2314      	movs	r3, #20
    53ec:	18fb      	adds	r3, r7, r3
    53ee:	881b      	ldrh	r3, [r3, #0]
    53f0:	0019      	movs	r1, r3
    53f2:	0010      	movs	r0, r2
    53f4:	4b2b      	ldr	r3, [pc, #172]	; (54a4 <spi_data_write+0x1ac>)
    53f6:	4798      	blx	r3
    53f8:	1e03      	subs	r3, r0, #0
    53fa:	d013      	beq.n	5424 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    53fc:	23ca      	movs	r3, #202	; 0xca
    53fe:	33ff      	adds	r3, #255	; 0xff
    5400:	001a      	movs	r2, r3
    5402:	4929      	ldr	r1, [pc, #164]	; (54a8 <spi_data_write+0x1b0>)
    5404:	4b29      	ldr	r3, [pc, #164]	; (54ac <spi_data_write+0x1b4>)
    5406:	0018      	movs	r0, r3
    5408:	4b29      	ldr	r3, [pc, #164]	; (54b0 <spi_data_write+0x1b8>)
    540a:	4798      	blx	r3
    540c:	4b2c      	ldr	r3, [pc, #176]	; (54c0 <spi_data_write+0x1c8>)
    540e:	0018      	movs	r0, r3
    5410:	4b29      	ldr	r3, [pc, #164]	; (54b8 <spi_data_write+0x1c0>)
    5412:	4798      	blx	r3
    5414:	200d      	movs	r0, #13
    5416:	4b29      	ldr	r3, [pc, #164]	; (54bc <spi_data_write+0x1c4>)
    5418:	4798      	blx	r3
			result = N_FAIL;
    541a:	2313      	movs	r3, #19
    541c:	18fb      	adds	r3, r7, r3
    541e:	2200      	movs	r2, #0
    5420:	701a      	strb	r2, [r3, #0]
			break;
    5422:	e037      	b.n	5494 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    5424:	4b27      	ldr	r3, [pc, #156]	; (54c4 <spi_data_write+0x1cc>)
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	2b00      	cmp	r3, #0
    542a:	d11b      	bne.n	5464 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    542c:	230c      	movs	r3, #12
    542e:	18fb      	adds	r3, r7, r3
    5430:	2102      	movs	r1, #2
    5432:	0018      	movs	r0, r3
    5434:	4b1b      	ldr	r3, [pc, #108]	; (54a4 <spi_data_write+0x1ac>)
    5436:	4798      	blx	r3
    5438:	1e03      	subs	r3, r0, #0
    543a:	d013      	beq.n	5464 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    543c:	23d4      	movs	r3, #212	; 0xd4
    543e:	33ff      	adds	r3, #255	; 0xff
    5440:	001a      	movs	r2, r3
    5442:	4919      	ldr	r1, [pc, #100]	; (54a8 <spi_data_write+0x1b0>)
    5444:	4b19      	ldr	r3, [pc, #100]	; (54ac <spi_data_write+0x1b4>)
    5446:	0018      	movs	r0, r3
    5448:	4b19      	ldr	r3, [pc, #100]	; (54b0 <spi_data_write+0x1b8>)
    544a:	4798      	blx	r3
    544c:	4b1e      	ldr	r3, [pc, #120]	; (54c8 <spi_data_write+0x1d0>)
    544e:	0018      	movs	r0, r3
    5450:	4b19      	ldr	r3, [pc, #100]	; (54b8 <spi_data_write+0x1c0>)
    5452:	4798      	blx	r3
    5454:	200d      	movs	r0, #13
    5456:	4b19      	ldr	r3, [pc, #100]	; (54bc <spi_data_write+0x1c4>)
    5458:	4798      	blx	r3
				result = N_FAIL;
    545a:	2313      	movs	r3, #19
    545c:	18fb      	adds	r3, r7, r3
    545e:	2200      	movs	r2, #0
    5460:	701a      	strb	r2, [r3, #0]
				break;
    5462:	e017      	b.n	5494 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    5464:	2316      	movs	r3, #22
    5466:	18fb      	adds	r3, r7, r3
    5468:	881a      	ldrh	r2, [r3, #0]
    546a:	2314      	movs	r3, #20
    546c:	18fb      	adds	r3, r7, r3
    546e:	881b      	ldrh	r3, [r3, #0]
    5470:	18d3      	adds	r3, r2, r3
    5472:	b29a      	uxth	r2, r3
    5474:	2316      	movs	r3, #22
    5476:	18fb      	adds	r3, r7, r3
    5478:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    547a:	1cbb      	adds	r3, r7, #2
    547c:	1cb9      	adds	r1, r7, #2
    547e:	2214      	movs	r2, #20
    5480:	18ba      	adds	r2, r7, r2
    5482:	8809      	ldrh	r1, [r1, #0]
    5484:	8812      	ldrh	r2, [r2, #0]
    5486:	1a8a      	subs	r2, r1, r2
    5488:	801a      	strh	r2, [r3, #0]
	} while (sz);
    548a:	1cbb      	adds	r3, r7, #2
    548c:	881b      	ldrh	r3, [r3, #0]
    548e:	2b00      	cmp	r3, #0
    5490:	d000      	beq.n	5494 <spi_data_write+0x19c>
    5492:	e744      	b.n	531e <spi_data_write+0x26>


	return result;
    5494:	2313      	movs	r3, #19
    5496:	18fb      	adds	r3, r7, r3
    5498:	781b      	ldrb	r3, [r3, #0]
    549a:	b25b      	sxtb	r3, r3
}
    549c:	0018      	movs	r0, r3
    549e:	46bd      	mov	sp, r7
    54a0:	b006      	add	sp, #24
    54a2:	bd80      	pop	{r7, pc}
    54a4:	00004bb1 	.word	0x00004bb1
    54a8:	00014628 	.word	0x00014628
    54ac:	00014110 	.word	0x00014110
    54b0:	0001212d 	.word	0x0001212d
    54b4:	0001424c 	.word	0x0001424c
    54b8:	00012249 	.word	0x00012249
    54bc:	00012161 	.word	0x00012161
    54c0:	00014284 	.word	0x00014284
    54c4:	20000298 	.word	0x20000298
    54c8:	000142b8 	.word	0x000142b8

000054cc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    54cc:	b5b0      	push	{r4, r5, r7, lr}
    54ce:	b086      	sub	sp, #24
    54d0:	af02      	add	r7, sp, #8
    54d2:	6078      	str	r0, [r7, #4]
    54d4:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    54d6:	230d      	movs	r3, #13
    54d8:	18fb      	adds	r3, r7, r3
    54da:	2201      	movs	r2, #1
    54dc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    54de:	230f      	movs	r3, #15
    54e0:	18fb      	adds	r3, r7, r3
    54e2:	22c9      	movs	r2, #201	; 0xc9
    54e4:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    54e6:	230e      	movs	r3, #14
    54e8:	18fb      	adds	r3, r7, r3
    54ea:	2200      	movs	r2, #0
    54ec:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	2b30      	cmp	r3, #48	; 0x30
    54f2:	d808      	bhi.n	5506 <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    54f4:	230f      	movs	r3, #15
    54f6:	18fb      	adds	r3, r7, r3
    54f8:	22c3      	movs	r2, #195	; 0xc3
    54fa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    54fc:	230e      	movs	r3, #14
    54fe:	18fb      	adds	r3, r7, r3
    5500:	2201      	movs	r2, #1
    5502:	701a      	strb	r2, [r3, #0]
    5504:	e007      	b.n	5516 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    5506:	230f      	movs	r3, #15
    5508:	18fb      	adds	r3, r7, r3
    550a:	22c9      	movs	r2, #201	; 0xc9
    550c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    550e:	230e      	movs	r3, #14
    5510:	18fb      	adds	r3, r7, r3
    5512:	2200      	movs	r2, #0
    5514:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    5516:	230d      	movs	r3, #13
    5518:	18fc      	adds	r4, r7, r3
    551a:	683a      	ldr	r2, [r7, #0]
    551c:	6879      	ldr	r1, [r7, #4]
    551e:	230f      	movs	r3, #15
    5520:	18fb      	adds	r3, r7, r3
    5522:	7818      	ldrb	r0, [r3, #0]
    5524:	230e      	movs	r3, #14
    5526:	18fb      	adds	r3, r7, r3
    5528:	781b      	ldrb	r3, [r3, #0]
    552a:	9300      	str	r3, [sp, #0]
    552c:	2304      	movs	r3, #4
    552e:	4d24      	ldr	r5, [pc, #144]	; (55c0 <spi_write_reg+0xf4>)
    5530:	47a8      	blx	r5
    5532:	0003      	movs	r3, r0
    5534:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5536:	230d      	movs	r3, #13
    5538:	18fb      	adds	r3, r7, r3
    553a:	781b      	ldrb	r3, [r3, #0]
    553c:	b25b      	sxtb	r3, r3
    553e:	2b01      	cmp	r3, #1
    5540:	d010      	beq.n	5564 <spi_write_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    5542:	4a20      	ldr	r2, [pc, #128]	; (55c4 <spi_write_reg+0xf8>)
    5544:	4920      	ldr	r1, [pc, #128]	; (55c8 <spi_write_reg+0xfc>)
    5546:	4b21      	ldr	r3, [pc, #132]	; (55cc <spi_write_reg+0x100>)
    5548:	0018      	movs	r0, r3
    554a:	4b21      	ldr	r3, [pc, #132]	; (55d0 <spi_write_reg+0x104>)
    554c:	4798      	blx	r3
    554e:	687a      	ldr	r2, [r7, #4]
    5550:	4b20      	ldr	r3, [pc, #128]	; (55d4 <spi_write_reg+0x108>)
    5552:	0011      	movs	r1, r2
    5554:	0018      	movs	r0, r3
    5556:	4b1e      	ldr	r3, [pc, #120]	; (55d0 <spi_write_reg+0x104>)
    5558:	4798      	blx	r3
    555a:	200d      	movs	r0, #13
    555c:	4b1e      	ldr	r3, [pc, #120]	; (55d8 <spi_write_reg+0x10c>)
    555e:	4798      	blx	r3
		return N_FAIL;
    5560:	2300      	movs	r3, #0
    5562:	e029      	b.n	55b8 <spi_write_reg+0xec>
	}

	result = spi_cmd_rsp(cmd);
    5564:	230d      	movs	r3, #13
    5566:	18fc      	adds	r4, r7, r3
    5568:	230f      	movs	r3, #15
    556a:	18fb      	adds	r3, r7, r3
    556c:	781b      	ldrb	r3, [r3, #0]
    556e:	0018      	movs	r0, r3
    5570:	4b1a      	ldr	r3, [pc, #104]	; (55dc <spi_write_reg+0x110>)
    5572:	4798      	blx	r3
    5574:	0003      	movs	r3, r0
    5576:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5578:	230d      	movs	r3, #13
    557a:	18fb      	adds	r3, r7, r3
    557c:	781b      	ldrb	r3, [r3, #0]
    557e:	b25b      	sxtb	r3, r3
    5580:	2b01      	cmp	r3, #1
    5582:	d018      	beq.n	55b6 <spi_write_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    5584:	4a16      	ldr	r2, [pc, #88]	; (55e0 <spi_write_reg+0x114>)
    5586:	4910      	ldr	r1, [pc, #64]	; (55c8 <spi_write_reg+0xfc>)
    5588:	4b10      	ldr	r3, [pc, #64]	; (55cc <spi_write_reg+0x100>)
    558a:	0018      	movs	r0, r3
    558c:	4b10      	ldr	r3, [pc, #64]	; (55d0 <spi_write_reg+0x104>)
    558e:	4798      	blx	r3
    5590:	687a      	ldr	r2, [r7, #4]
    5592:	4b14      	ldr	r3, [pc, #80]	; (55e4 <spi_write_reg+0x118>)
    5594:	0011      	movs	r1, r2
    5596:	0018      	movs	r0, r3
    5598:	4b0d      	ldr	r3, [pc, #52]	; (55d0 <spi_write_reg+0x104>)
    559a:	4798      	blx	r3
    559c:	200d      	movs	r0, #13
    559e:	4b0e      	ldr	r3, [pc, #56]	; (55d8 <spi_write_reg+0x10c>)
    55a0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    55a2:	2300      	movs	r3, #0
    55a4:	9300      	str	r3, [sp, #0]
    55a6:	2300      	movs	r3, #0
    55a8:	2200      	movs	r2, #0
    55aa:	2100      	movs	r1, #0
    55ac:	20cf      	movs	r0, #207	; 0xcf
    55ae:	4c04      	ldr	r4, [pc, #16]	; (55c0 <spi_write_reg+0xf4>)
    55b0:	47a0      	blx	r4
		return N_FAIL;
    55b2:	2300      	movs	r3, #0
    55b4:	e000      	b.n	55b8 <spi_write_reg+0xec>
	}

	return N_OK;
    55b6:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    55b8:	0018      	movs	r0, r3
    55ba:	46bd      	mov	sp, r7
    55bc:	b004      	add	sp, #16
    55be:	bdb0      	pop	{r4, r5, r7, pc}
    55c0:	00004c75 	.word	0x00004c75
    55c4:	00000203 	.word	0x00000203
    55c8:	00014638 	.word	0x00014638
    55cc:	00014110 	.word	0x00014110
    55d0:	0001212d 	.word	0x0001212d
    55d4:	000142f0 	.word	0x000142f0
    55d8:	00012161 	.word	0x00012161
    55dc:	00004fb9 	.word	0x00004fb9
    55e0:	00000209 	.word	0x00000209
    55e4:	0001431c 	.word	0x0001431c

000055e8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    55e8:	b5b0      	push	{r4, r5, r7, lr}
    55ea:	b088      	sub	sp, #32
    55ec:	af02      	add	r7, sp, #8
    55ee:	60f8      	str	r0, [r7, #12]
    55f0:	60b9      	str	r1, [r7, #8]
    55f2:	1dbb      	adds	r3, r7, #6
    55f4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    55f6:	2317      	movs	r3, #23
    55f8:	18fb      	adds	r3, r7, r3
    55fa:	22c7      	movs	r2, #199	; 0xc7
    55fc:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    55fe:	1dbb      	adds	r3, r7, #6
    5600:	881a      	ldrh	r2, [r3, #0]
    5602:	2316      	movs	r3, #22
    5604:	18fc      	adds	r4, r7, r3
    5606:	68f9      	ldr	r1, [r7, #12]
    5608:	2317      	movs	r3, #23
    560a:	18fb      	adds	r3, r7, r3
    560c:	7818      	ldrb	r0, [r3, #0]
    560e:	2300      	movs	r3, #0
    5610:	9300      	str	r3, [sp, #0]
    5612:	0013      	movs	r3, r2
    5614:	2200      	movs	r2, #0
    5616:	4d37      	ldr	r5, [pc, #220]	; (56f4 <nm_spi_write+0x10c>)
    5618:	47a8      	blx	r5
    561a:	0003      	movs	r3, r0
    561c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    561e:	2316      	movs	r3, #22
    5620:	18fb      	adds	r3, r7, r3
    5622:	781b      	ldrb	r3, [r3, #0]
    5624:	b25b      	sxtb	r3, r3
    5626:	2b01      	cmp	r3, #1
    5628:	d010      	beq.n	564c <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    562a:	4a33      	ldr	r2, [pc, #204]	; (56f8 <nm_spi_write+0x110>)
    562c:	4933      	ldr	r1, [pc, #204]	; (56fc <nm_spi_write+0x114>)
    562e:	4b34      	ldr	r3, [pc, #208]	; (5700 <nm_spi_write+0x118>)
    5630:	0018      	movs	r0, r3
    5632:	4b34      	ldr	r3, [pc, #208]	; (5704 <nm_spi_write+0x11c>)
    5634:	4798      	blx	r3
    5636:	68fa      	ldr	r2, [r7, #12]
    5638:	4b33      	ldr	r3, [pc, #204]	; (5708 <nm_spi_write+0x120>)
    563a:	0011      	movs	r1, r2
    563c:	0018      	movs	r0, r3
    563e:	4b31      	ldr	r3, [pc, #196]	; (5704 <nm_spi_write+0x11c>)
    5640:	4798      	blx	r3
    5642:	200d      	movs	r0, #13
    5644:	4b31      	ldr	r3, [pc, #196]	; (570c <nm_spi_write+0x124>)
    5646:	4798      	blx	r3
		return N_FAIL;
    5648:	2300      	movs	r3, #0
    564a:	e04f      	b.n	56ec <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    564c:	2316      	movs	r3, #22
    564e:	18fc      	adds	r4, r7, r3
    5650:	2317      	movs	r3, #23
    5652:	18fb      	adds	r3, r7, r3
    5654:	781b      	ldrb	r3, [r3, #0]
    5656:	0018      	movs	r0, r3
    5658:	4b2d      	ldr	r3, [pc, #180]	; (5710 <nm_spi_write+0x128>)
    565a:	4798      	blx	r3
    565c:	0003      	movs	r3, r0
    565e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5660:	2316      	movs	r3, #22
    5662:	18fb      	adds	r3, r7, r3
    5664:	781b      	ldrb	r3, [r3, #0]
    5666:	b25b      	sxtb	r3, r3
    5668:	2b01      	cmp	r3, #1
    566a:	d018      	beq.n	569e <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    566c:	4a29      	ldr	r2, [pc, #164]	; (5714 <nm_spi_write+0x12c>)
    566e:	4923      	ldr	r1, [pc, #140]	; (56fc <nm_spi_write+0x114>)
    5670:	4b23      	ldr	r3, [pc, #140]	; (5700 <nm_spi_write+0x118>)
    5672:	0018      	movs	r0, r3
    5674:	4b23      	ldr	r3, [pc, #140]	; (5704 <nm_spi_write+0x11c>)
    5676:	4798      	blx	r3
    5678:	68fa      	ldr	r2, [r7, #12]
    567a:	4b27      	ldr	r3, [pc, #156]	; (5718 <nm_spi_write+0x130>)
    567c:	0011      	movs	r1, r2
    567e:	0018      	movs	r0, r3
    5680:	4b20      	ldr	r3, [pc, #128]	; (5704 <nm_spi_write+0x11c>)
    5682:	4798      	blx	r3
    5684:	200d      	movs	r0, #13
    5686:	4b21      	ldr	r3, [pc, #132]	; (570c <nm_spi_write+0x124>)
    5688:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    568a:	2300      	movs	r3, #0
    568c:	9300      	str	r3, [sp, #0]
    568e:	2300      	movs	r3, #0
    5690:	2200      	movs	r2, #0
    5692:	2100      	movs	r1, #0
    5694:	20cf      	movs	r0, #207	; 0xcf
    5696:	4c17      	ldr	r4, [pc, #92]	; (56f4 <nm_spi_write+0x10c>)
    5698:	47a0      	blx	r4
		return N_FAIL;
    569a:	2300      	movs	r3, #0
    569c:	e026      	b.n	56ec <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    569e:	2316      	movs	r3, #22
    56a0:	18fc      	adds	r4, r7, r3
    56a2:	1dbb      	adds	r3, r7, #6
    56a4:	881a      	ldrh	r2, [r3, #0]
    56a6:	68bb      	ldr	r3, [r7, #8]
    56a8:	0011      	movs	r1, r2
    56aa:	0018      	movs	r0, r3
    56ac:	4b1b      	ldr	r3, [pc, #108]	; (571c <nm_spi_write+0x134>)
    56ae:	4798      	blx	r3
    56b0:	0003      	movs	r3, r0
    56b2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    56b4:	2316      	movs	r3, #22
    56b6:	18fb      	adds	r3, r7, r3
    56b8:	781b      	ldrb	r3, [r3, #0]
    56ba:	b25b      	sxtb	r3, r3
    56bc:	2b01      	cmp	r3, #1
    56be:	d014      	beq.n	56ea <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    56c0:	4a17      	ldr	r2, [pc, #92]	; (5720 <nm_spi_write+0x138>)
    56c2:	490e      	ldr	r1, [pc, #56]	; (56fc <nm_spi_write+0x114>)
    56c4:	4b0e      	ldr	r3, [pc, #56]	; (5700 <nm_spi_write+0x118>)
    56c6:	0018      	movs	r0, r3
    56c8:	4b0e      	ldr	r3, [pc, #56]	; (5704 <nm_spi_write+0x11c>)
    56ca:	4798      	blx	r3
    56cc:	4b15      	ldr	r3, [pc, #84]	; (5724 <nm_spi_write+0x13c>)
    56ce:	0018      	movs	r0, r3
    56d0:	4b15      	ldr	r3, [pc, #84]	; (5728 <nm_spi_write+0x140>)
    56d2:	4798      	blx	r3
    56d4:	200d      	movs	r0, #13
    56d6:	4b0d      	ldr	r3, [pc, #52]	; (570c <nm_spi_write+0x124>)
    56d8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    56da:	2300      	movs	r3, #0
    56dc:	9300      	str	r3, [sp, #0]
    56de:	2300      	movs	r3, #0
    56e0:	2200      	movs	r2, #0
    56e2:	2100      	movs	r1, #0
    56e4:	20cf      	movs	r0, #207	; 0xcf
    56e6:	4c03      	ldr	r4, [pc, #12]	; (56f4 <nm_spi_write+0x10c>)
    56e8:	47a0      	blx	r4
	}

	return N_OK;
    56ea:	2301      	movs	r3, #1
}
    56ec:	0018      	movs	r0, r3
    56ee:	46bd      	mov	sp, r7
    56f0:	b006      	add	sp, #24
    56f2:	bdb0      	pop	{r4, r5, r7, pc}
    56f4:	00004c75 	.word	0x00004c75
    56f8:	00000227 	.word	0x00000227
    56fc:	00014648 	.word	0x00014648
    5700:	00014110 	.word	0x00014110
    5704:	0001212d 	.word	0x0001212d
    5708:	00014354 	.word	0x00014354
    570c:	00012161 	.word	0x00012161
    5710:	00004fb9 	.word	0x00004fb9
    5714:	0000022d 	.word	0x0000022d
    5718:	00014384 	.word	0x00014384
    571c:	000052f9 	.word	0x000052f9
    5720:	0000023e 	.word	0x0000023e
    5724:	000143bc 	.word	0x000143bc
    5728:	00012249 	.word	0x00012249

0000572c <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    572c:	b5b0      	push	{r4, r5, r7, lr}
    572e:	b086      	sub	sp, #24
    5730:	af02      	add	r7, sp, #8
    5732:	6078      	str	r0, [r7, #4]
    5734:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    5736:	230d      	movs	r3, #13
    5738:	18fb      	adds	r3, r7, r3
    573a:	2201      	movs	r2, #1
    573c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    573e:	230f      	movs	r3, #15
    5740:	18fb      	adds	r3, r7, r3
    5742:	22ca      	movs	r2, #202	; 0xca
    5744:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    5746:	230e      	movs	r3, #14
    5748:	18fb      	adds	r3, r7, r3
    574a:	2200      	movs	r2, #0
    574c:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    574e:	687b      	ldr	r3, [r7, #4]
    5750:	2bff      	cmp	r3, #255	; 0xff
    5752:	d808      	bhi.n	5766 <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    5754:	230f      	movs	r3, #15
    5756:	18fb      	adds	r3, r7, r3
    5758:	22c4      	movs	r2, #196	; 0xc4
    575a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    575c:	230e      	movs	r3, #14
    575e:	18fb      	adds	r3, r7, r3
    5760:	2201      	movs	r2, #1
    5762:	701a      	strb	r2, [r3, #0]
    5764:	e007      	b.n	5776 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    5766:	230f      	movs	r3, #15
    5768:	18fb      	adds	r3, r7, r3
    576a:	22ca      	movs	r2, #202	; 0xca
    576c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    576e:	230e      	movs	r3, #14
    5770:	18fb      	adds	r3, r7, r3
    5772:	2200      	movs	r2, #0
    5774:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    5776:	230d      	movs	r3, #13
    5778:	18fc      	adds	r4, r7, r3
    577a:	6879      	ldr	r1, [r7, #4]
    577c:	230f      	movs	r3, #15
    577e:	18fb      	adds	r3, r7, r3
    5780:	7818      	ldrb	r0, [r3, #0]
    5782:	230e      	movs	r3, #14
    5784:	18fb      	adds	r3, r7, r3
    5786:	781b      	ldrb	r3, [r3, #0]
    5788:	9300      	str	r3, [sp, #0]
    578a:	2304      	movs	r3, #4
    578c:	2200      	movs	r2, #0
    578e:	4d44      	ldr	r5, [pc, #272]	; (58a0 <spi_read_reg+0x174>)
    5790:	47a8      	blx	r5
    5792:	0003      	movs	r3, r0
    5794:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5796:	230d      	movs	r3, #13
    5798:	18fb      	adds	r3, r7, r3
    579a:	781b      	ldrb	r3, [r3, #0]
    579c:	b25b      	sxtb	r3, r3
    579e:	2b01      	cmp	r3, #1
    57a0:	d010      	beq.n	57c4 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    57a2:	4a40      	ldr	r2, [pc, #256]	; (58a4 <spi_read_reg+0x178>)
    57a4:	4940      	ldr	r1, [pc, #256]	; (58a8 <spi_read_reg+0x17c>)
    57a6:	4b41      	ldr	r3, [pc, #260]	; (58ac <spi_read_reg+0x180>)
    57a8:	0018      	movs	r0, r3
    57aa:	4b41      	ldr	r3, [pc, #260]	; (58b0 <spi_read_reg+0x184>)
    57ac:	4798      	blx	r3
    57ae:	687a      	ldr	r2, [r7, #4]
    57b0:	4b40      	ldr	r3, [pc, #256]	; (58b4 <spi_read_reg+0x188>)
    57b2:	0011      	movs	r1, r2
    57b4:	0018      	movs	r0, r3
    57b6:	4b3e      	ldr	r3, [pc, #248]	; (58b0 <spi_read_reg+0x184>)
    57b8:	4798      	blx	r3
    57ba:	200d      	movs	r0, #13
    57bc:	4b3e      	ldr	r3, [pc, #248]	; (58b8 <spi_read_reg+0x18c>)
    57be:	4798      	blx	r3
		return N_FAIL;
    57c0:	2300      	movs	r3, #0
    57c2:	e068      	b.n	5896 <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    57c4:	230d      	movs	r3, #13
    57c6:	18fc      	adds	r4, r7, r3
    57c8:	230f      	movs	r3, #15
    57ca:	18fb      	adds	r3, r7, r3
    57cc:	781b      	ldrb	r3, [r3, #0]
    57ce:	0018      	movs	r0, r3
    57d0:	4b3a      	ldr	r3, [pc, #232]	; (58bc <spi_read_reg+0x190>)
    57d2:	4798      	blx	r3
    57d4:	0003      	movs	r3, r0
    57d6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    57d8:	230d      	movs	r3, #13
    57da:	18fb      	adds	r3, r7, r3
    57dc:	781b      	ldrb	r3, [r3, #0]
    57de:	b25b      	sxtb	r3, r3
    57e0:	2b01      	cmp	r3, #1
    57e2:	d018      	beq.n	5816 <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    57e4:	4a36      	ldr	r2, [pc, #216]	; (58c0 <spi_read_reg+0x194>)
    57e6:	4930      	ldr	r1, [pc, #192]	; (58a8 <spi_read_reg+0x17c>)
    57e8:	4b30      	ldr	r3, [pc, #192]	; (58ac <spi_read_reg+0x180>)
    57ea:	0018      	movs	r0, r3
    57ec:	4b30      	ldr	r3, [pc, #192]	; (58b0 <spi_read_reg+0x184>)
    57ee:	4798      	blx	r3
    57f0:	687a      	ldr	r2, [r7, #4]
    57f2:	4b34      	ldr	r3, [pc, #208]	; (58c4 <spi_read_reg+0x198>)
    57f4:	0011      	movs	r1, r2
    57f6:	0018      	movs	r0, r3
    57f8:	4b2d      	ldr	r3, [pc, #180]	; (58b0 <spi_read_reg+0x184>)
    57fa:	4798      	blx	r3
    57fc:	200d      	movs	r0, #13
    57fe:	4b2e      	ldr	r3, [pc, #184]	; (58b8 <spi_read_reg+0x18c>)
    5800:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5802:	2300      	movs	r3, #0
    5804:	9300      	str	r3, [sp, #0]
    5806:	2300      	movs	r3, #0
    5808:	2200      	movs	r2, #0
    580a:	2100      	movs	r1, #0
    580c:	20cf      	movs	r0, #207	; 0xcf
    580e:	4c24      	ldr	r4, [pc, #144]	; (58a0 <spi_read_reg+0x174>)
    5810:	47a0      	blx	r4
		return N_FAIL;
    5812:	2300      	movs	r3, #0
    5814:	e03f      	b.n	5896 <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    5816:	230d      	movs	r3, #13
    5818:	18fc      	adds	r4, r7, r3
    581a:	230e      	movs	r3, #14
    581c:	18fb      	adds	r3, r7, r3
    581e:	781a      	ldrb	r2, [r3, #0]
    5820:	2308      	movs	r3, #8
    5822:	18fb      	adds	r3, r7, r3
    5824:	2104      	movs	r1, #4
    5826:	0018      	movs	r0, r3
    5828:	4b27      	ldr	r3, [pc, #156]	; (58c8 <spi_read_reg+0x19c>)
    582a:	4798      	blx	r3
    582c:	0003      	movs	r3, r0
    582e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5830:	230d      	movs	r3, #13
    5832:	18fb      	adds	r3, r7, r3
    5834:	781b      	ldrb	r3, [r3, #0]
    5836:	b25b      	sxtb	r3, r3
    5838:	2b01      	cmp	r3, #1
    583a:	d016      	beq.n	586a <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    583c:	4a23      	ldr	r2, [pc, #140]	; (58cc <spi_read_reg+0x1a0>)
    583e:	491a      	ldr	r1, [pc, #104]	; (58a8 <spi_read_reg+0x17c>)
    5840:	4b1a      	ldr	r3, [pc, #104]	; (58ac <spi_read_reg+0x180>)
    5842:	0018      	movs	r0, r3
    5844:	4b1a      	ldr	r3, [pc, #104]	; (58b0 <spi_read_reg+0x184>)
    5846:	4798      	blx	r3
    5848:	4b21      	ldr	r3, [pc, #132]	; (58d0 <spi_read_reg+0x1a4>)
    584a:	0018      	movs	r0, r3
    584c:	4b21      	ldr	r3, [pc, #132]	; (58d4 <spi_read_reg+0x1a8>)
    584e:	4798      	blx	r3
    5850:	200d      	movs	r0, #13
    5852:	4b19      	ldr	r3, [pc, #100]	; (58b8 <spi_read_reg+0x18c>)
    5854:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5856:	2300      	movs	r3, #0
    5858:	9300      	str	r3, [sp, #0]
    585a:	2300      	movs	r3, #0
    585c:	2200      	movs	r2, #0
    585e:	2100      	movs	r1, #0
    5860:	20cf      	movs	r0, #207	; 0xcf
    5862:	4c0f      	ldr	r4, [pc, #60]	; (58a0 <spi_read_reg+0x174>)
    5864:	47a0      	blx	r4
		
		return N_FAIL;
    5866:	2300      	movs	r3, #0
    5868:	e015      	b.n	5896 <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    586a:	2308      	movs	r3, #8
    586c:	18fb      	adds	r3, r7, r3
    586e:	781b      	ldrb	r3, [r3, #0]
    5870:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    5872:	2308      	movs	r3, #8
    5874:	18fb      	adds	r3, r7, r3
    5876:	785b      	ldrb	r3, [r3, #1]
    5878:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    587a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    587c:	2308      	movs	r3, #8
    587e:	18fb      	adds	r3, r7, r3
    5880:	789b      	ldrb	r3, [r3, #2]
    5882:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    5884:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    5886:	2308      	movs	r3, #8
    5888:	18fb      	adds	r3, r7, r3
    588a:	78db      	ldrb	r3, [r3, #3]
    588c:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    588e:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    5890:	683b      	ldr	r3, [r7, #0]
    5892:	601a      	str	r2, [r3, #0]

	return N_OK;
    5894:	2301      	movs	r3, #1
}
    5896:	0018      	movs	r0, r3
    5898:	46bd      	mov	sp, r7
    589a:	b004      	add	sp, #16
    589c:	bdb0      	pop	{r4, r5, r7, pc}
    589e:	46c0      	nop			; (mov r8, r8)
    58a0:	00004c75 	.word	0x00004c75
    58a4:	0000025d 	.word	0x0000025d
    58a8:	00014658 	.word	0x00014658
    58ac:	00014110 	.word	0x00014110
    58b0:	0001212d 	.word	0x0001212d
    58b4:	000143e4 	.word	0x000143e4
    58b8:	00012161 	.word	0x00012161
    58bc:	00004fb9 	.word	0x00004fb9
    58c0:	00000263 	.word	0x00000263
    58c4:	00014410 	.word	0x00014410
    58c8:	000050f5 	.word	0x000050f5
    58cc:	0000026b 	.word	0x0000026b
    58d0:	00014444 	.word	0x00014444
    58d4:	00012249 	.word	0x00012249

000058d8 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    58d8:	b5b0      	push	{r4, r5, r7, lr}
    58da:	b088      	sub	sp, #32
    58dc:	af02      	add	r7, sp, #8
    58de:	60f8      	str	r0, [r7, #12]
    58e0:	60b9      	str	r1, [r7, #8]
    58e2:	1dbb      	adds	r3, r7, #6
    58e4:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    58e6:	2317      	movs	r3, #23
    58e8:	18fb      	adds	r3, r7, r3
    58ea:	22c8      	movs	r2, #200	; 0xc8
    58ec:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    58ee:	1dbb      	adds	r3, r7, #6
    58f0:	881a      	ldrh	r2, [r3, #0]
    58f2:	2316      	movs	r3, #22
    58f4:	18fc      	adds	r4, r7, r3
    58f6:	68f9      	ldr	r1, [r7, #12]
    58f8:	2317      	movs	r3, #23
    58fa:	18fb      	adds	r3, r7, r3
    58fc:	7818      	ldrb	r0, [r3, #0]
    58fe:	2300      	movs	r3, #0
    5900:	9300      	str	r3, [sp, #0]
    5902:	0013      	movs	r3, r2
    5904:	2200      	movs	r2, #0
    5906:	4d38      	ldr	r5, [pc, #224]	; (59e8 <nm_spi_read+0x110>)
    5908:	47a8      	blx	r5
    590a:	0003      	movs	r3, r0
    590c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    590e:	2316      	movs	r3, #22
    5910:	18fb      	adds	r3, r7, r3
    5912:	781b      	ldrb	r3, [r3, #0]
    5914:	b25b      	sxtb	r3, r3
    5916:	2b01      	cmp	r3, #1
    5918:	d010      	beq.n	593c <nm_spi_read+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    591a:	4a34      	ldr	r2, [pc, #208]	; (59ec <nm_spi_read+0x114>)
    591c:	4934      	ldr	r1, [pc, #208]	; (59f0 <nm_spi_read+0x118>)
    591e:	4b35      	ldr	r3, [pc, #212]	; (59f4 <nm_spi_read+0x11c>)
    5920:	0018      	movs	r0, r3
    5922:	4b35      	ldr	r3, [pc, #212]	; (59f8 <nm_spi_read+0x120>)
    5924:	4798      	blx	r3
    5926:	68fa      	ldr	r2, [r7, #12]
    5928:	4b34      	ldr	r3, [pc, #208]	; (59fc <nm_spi_read+0x124>)
    592a:	0011      	movs	r1, r2
    592c:	0018      	movs	r0, r3
    592e:	4b32      	ldr	r3, [pc, #200]	; (59f8 <nm_spi_read+0x120>)
    5930:	4798      	blx	r3
    5932:	200d      	movs	r0, #13
    5934:	4b32      	ldr	r3, [pc, #200]	; (5a00 <nm_spi_read+0x128>)
    5936:	4798      	blx	r3
		return N_FAIL;
    5938:	2300      	movs	r3, #0
    593a:	e051      	b.n	59e0 <nm_spi_read+0x108>
	}

	result = spi_cmd_rsp(cmd);
    593c:	2316      	movs	r3, #22
    593e:	18fc      	adds	r4, r7, r3
    5940:	2317      	movs	r3, #23
    5942:	18fb      	adds	r3, r7, r3
    5944:	781b      	ldrb	r3, [r3, #0]
    5946:	0018      	movs	r0, r3
    5948:	4b2e      	ldr	r3, [pc, #184]	; (5a04 <nm_spi_read+0x12c>)
    594a:	4798      	blx	r3
    594c:	0003      	movs	r3, r0
    594e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5950:	2316      	movs	r3, #22
    5952:	18fb      	adds	r3, r7, r3
    5954:	781b      	ldrb	r3, [r3, #0]
    5956:	b25b      	sxtb	r3, r3
    5958:	2b01      	cmp	r3, #1
    595a:	d018      	beq.n	598e <nm_spi_read+0xb6>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    595c:	4a2a      	ldr	r2, [pc, #168]	; (5a08 <nm_spi_read+0x130>)
    595e:	4924      	ldr	r1, [pc, #144]	; (59f0 <nm_spi_read+0x118>)
    5960:	4b24      	ldr	r3, [pc, #144]	; (59f4 <nm_spi_read+0x11c>)
    5962:	0018      	movs	r0, r3
    5964:	4b24      	ldr	r3, [pc, #144]	; (59f8 <nm_spi_read+0x120>)
    5966:	4798      	blx	r3
    5968:	68fa      	ldr	r2, [r7, #12]
    596a:	4b28      	ldr	r3, [pc, #160]	; (5a0c <nm_spi_read+0x134>)
    596c:	0011      	movs	r1, r2
    596e:	0018      	movs	r0, r3
    5970:	4b21      	ldr	r3, [pc, #132]	; (59f8 <nm_spi_read+0x120>)
    5972:	4798      	blx	r3
    5974:	200d      	movs	r0, #13
    5976:	4b22      	ldr	r3, [pc, #136]	; (5a00 <nm_spi_read+0x128>)
    5978:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    597a:	2300      	movs	r3, #0
    597c:	9300      	str	r3, [sp, #0]
    597e:	2300      	movs	r3, #0
    5980:	2200      	movs	r2, #0
    5982:	2100      	movs	r1, #0
    5984:	20cf      	movs	r0, #207	; 0xcf
    5986:	4c18      	ldr	r4, [pc, #96]	; (59e8 <nm_spi_read+0x110>)
    5988:	47a0      	blx	r4
		return N_FAIL;
    598a:	2300      	movs	r3, #0
    598c:	e028      	b.n	59e0 <nm_spi_read+0x108>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    598e:	2316      	movs	r3, #22
    5990:	18fc      	adds	r4, r7, r3
    5992:	1dbb      	adds	r3, r7, #6
    5994:	8819      	ldrh	r1, [r3, #0]
    5996:	68bb      	ldr	r3, [r7, #8]
    5998:	2200      	movs	r2, #0
    599a:	0018      	movs	r0, r3
    599c:	4b1c      	ldr	r3, [pc, #112]	; (5a10 <nm_spi_read+0x138>)
    599e:	4798      	blx	r3
    59a0:	0003      	movs	r3, r0
    59a2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    59a4:	2316      	movs	r3, #22
    59a6:	18fb      	adds	r3, r7, r3
    59a8:	781b      	ldrb	r3, [r3, #0]
    59aa:	b25b      	sxtb	r3, r3
    59ac:	2b01      	cmp	r3, #1
    59ae:	d016      	beq.n	59de <nm_spi_read+0x106>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    59b0:	4a18      	ldr	r2, [pc, #96]	; (5a14 <nm_spi_read+0x13c>)
    59b2:	490f      	ldr	r1, [pc, #60]	; (59f0 <nm_spi_read+0x118>)
    59b4:	4b0f      	ldr	r3, [pc, #60]	; (59f4 <nm_spi_read+0x11c>)
    59b6:	0018      	movs	r0, r3
    59b8:	4b0f      	ldr	r3, [pc, #60]	; (59f8 <nm_spi_read+0x120>)
    59ba:	4798      	blx	r3
    59bc:	4b16      	ldr	r3, [pc, #88]	; (5a18 <nm_spi_read+0x140>)
    59be:	0018      	movs	r0, r3
    59c0:	4b16      	ldr	r3, [pc, #88]	; (5a1c <nm_spi_read+0x144>)
    59c2:	4798      	blx	r3
    59c4:	200d      	movs	r0, #13
    59c6:	4b0e      	ldr	r3, [pc, #56]	; (5a00 <nm_spi_read+0x128>)
    59c8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    59ca:	2300      	movs	r3, #0
    59cc:	9300      	str	r3, [sp, #0]
    59ce:	2300      	movs	r3, #0
    59d0:	2200      	movs	r2, #0
    59d2:	2100      	movs	r1, #0
    59d4:	20cf      	movs	r0, #207	; 0xcf
    59d6:	4c04      	ldr	r4, [pc, #16]	; (59e8 <nm_spi_read+0x110>)
    59d8:	47a0      	blx	r4
		return N_FAIL;
    59da:	2300      	movs	r3, #0
    59dc:	e000      	b.n	59e0 <nm_spi_read+0x108>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    59de:	2301      	movs	r3, #1
}
    59e0:	0018      	movs	r0, r3
    59e2:	46bd      	mov	sp, r7
    59e4:	b006      	add	sp, #24
    59e6:	bdb0      	pop	{r4, r5, r7, pc}
    59e8:	00004c75 	.word	0x00004c75
    59ec:	0000028d 	.word	0x0000028d
    59f0:	00014668 	.word	0x00014668
    59f4:	00014110 	.word	0x00014110
    59f8:	0001212d 	.word	0x0001212d
    59fc:	00014464 	.word	0x00014464
    5a00:	00012161 	.word	0x00012161
    5a04:	00004fb9 	.word	0x00004fb9
    5a08:	00000293 	.word	0x00000293
    5a0c:	00014494 	.word	0x00014494
    5a10:	000050f5 	.word	0x000050f5
    5a14:	0000029d 	.word	0x0000029d
    5a18:	000144cc 	.word	0x000144cc
    5a1c:	00012249 	.word	0x00012249

00005a20 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    5a20:	b580      	push	{r7, lr}
    5a22:	b082      	sub	sp, #8
    5a24:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    5a26:	4b0c      	ldr	r3, [pc, #48]	; (5a58 <spi_init_pkt_sz+0x38>)
    5a28:	0018      	movs	r0, r3
    5a2a:	4b0c      	ldr	r3, [pc, #48]	; (5a5c <spi_init_pkt_sz+0x3c>)
    5a2c:	4798      	blx	r3
    5a2e:	0003      	movs	r3, r0
    5a30:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    5a32:	687b      	ldr	r3, [r7, #4]
    5a34:	2270      	movs	r2, #112	; 0x70
    5a36:	4393      	bics	r3, r2
    5a38:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	2250      	movs	r2, #80	; 0x50
    5a3e:	4313      	orrs	r3, r2
    5a40:	607b      	str	r3, [r7, #4]
    5a42:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	4a04      	ldr	r2, [pc, #16]	; (5a58 <spi_init_pkt_sz+0x38>)
    5a48:	0019      	movs	r1, r3
    5a4a:	0010      	movs	r0, r2
    5a4c:	4b04      	ldr	r3, [pc, #16]	; (5a60 <spi_init_pkt_sz+0x40>)
    5a4e:	4798      	blx	r3
}
    5a50:	46c0      	nop			; (mov r8, r8)
    5a52:	46bd      	mov	sp, r7
    5a54:	b002      	add	sp, #8
    5a56:	bd80      	pop	{r7, pc}
    5a58:	0000e824 	.word	0x0000e824
    5a5c:	00005bc9 	.word	0x00005bc9
    5a60:	00005c3d 	.word	0x00005c3d

00005a64 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    5a64:	b580      	push	{r7, lr}
    5a66:	b082      	sub	sp, #8
    5a68:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
    5a6a:	2300      	movs	r3, #0
    5a6c:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    5a6e:	4b3e      	ldr	r3, [pc, #248]	; (5b68 <nm_spi_init+0x104>)
    5a70:	2200      	movs	r2, #0
    5a72:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    5a74:	003b      	movs	r3, r7
    5a76:	4a3d      	ldr	r2, [pc, #244]	; (5b6c <nm_spi_init+0x108>)
    5a78:	0019      	movs	r1, r3
    5a7a:	0010      	movs	r0, r2
    5a7c:	4b3c      	ldr	r3, [pc, #240]	; (5b70 <nm_spi_init+0x10c>)
    5a7e:	4798      	blx	r3
    5a80:	1e03      	subs	r3, r0, #0
    5a82:	d126      	bne.n	5ad2 <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    5a84:	4b38      	ldr	r3, [pc, #224]	; (5b68 <nm_spi_init+0x104>)
    5a86:	2201      	movs	r2, #1
    5a88:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    5a8a:	4a3a      	ldr	r2, [pc, #232]	; (5b74 <nm_spi_init+0x110>)
    5a8c:	493a      	ldr	r1, [pc, #232]	; (5b78 <nm_spi_init+0x114>)
    5a8e:	4b3b      	ldr	r3, [pc, #236]	; (5b7c <nm_spi_init+0x118>)
    5a90:	0018      	movs	r0, r3
    5a92:	4b3b      	ldr	r3, [pc, #236]	; (5b80 <nm_spi_init+0x11c>)
    5a94:	4798      	blx	r3
    5a96:	4b3b      	ldr	r3, [pc, #236]	; (5b84 <nm_spi_init+0x120>)
    5a98:	0018      	movs	r0, r3
    5a9a:	4b3b      	ldr	r3, [pc, #236]	; (5b88 <nm_spi_init+0x124>)
    5a9c:	4798      	blx	r3
    5a9e:	200d      	movs	r0, #13
    5aa0:	4b3a      	ldr	r3, [pc, #232]	; (5b8c <nm_spi_init+0x128>)
    5aa2:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    5aa4:	003b      	movs	r3, r7
    5aa6:	4a31      	ldr	r2, [pc, #196]	; (5b6c <nm_spi_init+0x108>)
    5aa8:	0019      	movs	r1, r3
    5aaa:	0010      	movs	r0, r2
    5aac:	4b30      	ldr	r3, [pc, #192]	; (5b70 <nm_spi_init+0x10c>)
    5aae:	4798      	blx	r3
    5ab0:	1e03      	subs	r3, r0, #0
    5ab2:	d10e      	bne.n	5ad2 <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    5ab4:	4a36      	ldr	r2, [pc, #216]	; (5b90 <nm_spi_init+0x12c>)
    5ab6:	4930      	ldr	r1, [pc, #192]	; (5b78 <nm_spi_init+0x114>)
    5ab8:	4b30      	ldr	r3, [pc, #192]	; (5b7c <nm_spi_init+0x118>)
    5aba:	0018      	movs	r0, r3
    5abc:	4b30      	ldr	r3, [pc, #192]	; (5b80 <nm_spi_init+0x11c>)
    5abe:	4798      	blx	r3
    5ac0:	4b34      	ldr	r3, [pc, #208]	; (5b94 <nm_spi_init+0x130>)
    5ac2:	0018      	movs	r0, r3
    5ac4:	4b30      	ldr	r3, [pc, #192]	; (5b88 <nm_spi_init+0x124>)
    5ac6:	4798      	blx	r3
    5ac8:	200d      	movs	r0, #13
    5aca:	4b30      	ldr	r3, [pc, #192]	; (5b8c <nm_spi_init+0x128>)
    5acc:	4798      	blx	r3
			return 0;
    5ace:	2300      	movs	r3, #0
    5ad0:	e045      	b.n	5b5e <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    5ad2:	4b25      	ldr	r3, [pc, #148]	; (5b68 <nm_spi_init+0x104>)
    5ad4:	781b      	ldrb	r3, [r3, #0]
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d125      	bne.n	5b26 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    5ada:	683b      	ldr	r3, [r7, #0]
    5adc:	220c      	movs	r2, #12
    5ade:	4393      	bics	r3, r2
    5ae0:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    5ae2:	683b      	ldr	r3, [r7, #0]
    5ae4:	2270      	movs	r2, #112	; 0x70
    5ae6:	4393      	bics	r3, r2
    5ae8:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    5aea:	683b      	ldr	r3, [r7, #0]
    5aec:	2250      	movs	r2, #80	; 0x50
    5aee:	4313      	orrs	r3, r2
    5af0:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    5af2:	683b      	ldr	r3, [r7, #0]
    5af4:	4a1d      	ldr	r2, [pc, #116]	; (5b6c <nm_spi_init+0x108>)
    5af6:	0019      	movs	r1, r3
    5af8:	0010      	movs	r0, r2
    5afa:	4b27      	ldr	r3, [pc, #156]	; (5b98 <nm_spi_init+0x134>)
    5afc:	4798      	blx	r3
    5afe:	1e03      	subs	r3, r0, #0
    5b00:	d10e      	bne.n	5b20 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    5b02:	4a26      	ldr	r2, [pc, #152]	; (5b9c <nm_spi_init+0x138>)
    5b04:	491c      	ldr	r1, [pc, #112]	; (5b78 <nm_spi_init+0x114>)
    5b06:	4b1d      	ldr	r3, [pc, #116]	; (5b7c <nm_spi_init+0x118>)
    5b08:	0018      	movs	r0, r3
    5b0a:	4b1d      	ldr	r3, [pc, #116]	; (5b80 <nm_spi_init+0x11c>)
    5b0c:	4798      	blx	r3
    5b0e:	4b24      	ldr	r3, [pc, #144]	; (5ba0 <nm_spi_init+0x13c>)
    5b10:	0018      	movs	r0, r3
    5b12:	4b1d      	ldr	r3, [pc, #116]	; (5b88 <nm_spi_init+0x124>)
    5b14:	4798      	blx	r3
    5b16:	200d      	movs	r0, #13
    5b18:	4b1c      	ldr	r3, [pc, #112]	; (5b8c <nm_spi_init+0x128>)
    5b1a:	4798      	blx	r3
			return 0;
    5b1c:	2300      	movs	r3, #0
    5b1e:	e01e      	b.n	5b5e <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    5b20:	4b11      	ldr	r3, [pc, #68]	; (5b68 <nm_spi_init+0x104>)
    5b22:	2201      	movs	r2, #1
    5b24:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    5b26:	1d3a      	adds	r2, r7, #4
    5b28:	2380      	movs	r3, #128	; 0x80
    5b2a:	015b      	lsls	r3, r3, #5
    5b2c:	0011      	movs	r1, r2
    5b2e:	0018      	movs	r0, r3
    5b30:	4b0f      	ldr	r3, [pc, #60]	; (5b70 <nm_spi_init+0x10c>)
    5b32:	4798      	blx	r3
    5b34:	1e03      	subs	r3, r0, #0
    5b36:	d10f      	bne.n	5b58 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    5b38:	4a1a      	ldr	r2, [pc, #104]	; (5ba4 <nm_spi_init+0x140>)
    5b3a:	490f      	ldr	r1, [pc, #60]	; (5b78 <nm_spi_init+0x114>)
    5b3c:	4b0f      	ldr	r3, [pc, #60]	; (5b7c <nm_spi_init+0x118>)
    5b3e:	0018      	movs	r0, r3
    5b40:	4b0f      	ldr	r3, [pc, #60]	; (5b80 <nm_spi_init+0x11c>)
    5b42:	4798      	blx	r3
    5b44:	4b18      	ldr	r3, [pc, #96]	; (5ba8 <nm_spi_init+0x144>)
    5b46:	0018      	movs	r0, r3
    5b48:	4b0f      	ldr	r3, [pc, #60]	; (5b88 <nm_spi_init+0x124>)
    5b4a:	4798      	blx	r3
    5b4c:	200d      	movs	r0, #13
    5b4e:	4b0f      	ldr	r3, [pc, #60]	; (5b8c <nm_spi_init+0x128>)
    5b50:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    5b52:	2306      	movs	r3, #6
    5b54:	425b      	negs	r3, r3
    5b56:	e002      	b.n	5b5e <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    5b58:	4b14      	ldr	r3, [pc, #80]	; (5bac <nm_spi_init+0x148>)
    5b5a:	4798      	blx	r3


	return M2M_SUCCESS;
    5b5c:	2300      	movs	r3, #0
}
    5b5e:	0018      	movs	r0, r3
    5b60:	46bd      	mov	sp, r7
    5b62:	b002      	add	sp, #8
    5b64:	bd80      	pop	{r7, pc}
    5b66:	46c0      	nop			; (mov r8, r8)
    5b68:	20000298 	.word	0x20000298
    5b6c:	0000e824 	.word	0x0000e824
    5b70:	0000572d 	.word	0x0000572d
    5b74:	000002de 	.word	0x000002de
    5b78:	00014674 	.word	0x00014674
    5b7c:	00014110 	.word	0x00014110
    5b80:	0001212d 	.word	0x0001212d
    5b84:	000144f4 	.word	0x000144f4
    5b88:	00012249 	.word	0x00012249
    5b8c:	00012161 	.word	0x00012161
    5b90:	000002e1 	.word	0x000002e1
    5b94:	00014544 	.word	0x00014544
    5b98:	000054cd 	.word	0x000054cd
    5b9c:	000002eb 	.word	0x000002eb
    5ba0:	00014570 	.word	0x00014570
    5ba4:	000002f5 	.word	0x000002f5
    5ba8:	000145a4 	.word	0x000145a4
    5bac:	00005a21 	.word	0x00005a21

00005bb0 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
    5bb0:	b580      	push	{r7, lr}
    5bb2:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    5bb4:	4b03      	ldr	r3, [pc, #12]	; (5bc4 <nm_spi_deinit+0x14>)
    5bb6:	2200      	movs	r2, #0
    5bb8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    5bba:	2300      	movs	r3, #0
}
    5bbc:	0018      	movs	r0, r3
    5bbe:	46bd      	mov	sp, r7
    5bc0:	bd80      	pop	{r7, pc}
    5bc2:	46c0      	nop			; (mov r8, r8)
    5bc4:	20000298 	.word	0x20000298

00005bc8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    5bc8:	b580      	push	{r7, lr}
    5bca:	b084      	sub	sp, #16
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    5bd0:	230c      	movs	r3, #12
    5bd2:	18fa      	adds	r2, r7, r3
    5bd4:	687b      	ldr	r3, [r7, #4]
    5bd6:	0011      	movs	r1, r2
    5bd8:	0018      	movs	r0, r3
    5bda:	4b03      	ldr	r3, [pc, #12]	; (5be8 <nm_spi_read_reg+0x20>)
    5bdc:	4798      	blx	r3

	return u32Val;
    5bde:	68fb      	ldr	r3, [r7, #12]
}
    5be0:	0018      	movs	r0, r3
    5be2:	46bd      	mov	sp, r7
    5be4:	b004      	add	sp, #16
    5be6:	bd80      	pop	{r7, pc}
    5be8:	0000572d 	.word	0x0000572d

00005bec <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    5bec:	b590      	push	{r4, r7, lr}
    5bee:	b085      	sub	sp, #20
    5bf0:	af00      	add	r7, sp, #0
    5bf2:	6078      	str	r0, [r7, #4]
    5bf4:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    5bf6:	230f      	movs	r3, #15
    5bf8:	18fc      	adds	r4, r7, r3
    5bfa:	683a      	ldr	r2, [r7, #0]
    5bfc:	687b      	ldr	r3, [r7, #4]
    5bfe:	0011      	movs	r1, r2
    5c00:	0018      	movs	r0, r3
    5c02:	4b0d      	ldr	r3, [pc, #52]	; (5c38 <nm_spi_read_reg_with_ret+0x4c>)
    5c04:	4798      	blx	r3
    5c06:	0003      	movs	r3, r0
    5c08:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5c0a:	230f      	movs	r3, #15
    5c0c:	18fb      	adds	r3, r7, r3
    5c0e:	781b      	ldrb	r3, [r3, #0]
    5c10:	b25b      	sxtb	r3, r3
    5c12:	2b01      	cmp	r3, #1
    5c14:	d104      	bne.n	5c20 <nm_spi_read_reg_with_ret+0x34>
    5c16:	230f      	movs	r3, #15
    5c18:	18fb      	adds	r3, r7, r3
    5c1a:	2200      	movs	r2, #0
    5c1c:	701a      	strb	r2, [r3, #0]
    5c1e:	e003      	b.n	5c28 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5c20:	230f      	movs	r3, #15
    5c22:	18fb      	adds	r3, r7, r3
    5c24:	22fa      	movs	r2, #250	; 0xfa
    5c26:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5c28:	230f      	movs	r3, #15
    5c2a:	18fb      	adds	r3, r7, r3
    5c2c:	781b      	ldrb	r3, [r3, #0]
    5c2e:	b25b      	sxtb	r3, r3
}
    5c30:	0018      	movs	r0, r3
    5c32:	46bd      	mov	sp, r7
    5c34:	b005      	add	sp, #20
    5c36:	bd90      	pop	{r4, r7, pc}
    5c38:	0000572d 	.word	0x0000572d

00005c3c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    5c3c:	b590      	push	{r4, r7, lr}
    5c3e:	b085      	sub	sp, #20
    5c40:	af00      	add	r7, sp, #0
    5c42:	6078      	str	r0, [r7, #4]
    5c44:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    5c46:	230f      	movs	r3, #15
    5c48:	18fc      	adds	r4, r7, r3
    5c4a:	683a      	ldr	r2, [r7, #0]
    5c4c:	687b      	ldr	r3, [r7, #4]
    5c4e:	0011      	movs	r1, r2
    5c50:	0018      	movs	r0, r3
    5c52:	4b0d      	ldr	r3, [pc, #52]	; (5c88 <nm_spi_write_reg+0x4c>)
    5c54:	4798      	blx	r3
    5c56:	0003      	movs	r3, r0
    5c58:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5c5a:	230f      	movs	r3, #15
    5c5c:	18fb      	adds	r3, r7, r3
    5c5e:	781b      	ldrb	r3, [r3, #0]
    5c60:	b25b      	sxtb	r3, r3
    5c62:	2b01      	cmp	r3, #1
    5c64:	d104      	bne.n	5c70 <nm_spi_write_reg+0x34>
    5c66:	230f      	movs	r3, #15
    5c68:	18fb      	adds	r3, r7, r3
    5c6a:	2200      	movs	r2, #0
    5c6c:	701a      	strb	r2, [r3, #0]
    5c6e:	e003      	b.n	5c78 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5c70:	230f      	movs	r3, #15
    5c72:	18fb      	adds	r3, r7, r3
    5c74:	22fa      	movs	r2, #250	; 0xfa
    5c76:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5c78:	230f      	movs	r3, #15
    5c7a:	18fb      	adds	r3, r7, r3
    5c7c:	781b      	ldrb	r3, [r3, #0]
    5c7e:	b25b      	sxtb	r3, r3
}
    5c80:	0018      	movs	r0, r3
    5c82:	46bd      	mov	sp, r7
    5c84:	b005      	add	sp, #20
    5c86:	bd90      	pop	{r4, r7, pc}
    5c88:	000054cd 	.word	0x000054cd

00005c8c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5c8c:	b590      	push	{r4, r7, lr}
    5c8e:	b087      	sub	sp, #28
    5c90:	af00      	add	r7, sp, #0
    5c92:	60f8      	str	r0, [r7, #12]
    5c94:	60b9      	str	r1, [r7, #8]
    5c96:	1dbb      	adds	r3, r7, #6
    5c98:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    5c9a:	2317      	movs	r3, #23
    5c9c:	18fc      	adds	r4, r7, r3
    5c9e:	1dbb      	adds	r3, r7, #6
    5ca0:	881a      	ldrh	r2, [r3, #0]
    5ca2:	68b9      	ldr	r1, [r7, #8]
    5ca4:	68fb      	ldr	r3, [r7, #12]
    5ca6:	0018      	movs	r0, r3
    5ca8:	4b0d      	ldr	r3, [pc, #52]	; (5ce0 <nm_spi_read_block+0x54>)
    5caa:	4798      	blx	r3
    5cac:	0003      	movs	r3, r0
    5cae:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5cb0:	2317      	movs	r3, #23
    5cb2:	18fb      	adds	r3, r7, r3
    5cb4:	781b      	ldrb	r3, [r3, #0]
    5cb6:	b25b      	sxtb	r3, r3
    5cb8:	2b01      	cmp	r3, #1
    5cba:	d104      	bne.n	5cc6 <nm_spi_read_block+0x3a>
    5cbc:	2317      	movs	r3, #23
    5cbe:	18fb      	adds	r3, r7, r3
    5cc0:	2200      	movs	r2, #0
    5cc2:	701a      	strb	r2, [r3, #0]
    5cc4:	e003      	b.n	5cce <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5cc6:	2317      	movs	r3, #23
    5cc8:	18fb      	adds	r3, r7, r3
    5cca:	22fa      	movs	r2, #250	; 0xfa
    5ccc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5cce:	2317      	movs	r3, #23
    5cd0:	18fb      	adds	r3, r7, r3
    5cd2:	781b      	ldrb	r3, [r3, #0]
    5cd4:	b25b      	sxtb	r3, r3
}
    5cd6:	0018      	movs	r0, r3
    5cd8:	46bd      	mov	sp, r7
    5cda:	b007      	add	sp, #28
    5cdc:	bd90      	pop	{r4, r7, pc}
    5cde:	46c0      	nop			; (mov r8, r8)
    5ce0:	000058d9 	.word	0x000058d9

00005ce4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5ce4:	b590      	push	{r4, r7, lr}
    5ce6:	b087      	sub	sp, #28
    5ce8:	af00      	add	r7, sp, #0
    5cea:	60f8      	str	r0, [r7, #12]
    5cec:	60b9      	str	r1, [r7, #8]
    5cee:	1dbb      	adds	r3, r7, #6
    5cf0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    5cf2:	2317      	movs	r3, #23
    5cf4:	18fc      	adds	r4, r7, r3
    5cf6:	1dbb      	adds	r3, r7, #6
    5cf8:	881a      	ldrh	r2, [r3, #0]
    5cfa:	68b9      	ldr	r1, [r7, #8]
    5cfc:	68fb      	ldr	r3, [r7, #12]
    5cfe:	0018      	movs	r0, r3
    5d00:	4b0d      	ldr	r3, [pc, #52]	; (5d38 <nm_spi_write_block+0x54>)
    5d02:	4798      	blx	r3
    5d04:	0003      	movs	r3, r0
    5d06:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5d08:	2317      	movs	r3, #23
    5d0a:	18fb      	adds	r3, r7, r3
    5d0c:	781b      	ldrb	r3, [r3, #0]
    5d0e:	b25b      	sxtb	r3, r3
    5d10:	2b01      	cmp	r3, #1
    5d12:	d104      	bne.n	5d1e <nm_spi_write_block+0x3a>
    5d14:	2317      	movs	r3, #23
    5d16:	18fb      	adds	r3, r7, r3
    5d18:	2200      	movs	r2, #0
    5d1a:	701a      	strb	r2, [r3, #0]
    5d1c:	e003      	b.n	5d26 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5d1e:	2317      	movs	r3, #23
    5d20:	18fb      	adds	r3, r7, r3
    5d22:	22fa      	movs	r2, #250	; 0xfa
    5d24:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5d26:	2317      	movs	r3, #23
    5d28:	18fb      	adds	r3, r7, r3
    5d2a:	781b      	ldrb	r3, [r3, #0]
    5d2c:	b25b      	sxtb	r3, r3
}
    5d2e:	0018      	movs	r0, r3
    5d30:	46bd      	mov	sp, r7
    5d32:	b007      	add	sp, #28
    5d34:	bd90      	pop	{r4, r7, pc}
    5d36:	46c0      	nop			; (mov r8, r8)
    5d38:	000055e9 	.word	0x000055e9

00005d3c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    5d3c:	b590      	push	{r4, r7, lr}
    5d3e:	b089      	sub	sp, #36	; 0x24
    5d40:	af00      	add	r7, sp, #0
    5d42:	60b9      	str	r1, [r7, #8]
    5d44:	0011      	movs	r1, r2
    5d46:	607b      	str	r3, [r7, #4]
    5d48:	230f      	movs	r3, #15
    5d4a:	18fb      	adds	r3, r7, r3
    5d4c:	1c02      	adds	r2, r0, #0
    5d4e:	701a      	strb	r2, [r3, #0]
    5d50:	230e      	movs	r3, #14
    5d52:	18fb      	adds	r3, r7, r3
    5d54:	1c0a      	adds	r2, r1, #0
    5d56:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    5d58:	2330      	movs	r3, #48	; 0x30
    5d5a:	18fb      	adds	r3, r7, r3
    5d5c:	881b      	ldrh	r3, [r3, #0]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d100      	bne.n	5d64 <Socket_ReadSocketData+0x28>
    5d62:	e0d4      	b.n	5f0e <Socket_ReadSocketData+0x1d2>
    5d64:	230f      	movs	r3, #15
    5d66:	18fb      	adds	r3, r7, r3
    5d68:	2200      	movs	r2, #0
    5d6a:	569a      	ldrsb	r2, [r3, r2]
    5d6c:	496a      	ldr	r1, [pc, #424]	; (5f18 <Socket_ReadSocketData+0x1dc>)
    5d6e:	0013      	movs	r3, r2
    5d70:	005b      	lsls	r3, r3, #1
    5d72:	189b      	adds	r3, r3, r2
    5d74:	009b      	lsls	r3, r3, #2
    5d76:	585b      	ldr	r3, [r3, r1]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d100      	bne.n	5d7e <Socket_ReadSocketData+0x42>
    5d7c:	e0c7      	b.n	5f0e <Socket_ReadSocketData+0x1d2>
    5d7e:	230f      	movs	r3, #15
    5d80:	18fb      	adds	r3, r7, r3
    5d82:	2200      	movs	r2, #0
    5d84:	569a      	ldrsb	r2, [r3, r2]
    5d86:	4964      	ldr	r1, [pc, #400]	; (5f18 <Socket_ReadSocketData+0x1dc>)
    5d88:	0013      	movs	r3, r2
    5d8a:	005b      	lsls	r3, r3, #1
    5d8c:	189b      	adds	r3, r3, r2
    5d8e:	009b      	lsls	r3, r3, #2
    5d90:	18cb      	adds	r3, r1, r3
    5d92:	3304      	adds	r3, #4
    5d94:	881b      	ldrh	r3, [r3, #0]
    5d96:	b29b      	uxth	r3, r3
    5d98:	2b00      	cmp	r3, #0
    5d9a:	d100      	bne.n	5d9e <Socket_ReadSocketData+0x62>
    5d9c:	e0b7      	b.n	5f0e <Socket_ReadSocketData+0x1d2>
    5d9e:	230f      	movs	r3, #15
    5da0:	18fb      	adds	r3, r7, r3
    5da2:	2200      	movs	r2, #0
    5da4:	569a      	ldrsb	r2, [r3, r2]
    5da6:	495c      	ldr	r1, [pc, #368]	; (5f18 <Socket_ReadSocketData+0x1dc>)
    5da8:	0013      	movs	r3, r2
    5daa:	005b      	lsls	r3, r3, #1
    5dac:	189b      	adds	r3, r3, r2
    5dae:	009b      	lsls	r3, r3, #2
    5db0:	18cb      	adds	r3, r1, r3
    5db2:	3306      	adds	r3, #6
    5db4:	781b      	ldrb	r3, [r3, #0]
    5db6:	b2db      	uxtb	r3, r3
    5db8:	2b01      	cmp	r3, #1
    5dba:	d000      	beq.n	5dbe <Socket_ReadSocketData+0x82>
    5dbc:	e0a7      	b.n	5f0e <Socket_ReadSocketData+0x1d2>
	{
		uint32	u32Address = u32StartAddress;
    5dbe:	687b      	ldr	r3, [r7, #4]
    5dc0:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    5dc2:	68bb      	ldr	r3, [r7, #8]
    5dc4:	2230      	movs	r2, #48	; 0x30
    5dc6:	18ba      	adds	r2, r7, r2
    5dc8:	8812      	ldrh	r2, [r2, #0]
    5dca:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    5dcc:	2319      	movs	r3, #25
    5dce:	18fb      	adds	r3, r7, r3
    5dd0:	2201      	movs	r2, #1
    5dd2:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    5dd4:	231a      	movs	r3, #26
    5dd6:	18fb      	adds	r3, r7, r3
    5dd8:	2230      	movs	r2, #48	; 0x30
    5dda:	18ba      	adds	r2, r7, r2
    5ddc:	8812      	ldrh	r2, [r2, #0]
    5dde:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    5de0:	230f      	movs	r3, #15
    5de2:	18fb      	adds	r3, r7, r3
    5de4:	2200      	movs	r2, #0
    5de6:	569a      	ldrsb	r2, [r3, r2]
    5de8:	494b      	ldr	r1, [pc, #300]	; (5f18 <Socket_ReadSocketData+0x1dc>)
    5dea:	0013      	movs	r3, r2
    5dec:	005b      	lsls	r3, r3, #1
    5dee:	189b      	adds	r3, r3, r2
    5df0:	009b      	lsls	r3, r3, #2
    5df2:	18cb      	adds	r3, r1, r3
    5df4:	3304      	adds	r3, #4
    5df6:	881b      	ldrh	r3, [r3, #0]
    5df8:	b29b      	uxth	r3, r3
    5dfa:	221a      	movs	r2, #26
    5dfc:	18ba      	adds	r2, r7, r2
    5dfe:	8812      	ldrh	r2, [r2, #0]
    5e00:	1ad3      	subs	r3, r2, r3
    5e02:	b29a      	uxth	r2, r3
    5e04:	2316      	movs	r3, #22
    5e06:	18fb      	adds	r3, r7, r3
    5e08:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    5e0a:	2316      	movs	r3, #22
    5e0c:	18fb      	adds	r3, r7, r3
    5e0e:	2200      	movs	r2, #0
    5e10:	5e9b      	ldrsh	r3, [r3, r2]
    5e12:	2b00      	cmp	r3, #0
    5e14:	dd12      	ble.n	5e3c <Socket_ReadSocketData+0x100>
			{
				u8SetRxDone = 0;
    5e16:	2319      	movs	r3, #25
    5e18:	18fb      	adds	r3, r7, r3
    5e1a:	2200      	movs	r2, #0
    5e1c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    5e1e:	230f      	movs	r3, #15
    5e20:	18fb      	adds	r3, r7, r3
    5e22:	2200      	movs	r2, #0
    5e24:	569a      	ldrsb	r2, [r3, r2]
    5e26:	231a      	movs	r3, #26
    5e28:	18f9      	adds	r1, r7, r3
    5e2a:	483b      	ldr	r0, [pc, #236]	; (5f18 <Socket_ReadSocketData+0x1dc>)
    5e2c:	0013      	movs	r3, r2
    5e2e:	005b      	lsls	r3, r3, #1
    5e30:	189b      	adds	r3, r3, r2
    5e32:	009b      	lsls	r3, r3, #2
    5e34:	18c3      	adds	r3, r0, r3
    5e36:	3304      	adds	r3, #4
    5e38:	881b      	ldrh	r3, [r3, #0]
    5e3a:	800b      	strh	r3, [r1, #0]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    5e3c:	230f      	movs	r3, #15
    5e3e:	18fb      	adds	r3, r7, r3
    5e40:	2200      	movs	r2, #0
    5e42:	569a      	ldrsb	r2, [r3, r2]
    5e44:	4934      	ldr	r1, [pc, #208]	; (5f18 <Socket_ReadSocketData+0x1dc>)
    5e46:	0013      	movs	r3, r2
    5e48:	005b      	lsls	r3, r3, #1
    5e4a:	189b      	adds	r3, r3, r2
    5e4c:	009b      	lsls	r3, r3, #2
    5e4e:	5859      	ldr	r1, [r3, r1]
    5e50:	2319      	movs	r3, #25
    5e52:	18fb      	adds	r3, r7, r3
    5e54:	781c      	ldrb	r4, [r3, #0]
    5e56:	231a      	movs	r3, #26
    5e58:	18fb      	adds	r3, r7, r3
    5e5a:	881a      	ldrh	r2, [r3, #0]
    5e5c:	69f8      	ldr	r0, [r7, #28]
    5e5e:	0023      	movs	r3, r4
    5e60:	4c2e      	ldr	r4, [pc, #184]	; (5f1c <Socket_ReadSocketData+0x1e0>)
    5e62:	47a0      	blx	r4
    5e64:	1e03      	subs	r3, r0, #0
    5e66:	d13b      	bne.n	5ee0 <Socket_ReadSocketData+0x1a4>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    5e68:	230f      	movs	r3, #15
    5e6a:	18fb      	adds	r3, r7, r3
    5e6c:	2200      	movs	r2, #0
    5e6e:	569a      	ldrsb	r2, [r3, r2]
    5e70:	4929      	ldr	r1, [pc, #164]	; (5f18 <Socket_ReadSocketData+0x1dc>)
    5e72:	0013      	movs	r3, r2
    5e74:	005b      	lsls	r3, r3, #1
    5e76:	189b      	adds	r3, r3, r2
    5e78:	009b      	lsls	r3, r3, #2
    5e7a:	585a      	ldr	r2, [r3, r1]
    5e7c:	68bb      	ldr	r3, [r7, #8]
    5e7e:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    5e80:	231a      	movs	r3, #26
    5e82:	18fb      	adds	r3, r7, r3
    5e84:	2200      	movs	r2, #0
    5e86:	5e9a      	ldrsh	r2, [r3, r2]
    5e88:	68bb      	ldr	r3, [r7, #8]
    5e8a:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    5e8c:	68bb      	ldr	r3, [r7, #8]
    5e8e:	88da      	ldrh	r2, [r3, #6]
    5e90:	231a      	movs	r3, #26
    5e92:	18fb      	adds	r3, r7, r3
    5e94:	881b      	ldrh	r3, [r3, #0]
    5e96:	1ad3      	subs	r3, r2, r3
    5e98:	b29a      	uxth	r2, r3
    5e9a:	68bb      	ldr	r3, [r7, #8]
    5e9c:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    5e9e:	4b20      	ldr	r3, [pc, #128]	; (5f20 <Socket_ReadSocketData+0x1e4>)
    5ea0:	681b      	ldr	r3, [r3, #0]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d00b      	beq.n	5ebe <Socket_ReadSocketData+0x182>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    5ea6:	4b1e      	ldr	r3, [pc, #120]	; (5f20 <Socket_ReadSocketData+0x1e4>)
    5ea8:	681b      	ldr	r3, [r3, #0]
    5eaa:	68bc      	ldr	r4, [r7, #8]
    5eac:	220e      	movs	r2, #14
    5eae:	18ba      	adds	r2, r7, r2
    5eb0:	7811      	ldrb	r1, [r2, #0]
    5eb2:	220f      	movs	r2, #15
    5eb4:	18ba      	adds	r2, r7, r2
    5eb6:	2000      	movs	r0, #0
    5eb8:	5610      	ldrsb	r0, [r2, r0]
    5eba:	0022      	movs	r2, r4
    5ebc:	4798      	blx	r3

				u16ReadCount -= u16Read;
    5ebe:	2330      	movs	r3, #48	; 0x30
    5ec0:	18f9      	adds	r1, r7, r3
    5ec2:	2330      	movs	r3, #48	; 0x30
    5ec4:	18fa      	adds	r2, r7, r3
    5ec6:	231a      	movs	r3, #26
    5ec8:	18fb      	adds	r3, r7, r3
    5eca:	8812      	ldrh	r2, [r2, #0]
    5ecc:	881b      	ldrh	r3, [r3, #0]
    5ece:	1ad3      	subs	r3, r2, r3
    5ed0:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    5ed2:	231a      	movs	r3, #26
    5ed4:	18fb      	adds	r3, r7, r3
    5ed6:	881b      	ldrh	r3, [r3, #0]
    5ed8:	69fa      	ldr	r2, [r7, #28]
    5eda:	18d3      	adds	r3, r2, r3
    5edc:	61fb      	str	r3, [r7, #28]
    5ede:	e010      	b.n	5f02 <Socket_ReadSocketData+0x1c6>
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    5ee0:	4b10      	ldr	r3, [pc, #64]	; (5f24 <Socket_ReadSocketData+0x1e8>)
    5ee2:	0018      	movs	r0, r3
    5ee4:	4b10      	ldr	r3, [pc, #64]	; (5f28 <Socket_ReadSocketData+0x1ec>)
    5ee6:	4798      	blx	r3
    5ee8:	2330      	movs	r3, #48	; 0x30
    5eea:	18fb      	adds	r3, r7, r3
    5eec:	881a      	ldrh	r2, [r3, #0]
    5eee:	4b0f      	ldr	r3, [pc, #60]	; (5f2c <Socket_ReadSocketData+0x1f0>)
    5ef0:	0011      	movs	r1, r2
    5ef2:	0018      	movs	r0, r3
    5ef4:	4b0c      	ldr	r3, [pc, #48]	; (5f28 <Socket_ReadSocketData+0x1ec>)
    5ef6:	4798      	blx	r3
    5ef8:	200d      	movs	r0, #13
    5efa:	4b0d      	ldr	r3, [pc, #52]	; (5f30 <Socket_ReadSocketData+0x1f4>)
    5efc:	4798      	blx	r3
				break;
    5efe:	46c0      	nop			; (mov r8, r8)
			}
		}while(u16ReadCount != 0);
	}
}
    5f00:	e005      	b.n	5f0e <Socket_ReadSocketData+0x1d2>
		}while(u16ReadCount != 0);
    5f02:	2330      	movs	r3, #48	; 0x30
    5f04:	18fb      	adds	r3, r7, r3
    5f06:	881b      	ldrh	r3, [r3, #0]
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d000      	beq.n	5f0e <Socket_ReadSocketData+0x1d2>
    5f0c:	e75e      	b.n	5dcc <Socket_ReadSocketData+0x90>
}
    5f0e:	46c0      	nop			; (mov r8, r8)
    5f10:	46bd      	mov	sp, r7
    5f12:	b009      	add	sp, #36	; 0x24
    5f14:	bd90      	pop	{r4, r7, pc}
    5f16:	46c0      	nop			; (mov r8, r8)
    5f18:	20000418 	.word	0x20000418
    5f1c:	0000335d 	.word	0x0000335d
    5f20:	2000049c 	.word	0x2000049c
    5f24:	00014680 	.word	0x00014680
    5f28:	0001212d 	.word	0x0001212d
    5f2c:	0001468c 	.word	0x0001468c
    5f30:	00012161 	.word	0x00012161

00005f34 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    5f34:	b590      	push	{r4, r7, lr}
    5f36:	b0bb      	sub	sp, #236	; 0xec
    5f38:	af02      	add	r7, sp, #8
    5f3a:	603a      	str	r2, [r7, #0]
    5f3c:	1dfb      	adds	r3, r7, #7
    5f3e:	1c02      	adds	r2, r0, #0
    5f40:	701a      	strb	r2, [r3, #0]
    5f42:	1d3b      	adds	r3, r7, #4
    5f44:	1c0a      	adds	r2, r1, #0
    5f46:	801a      	strh	r2, [r3, #0]
	if(u8OpCode == SOCKET_CMD_BIND)
    5f48:	1dfb      	adds	r3, r7, #7
    5f4a:	781b      	ldrb	r3, [r3, #0]
    5f4c:	2b41      	cmp	r3, #65	; 0x41
    5f4e:	d120      	bne.n	5f92 <m2m_ip_cb+0x5e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    5f50:	23cc      	movs	r3, #204	; 0xcc
    5f52:	18f9      	adds	r1, r7, r3
    5f54:	6838      	ldr	r0, [r7, #0]
    5f56:	2300      	movs	r3, #0
    5f58:	2204      	movs	r2, #4
    5f5a:	4cd6      	ldr	r4, [pc, #856]	; (62b4 <m2m_ip_cb+0x380>)
    5f5c:	47a0      	blx	r4
    5f5e:	1e03      	subs	r3, r0, #0
    5f60:	d000      	beq.n	5f64 <m2m_ip_cb+0x30>
    5f62:	e265      	b.n	6430 <m2m_ip_cb+0x4fc>
		{
			strBind.status = strBindReply.s8Status;
    5f64:	23cc      	movs	r3, #204	; 0xcc
    5f66:	18fb      	adds	r3, r7, r3
    5f68:	2201      	movs	r2, #1
    5f6a:	569a      	ldrsb	r2, [r3, r2]
    5f6c:	23c8      	movs	r3, #200	; 0xc8
    5f6e:	18fb      	adds	r3, r7, r3
    5f70:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    5f72:	4bd1      	ldr	r3, [pc, #836]	; (62b8 <m2m_ip_cb+0x384>)
    5f74:	681b      	ldr	r3, [r3, #0]
    5f76:	2b00      	cmp	r3, #0
    5f78:	d100      	bne.n	5f7c <m2m_ip_cb+0x48>
    5f7a:	e259      	b.n	6430 <m2m_ip_cb+0x4fc>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    5f7c:	4bce      	ldr	r3, [pc, #824]	; (62b8 <m2m_ip_cb+0x384>)
    5f7e:	681b      	ldr	r3, [r3, #0]
    5f80:	22cc      	movs	r2, #204	; 0xcc
    5f82:	18ba      	adds	r2, r7, r2
    5f84:	2000      	movs	r0, #0
    5f86:	5610      	ldrsb	r0, [r2, r0]
    5f88:	22c8      	movs	r2, #200	; 0xc8
    5f8a:	18ba      	adds	r2, r7, r2
    5f8c:	2101      	movs	r1, #1
    5f8e:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    5f90:	e24e      	b.n	6430 <m2m_ip_cb+0x4fc>
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    5f92:	1dfb      	adds	r3, r7, #7
    5f94:	781b      	ldrb	r3, [r3, #0]
    5f96:	2b42      	cmp	r3, #66	; 0x42
    5f98:	d120      	bne.n	5fdc <m2m_ip_cb+0xa8>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    5f9a:	23c4      	movs	r3, #196	; 0xc4
    5f9c:	18f9      	adds	r1, r7, r3
    5f9e:	6838      	ldr	r0, [r7, #0]
    5fa0:	2300      	movs	r3, #0
    5fa2:	2204      	movs	r2, #4
    5fa4:	4cc3      	ldr	r4, [pc, #780]	; (62b4 <m2m_ip_cb+0x380>)
    5fa6:	47a0      	blx	r4
    5fa8:	1e03      	subs	r3, r0, #0
    5faa:	d000      	beq.n	5fae <m2m_ip_cb+0x7a>
    5fac:	e240      	b.n	6430 <m2m_ip_cb+0x4fc>
			strListen.status = strListenReply.s8Status;
    5fae:	23c4      	movs	r3, #196	; 0xc4
    5fb0:	18fb      	adds	r3, r7, r3
    5fb2:	2201      	movs	r2, #1
    5fb4:	569a      	ldrsb	r2, [r3, r2]
    5fb6:	23c0      	movs	r3, #192	; 0xc0
    5fb8:	18fb      	adds	r3, r7, r3
    5fba:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    5fbc:	4bbe      	ldr	r3, [pc, #760]	; (62b8 <m2m_ip_cb+0x384>)
    5fbe:	681b      	ldr	r3, [r3, #0]
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d100      	bne.n	5fc6 <m2m_ip_cb+0x92>
    5fc4:	e234      	b.n	6430 <m2m_ip_cb+0x4fc>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    5fc6:	4bbc      	ldr	r3, [pc, #752]	; (62b8 <m2m_ip_cb+0x384>)
    5fc8:	681b      	ldr	r3, [r3, #0]
    5fca:	22c4      	movs	r2, #196	; 0xc4
    5fcc:	18ba      	adds	r2, r7, r2
    5fce:	2000      	movs	r0, #0
    5fd0:	5610      	ldrsb	r0, [r2, r0]
    5fd2:	22c0      	movs	r2, #192	; 0xc0
    5fd4:	18ba      	adds	r2, r7, r2
    5fd6:	2102      	movs	r1, #2
    5fd8:	4798      	blx	r3
}
    5fda:	e229      	b.n	6430 <m2m_ip_cb+0x4fc>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    5fdc:	1dfb      	adds	r3, r7, #7
    5fde:	781b      	ldrb	r3, [r3, #0]
    5fe0:	2b43      	cmp	r3, #67	; 0x43
    5fe2:	d000      	beq.n	5fe6 <m2m_ip_cb+0xb2>
    5fe4:	e076      	b.n	60d4 <m2m_ip_cb+0x1a0>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    5fe6:	23b4      	movs	r3, #180	; 0xb4
    5fe8:	18f9      	adds	r1, r7, r3
    5fea:	6838      	ldr	r0, [r7, #0]
    5fec:	2300      	movs	r3, #0
    5fee:	220c      	movs	r2, #12
    5ff0:	4cb0      	ldr	r4, [pc, #704]	; (62b4 <m2m_ip_cb+0x380>)
    5ff2:	47a0      	blx	r4
    5ff4:	1e03      	subs	r3, r0, #0
    5ff6:	d000      	beq.n	5ffa <m2m_ip_cb+0xc6>
    5ff8:	e21a      	b.n	6430 <m2m_ip_cb+0x4fc>
			if(strAcceptReply.sConnectedSock >= 0)
    5ffa:	23b4      	movs	r3, #180	; 0xb4
    5ffc:	18fb      	adds	r3, r7, r3
    5ffe:	7a5b      	ldrb	r3, [r3, #9]
    6000:	b25b      	sxtb	r3, r3
    6002:	2b00      	cmp	r3, #0
    6004:	db3f      	blt.n	6086 <m2m_ip_cb+0x152>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    6006:	23b4      	movs	r3, #180	; 0xb4
    6008:	18fb      	adds	r3, r7, r3
    600a:	7a5b      	ldrb	r3, [r3, #9]
    600c:	b25b      	sxtb	r3, r3
    600e:	0019      	movs	r1, r3
    6010:	4aaa      	ldr	r2, [pc, #680]	; (62bc <m2m_ip_cb+0x388>)
    6012:	000b      	movs	r3, r1
    6014:	005b      	lsls	r3, r3, #1
    6016:	185b      	adds	r3, r3, r1
    6018:	009b      	lsls	r3, r3, #2
    601a:	18d3      	adds	r3, r2, r3
    601c:	3307      	adds	r3, #7
    601e:	2200      	movs	r2, #0
    6020:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    6022:	23b4      	movs	r3, #180	; 0xb4
    6024:	18fb      	adds	r3, r7, r3
    6026:	7a5b      	ldrb	r3, [r3, #9]
    6028:	b25b      	sxtb	r3, r3
    602a:	0019      	movs	r1, r3
    602c:	4aa3      	ldr	r2, [pc, #652]	; (62bc <m2m_ip_cb+0x388>)
    602e:	000b      	movs	r3, r1
    6030:	005b      	lsls	r3, r3, #1
    6032:	185b      	adds	r3, r3, r1
    6034:	009b      	lsls	r3, r3, #2
    6036:	18d3      	adds	r3, r2, r3
    6038:	3306      	adds	r3, #6
    603a:	2201      	movs	r2, #1
    603c:	701a      	strb	r2, [r3, #0]
				++gu16SessionID;
    603e:	4ba0      	ldr	r3, [pc, #640]	; (62c0 <m2m_ip_cb+0x38c>)
    6040:	881b      	ldrh	r3, [r3, #0]
    6042:	b29b      	uxth	r3, r3
    6044:	3301      	adds	r3, #1
    6046:	b29a      	uxth	r2, r3
    6048:	4b9d      	ldr	r3, [pc, #628]	; (62c0 <m2m_ip_cb+0x38c>)
    604a:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    604c:	4b9c      	ldr	r3, [pc, #624]	; (62c0 <m2m_ip_cb+0x38c>)
    604e:	881b      	ldrh	r3, [r3, #0]
    6050:	b29b      	uxth	r3, r3
    6052:	2b00      	cmp	r3, #0
    6054:	d106      	bne.n	6064 <m2m_ip_cb+0x130>
					++gu16SessionID;
    6056:	4b9a      	ldr	r3, [pc, #616]	; (62c0 <m2m_ip_cb+0x38c>)
    6058:	881b      	ldrh	r3, [r3, #0]
    605a:	b29b      	uxth	r3, r3
    605c:	3301      	adds	r3, #1
    605e:	b29a      	uxth	r2, r3
    6060:	4b97      	ldr	r3, [pc, #604]	; (62c0 <m2m_ip_cb+0x38c>)
    6062:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    6064:	23b4      	movs	r3, #180	; 0xb4
    6066:	18fb      	adds	r3, r7, r3
    6068:	7a5b      	ldrb	r3, [r3, #9]
    606a:	b25b      	sxtb	r3, r3
    606c:	0019      	movs	r1, r3
    606e:	4b94      	ldr	r3, [pc, #592]	; (62c0 <m2m_ip_cb+0x38c>)
    6070:	881b      	ldrh	r3, [r3, #0]
    6072:	b298      	uxth	r0, r3
    6074:	4a91      	ldr	r2, [pc, #580]	; (62bc <m2m_ip_cb+0x388>)
    6076:	000b      	movs	r3, r1
    6078:	005b      	lsls	r3, r3, #1
    607a:	185b      	adds	r3, r3, r1
    607c:	009b      	lsls	r3, r3, #2
    607e:	18d3      	adds	r3, r2, r3
    6080:	330a      	adds	r3, #10
    6082:	1c02      	adds	r2, r0, #0
    6084:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    6086:	23b4      	movs	r3, #180	; 0xb4
    6088:	18fb      	adds	r3, r7, r3
    608a:	2209      	movs	r2, #9
    608c:	569a      	ldrsb	r2, [r3, r2]
    608e:	23a0      	movs	r3, #160	; 0xa0
    6090:	18fb      	adds	r3, r7, r3
    6092:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    6094:	23a0      	movs	r3, #160	; 0xa0
    6096:	18fb      	adds	r3, r7, r3
    6098:	2202      	movs	r2, #2
    609a:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    609c:	23b4      	movs	r3, #180	; 0xb4
    609e:	18fb      	adds	r3, r7, r3
    60a0:	885a      	ldrh	r2, [r3, #2]
    60a2:	23a0      	movs	r3, #160	; 0xa0
    60a4:	18fb      	adds	r3, r7, r3
    60a6:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    60a8:	23b4      	movs	r3, #180	; 0xb4
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	685a      	ldr	r2, [r3, #4]
    60ae:	23a0      	movs	r3, #160	; 0xa0
    60b0:	18fb      	adds	r3, r7, r3
    60b2:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    60b4:	4b80      	ldr	r3, [pc, #512]	; (62b8 <m2m_ip_cb+0x384>)
    60b6:	681b      	ldr	r3, [r3, #0]
    60b8:	2b00      	cmp	r3, #0
    60ba:	d100      	bne.n	60be <m2m_ip_cb+0x18a>
    60bc:	e1b8      	b.n	6430 <m2m_ip_cb+0x4fc>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    60be:	4b7e      	ldr	r3, [pc, #504]	; (62b8 <m2m_ip_cb+0x384>)
    60c0:	681b      	ldr	r3, [r3, #0]
    60c2:	22b4      	movs	r2, #180	; 0xb4
    60c4:	18ba      	adds	r2, r7, r2
    60c6:	2008      	movs	r0, #8
    60c8:	5610      	ldrsb	r0, [r2, r0]
    60ca:	22a0      	movs	r2, #160	; 0xa0
    60cc:	18ba      	adds	r2, r7, r2
    60ce:	2104      	movs	r1, #4
    60d0:	4798      	blx	r3
}
    60d2:	e1ad      	b.n	6430 <m2m_ip_cb+0x4fc>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    60d4:	1dfb      	adds	r3, r7, #7
    60d6:	781b      	ldrb	r3, [r3, #0]
    60d8:	2b44      	cmp	r3, #68	; 0x44
    60da:	d003      	beq.n	60e4 <m2m_ip_cb+0x1b0>
    60dc:	1dfb      	adds	r3, r7, #7
    60de:	781b      	ldrb	r3, [r3, #0]
    60e0:	2b4b      	cmp	r3, #75	; 0x4b
    60e2:	d127      	bne.n	6134 <m2m_ip_cb+0x200>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    60e4:	239c      	movs	r3, #156	; 0x9c
    60e6:	18f9      	adds	r1, r7, r3
    60e8:	6838      	ldr	r0, [r7, #0]
    60ea:	2300      	movs	r3, #0
    60ec:	2204      	movs	r2, #4
    60ee:	4c71      	ldr	r4, [pc, #452]	; (62b4 <m2m_ip_cb+0x380>)
    60f0:	47a0      	blx	r4
    60f2:	1e03      	subs	r3, r0, #0
    60f4:	d000      	beq.n	60f8 <m2m_ip_cb+0x1c4>
    60f6:	e196      	b.n	6426 <m2m_ip_cb+0x4f2>
			strConnMsg.sock		= strConnectReply.sock;
    60f8:	239c      	movs	r3, #156	; 0x9c
    60fa:	18fb      	adds	r3, r7, r3
    60fc:	2200      	movs	r2, #0
    60fe:	569a      	ldrsb	r2, [r3, r2]
    6100:	2398      	movs	r3, #152	; 0x98
    6102:	18fb      	adds	r3, r7, r3
    6104:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    6106:	239c      	movs	r3, #156	; 0x9c
    6108:	18fb      	adds	r3, r7, r3
    610a:	2201      	movs	r2, #1
    610c:	569a      	ldrsb	r2, [r3, r2]
    610e:	2398      	movs	r3, #152	; 0x98
    6110:	18fb      	adds	r3, r7, r3
    6112:	705a      	strb	r2, [r3, #1]
			if(gpfAppSocketCb)
    6114:	4b68      	ldr	r3, [pc, #416]	; (62b8 <m2m_ip_cb+0x384>)
    6116:	681b      	ldr	r3, [r3, #0]
    6118:	2b00      	cmp	r3, #0
    611a:	d100      	bne.n	611e <m2m_ip_cb+0x1ea>
    611c:	e183      	b.n	6426 <m2m_ip_cb+0x4f2>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    611e:	4b66      	ldr	r3, [pc, #408]	; (62b8 <m2m_ip_cb+0x384>)
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	229c      	movs	r2, #156	; 0x9c
    6124:	18ba      	adds	r2, r7, r2
    6126:	2000      	movs	r0, #0
    6128:	5610      	ldrsb	r0, [r2, r0]
    612a:	2298      	movs	r2, #152	; 0x98
    612c:	18ba      	adds	r2, r7, r2
    612e:	2105      	movs	r1, #5
    6130:	4798      	blx	r3
	{
    6132:	e178      	b.n	6426 <m2m_ip_cb+0x4f2>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    6134:	1dfb      	adds	r3, r7, #7
    6136:	781b      	ldrb	r3, [r3, #0]
    6138:	2b4a      	cmp	r3, #74	; 0x4a
    613a:	d11e      	bne.n	617a <m2m_ip_cb+0x246>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    613c:	230c      	movs	r3, #12
    613e:	18f9      	adds	r1, r7, r3
    6140:	6838      	ldr	r0, [r7, #0]
    6142:	2300      	movs	r3, #0
    6144:	2244      	movs	r2, #68	; 0x44
    6146:	4c5b      	ldr	r4, [pc, #364]	; (62b4 <m2m_ip_cb+0x380>)
    6148:	47a0      	blx	r4
    614a:	1e03      	subs	r3, r0, #0
    614c:	d000      	beq.n	6150 <m2m_ip_cb+0x21c>
    614e:	e16f      	b.n	6430 <m2m_ip_cb+0x4fc>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    6150:	230c      	movs	r3, #12
    6152:	18fb      	adds	r3, r7, r3
    6154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6156:	230c      	movs	r3, #12
    6158:	18fb      	adds	r3, r7, r3
    615a:	641a      	str	r2, [r3, #64]	; 0x40
			if(gpfAppResolveCb)
    615c:	4b59      	ldr	r3, [pc, #356]	; (62c4 <m2m_ip_cb+0x390>)
    615e:	681b      	ldr	r3, [r3, #0]
    6160:	2b00      	cmp	r3, #0
    6162:	d100      	bne.n	6166 <m2m_ip_cb+0x232>
    6164:	e164      	b.n	6430 <m2m_ip_cb+0x4fc>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    6166:	4b57      	ldr	r3, [pc, #348]	; (62c4 <m2m_ip_cb+0x390>)
    6168:	681a      	ldr	r2, [r3, #0]
    616a:	230c      	movs	r3, #12
    616c:	18fb      	adds	r3, r7, r3
    616e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    6170:	230c      	movs	r3, #12
    6172:	18fb      	adds	r3, r7, r3
    6174:	0018      	movs	r0, r3
    6176:	4790      	blx	r2
}
    6178:	e15a      	b.n	6430 <m2m_ip_cb+0x4fc>
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    617a:	1dfb      	adds	r3, r7, #7
    617c:	781b      	ldrb	r3, [r3, #0]
    617e:	2b46      	cmp	r3, #70	; 0x46
    6180:	d008      	beq.n	6194 <m2m_ip_cb+0x260>
    6182:	1dfb      	adds	r3, r7, #7
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	2b48      	cmp	r3, #72	; 0x48
    6188:	d004      	beq.n	6194 <m2m_ip_cb+0x260>
    618a:	1dfb      	adds	r3, r7, #7
    618c:	781b      	ldrb	r3, [r3, #0]
    618e:	2b4d      	cmp	r3, #77	; 0x4d
    6190:	d000      	beq.n	6194 <m2m_ip_cb+0x260>
    6192:	e0c7      	b.n	6324 <m2m_ip_cb+0x3f0>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    6194:	23df      	movs	r3, #223	; 0xdf
    6196:	18fb      	adds	r3, r7, r3
    6198:	2206      	movs	r2, #6
    619a:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    619c:	1dfb      	adds	r3, r7, #7
    619e:	781b      	ldrb	r3, [r3, #0]
    61a0:	2b48      	cmp	r3, #72	; 0x48
    61a2:	d103      	bne.n	61ac <m2m_ip_cb+0x278>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    61a4:	23df      	movs	r3, #223	; 0xdf
    61a6:	18fb      	adds	r3, r7, r3
    61a8:	2209      	movs	r2, #9
    61aa:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    61ac:	23d8      	movs	r3, #216	; 0xd8
    61ae:	18fb      	adds	r3, r7, r3
    61b0:	2210      	movs	r2, #16
    61b2:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    61b4:	23d8      	movs	r3, #216	; 0xd8
    61b6:	18fb      	adds	r3, r7, r3
    61b8:	881a      	ldrh	r2, [r3, #0]
    61ba:	2388      	movs	r3, #136	; 0x88
    61bc:	18f9      	adds	r1, r7, r3
    61be:	6838      	ldr	r0, [r7, #0]
    61c0:	2300      	movs	r3, #0
    61c2:	4c3c      	ldr	r4, [pc, #240]	; (62b4 <m2m_ip_cb+0x380>)
    61c4:	47a0      	blx	r4
    61c6:	1e03      	subs	r3, r0, #0
    61c8:	d000      	beq.n	61cc <m2m_ip_cb+0x298>
    61ca:	e12e      	b.n	642a <m2m_ip_cb+0x4f6>
			uint16 u16SessionID = 0;
    61cc:	23d6      	movs	r3, #214	; 0xd6
    61ce:	18fb      	adds	r3, r7, r3
    61d0:	2200      	movs	r2, #0
    61d2:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    61d4:	23d5      	movs	r3, #213	; 0xd5
    61d6:	18fb      	adds	r3, r7, r3
    61d8:	2288      	movs	r2, #136	; 0x88
    61da:	18ba      	adds	r2, r7, r2
    61dc:	7b12      	ldrb	r2, [r2, #12]
    61de:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    61e0:	23d6      	movs	r3, #214	; 0xd6
    61e2:	18fb      	adds	r3, r7, r3
    61e4:	2288      	movs	r2, #136	; 0x88
    61e6:	18ba      	adds	r2, r7, r2
    61e8:	89d2      	ldrh	r2, [r2, #14]
    61ea:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    61ec:	23d5      	movs	r3, #213	; 0xd5
    61ee:	18fb      	adds	r3, r7, r3
    61f0:	2200      	movs	r2, #0
    61f2:	569a      	ldrsb	r2, [r3, r2]
    61f4:	4931      	ldr	r1, [pc, #196]	; (62bc <m2m_ip_cb+0x388>)
    61f6:	0013      	movs	r3, r2
    61f8:	005b      	lsls	r3, r3, #1
    61fa:	189b      	adds	r3, r3, r2
    61fc:	009b      	lsls	r3, r3, #2
    61fe:	18cb      	adds	r3, r1, r3
    6200:	3308      	adds	r3, #8
    6202:	2200      	movs	r2, #0
    6204:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    6206:	23d2      	movs	r3, #210	; 0xd2
    6208:	18fb      	adds	r3, r7, r3
    620a:	2288      	movs	r2, #136	; 0x88
    620c:	18ba      	adds	r2, r7, r2
    620e:	8912      	ldrh	r2, [r2, #8]
    6210:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    6212:	23d0      	movs	r3, #208	; 0xd0
    6214:	18fb      	adds	r3, r7, r3
    6216:	2288      	movs	r2, #136	; 0x88
    6218:	18ba      	adds	r2, r7, r2
    621a:	8952      	ldrh	r2, [r2, #10]
    621c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    621e:	2388      	movs	r3, #136	; 0x88
    6220:	18fb      	adds	r3, r7, r3
    6222:	885a      	ldrh	r2, [r3, #2]
    6224:	2370      	movs	r3, #112	; 0x70
    6226:	18fb      	adds	r3, r7, r3
    6228:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    622a:	2388      	movs	r3, #136	; 0x88
    622c:	18fb      	adds	r3, r7, r3
    622e:	685a      	ldr	r2, [r3, #4]
    6230:	2370      	movs	r3, #112	; 0x70
    6232:	18fb      	adds	r3, r7, r3
    6234:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    6236:	23d5      	movs	r3, #213	; 0xd5
    6238:	18fb      	adds	r3, r7, r3
    623a:	2200      	movs	r2, #0
    623c:	569a      	ldrsb	r2, [r3, r2]
    623e:	491f      	ldr	r1, [pc, #124]	; (62bc <m2m_ip_cb+0x388>)
    6240:	0013      	movs	r3, r2
    6242:	005b      	lsls	r3, r3, #1
    6244:	189b      	adds	r3, r3, r2
    6246:	009b      	lsls	r3, r3, #2
    6248:	18cb      	adds	r3, r1, r3
    624a:	330a      	adds	r3, #10
    624c:	881b      	ldrh	r3, [r3, #0]
    624e:	b29b      	uxth	r3, r3
    6250:	22d6      	movs	r2, #214	; 0xd6
    6252:	18ba      	adds	r2, r7, r2
    6254:	8812      	ldrh	r2, [r2, #0]
    6256:	429a      	cmp	r2, r3
    6258:	d155      	bne.n	6306 <m2m_ip_cb+0x3d2>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    625a:	23d2      	movs	r3, #210	; 0xd2
    625c:	18fb      	adds	r3, r7, r3
    625e:	2200      	movs	r2, #0
    6260:	5e9b      	ldrsh	r3, [r3, r2]
    6262:	2b00      	cmp	r3, #0
    6264:	dd32      	ble.n	62cc <m2m_ip_cb+0x398>
    6266:	23d2      	movs	r3, #210	; 0xd2
    6268:	18fb      	adds	r3, r7, r3
    626a:	2200      	movs	r2, #0
    626c:	5e9a      	ldrsh	r2, [r3, r2]
    626e:	1d3b      	adds	r3, r7, #4
    6270:	881b      	ldrh	r3, [r3, #0]
    6272:	429a      	cmp	r2, r3
    6274:	da2a      	bge.n	62cc <m2m_ip_cb+0x398>
					u32Address += u16DataOffset;
    6276:	23d0      	movs	r3, #208	; 0xd0
    6278:	18fb      	adds	r3, r7, r3
    627a:	881b      	ldrh	r3, [r3, #0]
    627c:	683a      	ldr	r2, [r7, #0]
    627e:	18d3      	adds	r3, r2, r3
    6280:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    6282:	23d8      	movs	r3, #216	; 0xd8
    6284:	18fb      	adds	r3, r7, r3
    6286:	22d2      	movs	r2, #210	; 0xd2
    6288:	18ba      	adds	r2, r7, r2
    628a:	8812      	ldrh	r2, [r2, #0]
    628c:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    628e:	683c      	ldr	r4, [r7, #0]
    6290:	23df      	movs	r3, #223	; 0xdf
    6292:	18fb      	adds	r3, r7, r3
    6294:	781a      	ldrb	r2, [r3, #0]
    6296:	2370      	movs	r3, #112	; 0x70
    6298:	18f9      	adds	r1, r7, r3
    629a:	23d5      	movs	r3, #213	; 0xd5
    629c:	18fb      	adds	r3, r7, r3
    629e:	2000      	movs	r0, #0
    62a0:	5618      	ldrsb	r0, [r3, r0]
    62a2:	23d8      	movs	r3, #216	; 0xd8
    62a4:	18fb      	adds	r3, r7, r3
    62a6:	881b      	ldrh	r3, [r3, #0]
    62a8:	9300      	str	r3, [sp, #0]
    62aa:	0023      	movs	r3, r4
    62ac:	4c06      	ldr	r4, [pc, #24]	; (62c8 <m2m_ip_cb+0x394>)
    62ae:	47a0      	blx	r4
	{
    62b0:	e0bb      	b.n	642a <m2m_ip_cb+0x4f6>
    62b2:	46c0      	nop			; (mov r8, r8)
    62b4:	0000335d 	.word	0x0000335d
    62b8:	2000049c 	.word	0x2000049c
    62bc:	20000418 	.word	0x20000418
    62c0:	2000029a 	.word	0x2000029a
    62c4:	200004a4 	.word	0x200004a4
    62c8:	00005d3d 	.word	0x00005d3d
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    62cc:	2370      	movs	r3, #112	; 0x70
    62ce:	18fb      	adds	r3, r7, r3
    62d0:	22d2      	movs	r2, #210	; 0xd2
    62d2:	18ba      	adds	r2, r7, r2
    62d4:	8812      	ldrh	r2, [r2, #0]
    62d6:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    62d8:	2370      	movs	r3, #112	; 0x70
    62da:	18fb      	adds	r3, r7, r3
    62dc:	2200      	movs	r2, #0
    62de:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    62e0:	4b55      	ldr	r3, [pc, #340]	; (6438 <m2m_ip_cb+0x504>)
    62e2:	681b      	ldr	r3, [r3, #0]
    62e4:	2b00      	cmp	r3, #0
    62e6:	d100      	bne.n	62ea <m2m_ip_cb+0x3b6>
    62e8:	e09f      	b.n	642a <m2m_ip_cb+0x4f6>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    62ea:	4b53      	ldr	r3, [pc, #332]	; (6438 <m2m_ip_cb+0x504>)
    62ec:	681b      	ldr	r3, [r3, #0]
    62ee:	2270      	movs	r2, #112	; 0x70
    62f0:	18bc      	adds	r4, r7, r2
    62f2:	22df      	movs	r2, #223	; 0xdf
    62f4:	18ba      	adds	r2, r7, r2
    62f6:	7811      	ldrb	r1, [r2, #0]
    62f8:	22d5      	movs	r2, #213	; 0xd5
    62fa:	18ba      	adds	r2, r7, r2
    62fc:	2000      	movs	r0, #0
    62fe:	5610      	ldrsb	r0, [r2, r0]
    6300:	0022      	movs	r2, r4
    6302:	4798      	blx	r3
	{
    6304:	e091      	b.n	642a <m2m_ip_cb+0x4f6>
				if(u16ReadSize < u16BufferSize)
    6306:	23d8      	movs	r3, #216	; 0xd8
    6308:	18fa      	adds	r2, r7, r3
    630a:	1d3b      	adds	r3, r7, #4
    630c:	8812      	ldrh	r2, [r2, #0]
    630e:	881b      	ldrh	r3, [r3, #0]
    6310:	429a      	cmp	r2, r3
    6312:	d300      	bcc.n	6316 <m2m_ip_cb+0x3e2>
    6314:	e089      	b.n	642a <m2m_ip_cb+0x4f6>
					hif_receive(0, NULL, 0, 1);
    6316:	2301      	movs	r3, #1
    6318:	2200      	movs	r2, #0
    631a:	2100      	movs	r1, #0
    631c:	2000      	movs	r0, #0
    631e:	4c47      	ldr	r4, [pc, #284]	; (643c <m2m_ip_cb+0x508>)
    6320:	47a0      	blx	r4
	{
    6322:	e082      	b.n	642a <m2m_ip_cb+0x4f6>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    6324:	1dfb      	adds	r3, r7, #7
    6326:	781b      	ldrb	r3, [r3, #0]
    6328:	2b45      	cmp	r3, #69	; 0x45
    632a:	d007      	beq.n	633c <m2m_ip_cb+0x408>
    632c:	1dfb      	adds	r3, r7, #7
    632e:	781b      	ldrb	r3, [r3, #0]
    6330:	2b47      	cmp	r3, #71	; 0x47
    6332:	d003      	beq.n	633c <m2m_ip_cb+0x408>
    6334:	1dfb      	adds	r3, r7, #7
    6336:	781b      	ldrb	r3, [r3, #0]
    6338:	2b4c      	cmp	r3, #76	; 0x4c
    633a:	d14f      	bne.n	63dc <m2m_ip_cb+0x4a8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    633c:	23de      	movs	r3, #222	; 0xde
    633e:	18fb      	adds	r3, r7, r3
    6340:	2207      	movs	r2, #7
    6342:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    6344:	1dfb      	adds	r3, r7, #7
    6346:	781b      	ldrb	r3, [r3, #0]
    6348:	2b47      	cmp	r3, #71	; 0x47
    634a:	d103      	bne.n	6354 <m2m_ip_cb+0x420>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    634c:	23de      	movs	r3, #222	; 0xde
    634e:	18fb      	adds	r3, r7, r3
    6350:	2208      	movs	r2, #8
    6352:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    6354:	2364      	movs	r3, #100	; 0x64
    6356:	18f9      	adds	r1, r7, r3
    6358:	6838      	ldr	r0, [r7, #0]
    635a:	2300      	movs	r3, #0
    635c:	2208      	movs	r2, #8
    635e:	4c37      	ldr	r4, [pc, #220]	; (643c <m2m_ip_cb+0x508>)
    6360:	47a0      	blx	r4
    6362:	1e03      	subs	r3, r0, #0
    6364:	d163      	bne.n	642e <m2m_ip_cb+0x4fa>
			uint16 u16SessionID = 0;
    6366:	23dc      	movs	r3, #220	; 0xdc
    6368:	18fb      	adds	r3, r7, r3
    636a:	2200      	movs	r2, #0
    636c:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    636e:	23db      	movs	r3, #219	; 0xdb
    6370:	18fb      	adds	r3, r7, r3
    6372:	2264      	movs	r2, #100	; 0x64
    6374:	18ba      	adds	r2, r7, r2
    6376:	7812      	ldrb	r2, [r2, #0]
    6378:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    637a:	23dc      	movs	r3, #220	; 0xdc
    637c:	18fb      	adds	r3, r7, r3
    637e:	2264      	movs	r2, #100	; 0x64
    6380:	18ba      	adds	r2, r7, r2
    6382:	8892      	ldrh	r2, [r2, #4]
    6384:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    6386:	2364      	movs	r3, #100	; 0x64
    6388:	18fb      	adds	r3, r7, r3
    638a:	2202      	movs	r2, #2
    638c:	5e9a      	ldrsh	r2, [r3, r2]
    638e:	236e      	movs	r3, #110	; 0x6e
    6390:	18fb      	adds	r3, r7, r3
    6392:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    6394:	23db      	movs	r3, #219	; 0xdb
    6396:	18fb      	adds	r3, r7, r3
    6398:	2200      	movs	r2, #0
    639a:	569a      	ldrsb	r2, [r3, r2]
    639c:	4928      	ldr	r1, [pc, #160]	; (6440 <m2m_ip_cb+0x50c>)
    639e:	0013      	movs	r3, r2
    63a0:	005b      	lsls	r3, r3, #1
    63a2:	189b      	adds	r3, r3, r2
    63a4:	009b      	lsls	r3, r3, #2
    63a6:	18cb      	adds	r3, r1, r3
    63a8:	330a      	adds	r3, #10
    63aa:	881b      	ldrh	r3, [r3, #0]
    63ac:	b29b      	uxth	r3, r3
    63ae:	22dc      	movs	r2, #220	; 0xdc
    63b0:	18ba      	adds	r2, r7, r2
    63b2:	8812      	ldrh	r2, [r2, #0]
    63b4:	429a      	cmp	r2, r3
    63b6:	d13a      	bne.n	642e <m2m_ip_cb+0x4fa>
				if(gpfAppSocketCb)
    63b8:	4b1f      	ldr	r3, [pc, #124]	; (6438 <m2m_ip_cb+0x504>)
    63ba:	681b      	ldr	r3, [r3, #0]
    63bc:	2b00      	cmp	r3, #0
    63be:	d036      	beq.n	642e <m2m_ip_cb+0x4fa>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    63c0:	4b1d      	ldr	r3, [pc, #116]	; (6438 <m2m_ip_cb+0x504>)
    63c2:	681b      	ldr	r3, [r3, #0]
    63c4:	226e      	movs	r2, #110	; 0x6e
    63c6:	18bc      	adds	r4, r7, r2
    63c8:	22de      	movs	r2, #222	; 0xde
    63ca:	18ba      	adds	r2, r7, r2
    63cc:	7811      	ldrb	r1, [r2, #0]
    63ce:	22db      	movs	r2, #219	; 0xdb
    63d0:	18ba      	adds	r2, r7, r2
    63d2:	2000      	movs	r0, #0
    63d4:	5610      	ldrsb	r0, [r2, r0]
    63d6:	0022      	movs	r2, r4
    63d8:	4798      	blx	r3
	{
    63da:	e028      	b.n	642e <m2m_ip_cb+0x4fa>
	else if(u8OpCode == SOCKET_CMD_PING)
    63dc:	1dfb      	adds	r3, r7, #7
    63de:	781b      	ldrb	r3, [r3, #0]
    63e0:	2b52      	cmp	r3, #82	; 0x52
    63e2:	d125      	bne.n	6430 <m2m_ip_cb+0x4fc>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    63e4:	2350      	movs	r3, #80	; 0x50
    63e6:	18f9      	adds	r1, r7, r3
    63e8:	6838      	ldr	r0, [r7, #0]
    63ea:	2301      	movs	r3, #1
    63ec:	2214      	movs	r2, #20
    63ee:	4c13      	ldr	r4, [pc, #76]	; (643c <m2m_ip_cb+0x508>)
    63f0:	47a0      	blx	r4
    63f2:	1e03      	subs	r3, r0, #0
    63f4:	d11c      	bne.n	6430 <m2m_ip_cb+0x4fc>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    63f6:	2350      	movs	r3, #80	; 0x50
    63f8:	18fb      	adds	r3, r7, r3
    63fa:	685b      	ldr	r3, [r3, #4]
    63fc:	001a      	movs	r2, r3
    63fe:	4b11      	ldr	r3, [pc, #68]	; (6444 <m2m_ip_cb+0x510>)
    6400:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    6402:	4b10      	ldr	r3, [pc, #64]	; (6444 <m2m_ip_cb+0x510>)
    6404:	681b      	ldr	r3, [r3, #0]
    6406:	2b00      	cmp	r3, #0
    6408:	d012      	beq.n	6430 <m2m_ip_cb+0x4fc>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    640a:	4b0e      	ldr	r3, [pc, #56]	; (6444 <m2m_ip_cb+0x510>)
    640c:	681c      	ldr	r4, [r3, #0]
    640e:	2350      	movs	r3, #80	; 0x50
    6410:	18fb      	adds	r3, r7, r3
    6412:	6818      	ldr	r0, [r3, #0]
    6414:	2350      	movs	r3, #80	; 0x50
    6416:	18fb      	adds	r3, r7, r3
    6418:	6899      	ldr	r1, [r3, #8]
    641a:	2350      	movs	r3, #80	; 0x50
    641c:	18fb      	adds	r3, r7, r3
    641e:	7c1b      	ldrb	r3, [r3, #16]
    6420:	001a      	movs	r2, r3
    6422:	47a0      	blx	r4
}
    6424:	e004      	b.n	6430 <m2m_ip_cb+0x4fc>
	{
    6426:	46c0      	nop			; (mov r8, r8)
    6428:	e002      	b.n	6430 <m2m_ip_cb+0x4fc>
	{
    642a:	46c0      	nop			; (mov r8, r8)
    642c:	e000      	b.n	6430 <m2m_ip_cb+0x4fc>
	{
    642e:	46c0      	nop			; (mov r8, r8)
}
    6430:	46c0      	nop			; (mov r8, r8)
    6432:	46bd      	mov	sp, r7
    6434:	b039      	add	sp, #228	; 0xe4
    6436:	bd90      	pop	{r4, r7, pc}
    6438:	2000049c 	.word	0x2000049c
    643c:	0000335d 	.word	0x0000335d
    6440:	20000418 	.word	0x20000418
    6444:	200004a0 	.word	0x200004a0

00006448 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    6448:	b580      	push	{r7, lr}
    644a:	af00      	add	r7, sp, #0
	if(gbSocketInit==0)
    644c:	4b0c      	ldr	r3, [pc, #48]	; (6480 <socketInit+0x38>)
    644e:	781b      	ldrb	r3, [r3, #0]
    6450:	b2db      	uxtb	r3, r3
    6452:	2b00      	cmp	r3, #0
    6454:	d110      	bne.n	6478 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    6456:	4b0b      	ldr	r3, [pc, #44]	; (6484 <socketInit+0x3c>)
    6458:	2284      	movs	r2, #132	; 0x84
    645a:	2100      	movs	r1, #0
    645c:	0018      	movs	r0, r3
    645e:	4b0a      	ldr	r3, [pc, #40]	; (6488 <socketInit+0x40>)
    6460:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GRP_IP,m2m_ip_cb);
    6462:	4b0a      	ldr	r3, [pc, #40]	; (648c <socketInit+0x44>)
    6464:	0019      	movs	r1, r3
    6466:	2002      	movs	r0, #2
    6468:	4b09      	ldr	r3, [pc, #36]	; (6490 <socketInit+0x48>)
    646a:	4798      	blx	r3
		gbSocketInit=1;
    646c:	4b04      	ldr	r3, [pc, #16]	; (6480 <socketInit+0x38>)
    646e:	2201      	movs	r2, #1
    6470:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    6472:	4b08      	ldr	r3, [pc, #32]	; (6494 <socketInit+0x4c>)
    6474:	2200      	movs	r2, #0
    6476:	801a      	strh	r2, [r3, #0]
	}
}
    6478:	46c0      	nop			; (mov r8, r8)
    647a:	46bd      	mov	sp, r7
    647c:	bd80      	pop	{r7, pc}
    647e:	46c0      	nop			; (mov r8, r8)
    6480:	2000029c 	.word	0x2000029c
    6484:	20000418 	.word	0x20000418
    6488:	00002885 	.word	0x00002885
    648c:	00005f35 	.word	0x00005f35
    6490:	00003555 	.word	0x00003555
    6494:	2000029a 	.word	0x2000029a

00006498 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    6498:	b580      	push	{r7, lr}
    649a:	b082      	sub	sp, #8
    649c:	af00      	add	r7, sp, #0
    649e:	6078      	str	r0, [r7, #4]
    64a0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    64a2:	4b05      	ldr	r3, [pc, #20]	; (64b8 <registerSocketCallback+0x20>)
    64a4:	687a      	ldr	r2, [r7, #4]
    64a6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    64a8:	4b04      	ldr	r3, [pc, #16]	; (64bc <registerSocketCallback+0x24>)
    64aa:	683a      	ldr	r2, [r7, #0]
    64ac:	601a      	str	r2, [r3, #0]
}
    64ae:	46c0      	nop			; (mov r8, r8)
    64b0:	46bd      	mov	sp, r7
    64b2:	b002      	add	sp, #8
    64b4:	bd80      	pop	{r7, pc}
    64b6:	46c0      	nop			; (mov r8, r8)
    64b8:	2000049c 	.word	0x2000049c
    64bc:	200004a4 	.word	0x200004a4

000064c0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    64c0:	b590      	push	{r4, r7, lr}
    64c2:	b089      	sub	sp, #36	; 0x24
    64c4:	af04      	add	r7, sp, #16
    64c6:	0004      	movs	r4, r0
    64c8:	0008      	movs	r0, r1
    64ca:	0011      	movs	r1, r2
    64cc:	1dbb      	adds	r3, r7, #6
    64ce:	1c22      	adds	r2, r4, #0
    64d0:	801a      	strh	r2, [r3, #0]
    64d2:	1d7b      	adds	r3, r7, #5
    64d4:	1c02      	adds	r2, r0, #0
    64d6:	701a      	strb	r2, [r3, #0]
    64d8:	1d3b      	adds	r3, r7, #4
    64da:	1c0a      	adds	r2, r1, #0
    64dc:	701a      	strb	r2, [r3, #0]
	SOCKET	sock = -1;
    64de:	230f      	movs	r3, #15
    64e0:	18fb      	adds	r3, r7, r3
    64e2:	22ff      	movs	r2, #255	; 0xff
    64e4:	701a      	strb	r2, [r3, #0]
	uint8	u8Count,u8SocketCount = MAX_SOCKET;
    64e6:	230d      	movs	r3, #13
    64e8:	18fb      	adds	r3, r7, r3
    64ea:	220b      	movs	r2, #11
    64ec:	701a      	strb	r2, [r3, #0]

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    64ee:	1dbb      	adds	r3, r7, #6
    64f0:	881b      	ldrh	r3, [r3, #0]
    64f2:	2b02      	cmp	r3, #2
    64f4:	d000      	beq.n	64f8 <socket+0x38>
    64f6:	e096      	b.n	6626 <socket+0x166>
	{
		if(u8Type == SOCK_STREAM)
    64f8:	1d7b      	adds	r3, r7, #5
    64fa:	781b      	ldrb	r3, [r3, #0]
    64fc:	2b01      	cmp	r3, #1
    64fe:	d108      	bne.n	6512 <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    6500:	230d      	movs	r3, #13
    6502:	18fb      	adds	r3, r7, r3
    6504:	2207      	movs	r2, #7
    6506:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    6508:	230e      	movs	r3, #14
    650a:	18fb      	adds	r3, r7, r3
    650c:	2200      	movs	r2, #0
    650e:	701a      	strb	r2, [r3, #0]
    6510:	e07f      	b.n	6612 <socket+0x152>
		}
		else if(u8Type == SOCK_DGRAM)
    6512:	1d7b      	adds	r3, r7, #5
    6514:	781b      	ldrb	r3, [r3, #0]
    6516:	2b02      	cmp	r3, #2
    6518:	d108      	bne.n	652c <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    651a:	230d      	movs	r3, #13
    651c:	18fb      	adds	r3, r7, r3
    651e:	220b      	movs	r2, #11
    6520:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    6522:	230e      	movs	r3, #14
    6524:	18fb      	adds	r3, r7, r3
    6526:	2207      	movs	r2, #7
    6528:	701a      	strb	r2, [r3, #0]
    652a:	e072      	b.n	6612 <socket+0x152>
		}
		else
			return sock;
    652c:	230f      	movs	r3, #15
    652e:	18fb      	adds	r3, r7, r3
    6530:	781b      	ldrb	r3, [r3, #0]
    6532:	b25b      	sxtb	r3, r3
    6534:	e07b      	b.n	662e <socket+0x16e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    6536:	230e      	movs	r3, #14
    6538:	18fb      	adds	r3, r7, r3
    653a:	781a      	ldrb	r2, [r3, #0]
    653c:	493e      	ldr	r1, [pc, #248]	; (6638 <socket+0x178>)
    653e:	0013      	movs	r3, r2
    6540:	005b      	lsls	r3, r3, #1
    6542:	189b      	adds	r3, r3, r2
    6544:	009b      	lsls	r3, r3, #2
    6546:	18cb      	adds	r3, r1, r3
    6548:	3306      	adds	r3, #6
    654a:	781b      	ldrb	r3, [r3, #0]
    654c:	b2db      	uxtb	r3, r3
    654e:	2b00      	cmp	r3, #0
    6550:	d158      	bne.n	6604 <socket+0x144>
			{
				gastrSockets[u8Count].bIsUsed = 1;
    6552:	230e      	movs	r3, #14
    6554:	18fb      	adds	r3, r7, r3
    6556:	781a      	ldrb	r2, [r3, #0]
    6558:	4937      	ldr	r1, [pc, #220]	; (6638 <socket+0x178>)
    655a:	0013      	movs	r3, r2
    655c:	005b      	lsls	r3, r3, #1
    655e:	189b      	adds	r3, r3, r2
    6560:	009b      	lsls	r3, r3, #2
    6562:	18cb      	adds	r3, r1, r3
    6564:	3306      	adds	r3, #6
    6566:	2201      	movs	r2, #1
    6568:	701a      	strb	r2, [r3, #0]
				
				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    656a:	4b34      	ldr	r3, [pc, #208]	; (663c <socket+0x17c>)
    656c:	881b      	ldrh	r3, [r3, #0]
    656e:	b29b      	uxth	r3, r3
    6570:	3301      	adds	r3, #1
    6572:	b29a      	uxth	r2, r3
    6574:	4b31      	ldr	r3, [pc, #196]	; (663c <socket+0x17c>)
    6576:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    6578:	4b30      	ldr	r3, [pc, #192]	; (663c <socket+0x17c>)
    657a:	881b      	ldrh	r3, [r3, #0]
    657c:	b29b      	uxth	r3, r3
    657e:	2b00      	cmp	r3, #0
    6580:	d106      	bne.n	6590 <socket+0xd0>
					++gu16SessionID;
    6582:	4b2e      	ldr	r3, [pc, #184]	; (663c <socket+0x17c>)
    6584:	881b      	ldrh	r3, [r3, #0]
    6586:	b29b      	uxth	r3, r3
    6588:	3301      	adds	r3, #1
    658a:	b29a      	uxth	r2, r3
    658c:	4b2b      	ldr	r3, [pc, #172]	; (663c <socket+0x17c>)
    658e:	801a      	strh	r2, [r3, #0]
				
				gastrSockets[u8Count].u16SessionID = gu16SessionID;
    6590:	230e      	movs	r3, #14
    6592:	18fb      	adds	r3, r7, r3
    6594:	781a      	ldrb	r2, [r3, #0]
    6596:	4b29      	ldr	r3, [pc, #164]	; (663c <socket+0x17c>)
    6598:	881b      	ldrh	r3, [r3, #0]
    659a:	b298      	uxth	r0, r3
    659c:	4926      	ldr	r1, [pc, #152]	; (6638 <socket+0x178>)
    659e:	0013      	movs	r3, r2
    65a0:	005b      	lsls	r3, r3, #1
    65a2:	189b      	adds	r3, r3, r2
    65a4:	009b      	lsls	r3, r3, #2
    65a6:	18cb      	adds	r3, r1, r3
    65a8:	330a      	adds	r3, #10
    65aa:	1c02      	adds	r2, r0, #0
    65ac:	801a      	strh	r2, [r3, #0]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    65ae:	230f      	movs	r3, #15
    65b0:	18fb      	adds	r3, r7, r3
    65b2:	220e      	movs	r2, #14
    65b4:	18ba      	adds	r2, r7, r2
    65b6:	7812      	ldrb	r2, [r2, #0]
    65b8:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    65ba:	1d3b      	adds	r3, r7, #4
    65bc:	781b      	ldrb	r3, [r3, #0]
    65be:	2201      	movs	r2, #1
    65c0:	4013      	ands	r3, r2
    65c2:	d02f      	beq.n	6624 <socket+0x164>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    65c4:	2308      	movs	r3, #8
    65c6:	18fb      	adds	r3, r7, r3
    65c8:	220f      	movs	r2, #15
    65ca:	18ba      	adds	r2, r7, r2
    65cc:	7812      	ldrb	r2, [r2, #0]
    65ce:	701a      	strb	r2, [r3, #0]
					gastrSockets[u8Count].u8SSLFlags = SSL_FLAGS_ACTIVE;
    65d0:	230e      	movs	r3, #14
    65d2:	18fb      	adds	r3, r7, r3
    65d4:	781a      	ldrb	r2, [r3, #0]
    65d6:	4918      	ldr	r1, [pc, #96]	; (6638 <socket+0x178>)
    65d8:	0013      	movs	r3, r2
    65da:	005b      	lsls	r3, r3, #1
    65dc:	189b      	adds	r3, r3, r2
    65de:	009b      	lsls	r3, r3, #2
    65e0:	18cb      	adds	r3, r1, r3
    65e2:	3307      	adds	r3, #7
    65e4:	2201      	movs	r2, #1
    65e6:	701a      	strb	r2, [r3, #0]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    65e8:	2308      	movs	r3, #8
    65ea:	18fa      	adds	r2, r7, r3
    65ec:	2300      	movs	r3, #0
    65ee:	9302      	str	r3, [sp, #8]
    65f0:	2300      	movs	r3, #0
    65f2:	9301      	str	r3, [sp, #4]
    65f4:	2300      	movs	r3, #0
    65f6:	9300      	str	r3, [sp, #0]
    65f8:	2304      	movs	r3, #4
    65fa:	2150      	movs	r1, #80	; 0x50
    65fc:	2002      	movs	r0, #2
    65fe:	4c10      	ldr	r4, [pc, #64]	; (6640 <socket+0x180>)
    6600:	47a0      	blx	r4
				}
				break;
    6602:	e00f      	b.n	6624 <socket+0x164>
		for(;u8Count < u8SocketCount; u8Count ++)
    6604:	230e      	movs	r3, #14
    6606:	18fb      	adds	r3, r7, r3
    6608:	781a      	ldrb	r2, [r3, #0]
    660a:	230e      	movs	r3, #14
    660c:	18fb      	adds	r3, r7, r3
    660e:	3201      	adds	r2, #1
    6610:	701a      	strb	r2, [r3, #0]
    6612:	230e      	movs	r3, #14
    6614:	18fa      	adds	r2, r7, r3
    6616:	230d      	movs	r3, #13
    6618:	18fb      	adds	r3, r7, r3
    661a:	7812      	ldrb	r2, [r2, #0]
    661c:	781b      	ldrb	r3, [r3, #0]
    661e:	429a      	cmp	r2, r3
    6620:	d389      	bcc.n	6536 <socket+0x76>
    6622:	e000      	b.n	6626 <socket+0x166>
				break;
    6624:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    6626:	230f      	movs	r3, #15
    6628:	18fb      	adds	r3, r7, r3
    662a:	781b      	ldrb	r3, [r3, #0]
    662c:	b25b      	sxtb	r3, r3
}
    662e:	0018      	movs	r0, r3
    6630:	46bd      	mov	sp, r7
    6632:	b005      	add	sp, #20
    6634:	bd90      	pop	{r4, r7, pc}
    6636:	46c0      	nop			; (mov r8, r8)
    6638:	20000418 	.word	0x20000418
    663c:	2000029a 	.word	0x2000029a
    6640:	00002b71 	.word	0x00002b71

00006644 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    6644:	b5b0      	push	{r4, r5, r7, lr}
    6646:	b08a      	sub	sp, #40	; 0x28
    6648:	af04      	add	r7, sp, #16
    664a:	6039      	str	r1, [r7, #0]
    664c:	0011      	movs	r1, r2
    664e:	1dfb      	adds	r3, r7, #7
    6650:	1c02      	adds	r2, r0, #0
    6652:	701a      	strb	r2, [r3, #0]
    6654:	1dbb      	adds	r3, r7, #6
    6656:	1c0a      	adds	r2, r1, #0
    6658:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    665a:	2317      	movs	r3, #23
    665c:	18fb      	adds	r3, r7, r3
    665e:	22fa      	movs	r2, #250	; 0xfa
    6660:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    6662:	1dfb      	adds	r3, r7, #7
    6664:	781b      	ldrb	r3, [r3, #0]
    6666:	2b7f      	cmp	r3, #127	; 0x7f
    6668:	d900      	bls.n	666c <connect+0x28>
    666a:	e087      	b.n	677c <connect+0x138>
    666c:	683b      	ldr	r3, [r7, #0]
    666e:	2b00      	cmp	r3, #0
    6670:	d100      	bne.n	6674 <connect+0x30>
    6672:	e083      	b.n	677c <connect+0x138>
    6674:	1dfb      	adds	r3, r7, #7
    6676:	2200      	movs	r2, #0
    6678:	569a      	ldrsb	r2, [r3, r2]
    667a:	4944      	ldr	r1, [pc, #272]	; (678c <connect+0x148>)
    667c:	0013      	movs	r3, r2
    667e:	005b      	lsls	r3, r3, #1
    6680:	189b      	adds	r3, r3, r2
    6682:	009b      	lsls	r3, r3, #2
    6684:	18cb      	adds	r3, r1, r3
    6686:	3306      	adds	r3, #6
    6688:	781b      	ldrb	r3, [r3, #0]
    668a:	b2db      	uxtb	r3, r3
    668c:	2b01      	cmp	r3, #1
    668e:	d000      	beq.n	6692 <connect+0x4e>
    6690:	e074      	b.n	677c <connect+0x138>
    6692:	1dbb      	adds	r3, r7, #6
    6694:	781b      	ldrb	r3, [r3, #0]
    6696:	2b00      	cmp	r3, #0
    6698:	d070      	beq.n	677c <connect+0x138>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    669a:	2316      	movs	r3, #22
    669c:	18fb      	adds	r3, r7, r3
    669e:	2244      	movs	r2, #68	; 0x44
    66a0:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    66a2:	1dfb      	adds	r3, r7, #7
    66a4:	2200      	movs	r2, #0
    66a6:	569a      	ldrsb	r2, [r3, r2]
    66a8:	4938      	ldr	r1, [pc, #224]	; (678c <connect+0x148>)
    66aa:	0013      	movs	r3, r2
    66ac:	005b      	lsls	r3, r3, #1
    66ae:	189b      	adds	r3, r3, r2
    66b0:	009b      	lsls	r3, r3, #2
    66b2:	18cb      	adds	r3, r1, r3
    66b4:	3307      	adds	r3, #7
    66b6:	781b      	ldrb	r3, [r3, #0]
    66b8:	b2db      	uxtb	r3, r3
    66ba:	001a      	movs	r2, r3
    66bc:	2301      	movs	r3, #1
    66be:	4013      	ands	r3, r2
    66c0:	d012      	beq.n	66e8 <connect+0xa4>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    66c2:	2316      	movs	r3, #22
    66c4:	18fb      	adds	r3, r7, r3
    66c6:	224b      	movs	r2, #75	; 0x4b
    66c8:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    66ca:	1dfb      	adds	r3, r7, #7
    66cc:	2200      	movs	r2, #0
    66ce:	569a      	ldrsb	r2, [r3, r2]
    66d0:	492e      	ldr	r1, [pc, #184]	; (678c <connect+0x148>)
    66d2:	0013      	movs	r3, r2
    66d4:	005b      	lsls	r3, r3, #1
    66d6:	189b      	adds	r3, r3, r2
    66d8:	009b      	lsls	r3, r3, #2
    66da:	18cb      	adds	r3, r1, r3
    66dc:	3307      	adds	r3, #7
    66de:	781b      	ldrb	r3, [r3, #0]
    66e0:	b2da      	uxtb	r2, r3
    66e2:	2308      	movs	r3, #8
    66e4:	18fb      	adds	r3, r7, r3
    66e6:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    66e8:	2308      	movs	r3, #8
    66ea:	18fb      	adds	r3, r7, r3
    66ec:	1dfa      	adds	r2, r7, #7
    66ee:	7812      	ldrb	r2, [r2, #0]
    66f0:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    66f2:	6839      	ldr	r1, [r7, #0]
    66f4:	2308      	movs	r3, #8
    66f6:	18fb      	adds	r3, r7, r3
    66f8:	2208      	movs	r2, #8
    66fa:	0018      	movs	r0, r3
    66fc:	4b24      	ldr	r3, [pc, #144]	; (6790 <connect+0x14c>)
    66fe:	4798      	blx	r3

		strConnect.strAddr.u16Family	= strConnect.strAddr.u16Family;
    6700:	2308      	movs	r3, #8
    6702:	18fb      	adds	r3, r7, r3
    6704:	881a      	ldrh	r2, [r3, #0]
    6706:	2308      	movs	r3, #8
    6708:	18fb      	adds	r3, r7, r3
    670a:	801a      	strh	r2, [r3, #0]
		strConnect.strAddr.u16Port		= strConnect.strAddr.u16Port;
    670c:	2308      	movs	r3, #8
    670e:	18fb      	adds	r3, r7, r3
    6710:	885a      	ldrh	r2, [r3, #2]
    6712:	2308      	movs	r3, #8
    6714:	18fb      	adds	r3, r7, r3
    6716:	805a      	strh	r2, [r3, #2]
		strConnect.strAddr.u32IPAddr	= strConnect.strAddr.u32IPAddr;
    6718:	2308      	movs	r3, #8
    671a:	18fb      	adds	r3, r7, r3
    671c:	685a      	ldr	r2, [r3, #4]
    671e:	2308      	movs	r3, #8
    6720:	18fb      	adds	r3, r7, r3
    6722:	605a      	str	r2, [r3, #4]
		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    6724:	1dfb      	adds	r3, r7, #7
    6726:	2200      	movs	r2, #0
    6728:	569a      	ldrsb	r2, [r3, r2]
    672a:	4918      	ldr	r1, [pc, #96]	; (678c <connect+0x148>)
    672c:	0013      	movs	r3, r2
    672e:	005b      	lsls	r3, r3, #1
    6730:	189b      	adds	r3, r3, r2
    6732:	009b      	lsls	r3, r3, #2
    6734:	18cb      	adds	r3, r1, r3
    6736:	330a      	adds	r3, #10
    6738:	881b      	ldrh	r3, [r3, #0]
    673a:	b29a      	uxth	r2, r3
    673c:	2308      	movs	r3, #8
    673e:	18fb      	adds	r3, r7, r3
    6740:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    6742:	2317      	movs	r3, #23
    6744:	18fc      	adds	r4, r7, r3
    6746:	2308      	movs	r3, #8
    6748:	18fa      	adds	r2, r7, r3
    674a:	2316      	movs	r3, #22
    674c:	18fb      	adds	r3, r7, r3
    674e:	7819      	ldrb	r1, [r3, #0]
    6750:	2300      	movs	r3, #0
    6752:	9302      	str	r3, [sp, #8]
    6754:	2300      	movs	r3, #0
    6756:	9301      	str	r3, [sp, #4]
    6758:	2300      	movs	r3, #0
    675a:	9300      	str	r3, [sp, #0]
    675c:	230c      	movs	r3, #12
    675e:	2002      	movs	r0, #2
    6760:	4d0c      	ldr	r5, [pc, #48]	; (6794 <connect+0x150>)
    6762:	47a8      	blx	r5
    6764:	0003      	movs	r3, r0
    6766:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    6768:	2317      	movs	r3, #23
    676a:	18fb      	adds	r3, r7, r3
    676c:	781b      	ldrb	r3, [r3, #0]
    676e:	b25b      	sxtb	r3, r3
    6770:	2b00      	cmp	r3, #0
    6772:	d003      	beq.n	677c <connect+0x138>
		{
			s8Ret = SOCK_ERR_INVALID;
    6774:	2317      	movs	r3, #23
    6776:	18fb      	adds	r3, r7, r3
    6778:	22f7      	movs	r2, #247	; 0xf7
    677a:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    677c:	2317      	movs	r3, #23
    677e:	18fb      	adds	r3, r7, r3
    6780:	781b      	ldrb	r3, [r3, #0]
    6782:	b25b      	sxtb	r3, r3
}
    6784:	0018      	movs	r0, r3
    6786:	46bd      	mov	sp, r7
    6788:	b006      	add	sp, #24
    678a:	bdb0      	pop	{r4, r5, r7, pc}
    678c:	20000418 	.word	0x20000418
    6790:	00002849 	.word	0x00002849
    6794:	00002b71 	.word	0x00002b71

00006798 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    6798:	b590      	push	{r4, r7, lr}
    679a:	b08f      	sub	sp, #60	; 0x3c
    679c:	af04      	add	r7, sp, #16
    679e:	0004      	movs	r4, r0
    67a0:	60b9      	str	r1, [r7, #8]
    67a2:	0010      	movs	r0, r2
    67a4:	0019      	movs	r1, r3
    67a6:	230f      	movs	r3, #15
    67a8:	18fb      	adds	r3, r7, r3
    67aa:	1c22      	adds	r2, r4, #0
    67ac:	701a      	strb	r2, [r3, #0]
    67ae:	230c      	movs	r3, #12
    67b0:	18fb      	adds	r3, r7, r3
    67b2:	1c02      	adds	r2, r0, #0
    67b4:	801a      	strh	r2, [r3, #0]
    67b6:	1dbb      	adds	r3, r7, #6
    67b8:	1c0a      	adds	r2, r1, #0
    67ba:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    67bc:	2326      	movs	r3, #38	; 0x26
    67be:	18fb      	adds	r3, r7, r3
    67c0:	2206      	movs	r2, #6
    67c2:	4252      	negs	r2, r2
    67c4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    67c6:	230f      	movs	r3, #15
    67c8:	18fb      	adds	r3, r7, r3
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	2b7f      	cmp	r3, #127	; 0x7f
    67ce:	d900      	bls.n	67d2 <send+0x3a>
    67d0:	e088      	b.n	68e4 <send+0x14c>
    67d2:	68bb      	ldr	r3, [r7, #8]
    67d4:	2b00      	cmp	r3, #0
    67d6:	d100      	bne.n	67da <send+0x42>
    67d8:	e084      	b.n	68e4 <send+0x14c>
    67da:	230c      	movs	r3, #12
    67dc:	18fb      	adds	r3, r7, r3
    67de:	881a      	ldrh	r2, [r3, #0]
    67e0:	23af      	movs	r3, #175	; 0xaf
    67e2:	00db      	lsls	r3, r3, #3
    67e4:	429a      	cmp	r2, r3
    67e6:	d900      	bls.n	67ea <send+0x52>
    67e8:	e07c      	b.n	68e4 <send+0x14c>
    67ea:	230f      	movs	r3, #15
    67ec:	18fb      	adds	r3, r7, r3
    67ee:	2200      	movs	r2, #0
    67f0:	569a      	ldrsb	r2, [r3, r2]
    67f2:	4940      	ldr	r1, [pc, #256]	; (68f4 <send+0x15c>)
    67f4:	0013      	movs	r3, r2
    67f6:	005b      	lsls	r3, r3, #1
    67f8:	189b      	adds	r3, r3, r2
    67fa:	009b      	lsls	r3, r3, #2
    67fc:	18cb      	adds	r3, r1, r3
    67fe:	3306      	adds	r3, #6
    6800:	781b      	ldrb	r3, [r3, #0]
    6802:	b2db      	uxtb	r3, r3
    6804:	2b01      	cmp	r3, #1
    6806:	d16d      	bne.n	68e4 <send+0x14c>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    6808:	2323      	movs	r3, #35	; 0x23
    680a:	18fb      	adds	r3, r7, r3
    680c:	2245      	movs	r2, #69	; 0x45
    680e:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    6810:	2324      	movs	r3, #36	; 0x24
    6812:	18fb      	adds	r3, r7, r3
    6814:	2250      	movs	r2, #80	; 0x50
    6816:	801a      	strh	r2, [r3, #0]

		strSend.sock		= sock;
    6818:	2310      	movs	r3, #16
    681a:	18fb      	adds	r3, r7, r3
    681c:	220f      	movs	r2, #15
    681e:	18ba      	adds	r2, r7, r2
    6820:	7812      	ldrb	r2, [r2, #0]
    6822:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
    6824:	2310      	movs	r3, #16
    6826:	18fb      	adds	r3, r7, r3
    6828:	220c      	movs	r2, #12
    682a:	18ba      	adds	r2, r7, r2
    682c:	8812      	ldrh	r2, [r2, #0]
    682e:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID		= gastrSockets[sock].u16SessionID;
    6830:	230f      	movs	r3, #15
    6832:	18fb      	adds	r3, r7, r3
    6834:	2200      	movs	r2, #0
    6836:	569a      	ldrsb	r2, [r3, r2]
    6838:	492e      	ldr	r1, [pc, #184]	; (68f4 <send+0x15c>)
    683a:	0013      	movs	r3, r2
    683c:	005b      	lsls	r3, r3, #1
    683e:	189b      	adds	r3, r3, r2
    6840:	009b      	lsls	r3, r3, #2
    6842:	18cb      	adds	r3, r1, r3
    6844:	330a      	adds	r3, #10
    6846:	881b      	ldrh	r3, [r3, #0]
    6848:	b29a      	uxth	r2, r3
    684a:	2310      	movs	r3, #16
    684c:	18fb      	adds	r3, r7, r3
    684e:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    6850:	230f      	movs	r3, #15
    6852:	18fb      	adds	r3, r7, r3
    6854:	781b      	ldrb	r3, [r3, #0]
    6856:	b25b      	sxtb	r3, r3
    6858:	2b06      	cmp	r3, #6
    685a:	dd03      	ble.n	6864 <send+0xcc>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    685c:	2324      	movs	r3, #36	; 0x24
    685e:	18fb      	adds	r3, r7, r3
    6860:	2244      	movs	r2, #68	; 0x44
    6862:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6864:	230f      	movs	r3, #15
    6866:	18fb      	adds	r3, r7, r3
    6868:	2200      	movs	r2, #0
    686a:	569a      	ldrsb	r2, [r3, r2]
    686c:	4921      	ldr	r1, [pc, #132]	; (68f4 <send+0x15c>)
    686e:	0013      	movs	r3, r2
    6870:	005b      	lsls	r3, r3, #1
    6872:	189b      	adds	r3, r3, r2
    6874:	009b      	lsls	r3, r3, #2
    6876:	18cb      	adds	r3, r1, r3
    6878:	3307      	adds	r3, #7
    687a:	781b      	ldrb	r3, [r3, #0]
    687c:	b2db      	uxtb	r3, r3
    687e:	001a      	movs	r2, r3
    6880:	2301      	movs	r3, #1
    6882:	4013      	ands	r3, r2
    6884:	d007      	beq.n	6896 <send+0xfe>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    6886:	2323      	movs	r3, #35	; 0x23
    6888:	18fb      	adds	r3, r7, r3
    688a:	224c      	movs	r2, #76	; 0x4c
    688c:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= SSL_TX_PACKET_OFFSET;
    688e:	2324      	movs	r3, #36	; 0x24
    6890:	18fb      	adds	r3, r7, r3
    6892:	2255      	movs	r2, #85	; 0x55
    6894:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    6896:	2323      	movs	r3, #35	; 0x23
    6898:	18fb      	adds	r3, r7, r3
    689a:	781b      	ldrb	r3, [r3, #0]
    689c:	2280      	movs	r2, #128	; 0x80
    689e:	4252      	negs	r2, r2
    68a0:	4313      	orrs	r3, r2
    68a2:	b2d9      	uxtb	r1, r3
    68a4:	2310      	movs	r3, #16
    68a6:	18fa      	adds	r2, r7, r3
    68a8:	2324      	movs	r3, #36	; 0x24
    68aa:	18fb      	adds	r3, r7, r3
    68ac:	881b      	ldrh	r3, [r3, #0]
    68ae:	9302      	str	r3, [sp, #8]
    68b0:	230c      	movs	r3, #12
    68b2:	18fb      	adds	r3, r7, r3
    68b4:	881b      	ldrh	r3, [r3, #0]
    68b6:	9301      	str	r3, [sp, #4]
    68b8:	68bb      	ldr	r3, [r7, #8]
    68ba:	9300      	str	r3, [sp, #0]
    68bc:	2310      	movs	r3, #16
    68be:	2002      	movs	r0, #2
    68c0:	4c0d      	ldr	r4, [pc, #52]	; (68f8 <send+0x160>)
    68c2:	47a0      	blx	r4
    68c4:	0003      	movs	r3, r0
    68c6:	001a      	movs	r2, r3
    68c8:	2326      	movs	r3, #38	; 0x26
    68ca:	18fb      	adds	r3, r7, r3
    68cc:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    68ce:	2326      	movs	r3, #38	; 0x26
    68d0:	18fb      	adds	r3, r7, r3
    68d2:	2200      	movs	r2, #0
    68d4:	5e9b      	ldrsh	r3, [r3, r2]
    68d6:	2b00      	cmp	r3, #0
    68d8:	d004      	beq.n	68e4 <send+0x14c>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    68da:	2326      	movs	r3, #38	; 0x26
    68dc:	18fb      	adds	r3, r7, r3
    68de:	220e      	movs	r2, #14
    68e0:	4252      	negs	r2, r2
    68e2:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    68e4:	2326      	movs	r3, #38	; 0x26
    68e6:	18fb      	adds	r3, r7, r3
    68e8:	2200      	movs	r2, #0
    68ea:	5e9b      	ldrsh	r3, [r3, r2]
}
    68ec:	0018      	movs	r0, r3
    68ee:	46bd      	mov	sp, r7
    68f0:	b00b      	add	sp, #44	; 0x2c
    68f2:	bd90      	pop	{r4, r7, pc}
    68f4:	20000418 	.word	0x20000418
    68f8:	00002b71 	.word	0x00002b71

000068fc <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    68fc:	b590      	push	{r4, r7, lr}
    68fe:	b08d      	sub	sp, #52	; 0x34
    6900:	af04      	add	r7, sp, #16
    6902:	60b9      	str	r1, [r7, #8]
    6904:	0011      	movs	r1, r2
    6906:	607b      	str	r3, [r7, #4]
    6908:	230f      	movs	r3, #15
    690a:	18fb      	adds	r3, r7, r3
    690c:	1c02      	adds	r2, r0, #0
    690e:	701a      	strb	r2, [r3, #0]
    6910:	230c      	movs	r3, #12
    6912:	18fb      	adds	r3, r7, r3
    6914:	1c0a      	adds	r2, r1, #0
    6916:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    6918:	231e      	movs	r3, #30
    691a:	18fb      	adds	r3, r7, r3
    691c:	2206      	movs	r2, #6
    691e:	4252      	negs	r2, r2
    6920:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    6922:	230f      	movs	r3, #15
    6924:	18fb      	adds	r3, r7, r3
    6926:	781b      	ldrb	r3, [r3, #0]
    6928:	2b7f      	cmp	r3, #127	; 0x7f
    692a:	d900      	bls.n	692e <recv+0x32>
    692c:	e0ae      	b.n	6a8c <recv+0x190>
    692e:	68bb      	ldr	r3, [r7, #8]
    6930:	2b00      	cmp	r3, #0
    6932:	d100      	bne.n	6936 <recv+0x3a>
    6934:	e0aa      	b.n	6a8c <recv+0x190>
    6936:	230c      	movs	r3, #12
    6938:	18fb      	adds	r3, r7, r3
    693a:	881b      	ldrh	r3, [r3, #0]
    693c:	2b00      	cmp	r3, #0
    693e:	d100      	bne.n	6942 <recv+0x46>
    6940:	e0a4      	b.n	6a8c <recv+0x190>
    6942:	230f      	movs	r3, #15
    6944:	18fb      	adds	r3, r7, r3
    6946:	2200      	movs	r2, #0
    6948:	569a      	ldrsb	r2, [r3, r2]
    694a:	4954      	ldr	r1, [pc, #336]	; (6a9c <recv+0x1a0>)
    694c:	0013      	movs	r3, r2
    694e:	005b      	lsls	r3, r3, #1
    6950:	189b      	adds	r3, r3, r2
    6952:	009b      	lsls	r3, r3, #2
    6954:	18cb      	adds	r3, r1, r3
    6956:	3306      	adds	r3, #6
    6958:	781b      	ldrb	r3, [r3, #0]
    695a:	b2db      	uxtb	r3, r3
    695c:	2b01      	cmp	r3, #1
    695e:	d000      	beq.n	6962 <recv+0x66>
    6960:	e094      	b.n	6a8c <recv+0x190>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    6962:	231e      	movs	r3, #30
    6964:	18fb      	adds	r3, r7, r3
    6966:	2200      	movs	r2, #0
    6968:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    696a:	230f      	movs	r3, #15
    696c:	18fb      	adds	r3, r7, r3
    696e:	2200      	movs	r2, #0
    6970:	569a      	ldrsb	r2, [r3, r2]
    6972:	494a      	ldr	r1, [pc, #296]	; (6a9c <recv+0x1a0>)
    6974:	0013      	movs	r3, r2
    6976:	005b      	lsls	r3, r3, #1
    6978:	189b      	adds	r3, r3, r2
    697a:	009b      	lsls	r3, r3, #2
    697c:	68ba      	ldr	r2, [r7, #8]
    697e:	505a      	str	r2, [r3, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    6980:	230f      	movs	r3, #15
    6982:	18fb      	adds	r3, r7, r3
    6984:	2200      	movs	r2, #0
    6986:	569a      	ldrsb	r2, [r3, r2]
    6988:	4944      	ldr	r1, [pc, #272]	; (6a9c <recv+0x1a0>)
    698a:	0013      	movs	r3, r2
    698c:	005b      	lsls	r3, r3, #1
    698e:	189b      	adds	r3, r3, r2
    6990:	009b      	lsls	r3, r3, #2
    6992:	18cb      	adds	r3, r1, r3
    6994:	3304      	adds	r3, #4
    6996:	220c      	movs	r2, #12
    6998:	18ba      	adds	r2, r7, r2
    699a:	8812      	ldrh	r2, [r2, #0]
    699c:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    699e:	230f      	movs	r3, #15
    69a0:	18fb      	adds	r3, r7, r3
    69a2:	2200      	movs	r2, #0
    69a4:	569a      	ldrsb	r2, [r3, r2]
    69a6:	493d      	ldr	r1, [pc, #244]	; (6a9c <recv+0x1a0>)
    69a8:	0013      	movs	r3, r2
    69aa:	005b      	lsls	r3, r3, #1
    69ac:	189b      	adds	r3, r3, r2
    69ae:	009b      	lsls	r3, r3, #2
    69b0:	18cb      	adds	r3, r1, r3
    69b2:	3308      	adds	r3, #8
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	b2db      	uxtb	r3, r3
    69b8:	2b00      	cmp	r3, #0
    69ba:	d167      	bne.n	6a8c <recv+0x190>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    69bc:	231d      	movs	r3, #29
    69be:	18fb      	adds	r3, r7, r3
    69c0:	2246      	movs	r2, #70	; 0x46
    69c2:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    69c4:	230f      	movs	r3, #15
    69c6:	18fb      	adds	r3, r7, r3
    69c8:	2200      	movs	r2, #0
    69ca:	569a      	ldrsb	r2, [r3, r2]
    69cc:	4933      	ldr	r1, [pc, #204]	; (6a9c <recv+0x1a0>)
    69ce:	0013      	movs	r3, r2
    69d0:	005b      	lsls	r3, r3, #1
    69d2:	189b      	adds	r3, r3, r2
    69d4:	009b      	lsls	r3, r3, #2
    69d6:	18cb      	adds	r3, r1, r3
    69d8:	3308      	adds	r3, #8
    69da:	2201      	movs	r2, #1
    69dc:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    69de:	230f      	movs	r3, #15
    69e0:	18fb      	adds	r3, r7, r3
    69e2:	2200      	movs	r2, #0
    69e4:	569a      	ldrsb	r2, [r3, r2]
    69e6:	492d      	ldr	r1, [pc, #180]	; (6a9c <recv+0x1a0>)
    69e8:	0013      	movs	r3, r2
    69ea:	005b      	lsls	r3, r3, #1
    69ec:	189b      	adds	r3, r3, r2
    69ee:	009b      	lsls	r3, r3, #2
    69f0:	18cb      	adds	r3, r1, r3
    69f2:	3307      	adds	r3, #7
    69f4:	781b      	ldrb	r3, [r3, #0]
    69f6:	b2db      	uxtb	r3, r3
    69f8:	001a      	movs	r2, r3
    69fa:	2301      	movs	r3, #1
    69fc:	4013      	ands	r3, r2
    69fe:	d003      	beq.n	6a08 <recv+0x10c>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    6a00:	231d      	movs	r3, #29
    6a02:	18fb      	adds	r3, r7, r3
    6a04:	224d      	movs	r2, #77	; 0x4d
    6a06:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    6a08:	687b      	ldr	r3, [r7, #4]
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	d105      	bne.n	6a1a <recv+0x11e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    6a0e:	2314      	movs	r3, #20
    6a10:	18fb      	adds	r3, r7, r3
    6a12:	2201      	movs	r2, #1
    6a14:	4252      	negs	r2, r2
    6a16:	601a      	str	r2, [r3, #0]
    6a18:	e003      	b.n	6a22 <recv+0x126>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    6a1a:	2314      	movs	r3, #20
    6a1c:	18fb      	adds	r3, r7, r3
    6a1e:	687a      	ldr	r2, [r7, #4]
    6a20:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    6a22:	2314      	movs	r3, #20
    6a24:	18fb      	adds	r3, r7, r3
    6a26:	220f      	movs	r2, #15
    6a28:	18ba      	adds	r2, r7, r2
    6a2a:	7812      	ldrb	r2, [r2, #0]
    6a2c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    6a2e:	230f      	movs	r3, #15
    6a30:	18fb      	adds	r3, r7, r3
    6a32:	2200      	movs	r2, #0
    6a34:	569a      	ldrsb	r2, [r3, r2]
    6a36:	4919      	ldr	r1, [pc, #100]	; (6a9c <recv+0x1a0>)
    6a38:	0013      	movs	r3, r2
    6a3a:	005b      	lsls	r3, r3, #1
    6a3c:	189b      	adds	r3, r3, r2
    6a3e:	009b      	lsls	r3, r3, #2
    6a40:	18cb      	adds	r3, r1, r3
    6a42:	330a      	adds	r3, #10
    6a44:	881b      	ldrh	r3, [r3, #0]
    6a46:	b29a      	uxth	r2, r3
    6a48:	2314      	movs	r3, #20
    6a4a:	18fb      	adds	r3, r7, r3
    6a4c:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    6a4e:	2314      	movs	r3, #20
    6a50:	18fa      	adds	r2, r7, r3
    6a52:	231d      	movs	r3, #29
    6a54:	18fb      	adds	r3, r7, r3
    6a56:	7819      	ldrb	r1, [r3, #0]
    6a58:	2300      	movs	r3, #0
    6a5a:	9302      	str	r3, [sp, #8]
    6a5c:	2300      	movs	r3, #0
    6a5e:	9301      	str	r3, [sp, #4]
    6a60:	2300      	movs	r3, #0
    6a62:	9300      	str	r3, [sp, #0]
    6a64:	2308      	movs	r3, #8
    6a66:	2002      	movs	r0, #2
    6a68:	4c0d      	ldr	r4, [pc, #52]	; (6aa0 <recv+0x1a4>)
    6a6a:	47a0      	blx	r4
    6a6c:	0003      	movs	r3, r0
    6a6e:	001a      	movs	r2, r3
    6a70:	231e      	movs	r3, #30
    6a72:	18fb      	adds	r3, r7, r3
    6a74:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    6a76:	231e      	movs	r3, #30
    6a78:	18fb      	adds	r3, r7, r3
    6a7a:	2200      	movs	r2, #0
    6a7c:	5e9b      	ldrsh	r3, [r3, r2]
    6a7e:	2b00      	cmp	r3, #0
    6a80:	d004      	beq.n	6a8c <recv+0x190>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    6a82:	231e      	movs	r3, #30
    6a84:	18fb      	adds	r3, r7, r3
    6a86:	220e      	movs	r2, #14
    6a88:	4252      	negs	r2, r2
    6a8a:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    6a8c:	231e      	movs	r3, #30
    6a8e:	18fb      	adds	r3, r7, r3
    6a90:	2200      	movs	r2, #0
    6a92:	5e9b      	ldrsh	r3, [r3, r2]
}
    6a94:	0018      	movs	r0, r3
    6a96:	46bd      	mov	sp, r7
    6a98:	b009      	add	sp, #36	; 0x24
    6a9a:	bd90      	pop	{r4, r7, pc}
    6a9c:	20000418 	.word	0x20000418
    6aa0:	00002b71 	.word	0x00002b71

00006aa4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    6aa4:	b5b0      	push	{r4, r5, r7, lr}
    6aa6:	b088      	sub	sp, #32
    6aa8:	af04      	add	r7, sp, #16
    6aaa:	0002      	movs	r2, r0
    6aac:	1dfb      	adds	r3, r7, #7
    6aae:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    6ab0:	230f      	movs	r3, #15
    6ab2:	18fb      	adds	r3, r7, r3
    6ab4:	22fa      	movs	r2, #250	; 0xfa
    6ab6:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    6ab8:	1dfb      	adds	r3, r7, #7
    6aba:	781b      	ldrb	r3, [r3, #0]
    6abc:	2b7f      	cmp	r3, #127	; 0x7f
    6abe:	d900      	bls.n	6ac2 <close+0x1e>
    6ac0:	e07c      	b.n	6bbc <close+0x118>
    6ac2:	1dfb      	adds	r3, r7, #7
    6ac4:	2200      	movs	r2, #0
    6ac6:	569a      	ldrsb	r2, [r3, r2]
    6ac8:	4940      	ldr	r1, [pc, #256]	; (6bcc <close+0x128>)
    6aca:	0013      	movs	r3, r2
    6acc:	005b      	lsls	r3, r3, #1
    6ace:	189b      	adds	r3, r3, r2
    6ad0:	009b      	lsls	r3, r3, #2
    6ad2:	18cb      	adds	r3, r1, r3
    6ad4:	3306      	adds	r3, #6
    6ad6:	781b      	ldrb	r3, [r3, #0]
    6ad8:	b2db      	uxtb	r3, r3
    6ada:	2b01      	cmp	r3, #1
    6adc:	d16e      	bne.n	6bbc <close+0x118>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    6ade:	230e      	movs	r3, #14
    6ae0:	18fb      	adds	r3, r7, r3
    6ae2:	2249      	movs	r2, #73	; 0x49
    6ae4:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    6ae6:	2308      	movs	r3, #8
    6ae8:	18fb      	adds	r3, r7, r3
    6aea:	1dfa      	adds	r2, r7, #7
    6aec:	7812      	ldrb	r2, [r2, #0]
    6aee:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    6af0:	1dfb      	adds	r3, r7, #7
    6af2:	2200      	movs	r2, #0
    6af4:	569a      	ldrsb	r2, [r3, r2]
    6af6:	4935      	ldr	r1, [pc, #212]	; (6bcc <close+0x128>)
    6af8:	0013      	movs	r3, r2
    6afa:	005b      	lsls	r3, r3, #1
    6afc:	189b      	adds	r3, r3, r2
    6afe:	009b      	lsls	r3, r3, #2
    6b00:	18cb      	adds	r3, r1, r3
    6b02:	330a      	adds	r3, #10
    6b04:	881b      	ldrh	r3, [r3, #0]
    6b06:	b29a      	uxth	r2, r3
    6b08:	2308      	movs	r3, #8
    6b0a:	18fb      	adds	r3, r7, r3
    6b0c:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    6b0e:	1dfb      	adds	r3, r7, #7
    6b10:	2200      	movs	r2, #0
    6b12:	569a      	ldrsb	r2, [r3, r2]
    6b14:	492d      	ldr	r1, [pc, #180]	; (6bcc <close+0x128>)
    6b16:	0013      	movs	r3, r2
    6b18:	005b      	lsls	r3, r3, #1
    6b1a:	189b      	adds	r3, r3, r2
    6b1c:	009b      	lsls	r3, r3, #2
    6b1e:	18cb      	adds	r3, r1, r3
    6b20:	3306      	adds	r3, #6
    6b22:	2200      	movs	r2, #0
    6b24:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    6b26:	1dfb      	adds	r3, r7, #7
    6b28:	2200      	movs	r2, #0
    6b2a:	569a      	ldrsb	r2, [r3, r2]
    6b2c:	4927      	ldr	r1, [pc, #156]	; (6bcc <close+0x128>)
    6b2e:	0013      	movs	r3, r2
    6b30:	005b      	lsls	r3, r3, #1
    6b32:	189b      	adds	r3, r3, r2
    6b34:	009b      	lsls	r3, r3, #2
    6b36:	18cb      	adds	r3, r1, r3
    6b38:	330a      	adds	r3, #10
    6b3a:	2200      	movs	r2, #0
    6b3c:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6b3e:	1dfb      	adds	r3, r7, #7
    6b40:	2200      	movs	r2, #0
    6b42:	569a      	ldrsb	r2, [r3, r2]
    6b44:	4921      	ldr	r1, [pc, #132]	; (6bcc <close+0x128>)
    6b46:	0013      	movs	r3, r2
    6b48:	005b      	lsls	r3, r3, #1
    6b4a:	189b      	adds	r3, r3, r2
    6b4c:	009b      	lsls	r3, r3, #2
    6b4e:	18cb      	adds	r3, r1, r3
    6b50:	3307      	adds	r3, #7
    6b52:	781b      	ldrb	r3, [r3, #0]
    6b54:	b2db      	uxtb	r3, r3
    6b56:	001a      	movs	r2, r3
    6b58:	2301      	movs	r3, #1
    6b5a:	4013      	ands	r3, r2
    6b5c:	d003      	beq.n	6b66 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    6b5e:	230e      	movs	r3, #14
    6b60:	18fb      	adds	r3, r7, r3
    6b62:	224e      	movs	r2, #78	; 0x4e
    6b64:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    6b66:	230f      	movs	r3, #15
    6b68:	18fc      	adds	r4, r7, r3
    6b6a:	2308      	movs	r3, #8
    6b6c:	18fa      	adds	r2, r7, r3
    6b6e:	230e      	movs	r3, #14
    6b70:	18fb      	adds	r3, r7, r3
    6b72:	7819      	ldrb	r1, [r3, #0]
    6b74:	2300      	movs	r3, #0
    6b76:	9302      	str	r3, [sp, #8]
    6b78:	2300      	movs	r3, #0
    6b7a:	9301      	str	r3, [sp, #4]
    6b7c:	2300      	movs	r3, #0
    6b7e:	9300      	str	r3, [sp, #0]
    6b80:	2304      	movs	r3, #4
    6b82:	2002      	movs	r0, #2
    6b84:	4d12      	ldr	r5, [pc, #72]	; (6bd0 <close+0x12c>)
    6b86:	47a8      	blx	r5
    6b88:	0003      	movs	r3, r0
    6b8a:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    6b8c:	230f      	movs	r3, #15
    6b8e:	18fb      	adds	r3, r7, r3
    6b90:	781b      	ldrb	r3, [r3, #0]
    6b92:	b25b      	sxtb	r3, r3
    6b94:	2b00      	cmp	r3, #0
    6b96:	d003      	beq.n	6ba0 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
    6b98:	230f      	movs	r3, #15
    6b9a:	18fb      	adds	r3, r7, r3
    6b9c:	22f7      	movs	r2, #247	; 0xf7
    6b9e:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    6ba0:	1dfb      	adds	r3, r7, #7
    6ba2:	2200      	movs	r2, #0
    6ba4:	569a      	ldrsb	r2, [r3, r2]
    6ba6:	0013      	movs	r3, r2
    6ba8:	005b      	lsls	r3, r3, #1
    6baa:	189b      	adds	r3, r3, r2
    6bac:	009b      	lsls	r3, r3, #2
    6bae:	4a07      	ldr	r2, [pc, #28]	; (6bcc <close+0x128>)
    6bb0:	189b      	adds	r3, r3, r2
    6bb2:	220c      	movs	r2, #12
    6bb4:	2100      	movs	r1, #0
    6bb6:	0018      	movs	r0, r3
    6bb8:	4b06      	ldr	r3, [pc, #24]	; (6bd4 <close+0x130>)
    6bba:	4798      	blx	r3
	}
	return s8Ret;
    6bbc:	230f      	movs	r3, #15
    6bbe:	18fb      	adds	r3, r7, r3
    6bc0:	781b      	ldrb	r3, [r3, #0]
    6bc2:	b25b      	sxtb	r3, r3
}
    6bc4:	0018      	movs	r0, r3
    6bc6:	46bd      	mov	sp, r7
    6bc8:	b004      	add	sp, #16
    6bca:	bdb0      	pop	{r4, r5, r7, pc}
    6bcc:	20000418 	.word	0x20000418
    6bd0:	00002b71 	.word	0x00002b71
    6bd4:	00002885 	.word	0x00002885

00006bd8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    6bd8:	b580      	push	{r7, lr}
    6bda:	b086      	sub	sp, #24
    6bdc:	af00      	add	r7, sp, #0
    6bde:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    6be0:	2300      	movs	r3, #0
    6be2:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    6be4:	2317      	movs	r3, #23
    6be6:	18fb      	adds	r3, r7, r3
    6be8:	2200      	movs	r2, #0
    6bea:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    6bec:	2316      	movs	r3, #22
    6bee:	18fb      	adds	r3, r7, r3
    6bf0:	2200      	movs	r2, #0
    6bf2:	701a      	strb	r2, [r3, #0]
    6bf4:	e060      	b.n	6cb8 <nmi_inet_addr+0xe0>
	{
		j = 0;
    6bf6:	2315      	movs	r3, #21
    6bf8:	18fb      	adds	r3, r7, r3
    6bfa:	2200      	movs	r2, #0
    6bfc:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    6bfe:	2314      	movs	r3, #20
    6c00:	18fb      	adds	r3, r7, r3
    6c02:	687a      	ldr	r2, [r7, #4]
    6c04:	7812      	ldrb	r2, [r2, #0]
    6c06:	701a      	strb	r2, [r3, #0]
			++j;
    6c08:	2315      	movs	r3, #21
    6c0a:	18fb      	adds	r3, r7, r3
    6c0c:	2215      	movs	r2, #21
    6c0e:	18ba      	adds	r2, r7, r2
    6c10:	7812      	ldrb	r2, [r2, #0]
    6c12:	3201      	adds	r2, #1
    6c14:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    6c16:	2315      	movs	r3, #21
    6c18:	18fb      	adds	r3, r7, r3
    6c1a:	781b      	ldrb	r3, [r3, #0]
    6c1c:	2b04      	cmp	r3, #4
    6c1e:	d901      	bls.n	6c24 <nmi_inet_addr+0x4c>
			{
				return 0;
    6c20:	2300      	movs	r3, #0
    6c22:	e057      	b.n	6cd4 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    6c24:	2314      	movs	r3, #20
    6c26:	18fb      	adds	r3, r7, r3
    6c28:	781b      	ldrb	r3, [r3, #0]
    6c2a:	2b2e      	cmp	r3, #46	; 0x2e
    6c2c:	d004      	beq.n	6c38 <nmi_inet_addr+0x60>
    6c2e:	2314      	movs	r3, #20
    6c30:	18fb      	adds	r3, r7, r3
    6c32:	781b      	ldrb	r3, [r3, #0]
    6c34:	2b00      	cmp	r3, #0
    6c36:	d10d      	bne.n	6c54 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    6c38:	2316      	movs	r3, #22
    6c3a:	18fb      	adds	r3, r7, r3
    6c3c:	781b      	ldrb	r3, [r3, #0]
    6c3e:	220c      	movs	r2, #12
    6c40:	18ba      	adds	r2, r7, r2
    6c42:	2117      	movs	r1, #23
    6c44:	1879      	adds	r1, r7, r1
    6c46:	7809      	ldrb	r1, [r1, #0]
    6c48:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    6c4a:	2317      	movs	r3, #23
    6c4c:	18fb      	adds	r3, r7, r3
    6c4e:	2200      	movs	r2, #0
    6c50:	701a      	strb	r2, [r3, #0]
    6c52:	e01d      	b.n	6c90 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    6c54:	2314      	movs	r3, #20
    6c56:	18fb      	adds	r3, r7, r3
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	2b2f      	cmp	r3, #47	; 0x2f
    6c5c:	d916      	bls.n	6c8c <nmi_inet_addr+0xb4>
    6c5e:	2314      	movs	r3, #20
    6c60:	18fb      	adds	r3, r7, r3
    6c62:	781b      	ldrb	r3, [r3, #0]
    6c64:	2b39      	cmp	r3, #57	; 0x39
    6c66:	d811      	bhi.n	6c8c <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    6c68:	2317      	movs	r3, #23
    6c6a:	18fb      	adds	r3, r7, r3
    6c6c:	781b      	ldrb	r3, [r3, #0]
    6c6e:	1c1a      	adds	r2, r3, #0
    6c70:	0092      	lsls	r2, r2, #2
    6c72:	18d3      	adds	r3, r2, r3
    6c74:	18db      	adds	r3, r3, r3
    6c76:	b2da      	uxtb	r2, r3
    6c78:	2314      	movs	r3, #20
    6c7a:	18fb      	adds	r3, r7, r3
    6c7c:	781b      	ldrb	r3, [r3, #0]
    6c7e:	18d3      	adds	r3, r2, r3
    6c80:	b2da      	uxtb	r2, r3
    6c82:	2317      	movs	r3, #23
    6c84:	18fb      	adds	r3, r7, r3
    6c86:	3a30      	subs	r2, #48	; 0x30
    6c88:	701a      	strb	r2, [r3, #0]
    6c8a:	e001      	b.n	6c90 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    6c8c:	2300      	movs	r3, #0
    6c8e:	e021      	b.n	6cd4 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	3301      	adds	r3, #1
    6c94:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    6c96:	2314      	movs	r3, #20
    6c98:	18fb      	adds	r3, r7, r3
    6c9a:	781b      	ldrb	r3, [r3, #0]
    6c9c:	2b2e      	cmp	r3, #46	; 0x2e
    6c9e:	d004      	beq.n	6caa <nmi_inet_addr+0xd2>
    6ca0:	2314      	movs	r3, #20
    6ca2:	18fb      	adds	r3, r7, r3
    6ca4:	781b      	ldrb	r3, [r3, #0]
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d1a9      	bne.n	6bfe <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    6caa:	2316      	movs	r3, #22
    6cac:	18fb      	adds	r3, r7, r3
    6cae:	2216      	movs	r2, #22
    6cb0:	18ba      	adds	r2, r7, r2
    6cb2:	7812      	ldrb	r2, [r2, #0]
    6cb4:	3201      	adds	r2, #1
    6cb6:	701a      	strb	r2, [r3, #0]
    6cb8:	2316      	movs	r3, #22
    6cba:	18fb      	adds	r3, r7, r3
    6cbc:	781b      	ldrb	r3, [r3, #0]
    6cbe:	2b03      	cmp	r3, #3
    6cc0:	d999      	bls.n	6bf6 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    6cc2:	230c      	movs	r3, #12
    6cc4:	18f9      	adds	r1, r7, r3
    6cc6:	2310      	movs	r3, #16
    6cc8:	18fb      	adds	r3, r7, r3
    6cca:	2204      	movs	r2, #4
    6ccc:	0018      	movs	r0, r3
    6cce:	4b03      	ldr	r3, [pc, #12]	; (6cdc <nmi_inet_addr+0x104>)
    6cd0:	4798      	blx	r3
	return u32IP;
    6cd2:	693b      	ldr	r3, [r7, #16]
}
    6cd4:	0018      	movs	r0, r3
    6cd6:	46bd      	mov	sp, r7
    6cd8:	b006      	add	sp, #24
    6cda:	bd80      	pop	{r7, pc}
    6cdc:	00002849 	.word	0x00002849

00006ce0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    6ce0:	b5b0      	push	{r4, r5, r7, lr}
    6ce2:	b088      	sub	sp, #32
    6ce4:	af04      	add	r7, sp, #16
    6ce6:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    6ce8:	230f      	movs	r3, #15
    6cea:	18fb      	adds	r3, r7, r3
    6cec:	22fa      	movs	r2, #250	; 0xfa
    6cee:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    6cf0:	687b      	ldr	r3, [r7, #4]
    6cf2:	0018      	movs	r0, r3
    6cf4:	4b19      	ldr	r3, [pc, #100]	; (6d5c <gethostbyname+0x7c>)
    6cf6:	4798      	blx	r3
    6cf8:	0003      	movs	r3, r0
    6cfa:	001a      	movs	r2, r3
    6cfc:	230e      	movs	r3, #14
    6cfe:	18fb      	adds	r3, r7, r3
    6d00:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    6d02:	230e      	movs	r3, #14
    6d04:	18fb      	adds	r3, r7, r3
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	2b40      	cmp	r3, #64	; 0x40
    6d0a:	d81f      	bhi.n	6d4c <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    6d0c:	230e      	movs	r3, #14
    6d0e:	18fb      	adds	r3, r7, r3
    6d10:	781b      	ldrb	r3, [r3, #0]
    6d12:	b29b      	uxth	r3, r3
    6d14:	3301      	adds	r3, #1
    6d16:	b299      	uxth	r1, r3
    6d18:	230f      	movs	r3, #15
    6d1a:	18fc      	adds	r4, r7, r3
    6d1c:	687a      	ldr	r2, [r7, #4]
    6d1e:	2300      	movs	r3, #0
    6d20:	9302      	str	r3, [sp, #8]
    6d22:	2300      	movs	r3, #0
    6d24:	9301      	str	r3, [sp, #4]
    6d26:	2300      	movs	r3, #0
    6d28:	9300      	str	r3, [sp, #0]
    6d2a:	000b      	movs	r3, r1
    6d2c:	21ca      	movs	r1, #202	; 0xca
    6d2e:	2002      	movs	r0, #2
    6d30:	4d0b      	ldr	r5, [pc, #44]	; (6d60 <gethostbyname+0x80>)
    6d32:	47a8      	blx	r5
    6d34:	0003      	movs	r3, r0
    6d36:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    6d38:	230f      	movs	r3, #15
    6d3a:	18fb      	adds	r3, r7, r3
    6d3c:	781b      	ldrb	r3, [r3, #0]
    6d3e:	b25b      	sxtb	r3, r3
    6d40:	2b00      	cmp	r3, #0
    6d42:	d003      	beq.n	6d4c <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    6d44:	230f      	movs	r3, #15
    6d46:	18fb      	adds	r3, r7, r3
    6d48:	22f7      	movs	r2, #247	; 0xf7
    6d4a:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    6d4c:	230f      	movs	r3, #15
    6d4e:	18fb      	adds	r3, r7, r3
    6d50:	781b      	ldrb	r3, [r3, #0]
    6d52:	b25b      	sxtb	r3, r3
}
    6d54:	0018      	movs	r0, r3
    6d56:	46bd      	mov	sp, r7
    6d58:	b004      	add	sp, #16
    6d5a:	bdb0      	pop	{r4, r5, r7, pc}
    6d5c:	000028c3 	.word	0x000028c3
    6d60:	00002b71 	.word	0x00002b71

00006d64 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6d64:	b580      	push	{r7, lr}
    6d66:	b082      	sub	sp, #8
    6d68:	af00      	add	r7, sp, #0
    6d6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6d6c:	687b      	ldr	r3, [r7, #4]
    6d6e:	2200      	movs	r2, #0
    6d70:	701a      	strb	r2, [r3, #0]
}
    6d72:	46c0      	nop			; (mov r8, r8)
    6d74:	46bd      	mov	sp, r7
    6d76:	b002      	add	sp, #8
    6d78:	bd80      	pop	{r7, pc}
	...

00006d7c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6d7c:	b580      	push	{r7, lr}
    6d7e:	b082      	sub	sp, #8
    6d80:	af00      	add	r7, sp, #0
    6d82:	0002      	movs	r2, r0
    6d84:	6039      	str	r1, [r7, #0]
    6d86:	1dfb      	adds	r3, r7, #7
    6d88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6d8a:	1dfb      	adds	r3, r7, #7
    6d8c:	781b      	ldrb	r3, [r3, #0]
    6d8e:	2b01      	cmp	r3, #1
    6d90:	d00a      	beq.n	6da8 <system_apb_clock_set_mask+0x2c>
    6d92:	2b02      	cmp	r3, #2
    6d94:	d00f      	beq.n	6db6 <system_apb_clock_set_mask+0x3a>
    6d96:	2b00      	cmp	r3, #0
    6d98:	d114      	bne.n	6dc4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6d9a:	4b0e      	ldr	r3, [pc, #56]	; (6dd4 <system_apb_clock_set_mask+0x58>)
    6d9c:	4a0d      	ldr	r2, [pc, #52]	; (6dd4 <system_apb_clock_set_mask+0x58>)
    6d9e:	6991      	ldr	r1, [r2, #24]
    6da0:	683a      	ldr	r2, [r7, #0]
    6da2:	430a      	orrs	r2, r1
    6da4:	619a      	str	r2, [r3, #24]
			break;
    6da6:	e00f      	b.n	6dc8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6da8:	4b0a      	ldr	r3, [pc, #40]	; (6dd4 <system_apb_clock_set_mask+0x58>)
    6daa:	4a0a      	ldr	r2, [pc, #40]	; (6dd4 <system_apb_clock_set_mask+0x58>)
    6dac:	69d1      	ldr	r1, [r2, #28]
    6dae:	683a      	ldr	r2, [r7, #0]
    6db0:	430a      	orrs	r2, r1
    6db2:	61da      	str	r2, [r3, #28]
			break;
    6db4:	e008      	b.n	6dc8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6db6:	4b07      	ldr	r3, [pc, #28]	; (6dd4 <system_apb_clock_set_mask+0x58>)
    6db8:	4a06      	ldr	r2, [pc, #24]	; (6dd4 <system_apb_clock_set_mask+0x58>)
    6dba:	6a11      	ldr	r1, [r2, #32]
    6dbc:	683a      	ldr	r2, [r7, #0]
    6dbe:	430a      	orrs	r2, r1
    6dc0:	621a      	str	r2, [r3, #32]
			break;
    6dc2:	e001      	b.n	6dc8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6dc4:	2317      	movs	r3, #23
    6dc6:	e000      	b.n	6dca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6dc8:	2300      	movs	r3, #0
}
    6dca:	0018      	movs	r0, r3
    6dcc:	46bd      	mov	sp, r7
    6dce:	b002      	add	sp, #8
    6dd0:	bd80      	pop	{r7, pc}
    6dd2:	46c0      	nop			; (mov r8, r8)
    6dd4:	40000400 	.word	0x40000400

00006dd8 <system_pinmux_get_config_defaults>:
{
    6dd8:	b580      	push	{r7, lr}
    6dda:	b082      	sub	sp, #8
    6ddc:	af00      	add	r7, sp, #0
    6dde:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6de0:	687b      	ldr	r3, [r7, #4]
    6de2:	2280      	movs	r2, #128	; 0x80
    6de4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	2200      	movs	r2, #0
    6dea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6dec:	687b      	ldr	r3, [r7, #4]
    6dee:	2201      	movs	r2, #1
    6df0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6df2:	687b      	ldr	r3, [r7, #4]
    6df4:	2200      	movs	r2, #0
    6df6:	70da      	strb	r2, [r3, #3]
}
    6df8:	46c0      	nop			; (mov r8, r8)
    6dfa:	46bd      	mov	sp, r7
    6dfc:	b002      	add	sp, #8
    6dfe:	bd80      	pop	{r7, pc}

00006e00 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    6e00:	b580      	push	{r7, lr}
    6e02:	b082      	sub	sp, #8
    6e04:	af00      	add	r7, sp, #0
    6e06:	0002      	movs	r2, r0
    6e08:	1dfb      	adds	r3, r7, #7
    6e0a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    6e0c:	1dfb      	adds	r3, r7, #7
    6e0e:	781b      	ldrb	r3, [r3, #0]
    6e10:	2b00      	cmp	r3, #0
    6e12:	d002      	beq.n	6e1a <system_voltage_reference_enable+0x1a>
    6e14:	2b01      	cmp	r3, #1
    6e16:	d007      	beq.n	6e28 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    6e18:	e00d      	b.n	6e36 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    6e1a:	4b08      	ldr	r3, [pc, #32]	; (6e3c <system_voltage_reference_enable+0x3c>)
    6e1c:	4a07      	ldr	r2, [pc, #28]	; (6e3c <system_voltage_reference_enable+0x3c>)
    6e1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    6e20:	2102      	movs	r1, #2
    6e22:	430a      	orrs	r2, r1
    6e24:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    6e26:	e006      	b.n	6e36 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    6e28:	4b04      	ldr	r3, [pc, #16]	; (6e3c <system_voltage_reference_enable+0x3c>)
    6e2a:	4a04      	ldr	r2, [pc, #16]	; (6e3c <system_voltage_reference_enable+0x3c>)
    6e2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
    6e2e:	2104      	movs	r1, #4
    6e30:	430a      	orrs	r2, r1
    6e32:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    6e34:	46c0      	nop			; (mov r8, r8)
	}
}
    6e36:	46bd      	mov	sp, r7
    6e38:	b002      	add	sp, #8
    6e3a:	bd80      	pop	{r7, pc}
    6e3c:	40000800 	.word	0x40000800

00006e40 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    6e40:	b580      	push	{r7, lr}
    6e42:	b084      	sub	sp, #16
    6e44:	af00      	add	r7, sp, #0
    6e46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    6e48:	687b      	ldr	r3, [r7, #4]
    6e4a:	681b      	ldr	r3, [r3, #0]
    6e4c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6e4e:	68fb      	ldr	r3, [r7, #12]
    6e50:	7e5b      	ldrb	r3, [r3, #25]
    6e52:	b2db      	uxtb	r3, r3
    6e54:	b25b      	sxtb	r3, r3
    6e56:	2b00      	cmp	r3, #0
    6e58:	da01      	bge.n	6e5e <adc_is_syncing+0x1e>
		return true;
    6e5a:	2301      	movs	r3, #1
    6e5c:	e000      	b.n	6e60 <adc_is_syncing+0x20>
	}

	return false;
    6e5e:	2300      	movs	r3, #0
}
    6e60:	0018      	movs	r0, r3
    6e62:	46bd      	mov	sp, r7
    6e64:	b004      	add	sp, #16
    6e66:	bd80      	pop	{r7, pc}

00006e68 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    6e68:	b580      	push	{r7, lr}
    6e6a:	b082      	sub	sp, #8
    6e6c:	af00      	add	r7, sp, #0
    6e6e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    6e70:	687b      	ldr	r3, [r7, #4]
    6e72:	2200      	movs	r2, #0
    6e74:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	2200      	movs	r2, #0
    6e7a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	2200      	movs	r2, #0
    6e80:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    6e82:	687b      	ldr	r3, [r7, #4]
    6e84:	2200      	movs	r2, #0
    6e86:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    6e88:	687b      	ldr	r3, [r7, #4]
    6e8a:	2200      	movs	r2, #0
    6e8c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    6e8e:	687b      	ldr	r3, [r7, #4]
    6e90:	2200      	movs	r2, #0
    6e92:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	2200      	movs	r2, #0
    6e98:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	2200      	movs	r2, #0
    6e9e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
  config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    6ea0:	687b      	ldr	r3, [r7, #4]
    6ea2:	2200      	movs	r2, #0
    6ea4:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	22c0      	movs	r2, #192	; 0xc0
    6eaa:	0152      	lsls	r2, r2, #5
    6eac:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    6eae:	687b      	ldr	r3, [r7, #4]
    6eb0:	2200      	movs	r2, #0
    6eb2:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    6eb4:	687b      	ldr	r3, [r7, #4]
    6eb6:	2200      	movs	r2, #0
    6eb8:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    6eba:	687b      	ldr	r3, [r7, #4]
    6ebc:	2200      	movs	r2, #0
    6ebe:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    6ec0:	687b      	ldr	r3, [r7, #4]
    6ec2:	2200      	movs	r2, #0
    6ec4:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    6ec6:	687b      	ldr	r3, [r7, #4]
    6ec8:	2200      	movs	r2, #0
    6eca:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    6ecc:	687b      	ldr	r3, [r7, #4]
    6ece:	222a      	movs	r2, #42	; 0x2a
    6ed0:	2100      	movs	r1, #0
    6ed2:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    6ed4:	687b      	ldr	r3, [r7, #4]
    6ed6:	2200      	movs	r2, #0
    6ed8:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    6eda:	687b      	ldr	r3, [r7, #4]
    6edc:	2200      	movs	r2, #0
    6ede:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    6ee0:	687b      	ldr	r3, [r7, #4]
    6ee2:	2224      	movs	r2, #36	; 0x24
    6ee4:	2100      	movs	r1, #0
    6ee6:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    6ee8:	687b      	ldr	r3, [r7, #4]
    6eea:	2200      	movs	r2, #0
    6eec:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	2200      	movs	r2, #0
    6ef2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    6ef4:	687b      	ldr	r3, [r7, #4]
    6ef6:	2200      	movs	r2, #0
    6ef8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    6efa:	687b      	ldr	r3, [r7, #4]
    6efc:	222b      	movs	r2, #43	; 0x2b
    6efe:	2100      	movs	r1, #0
    6f00:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    6f02:	687b      	ldr	r3, [r7, #4]
    6f04:	222c      	movs	r2, #44	; 0x2c
    6f06:	2100      	movs	r1, #0
    6f08:	5499      	strb	r1, [r3, r2]
}
    6f0a:	46c0      	nop			; (mov r8, r8)
    6f0c:	46bd      	mov	sp, r7
    6f0e:	b002      	add	sp, #8
    6f10:	bd80      	pop	{r7, pc}
	...

00006f14 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    6f14:	b580      	push	{r7, lr}
    6f16:	b098      	sub	sp, #96	; 0x60
    6f18:	af00      	add	r7, sp, #0
    6f1a:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    6f1c:	230c      	movs	r3, #12
    6f1e:	18fa      	adds	r2, r7, r3
    6f20:	4b15      	ldr	r3, [pc, #84]	; (6f78 <_adc_configure_ain_pin+0x64>)
    6f22:	0010      	movs	r0, r2
    6f24:	0019      	movs	r1, r3
    6f26:	2350      	movs	r3, #80	; 0x50
    6f28:	001a      	movs	r2, r3
    6f2a:	4b14      	ldr	r3, [pc, #80]	; (6f7c <_adc_configure_ain_pin+0x68>)
    6f2c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    6f2e:	4b14      	ldr	r3, [pc, #80]	; (6f80 <_adc_configure_ain_pin+0x6c>)
    6f30:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    6f32:	687b      	ldr	r3, [r7, #4]
    6f34:	2b13      	cmp	r3, #19
    6f36:	d81a      	bhi.n	6f6e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    6f38:	230c      	movs	r3, #12
    6f3a:	18fb      	adds	r3, r7, r3
    6f3c:	687a      	ldr	r2, [r7, #4]
    6f3e:	0092      	lsls	r2, r2, #2
    6f40:	58d3      	ldr	r3, [r2, r3]
    6f42:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    6f44:	2308      	movs	r3, #8
    6f46:	18fb      	adds	r3, r7, r3
    6f48:	0018      	movs	r0, r3
    6f4a:	4b0e      	ldr	r3, [pc, #56]	; (6f84 <_adc_configure_ain_pin+0x70>)
    6f4c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    6f4e:	2308      	movs	r3, #8
    6f50:	18fb      	adds	r3, r7, r3
    6f52:	2200      	movs	r2, #0
    6f54:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    6f56:	2308      	movs	r3, #8
    6f58:	18fb      	adds	r3, r7, r3
    6f5a:	2201      	movs	r2, #1
    6f5c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    6f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6f60:	b2db      	uxtb	r3, r3
    6f62:	2208      	movs	r2, #8
    6f64:	18ba      	adds	r2, r7, r2
    6f66:	0011      	movs	r1, r2
    6f68:	0018      	movs	r0, r3
    6f6a:	4b07      	ldr	r3, [pc, #28]	; (6f88 <_adc_configure_ain_pin+0x74>)
    6f6c:	4798      	blx	r3
	}
}
    6f6e:	46c0      	nop			; (mov r8, r8)
    6f70:	46bd      	mov	sp, r7
    6f72:	b018      	add	sp, #96	; 0x60
    6f74:	bd80      	pop	{r7, pc}
    6f76:	46c0      	nop			; (mov r8, r8)
    6f78:	000146fc 	.word	0x000146fc
    6f7c:	00011f95 	.word	0x00011f95
    6f80:	0000ffff 	.word	0x0000ffff
    6f84:	00006dd9 	.word	0x00006dd9
    6f88:	0000b1c9 	.word	0x0000b1c9

00006f8c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    6f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f8e:	b089      	sub	sp, #36	; 0x24
    6f90:	af00      	add	r7, sp, #0
    6f92:	6078      	str	r0, [r7, #4]
    6f94:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    6f96:	231f      	movs	r3, #31
    6f98:	18fb      	adds	r3, r7, r3
    6f9a:	2200      	movs	r2, #0
    6f9c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    6f9e:	2310      	movs	r3, #16
    6fa0:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    6fa2:	2317      	movs	r3, #23
    6fa4:	18fb      	adds	r3, r7, r3
    6fa6:	2200      	movs	r2, #0
    6fa8:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    6faa:	687b      	ldr	r3, [r7, #4]
    6fac:	681b      	ldr	r3, [r3, #0]
    6fae:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6fb0:	230c      	movs	r3, #12
    6fb2:	18fb      	adds	r3, r7, r3
    6fb4:	0018      	movs	r0, r3
    6fb6:	4bce      	ldr	r3, [pc, #824]	; (72f0 <_adc_set_config+0x364>)
    6fb8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    6fba:	683b      	ldr	r3, [r7, #0]
    6fbc:	781a      	ldrb	r2, [r3, #0]
    6fbe:	230c      	movs	r3, #12
    6fc0:	18fb      	adds	r3, r7, r3
    6fc2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    6fc4:	230c      	movs	r3, #12
    6fc6:	18fb      	adds	r3, r7, r3
    6fc8:	0019      	movs	r1, r3
    6fca:	201e      	movs	r0, #30
    6fcc:	4bc9      	ldr	r3, [pc, #804]	; (72f4 <_adc_set_config+0x368>)
    6fce:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    6fd0:	201e      	movs	r0, #30
    6fd2:	4bc9      	ldr	r3, [pc, #804]	; (72f8 <_adc_set_config+0x36c>)
    6fd4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    6fd6:	683b      	ldr	r3, [r7, #0]
    6fd8:	222c      	movs	r2, #44	; 0x2c
    6fda:	5c9b      	ldrb	r3, [r3, r2]
    6fdc:	2b00      	cmp	r3, #0
    6fde:	d040      	beq.n	7062 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    6fe0:	2316      	movs	r3, #22
    6fe2:	18fb      	adds	r3, r7, r3
    6fe4:	683a      	ldr	r2, [r7, #0]
    6fe6:	212b      	movs	r1, #43	; 0x2b
    6fe8:	5c52      	ldrb	r2, [r2, r1]
    6fea:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    6fec:	683b      	ldr	r3, [r7, #0]
    6fee:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    6ff0:	2315      	movs	r3, #21
    6ff2:	18fb      	adds	r3, r7, r3
    6ff4:	2216      	movs	r2, #22
    6ff6:	18ba      	adds	r2, r7, r2
    6ff8:	7812      	ldrb	r2, [r2, #0]
    6ffa:	188a      	adds	r2, r1, r2
    6ffc:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    6ffe:	683b      	ldr	r3, [r7, #0]
    7000:	222c      	movs	r2, #44	; 0x2c
    7002:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    7004:	230f      	movs	r3, #15
    7006:	18fb      	adds	r3, r7, r3
    7008:	2215      	movs	r2, #21
    700a:	18ba      	adds	r2, r7, r2
    700c:	7812      	ldrb	r2, [r2, #0]
    700e:	188a      	adds	r2, r1, r2
    7010:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    7012:	e018      	b.n	7046 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    7014:	2316      	movs	r3, #22
    7016:	18fb      	adds	r3, r7, r3
    7018:	781b      	ldrb	r3, [r3, #0]
    701a:	220f      	movs	r2, #15
    701c:	4013      	ands	r3, r2
    701e:	683a      	ldr	r2, [r7, #0]
    7020:	7b12      	ldrb	r2, [r2, #12]
    7022:	189b      	adds	r3, r3, r2
    7024:	0018      	movs	r0, r3
    7026:	4bb5      	ldr	r3, [pc, #724]	; (72fc <_adc_set_config+0x370>)
    7028:	4798      	blx	r3
			start_pin++;
    702a:	2315      	movs	r3, #21
    702c:	18fb      	adds	r3, r7, r3
    702e:	781a      	ldrb	r2, [r3, #0]
    7030:	2315      	movs	r3, #21
    7032:	18fb      	adds	r3, r7, r3
    7034:	3201      	adds	r2, #1
    7036:	701a      	strb	r2, [r3, #0]
			offset++;
    7038:	2316      	movs	r3, #22
    703a:	18fb      	adds	r3, r7, r3
    703c:	781a      	ldrb	r2, [r3, #0]
    703e:	2316      	movs	r3, #22
    7040:	18fb      	adds	r3, r7, r3
    7042:	3201      	adds	r2, #1
    7044:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    7046:	2315      	movs	r3, #21
    7048:	18fa      	adds	r2, r7, r3
    704a:	230f      	movs	r3, #15
    704c:	18fb      	adds	r3, r7, r3
    704e:	7812      	ldrb	r2, [r2, #0]
    7050:	781b      	ldrb	r3, [r3, #0]
    7052:	429a      	cmp	r2, r3
    7054:	d3de      	bcc.n	7014 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    7056:	683b      	ldr	r3, [r7, #0]
    7058:	89db      	ldrh	r3, [r3, #14]
    705a:	0018      	movs	r0, r3
    705c:	4ba7      	ldr	r3, [pc, #668]	; (72fc <_adc_set_config+0x370>)
    705e:	4798      	blx	r3
    7060:	e009      	b.n	7076 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    7062:	683b      	ldr	r3, [r7, #0]
    7064:	7b1b      	ldrb	r3, [r3, #12]
    7066:	0018      	movs	r0, r3
    7068:	4ba4      	ldr	r3, [pc, #656]	; (72fc <_adc_set_config+0x370>)
    706a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    706c:	683b      	ldr	r3, [r7, #0]
    706e:	89db      	ldrh	r3, [r3, #14]
    7070:	0018      	movs	r0, r3
    7072:	4ba2      	ldr	r3, [pc, #648]	; (72fc <_adc_set_config+0x370>)
    7074:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    7076:	683b      	ldr	r3, [r7, #0]
    7078:	7d5b      	ldrb	r3, [r3, #21]
    707a:	009b      	lsls	r3, r3, #2
    707c:	b2da      	uxtb	r2, r3
    707e:	693b      	ldr	r3, [r7, #16]
    7080:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    7082:	683b      	ldr	r3, [r7, #0]
    7084:	7d9b      	ldrb	r3, [r3, #22]
    7086:	01db      	lsls	r3, r3, #7
    7088:	b25a      	sxtb	r2, r3
			(config->reference);
    708a:	683b      	ldr	r3, [r7, #0]
    708c:	785b      	ldrb	r3, [r3, #1]
    708e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    7090:	4313      	orrs	r3, r2
    7092:	b25b      	sxtb	r3, r3
    7094:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    7096:	693b      	ldr	r3, [r7, #16]
    7098:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    709a:	683b      	ldr	r3, [r7, #0]
    709c:	791b      	ldrb	r3, [r3, #4]
    709e:	2b34      	cmp	r3, #52	; 0x34
    70a0:	d846      	bhi.n	7130 <_adc_set_config+0x1a4>
    70a2:	009a      	lsls	r2, r3, #2
    70a4:	4b96      	ldr	r3, [pc, #600]	; (7300 <_adc_set_config+0x374>)
    70a6:	18d3      	adds	r3, r2, r3
    70a8:	681b      	ldr	r3, [r3, #0]
    70aa:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    70ac:	231f      	movs	r3, #31
    70ae:	18fb      	adds	r3, r7, r3
    70b0:	683a      	ldr	r2, [r7, #0]
    70b2:	7c52      	ldrb	r2, [r2, #17]
    70b4:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    70b6:	2317      	movs	r3, #23
    70b8:	18fb      	adds	r3, r7, r3
    70ba:	683a      	ldr	r2, [r7, #0]
    70bc:	7c12      	ldrb	r2, [r2, #16]
    70be:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    70c0:	2310      	movs	r3, #16
    70c2:	61bb      	str	r3, [r7, #24]
		break;
    70c4:	e036      	b.n	7134 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    70c6:	231f      	movs	r3, #31
    70c8:	18fb      	adds	r3, r7, r3
    70ca:	2201      	movs	r2, #1
    70cc:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    70ce:	2317      	movs	r3, #23
    70d0:	18fb      	adds	r3, r7, r3
    70d2:	2202      	movs	r2, #2
    70d4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    70d6:	2310      	movs	r3, #16
    70d8:	61bb      	str	r3, [r7, #24]
		break;
    70da:	e02b      	b.n	7134 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    70dc:	231f      	movs	r3, #31
    70de:	18fb      	adds	r3, r7, r3
    70e0:	2202      	movs	r2, #2
    70e2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    70e4:	2317      	movs	r3, #23
    70e6:	18fb      	adds	r3, r7, r3
    70e8:	2204      	movs	r2, #4
    70ea:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    70ec:	2310      	movs	r3, #16
    70ee:	61bb      	str	r3, [r7, #24]
		break;
    70f0:	e020      	b.n	7134 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    70f2:	231f      	movs	r3, #31
    70f4:	18fb      	adds	r3, r7, r3
    70f6:	2201      	movs	r2, #1
    70f8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    70fa:	2317      	movs	r3, #23
    70fc:	18fb      	adds	r3, r7, r3
    70fe:	2206      	movs	r2, #6
    7100:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    7102:	2310      	movs	r3, #16
    7104:	61bb      	str	r3, [r7, #24]
		break;
    7106:	e015      	b.n	7134 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    7108:	231f      	movs	r3, #31
    710a:	18fb      	adds	r3, r7, r3
    710c:	2200      	movs	r2, #0
    710e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    7110:	2317      	movs	r3, #23
    7112:	18fb      	adds	r3, r7, r3
    7114:	2208      	movs	r2, #8
    7116:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    7118:	2310      	movs	r3, #16
    711a:	61bb      	str	r3, [r7, #24]
		break;
    711c:	e00a      	b.n	7134 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    711e:	2330      	movs	r3, #48	; 0x30
    7120:	61bb      	str	r3, [r7, #24]
		break;
    7122:	e007      	b.n	7134 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    7124:	2320      	movs	r3, #32
    7126:	61bb      	str	r3, [r7, #24]
		break;
    7128:	e004      	b.n	7134 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    712a:	2300      	movs	r3, #0
    712c:	61bb      	str	r3, [r7, #24]
		break;
    712e:	e001      	b.n	7134 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    7130:	2317      	movs	r3, #23
    7132:	e1ae      	b.n	7492 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    7134:	231f      	movs	r3, #31
    7136:	18fb      	adds	r3, r7, r3
    7138:	781b      	ldrb	r3, [r3, #0]
    713a:	011b      	lsls	r3, r3, #4
    713c:	b2db      	uxtb	r3, r3
    713e:	2270      	movs	r2, #112	; 0x70
    7140:	4013      	ands	r3, r2
    7142:	b2da      	uxtb	r2, r3
    7144:	2317      	movs	r3, #23
    7146:	18fb      	adds	r3, r7, r3
    7148:	781b      	ldrb	r3, [r3, #0]
    714a:	4313      	orrs	r3, r2
    714c:	b2da      	uxtb	r2, r3
    714e:	693b      	ldr	r3, [r7, #16]
    7150:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    7152:	683b      	ldr	r3, [r7, #0]
    7154:	7ddb      	ldrb	r3, [r3, #23]
    7156:	2b3f      	cmp	r3, #63	; 0x3f
    7158:	d901      	bls.n	715e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    715a:	2317      	movs	r3, #23
    715c:	e199      	b.n	7492 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    715e:	683b      	ldr	r3, [r7, #0]
    7160:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    7162:	693b      	ldr	r3, [r7, #16]
    7164:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    7166:	46c0      	nop			; (mov r8, r8)
    7168:	687b      	ldr	r3, [r7, #4]
    716a:	0018      	movs	r0, r3
    716c:	4b65      	ldr	r3, [pc, #404]	; (7304 <_adc_set_config+0x378>)
    716e:	4798      	blx	r3
    7170:	1e03      	subs	r3, r0, #0
    7172:	d1f9      	bne.n	7168 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    7174:	683b      	ldr	r3, [r7, #0]
    7176:	885a      	ldrh	r2, [r3, #2]
    7178:	69bb      	ldr	r3, [r7, #24]
    717a:	b29b      	uxth	r3, r3
    717c:	4313      	orrs	r3, r2
    717e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    7180:	683b      	ldr	r3, [r7, #0]
    7182:	2124      	movs	r1, #36	; 0x24
    7184:	5c5b      	ldrb	r3, [r3, r1]
    7186:	b29b      	uxth	r3, r3
    7188:	00db      	lsls	r3, r3, #3
    718a:	b29b      	uxth	r3, r3
			resolution |
    718c:	4313      	orrs	r3, r2
    718e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    7190:	683b      	ldr	r3, [r7, #0]
    7192:	7d1b      	ldrb	r3, [r3, #20]
    7194:	b29b      	uxth	r3, r3
    7196:	009b      	lsls	r3, r3, #2
    7198:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    719a:	4313      	orrs	r3, r2
    719c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    719e:	683b      	ldr	r3, [r7, #0]
    71a0:	7c9b      	ldrb	r3, [r3, #18]
    71a2:	b29b      	uxth	r3, r3
    71a4:	18db      	adds	r3, r3, r3
    71a6:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    71a8:	4313      	orrs	r3, r2
    71aa:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    71ac:	683b      	ldr	r3, [r7, #0]
    71ae:	7cdb      	ldrb	r3, [r3, #19]
    71b0:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    71b2:	4313      	orrs	r3, r2
    71b4:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    71b6:	693b      	ldr	r3, [r7, #16]
    71b8:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    71ba:	683b      	ldr	r3, [r7, #0]
    71bc:	7e1b      	ldrb	r3, [r3, #24]
    71be:	2b00      	cmp	r3, #0
    71c0:	d100      	bne.n	71c4 <_adc_set_config+0x238>
    71c2:	e0c4      	b.n	734e <_adc_set_config+0x3c2>
		switch (resolution) {
    71c4:	69bb      	ldr	r3, [r7, #24]
    71c6:	2b10      	cmp	r3, #16
    71c8:	d100      	bne.n	71cc <_adc_set_config+0x240>
    71ca:	e076      	b.n	72ba <_adc_set_config+0x32e>
    71cc:	d802      	bhi.n	71d4 <_adc_set_config+0x248>
    71ce:	2b00      	cmp	r3, #0
    71d0:	d04d      	beq.n	726e <_adc_set_config+0x2e2>
    71d2:	e0bc      	b.n	734e <_adc_set_config+0x3c2>
    71d4:	2b20      	cmp	r3, #32
    71d6:	d023      	beq.n	7220 <_adc_set_config+0x294>
    71d8:	2b30      	cmp	r3, #48	; 0x30
    71da:	d000      	beq.n	71de <_adc_set_config+0x252>
    71dc:	e0b7      	b.n	734e <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    71de:	683b      	ldr	r3, [r7, #0]
    71e0:	7cdb      	ldrb	r3, [r3, #19]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d011      	beq.n	720a <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    71e6:	683b      	ldr	r3, [r7, #0]
    71e8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    71ea:	2b7f      	cmp	r3, #127	; 0x7f
    71ec:	dc0b      	bgt.n	7206 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    71ee:	683b      	ldr	r3, [r7, #0]
    71f0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    71f2:	3380      	adds	r3, #128	; 0x80
    71f4:	db07      	blt.n	7206 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    71f6:	683b      	ldr	r3, [r7, #0]
    71f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    71fa:	2b7f      	cmp	r3, #127	; 0x7f
    71fc:	dc03      	bgt.n	7206 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    71fe:	683b      	ldr	r3, [r7, #0]
    7200:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    7202:	3380      	adds	r3, #128	; 0x80
    7204:	da01      	bge.n	720a <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    7206:	2317      	movs	r3, #23
    7208:	e143      	b.n	7492 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    720a:	683b      	ldr	r3, [r7, #0]
    720c:	69db      	ldr	r3, [r3, #28]
    720e:	2bff      	cmp	r3, #255	; 0xff
    7210:	dc04      	bgt.n	721c <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    7212:	683b      	ldr	r3, [r7, #0]
    7214:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    7216:	2bff      	cmp	r3, #255	; 0xff
    7218:	dc00      	bgt.n	721c <_adc_set_config+0x290>
    721a:	e091      	b.n	7340 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    721c:	2317      	movs	r3, #23
    721e:	e138      	b.n	7492 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    7220:	683b      	ldr	r3, [r7, #0]
    7222:	7cdb      	ldrb	r3, [r3, #19]
    7224:	2b00      	cmp	r3, #0
    7226:	d015      	beq.n	7254 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    7228:	683b      	ldr	r3, [r7, #0]
    722a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    722c:	4a36      	ldr	r2, [pc, #216]	; (7308 <_adc_set_config+0x37c>)
    722e:	4293      	cmp	r3, r2
    7230:	dc0e      	bgt.n	7250 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    7232:	683b      	ldr	r3, [r7, #0]
    7234:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    7236:	4a35      	ldr	r2, [pc, #212]	; (730c <_adc_set_config+0x380>)
    7238:	4293      	cmp	r3, r2
    723a:	db09      	blt.n	7250 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    723c:	683b      	ldr	r3, [r7, #0]
    723e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    7240:	4a31      	ldr	r2, [pc, #196]	; (7308 <_adc_set_config+0x37c>)
    7242:	4293      	cmp	r3, r2
    7244:	dc04      	bgt.n	7250 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    7246:	683b      	ldr	r3, [r7, #0]
    7248:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    724a:	4a30      	ldr	r2, [pc, #192]	; (730c <_adc_set_config+0x380>)
    724c:	4293      	cmp	r3, r2
    724e:	da01      	bge.n	7254 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    7250:	2317      	movs	r3, #23
    7252:	e11e      	b.n	7492 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    7254:	683b      	ldr	r3, [r7, #0]
    7256:	69db      	ldr	r3, [r3, #28]
    7258:	4a2d      	ldr	r2, [pc, #180]	; (7310 <_adc_set_config+0x384>)
    725a:	4293      	cmp	r3, r2
    725c:	dc05      	bgt.n	726a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    725e:	683b      	ldr	r3, [r7, #0]
    7260:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    7262:	4a2b      	ldr	r2, [pc, #172]	; (7310 <_adc_set_config+0x384>)
    7264:	4293      	cmp	r3, r2
    7266:	dc00      	bgt.n	726a <_adc_set_config+0x2de>
    7268:	e06c      	b.n	7344 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    726a:	2317      	movs	r3, #23
    726c:	e111      	b.n	7492 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    726e:	683b      	ldr	r3, [r7, #0]
    7270:	7cdb      	ldrb	r3, [r3, #19]
    7272:	2b00      	cmp	r3, #0
    7274:	d015      	beq.n	72a2 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    7276:	683b      	ldr	r3, [r7, #0]
    7278:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    727a:	4a26      	ldr	r2, [pc, #152]	; (7314 <_adc_set_config+0x388>)
    727c:	4293      	cmp	r3, r2
    727e:	dc0e      	bgt.n	729e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    7280:	683b      	ldr	r3, [r7, #0]
    7282:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    7284:	4a24      	ldr	r2, [pc, #144]	; (7318 <_adc_set_config+0x38c>)
    7286:	4293      	cmp	r3, r2
    7288:	db09      	blt.n	729e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    728a:	683b      	ldr	r3, [r7, #0]
    728c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    728e:	4a21      	ldr	r2, [pc, #132]	; (7314 <_adc_set_config+0x388>)
    7290:	4293      	cmp	r3, r2
    7292:	dc04      	bgt.n	729e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    7294:	683b      	ldr	r3, [r7, #0]
    7296:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    7298:	4a1f      	ldr	r2, [pc, #124]	; (7318 <_adc_set_config+0x38c>)
    729a:	4293      	cmp	r3, r2
    729c:	da01      	bge.n	72a2 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    729e:	2317      	movs	r3, #23
    72a0:	e0f7      	b.n	7492 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    72a2:	683b      	ldr	r3, [r7, #0]
    72a4:	69db      	ldr	r3, [r3, #28]
    72a6:	4a1d      	ldr	r2, [pc, #116]	; (731c <_adc_set_config+0x390>)
    72a8:	4293      	cmp	r3, r2
    72aa:	dc04      	bgt.n	72b6 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    72ac:	683b      	ldr	r3, [r7, #0]
    72ae:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    72b0:	4a1a      	ldr	r2, [pc, #104]	; (731c <_adc_set_config+0x390>)
    72b2:	4293      	cmp	r3, r2
    72b4:	dd48      	ble.n	7348 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    72b6:	2317      	movs	r3, #23
    72b8:	e0eb      	b.n	7492 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    72ba:	683b      	ldr	r3, [r7, #0]
    72bc:	7cdb      	ldrb	r3, [r3, #19]
    72be:	2b00      	cmp	r3, #0
    72c0:	d032      	beq.n	7328 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    72c2:	683b      	ldr	r3, [r7, #0]
    72c4:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    72c6:	4a16      	ldr	r2, [pc, #88]	; (7320 <_adc_set_config+0x394>)
    72c8:	4293      	cmp	r3, r2
    72ca:	dc0e      	bgt.n	72ea <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    72cc:	683b      	ldr	r3, [r7, #0]
    72ce:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    72d0:	4a14      	ldr	r2, [pc, #80]	; (7324 <_adc_set_config+0x398>)
    72d2:	4293      	cmp	r3, r2
    72d4:	db09      	blt.n	72ea <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    72d6:	683b      	ldr	r3, [r7, #0]
    72d8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    72da:	4a11      	ldr	r2, [pc, #68]	; (7320 <_adc_set_config+0x394>)
    72dc:	4293      	cmp	r3, r2
    72de:	dc04      	bgt.n	72ea <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    72e0:	683b      	ldr	r3, [r7, #0]
    72e2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    72e4:	4a0f      	ldr	r2, [pc, #60]	; (7324 <_adc_set_config+0x398>)
    72e6:	4293      	cmp	r3, r2
    72e8:	da1e      	bge.n	7328 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    72ea:	2317      	movs	r3, #23
    72ec:	e0d1      	b.n	7492 <_adc_set_config+0x506>
    72ee:	46c0      	nop			; (mov r8, r8)
    72f0:	00006d65 	.word	0x00006d65
    72f4:	0000aedd 	.word	0x0000aedd
    72f8:	0000af21 	.word	0x0000af21
    72fc:	00006f15 	.word	0x00006f15
    7300:	0001474c 	.word	0x0001474c
    7304:	00006e41 	.word	0x00006e41
    7308:	000001ff 	.word	0x000001ff
    730c:	fffffe00 	.word	0xfffffe00
    7310:	000003ff 	.word	0x000003ff
    7314:	000007ff 	.word	0x000007ff
    7318:	fffff800 	.word	0xfffff800
    731c:	00000fff 	.word	0x00000fff
    7320:	00007fff 	.word	0x00007fff
    7324:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    7328:	683b      	ldr	r3, [r7, #0]
    732a:	69db      	ldr	r3, [r3, #28]
    732c:	4a5b      	ldr	r2, [pc, #364]	; (749c <_adc_set_config+0x510>)
    732e:	4293      	cmp	r3, r2
    7330:	dc04      	bgt.n	733c <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    7332:	683b      	ldr	r3, [r7, #0]
    7334:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    7336:	4a59      	ldr	r2, [pc, #356]	; (749c <_adc_set_config+0x510>)
    7338:	4293      	cmp	r3, r2
    733a:	dd07      	ble.n	734c <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    733c:	2317      	movs	r3, #23
    733e:	e0a8      	b.n	7492 <_adc_set_config+0x506>
			break;
    7340:	46c0      	nop			; (mov r8, r8)
    7342:	e004      	b.n	734e <_adc_set_config+0x3c2>
			break;
    7344:	46c0      	nop			; (mov r8, r8)
    7346:	e002      	b.n	734e <_adc_set_config+0x3c2>
			break;
    7348:	46c0      	nop			; (mov r8, r8)
    734a:	e000      	b.n	734e <_adc_set_config+0x3c2>
			}
			break;
    734c:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    734e:	46c0      	nop			; (mov r8, r8)
    7350:	687b      	ldr	r3, [r7, #4]
    7352:	0018      	movs	r0, r3
    7354:	4b52      	ldr	r3, [pc, #328]	; (74a0 <_adc_set_config+0x514>)
    7356:	4798      	blx	r3
    7358:	1e03      	subs	r3, r0, #0
    735a:	d1f9      	bne.n	7350 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    735c:	683b      	ldr	r3, [r7, #0]
    735e:	7e1a      	ldrb	r2, [r3, #24]
    7360:	693b      	ldr	r3, [r7, #16]
    7362:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    7364:	46c0      	nop			; (mov r8, r8)
    7366:	687b      	ldr	r3, [r7, #4]
    7368:	0018      	movs	r0, r3
    736a:	4b4d      	ldr	r3, [pc, #308]	; (74a0 <_adc_set_config+0x514>)
    736c:	4798      	blx	r3
    736e:	1e03      	subs	r3, r0, #0
    7370:	d1f9      	bne.n	7366 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    7372:	683b      	ldr	r3, [r7, #0]
    7374:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    7376:	b29a      	uxth	r2, r3
    7378:	693b      	ldr	r3, [r7, #16]
    737a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    737c:	46c0      	nop			; (mov r8, r8)
    737e:	687b      	ldr	r3, [r7, #4]
    7380:	0018      	movs	r0, r3
    7382:	4b47      	ldr	r3, [pc, #284]	; (74a0 <_adc_set_config+0x514>)
    7384:	4798      	blx	r3
    7386:	1e03      	subs	r3, r0, #0
    7388:	d1f9      	bne.n	737e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    738a:	683b      	ldr	r3, [r7, #0]
    738c:	6a1b      	ldr	r3, [r3, #32]
    738e:	b29a      	uxth	r2, r3
    7390:	693b      	ldr	r3, [r7, #16]
    7392:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    7394:	2314      	movs	r3, #20
    7396:	18fb      	adds	r3, r7, r3
    7398:	683a      	ldr	r2, [r7, #0]
    739a:	212c      	movs	r1, #44	; 0x2c
    739c:	5c52      	ldrb	r2, [r2, r1]
    739e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    73a0:	2314      	movs	r3, #20
    73a2:	18fb      	adds	r3, r7, r3
    73a4:	781b      	ldrb	r3, [r3, #0]
    73a6:	2b00      	cmp	r3, #0
    73a8:	d006      	beq.n	73b8 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    73aa:	2314      	movs	r3, #20
    73ac:	18fb      	adds	r3, r7, r3
    73ae:	781a      	ldrb	r2, [r3, #0]
    73b0:	2314      	movs	r3, #20
    73b2:	18fb      	adds	r3, r7, r3
    73b4:	3a01      	subs	r2, #1
    73b6:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    73b8:	2314      	movs	r3, #20
    73ba:	18fb      	adds	r3, r7, r3
    73bc:	781b      	ldrb	r3, [r3, #0]
    73be:	2b0f      	cmp	r3, #15
    73c0:	d804      	bhi.n	73cc <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    73c2:	683b      	ldr	r3, [r7, #0]
    73c4:	222b      	movs	r2, #43	; 0x2b
    73c6:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    73c8:	2b0f      	cmp	r3, #15
    73ca:	d901      	bls.n	73d0 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    73cc:	2317      	movs	r3, #23
    73ce:	e060      	b.n	7492 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    73d0:	46c0      	nop			; (mov r8, r8)
    73d2:	687b      	ldr	r3, [r7, #4]
    73d4:	0018      	movs	r0, r3
    73d6:	4b32      	ldr	r3, [pc, #200]	; (74a0 <_adc_set_config+0x514>)
    73d8:	4798      	blx	r3
    73da:	1e03      	subs	r3, r0, #0
    73dc:	d1f9      	bne.n	73d2 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    73de:	683b      	ldr	r3, [r7, #0]
    73e0:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    73e2:	683a      	ldr	r2, [r7, #0]
    73e4:	212b      	movs	r1, #43	; 0x2b
    73e6:	5c52      	ldrb	r2, [r2, r1]
    73e8:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    73ea:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    73ec:	2214      	movs	r2, #20
    73ee:	18ba      	adds	r2, r7, r2
    73f0:	7812      	ldrb	r2, [r2, #0]
    73f2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    73f4:	4313      	orrs	r3, r2
			config->negative_input |
    73f6:	683a      	ldr	r2, [r7, #0]
    73f8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    73fa:	4313      	orrs	r3, r2
			config->positive_input;
    73fc:	683a      	ldr	r2, [r7, #0]
    73fe:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    7400:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    7402:	693b      	ldr	r3, [r7, #16]
    7404:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    7406:	683b      	ldr	r3, [r7, #0]
    7408:	222a      	movs	r2, #42	; 0x2a
    740a:	5c9a      	ldrb	r2, [r3, r2]
    740c:	693b      	ldr	r3, [r7, #16]
    740e:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    7410:	693b      	ldr	r3, [r7, #16]
    7412:	220f      	movs	r2, #15
    7414:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    7416:	683b      	ldr	r3, [r7, #0]
    7418:	2224      	movs	r2, #36	; 0x24
    741a:	5c9b      	ldrb	r3, [r3, r2]
    741c:	2b00      	cmp	r3, #0
    741e:	d01e      	beq.n	745e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    7420:	683b      	ldr	r3, [r7, #0]
    7422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    7424:	4a1f      	ldr	r2, [pc, #124]	; (74a4 <_adc_set_config+0x518>)
    7426:	4293      	cmp	r3, r2
    7428:	d901      	bls.n	742e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    742a:	2317      	movs	r3, #23
    742c:	e031      	b.n	7492 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    742e:	683b      	ldr	r3, [r7, #0]
    7430:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    7432:	693b      	ldr	r3, [r7, #16]
    7434:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    7436:	683b      	ldr	r3, [r7, #0]
    7438:	2228      	movs	r2, #40	; 0x28
    743a:	5e9b      	ldrsh	r3, [r3, r2]
    743c:	4a1a      	ldr	r2, [pc, #104]	; (74a8 <_adc_set_config+0x51c>)
    743e:	4293      	cmp	r3, r2
    7440:	dc05      	bgt.n	744e <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    7442:	683b      	ldr	r3, [r7, #0]
    7444:	2228      	movs	r2, #40	; 0x28
    7446:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    7448:	4a18      	ldr	r2, [pc, #96]	; (74ac <_adc_set_config+0x520>)
    744a:	4293      	cmp	r3, r2
    744c:	da01      	bge.n	7452 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    744e:	2317      	movs	r3, #23
    7450:	e01f      	b.n	7492 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    7452:	683b      	ldr	r3, [r7, #0]
    7454:	2228      	movs	r2, #40	; 0x28
    7456:	5e9b      	ldrsh	r3, [r3, r2]
    7458:	b29a      	uxth	r2, r3
    745a:	693b      	ldr	r3, [r7, #16]
    745c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    745e:	4b14      	ldr	r3, [pc, #80]	; (74b0 <_adc_set_config+0x524>)
    7460:	681b      	ldr	r3, [r3, #0]
    7462:	08db      	lsrs	r3, r3, #3
    7464:	b29b      	uxth	r3, r3
    7466:	021b      	lsls	r3, r3, #8
    7468:	b29a      	uxth	r2, r3
    746a:	23e0      	movs	r3, #224	; 0xe0
    746c:	00db      	lsls	r3, r3, #3
    746e:	4013      	ands	r3, r2
    7470:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    7472:	4b10      	ldr	r3, [pc, #64]	; (74b4 <_adc_set_config+0x528>)
    7474:	685c      	ldr	r4, [r3, #4]
    7476:	681b      	ldr	r3, [r3, #0]
    7478:	0161      	lsls	r1, r4, #5
    747a:	0edd      	lsrs	r5, r3, #27
    747c:	430d      	orrs	r5, r1
    747e:	0ee6      	lsrs	r6, r4, #27
    7480:	b2ab      	uxth	r3, r5
    7482:	21ff      	movs	r1, #255	; 0xff
    7484:	400b      	ands	r3, r1
    7486:	b29b      	uxth	r3, r3
			) |
    7488:	4313      	orrs	r3, r2
    748a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    748c:	693b      	ldr	r3, [r7, #16]
    748e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    7490:	2300      	movs	r3, #0
}
    7492:	0018      	movs	r0, r3
    7494:	46bd      	mov	sp, r7
    7496:	b009      	add	sp, #36	; 0x24
    7498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    749a:	46c0      	nop			; (mov r8, r8)
    749c:	0000ffff 	.word	0x0000ffff
    74a0:	00006e41 	.word	0x00006e41
    74a4:	00000fff 	.word	0x00000fff
    74a8:	000007ff 	.word	0x000007ff
    74ac:	fffff800 	.word	0xfffff800
    74b0:	00806024 	.word	0x00806024
    74b4:	00806020 	.word	0x00806020

000074b8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    74b8:	b580      	push	{r7, lr}
    74ba:	b084      	sub	sp, #16
    74bc:	af00      	add	r7, sp, #0
    74be:	60f8      	str	r0, [r7, #12]
    74c0:	60b9      	str	r1, [r7, #8]
    74c2:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    74c4:	68fb      	ldr	r3, [r7, #12]
    74c6:	68ba      	ldr	r2, [r7, #8]
    74c8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    74ca:	2380      	movs	r3, #128	; 0x80
    74cc:	025b      	lsls	r3, r3, #9
    74ce:	0019      	movs	r1, r3
    74d0:	2002      	movs	r0, #2
    74d2:	4b15      	ldr	r3, [pc, #84]	; (7528 <adc_init+0x70>)
    74d4:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    74d6:	68bb      	ldr	r3, [r7, #8]
    74d8:	781b      	ldrb	r3, [r3, #0]
    74da:	b2db      	uxtb	r3, r3
    74dc:	001a      	movs	r2, r3
    74de:	2301      	movs	r3, #1
    74e0:	4013      	ands	r3, r2
    74e2:	d001      	beq.n	74e8 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    74e4:	2305      	movs	r3, #5
    74e6:	e01a      	b.n	751e <adc_init+0x66>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    74e8:	68bb      	ldr	r3, [r7, #8]
    74ea:	781b      	ldrb	r3, [r3, #0]
    74ec:	b2db      	uxtb	r3, r3
    74ee:	001a      	movs	r2, r3
    74f0:	2302      	movs	r3, #2
    74f2:	4013      	ands	r3, r2
    74f4:	d001      	beq.n	74fa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    74f6:	231c      	movs	r3, #28
    74f8:	e011      	b.n	751e <adc_init+0x66>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    74fa:	687b      	ldr	r3, [r7, #4]
    74fc:	785a      	ldrb	r2, [r3, #1]
    74fe:	68fb      	ldr	r3, [r7, #12]
    7500:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    7502:	68fb      	ldr	r3, [r7, #12]
    7504:	791b      	ldrb	r3, [r3, #4]
    7506:	2b00      	cmp	r3, #0
    7508:	d102      	bne.n	7510 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    750a:	2001      	movs	r0, #1
    750c:	4b07      	ldr	r3, [pc, #28]	; (752c <adc_init+0x74>)
    750e:	4798      	blx	r3
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    7510:	687a      	ldr	r2, [r7, #4]
    7512:	68fb      	ldr	r3, [r7, #12]
    7514:	0011      	movs	r1, r2
    7516:	0018      	movs	r0, r3
    7518:	4b05      	ldr	r3, [pc, #20]	; (7530 <adc_init+0x78>)
    751a:	4798      	blx	r3
    751c:	0003      	movs	r3, r0
}
    751e:	0018      	movs	r0, r3
    7520:	46bd      	mov	sp, r7
    7522:	b004      	add	sp, #16
    7524:	bd80      	pop	{r7, pc}
    7526:	46c0      	nop			; (mov r8, r8)
    7528:	00006d7d 	.word	0x00006d7d
    752c:	00006e01 	.word	0x00006e01
    7530:	00006f8d 	.word	0x00006f8d

00007534 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    7534:	b580      	push	{r7, lr}
    7536:	b084      	sub	sp, #16
    7538:	af00      	add	r7, sp, #0
    753a:	0002      	movs	r2, r0
    753c:	1dfb      	adds	r3, r7, #7
    753e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    7540:	230f      	movs	r3, #15
    7542:	18fb      	adds	r3, r7, r3
    7544:	1dfa      	adds	r2, r7, #7
    7546:	7812      	ldrb	r2, [r2, #0]
    7548:	0952      	lsrs	r2, r2, #5
    754a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    754c:	230f      	movs	r3, #15
    754e:	18fb      	adds	r3, r7, r3
    7550:	781b      	ldrb	r3, [r3, #0]
    7552:	2b00      	cmp	r3, #0
    7554:	d10c      	bne.n	7570 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    7556:	4b09      	ldr	r3, [pc, #36]	; (757c <_extint_get_eic_from_channel+0x48>)
    7558:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    755a:	230f      	movs	r3, #15
    755c:	18fb      	adds	r3, r7, r3
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	009b      	lsls	r3, r3, #2
    7562:	2210      	movs	r2, #16
    7564:	4694      	mov	ip, r2
    7566:	44bc      	add	ip, r7
    7568:	4463      	add	r3, ip
    756a:	3b08      	subs	r3, #8
    756c:	681b      	ldr	r3, [r3, #0]
    756e:	e000      	b.n	7572 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    7570:	2300      	movs	r3, #0
	}
}
    7572:	0018      	movs	r0, r3
    7574:	46bd      	mov	sp, r7
    7576:	b004      	add	sp, #16
    7578:	bd80      	pop	{r7, pc}
    757a:	46c0      	nop			; (mov r8, r8)
    757c:	40001800 	.word	0x40001800

00007580 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    7580:	b580      	push	{r7, lr}
    7582:	b084      	sub	sp, #16
    7584:	af00      	add	r7, sp, #0
    7586:	0002      	movs	r2, r0
    7588:	1dfb      	adds	r3, r7, #7
    758a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    758c:	1dfb      	adds	r3, r7, #7
    758e:	781b      	ldrb	r3, [r3, #0]
    7590:	0018      	movs	r0, r3
    7592:	4b0b      	ldr	r3, [pc, #44]	; (75c0 <extint_chan_is_detected+0x40>)
    7594:	4798      	blx	r3
    7596:	0003      	movs	r3, r0
    7598:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    759a:	1dfb      	adds	r3, r7, #7
    759c:	781b      	ldrb	r3, [r3, #0]
    759e:	221f      	movs	r2, #31
    75a0:	4013      	ands	r3, r2
    75a2:	2201      	movs	r2, #1
    75a4:	409a      	lsls	r2, r3
    75a6:	0013      	movs	r3, r2
    75a8:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    75aa:	68fb      	ldr	r3, [r7, #12]
    75ac:	691b      	ldr	r3, [r3, #16]
    75ae:	68ba      	ldr	r2, [r7, #8]
    75b0:	4013      	ands	r3, r2
    75b2:	1e5a      	subs	r2, r3, #1
    75b4:	4193      	sbcs	r3, r2
    75b6:	b2db      	uxtb	r3, r3
}
    75b8:	0018      	movs	r0, r3
    75ba:	46bd      	mov	sp, r7
    75bc:	b004      	add	sp, #16
    75be:	bd80      	pop	{r7, pc}
    75c0:	00007535 	.word	0x00007535

000075c4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    75c4:	b580      	push	{r7, lr}
    75c6:	b084      	sub	sp, #16
    75c8:	af00      	add	r7, sp, #0
    75ca:	0002      	movs	r2, r0
    75cc:	1dfb      	adds	r3, r7, #7
    75ce:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    75d0:	1dfb      	adds	r3, r7, #7
    75d2:	781b      	ldrb	r3, [r3, #0]
    75d4:	0018      	movs	r0, r3
    75d6:	4b09      	ldr	r3, [pc, #36]	; (75fc <extint_chan_clear_detected+0x38>)
    75d8:	4798      	blx	r3
    75da:	0003      	movs	r3, r0
    75dc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    75de:	1dfb      	adds	r3, r7, #7
    75e0:	781b      	ldrb	r3, [r3, #0]
    75e2:	221f      	movs	r2, #31
    75e4:	4013      	ands	r3, r2
    75e6:	2201      	movs	r2, #1
    75e8:	409a      	lsls	r2, r3
    75ea:	0013      	movs	r3, r2
    75ec:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    75ee:	68fb      	ldr	r3, [r7, #12]
    75f0:	68ba      	ldr	r2, [r7, #8]
    75f2:	611a      	str	r2, [r3, #16]
}
    75f4:	46c0      	nop			; (mov r8, r8)
    75f6:	46bd      	mov	sp, r7
    75f8:	b004      	add	sp, #16
    75fa:	bd80      	pop	{r7, pc}
    75fc:	00007535 	.word	0x00007535

00007600 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    7600:	b580      	push	{r7, lr}
    7602:	b082      	sub	sp, #8
    7604:	af00      	add	r7, sp, #0
    7606:	6078      	str	r0, [r7, #4]
    7608:	0008      	movs	r0, r1
    760a:	0011      	movs	r1, r2
    760c:	1cfb      	adds	r3, r7, #3
    760e:	1c02      	adds	r2, r0, #0
    7610:	701a      	strb	r2, [r3, #0]
    7612:	1cbb      	adds	r3, r7, #2
    7614:	1c0a      	adds	r2, r1, #0
    7616:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    7618:	1cbb      	adds	r3, r7, #2
    761a:	781b      	ldrb	r3, [r3, #0]
    761c:	2b00      	cmp	r3, #0
    761e:	d001      	beq.n	7624 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7620:	2317      	movs	r3, #23
    7622:	e019      	b.n	7658 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    7624:	1cfb      	adds	r3, r7, #3
    7626:	781a      	ldrb	r2, [r3, #0]
    7628:	4b0d      	ldr	r3, [pc, #52]	; (7660 <extint_register_callback+0x60>)
    762a:	0092      	lsls	r2, r2, #2
    762c:	58d3      	ldr	r3, [r2, r3]
    762e:	2b00      	cmp	r3, #0
    7630:	d107      	bne.n	7642 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    7632:	1cfb      	adds	r3, r7, #3
    7634:	781a      	ldrb	r2, [r3, #0]
    7636:	4b0a      	ldr	r3, [pc, #40]	; (7660 <extint_register_callback+0x60>)
    7638:	0092      	lsls	r2, r2, #2
    763a:	6879      	ldr	r1, [r7, #4]
    763c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    763e:	2300      	movs	r3, #0
    7640:	e00a      	b.n	7658 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    7642:	1cfb      	adds	r3, r7, #3
    7644:	781a      	ldrb	r2, [r3, #0]
    7646:	4b06      	ldr	r3, [pc, #24]	; (7660 <extint_register_callback+0x60>)
    7648:	0092      	lsls	r2, r2, #2
    764a:	58d2      	ldr	r2, [r2, r3]
    764c:	687b      	ldr	r3, [r7, #4]
    764e:	429a      	cmp	r2, r3
    7650:	d101      	bne.n	7656 <extint_register_callback+0x56>
		return STATUS_OK;
    7652:	2300      	movs	r3, #0
    7654:	e000      	b.n	7658 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    7656:	231d      	movs	r3, #29
}
    7658:	0018      	movs	r0, r3
    765a:	46bd      	mov	sp, r7
    765c:	b002      	add	sp, #8
    765e:	bd80      	pop	{r7, pc}
    7660:	200004ac 	.word	0x200004ac

00007664 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    7664:	b580      	push	{r7, lr}
    7666:	b084      	sub	sp, #16
    7668:	af00      	add	r7, sp, #0
    766a:	0002      	movs	r2, r0
    766c:	1dfb      	adds	r3, r7, #7
    766e:	701a      	strb	r2, [r3, #0]
    7670:	1dbb      	adds	r3, r7, #6
    7672:	1c0a      	adds	r2, r1, #0
    7674:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7676:	1dbb      	adds	r3, r7, #6
    7678:	781b      	ldrb	r3, [r3, #0]
    767a:	2b00      	cmp	r3, #0
    767c:	d10e      	bne.n	769c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    767e:	1dfb      	adds	r3, r7, #7
    7680:	781b      	ldrb	r3, [r3, #0]
    7682:	0018      	movs	r0, r3
    7684:	4b08      	ldr	r3, [pc, #32]	; (76a8 <extint_chan_enable_callback+0x44>)
    7686:	4798      	blx	r3
    7688:	0003      	movs	r3, r0
    768a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    768c:	1dfb      	adds	r3, r7, #7
    768e:	781b      	ldrb	r3, [r3, #0]
    7690:	2201      	movs	r2, #1
    7692:	409a      	lsls	r2, r3
    7694:	68fb      	ldr	r3, [r7, #12]
    7696:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    7698:	2300      	movs	r3, #0
    769a:	e000      	b.n	769e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    769c:	2317      	movs	r3, #23
}
    769e:	0018      	movs	r0, r3
    76a0:	46bd      	mov	sp, r7
    76a2:	b004      	add	sp, #16
    76a4:	bd80      	pop	{r7, pc}
    76a6:	46c0      	nop			; (mov r8, r8)
    76a8:	00007535 	.word	0x00007535

000076ac <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    76ac:	b580      	push	{r7, lr}
    76ae:	b084      	sub	sp, #16
    76b0:	af00      	add	r7, sp, #0
    76b2:	0002      	movs	r2, r0
    76b4:	1dfb      	adds	r3, r7, #7
    76b6:	701a      	strb	r2, [r3, #0]
    76b8:	1dbb      	adds	r3, r7, #6
    76ba:	1c0a      	adds	r2, r1, #0
    76bc:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    76be:	1dbb      	adds	r3, r7, #6
    76c0:	781b      	ldrb	r3, [r3, #0]
    76c2:	2b00      	cmp	r3, #0
    76c4:	d10e      	bne.n	76e4 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    76c6:	1dfb      	adds	r3, r7, #7
    76c8:	781b      	ldrb	r3, [r3, #0]
    76ca:	0018      	movs	r0, r3
    76cc:	4b08      	ldr	r3, [pc, #32]	; (76f0 <extint_chan_disable_callback+0x44>)
    76ce:	4798      	blx	r3
    76d0:	0003      	movs	r3, r0
    76d2:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    76d4:	1dfb      	adds	r3, r7, #7
    76d6:	781b      	ldrb	r3, [r3, #0]
    76d8:	2201      	movs	r2, #1
    76da:	409a      	lsls	r2, r3
    76dc:	68fb      	ldr	r3, [r7, #12]
    76de:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    76e0:	2300      	movs	r3, #0
    76e2:	e000      	b.n	76e6 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    76e4:	2317      	movs	r3, #23
}
    76e6:	0018      	movs	r0, r3
    76e8:	46bd      	mov	sp, r7
    76ea:	b004      	add	sp, #16
    76ec:	bd80      	pop	{r7, pc}
    76ee:	46c0      	nop			; (mov r8, r8)
    76f0:	00007535 	.word	0x00007535

000076f4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    76f4:	b580      	push	{r7, lr}
    76f6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    76f8:	4b15      	ldr	r3, [pc, #84]	; (7750 <EIC_Handler+0x5c>)
    76fa:	2200      	movs	r2, #0
    76fc:	701a      	strb	r2, [r3, #0]
    76fe:	e020      	b.n	7742 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    7700:	4b13      	ldr	r3, [pc, #76]	; (7750 <EIC_Handler+0x5c>)
    7702:	781b      	ldrb	r3, [r3, #0]
    7704:	0018      	movs	r0, r3
    7706:	4b13      	ldr	r3, [pc, #76]	; (7754 <EIC_Handler+0x60>)
    7708:	4798      	blx	r3
    770a:	1e03      	subs	r3, r0, #0
    770c:	d013      	beq.n	7736 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    770e:	4b10      	ldr	r3, [pc, #64]	; (7750 <EIC_Handler+0x5c>)
    7710:	781b      	ldrb	r3, [r3, #0]
    7712:	0018      	movs	r0, r3
    7714:	4b10      	ldr	r3, [pc, #64]	; (7758 <EIC_Handler+0x64>)
    7716:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    7718:	4b0d      	ldr	r3, [pc, #52]	; (7750 <EIC_Handler+0x5c>)
    771a:	781b      	ldrb	r3, [r3, #0]
    771c:	001a      	movs	r2, r3
    771e:	4b0f      	ldr	r3, [pc, #60]	; (775c <EIC_Handler+0x68>)
    7720:	0092      	lsls	r2, r2, #2
    7722:	58d3      	ldr	r3, [r2, r3]
    7724:	2b00      	cmp	r3, #0
    7726:	d006      	beq.n	7736 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    7728:	4b09      	ldr	r3, [pc, #36]	; (7750 <EIC_Handler+0x5c>)
    772a:	781b      	ldrb	r3, [r3, #0]
    772c:	001a      	movs	r2, r3
    772e:	4b0b      	ldr	r3, [pc, #44]	; (775c <EIC_Handler+0x68>)
    7730:	0092      	lsls	r2, r2, #2
    7732:	58d3      	ldr	r3, [r2, r3]
    7734:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7736:	4b06      	ldr	r3, [pc, #24]	; (7750 <EIC_Handler+0x5c>)
    7738:	781b      	ldrb	r3, [r3, #0]
    773a:	3301      	adds	r3, #1
    773c:	b2da      	uxtb	r2, r3
    773e:	4b04      	ldr	r3, [pc, #16]	; (7750 <EIC_Handler+0x5c>)
    7740:	701a      	strb	r2, [r3, #0]
    7742:	4b03      	ldr	r3, [pc, #12]	; (7750 <EIC_Handler+0x5c>)
    7744:	781b      	ldrb	r3, [r3, #0]
    7746:	2b0f      	cmp	r3, #15
    7748:	d9da      	bls.n	7700 <EIC_Handler+0xc>
			}
		}
	}
}
    774a:	46c0      	nop			; (mov r8, r8)
    774c:	46bd      	mov	sp, r7
    774e:	bd80      	pop	{r7, pc}
    7750:	200004a8 	.word	0x200004a8
    7754:	00007581 	.word	0x00007581
    7758:	000075c5 	.word	0x000075c5
    775c:	200004ac 	.word	0x200004ac

00007760 <system_gclk_chan_get_config_defaults>:
{
    7760:	b580      	push	{r7, lr}
    7762:	b082      	sub	sp, #8
    7764:	af00      	add	r7, sp, #0
    7766:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7768:	687b      	ldr	r3, [r7, #4]
    776a:	2200      	movs	r2, #0
    776c:	701a      	strb	r2, [r3, #0]
}
    776e:	46c0      	nop			; (mov r8, r8)
    7770:	46bd      	mov	sp, r7
    7772:	b002      	add	sp, #8
    7774:	bd80      	pop	{r7, pc}
	...

00007778 <system_apb_clock_set_mask>:
{
    7778:	b580      	push	{r7, lr}
    777a:	b082      	sub	sp, #8
    777c:	af00      	add	r7, sp, #0
    777e:	0002      	movs	r2, r0
    7780:	6039      	str	r1, [r7, #0]
    7782:	1dfb      	adds	r3, r7, #7
    7784:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7786:	1dfb      	adds	r3, r7, #7
    7788:	781b      	ldrb	r3, [r3, #0]
    778a:	2b01      	cmp	r3, #1
    778c:	d00a      	beq.n	77a4 <system_apb_clock_set_mask+0x2c>
    778e:	2b02      	cmp	r3, #2
    7790:	d00f      	beq.n	77b2 <system_apb_clock_set_mask+0x3a>
    7792:	2b00      	cmp	r3, #0
    7794:	d114      	bne.n	77c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7796:	4b0e      	ldr	r3, [pc, #56]	; (77d0 <system_apb_clock_set_mask+0x58>)
    7798:	4a0d      	ldr	r2, [pc, #52]	; (77d0 <system_apb_clock_set_mask+0x58>)
    779a:	6991      	ldr	r1, [r2, #24]
    779c:	683a      	ldr	r2, [r7, #0]
    779e:	430a      	orrs	r2, r1
    77a0:	619a      	str	r2, [r3, #24]
			break;
    77a2:	e00f      	b.n	77c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    77a4:	4b0a      	ldr	r3, [pc, #40]	; (77d0 <system_apb_clock_set_mask+0x58>)
    77a6:	4a0a      	ldr	r2, [pc, #40]	; (77d0 <system_apb_clock_set_mask+0x58>)
    77a8:	69d1      	ldr	r1, [r2, #28]
    77aa:	683a      	ldr	r2, [r7, #0]
    77ac:	430a      	orrs	r2, r1
    77ae:	61da      	str	r2, [r3, #28]
			break;
    77b0:	e008      	b.n	77c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    77b2:	4b07      	ldr	r3, [pc, #28]	; (77d0 <system_apb_clock_set_mask+0x58>)
    77b4:	4a06      	ldr	r2, [pc, #24]	; (77d0 <system_apb_clock_set_mask+0x58>)
    77b6:	6a11      	ldr	r1, [r2, #32]
    77b8:	683a      	ldr	r2, [r7, #0]
    77ba:	430a      	orrs	r2, r1
    77bc:	621a      	str	r2, [r3, #32]
			break;
    77be:	e001      	b.n	77c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    77c0:	2317      	movs	r3, #23
    77c2:	e000      	b.n	77c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    77c4:	2300      	movs	r3, #0
}
    77c6:	0018      	movs	r0, r3
    77c8:	46bd      	mov	sp, r7
    77ca:	b002      	add	sp, #8
    77cc:	bd80      	pop	{r7, pc}
    77ce:	46c0      	nop			; (mov r8, r8)
    77d0:	40000400 	.word	0x40000400

000077d4 <system_pinmux_get_config_defaults>:
{
    77d4:	b580      	push	{r7, lr}
    77d6:	b082      	sub	sp, #8
    77d8:	af00      	add	r7, sp, #0
    77da:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	2280      	movs	r2, #128	; 0x80
    77e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    77e2:	687b      	ldr	r3, [r7, #4]
    77e4:	2200      	movs	r2, #0
    77e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    77e8:	687b      	ldr	r3, [r7, #4]
    77ea:	2201      	movs	r2, #1
    77ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    77ee:	687b      	ldr	r3, [r7, #4]
    77f0:	2200      	movs	r2, #0
    77f2:	70da      	strb	r2, [r3, #3]
}
    77f4:	46c0      	nop			; (mov r8, r8)
    77f6:	46bd      	mov	sp, r7
    77f8:	b002      	add	sp, #8
    77fa:	bd80      	pop	{r7, pc}

000077fc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    77fc:	b580      	push	{r7, lr}
    77fe:	b082      	sub	sp, #8
    7800:	af00      	add	r7, sp, #0
    7802:	0002      	movs	r2, r0
    7804:	1dfb      	adds	r3, r7, #7
    7806:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7808:	4b06      	ldr	r3, [pc, #24]	; (7824 <system_interrupt_enable+0x28>)
    780a:	1dfa      	adds	r2, r7, #7
    780c:	7812      	ldrb	r2, [r2, #0]
    780e:	0011      	movs	r1, r2
    7810:	221f      	movs	r2, #31
    7812:	400a      	ands	r2, r1
    7814:	2101      	movs	r1, #1
    7816:	4091      	lsls	r1, r2
    7818:	000a      	movs	r2, r1
    781a:	601a      	str	r2, [r3, #0]
}
    781c:	46c0      	nop			; (mov r8, r8)
    781e:	46bd      	mov	sp, r7
    7820:	b002      	add	sp, #8
    7822:	bd80      	pop	{r7, pc}
    7824:	e000e100 	.word	0xe000e100

00007828 <_extint_get_eic_from_channel>:
{
    7828:	b580      	push	{r7, lr}
    782a:	b084      	sub	sp, #16
    782c:	af00      	add	r7, sp, #0
    782e:	0002      	movs	r2, r0
    7830:	1dfb      	adds	r3, r7, #7
    7832:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    7834:	230f      	movs	r3, #15
    7836:	18fb      	adds	r3, r7, r3
    7838:	1dfa      	adds	r2, r7, #7
    783a:	7812      	ldrb	r2, [r2, #0]
    783c:	0952      	lsrs	r2, r2, #5
    783e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    7840:	230f      	movs	r3, #15
    7842:	18fb      	adds	r3, r7, r3
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	2b00      	cmp	r3, #0
    7848:	d10c      	bne.n	7864 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    784a:	4b09      	ldr	r3, [pc, #36]	; (7870 <_extint_get_eic_from_channel+0x48>)
    784c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    784e:	230f      	movs	r3, #15
    7850:	18fb      	adds	r3, r7, r3
    7852:	781b      	ldrb	r3, [r3, #0]
    7854:	009b      	lsls	r3, r3, #2
    7856:	2210      	movs	r2, #16
    7858:	4694      	mov	ip, r2
    785a:	44bc      	add	ip, r7
    785c:	4463      	add	r3, ip
    785e:	3b08      	subs	r3, #8
    7860:	681b      	ldr	r3, [r3, #0]
    7862:	e000      	b.n	7866 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    7864:	2300      	movs	r3, #0
}
    7866:	0018      	movs	r0, r3
    7868:	46bd      	mov	sp, r7
    786a:	b004      	add	sp, #16
    786c:	bd80      	pop	{r7, pc}
    786e:	46c0      	nop			; (mov r8, r8)
    7870:	40001800 	.word	0x40001800

00007874 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    7874:	b580      	push	{r7, lr}
    7876:	b082      	sub	sp, #8
    7878:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    787a:	4b0f      	ldr	r3, [pc, #60]	; (78b8 <extint_is_syncing+0x44>)
    787c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    787e:	2300      	movs	r3, #0
    7880:	607b      	str	r3, [r7, #4]
    7882:	e011      	b.n	78a8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    7884:	687b      	ldr	r3, [r7, #4]
    7886:	009b      	lsls	r3, r3, #2
    7888:	2208      	movs	r2, #8
    788a:	4694      	mov	ip, r2
    788c:	44bc      	add	ip, r7
    788e:	4463      	add	r3, ip
    7890:	3b08      	subs	r3, #8
    7892:	681b      	ldr	r3, [r3, #0]
    7894:	785b      	ldrb	r3, [r3, #1]
    7896:	b2db      	uxtb	r3, r3
    7898:	b25b      	sxtb	r3, r3
    789a:	2b00      	cmp	r3, #0
    789c:	da01      	bge.n	78a2 <extint_is_syncing+0x2e>
			return true;
    789e:	2301      	movs	r3, #1
    78a0:	e006      	b.n	78b0 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    78a2:	687b      	ldr	r3, [r7, #4]
    78a4:	3301      	adds	r3, #1
    78a6:	607b      	str	r3, [r7, #4]
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	2b00      	cmp	r3, #0
    78ac:	d0ea      	beq.n	7884 <extint_is_syncing+0x10>
		}
	}
	return false;
    78ae:	2300      	movs	r3, #0
}
    78b0:	0018      	movs	r0, r3
    78b2:	46bd      	mov	sp, r7
    78b4:	b002      	add	sp, #8
    78b6:	bd80      	pop	{r7, pc}
    78b8:	40001800 	.word	0x40001800

000078bc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    78bc:	b580      	push	{r7, lr}
    78be:	b084      	sub	sp, #16
    78c0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    78c2:	4b2d      	ldr	r3, [pc, #180]	; (7978 <_system_extint_init+0xbc>)
    78c4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    78c6:	2140      	movs	r1, #64	; 0x40
    78c8:	2000      	movs	r0, #0
    78ca:	4b2c      	ldr	r3, [pc, #176]	; (797c <_system_extint_init+0xc0>)
    78cc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    78ce:	003b      	movs	r3, r7
    78d0:	0018      	movs	r0, r3
    78d2:	4b2b      	ldr	r3, [pc, #172]	; (7980 <_system_extint_init+0xc4>)
    78d4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    78d6:	003b      	movs	r3, r7
    78d8:	2200      	movs	r2, #0
    78da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    78dc:	003b      	movs	r3, r7
    78de:	0019      	movs	r1, r3
    78e0:	2005      	movs	r0, #5
    78e2:	4b28      	ldr	r3, [pc, #160]	; (7984 <_system_extint_init+0xc8>)
    78e4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    78e6:	2005      	movs	r0, #5
    78e8:	4b27      	ldr	r3, [pc, #156]	; (7988 <_system_extint_init+0xcc>)
    78ea:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    78ec:	2300      	movs	r3, #0
    78ee:	60fb      	str	r3, [r7, #12]
    78f0:	e018      	b.n	7924 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    78f2:	68fb      	ldr	r3, [r7, #12]
    78f4:	009b      	lsls	r3, r3, #2
    78f6:	2210      	movs	r2, #16
    78f8:	4694      	mov	ip, r2
    78fa:	44bc      	add	ip, r7
    78fc:	4463      	add	r3, ip
    78fe:	3b0c      	subs	r3, #12
    7900:	681a      	ldr	r2, [r3, #0]
    7902:	68fb      	ldr	r3, [r7, #12]
    7904:	009b      	lsls	r3, r3, #2
    7906:	2110      	movs	r1, #16
    7908:	468c      	mov	ip, r1
    790a:	44bc      	add	ip, r7
    790c:	4463      	add	r3, ip
    790e:	3b0c      	subs	r3, #12
    7910:	681b      	ldr	r3, [r3, #0]
    7912:	781b      	ldrb	r3, [r3, #0]
    7914:	b2db      	uxtb	r3, r3
    7916:	2101      	movs	r1, #1
    7918:	430b      	orrs	r3, r1
    791a:	b2db      	uxtb	r3, r3
    791c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    791e:	68fb      	ldr	r3, [r7, #12]
    7920:	3301      	adds	r3, #1
    7922:	60fb      	str	r3, [r7, #12]
    7924:	68fb      	ldr	r3, [r7, #12]
    7926:	2b00      	cmp	r3, #0
    7928:	d0e3      	beq.n	78f2 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    792a:	46c0      	nop			; (mov r8, r8)
    792c:	4b17      	ldr	r3, [pc, #92]	; (798c <_system_extint_init+0xd0>)
    792e:	4798      	blx	r3
    7930:	1e03      	subs	r3, r0, #0
    7932:	d1fb      	bne.n	792c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    7934:	230b      	movs	r3, #11
    7936:	18fb      	adds	r3, r7, r3
    7938:	2200      	movs	r2, #0
    793a:	701a      	strb	r2, [r3, #0]
    793c:	e00d      	b.n	795a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    793e:	230b      	movs	r3, #11
    7940:	18fb      	adds	r3, r7, r3
    7942:	781a      	ldrb	r2, [r3, #0]
    7944:	4b12      	ldr	r3, [pc, #72]	; (7990 <_system_extint_init+0xd4>)
    7946:	0092      	lsls	r2, r2, #2
    7948:	2100      	movs	r1, #0
    794a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    794c:	230b      	movs	r3, #11
    794e:	18fb      	adds	r3, r7, r3
    7950:	781a      	ldrb	r2, [r3, #0]
    7952:	230b      	movs	r3, #11
    7954:	18fb      	adds	r3, r7, r3
    7956:	3201      	adds	r2, #1
    7958:	701a      	strb	r2, [r3, #0]
    795a:	230b      	movs	r3, #11
    795c:	18fb      	adds	r3, r7, r3
    795e:	781b      	ldrb	r3, [r3, #0]
    7960:	2b0f      	cmp	r3, #15
    7962:	d9ec      	bls.n	793e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    7964:	2004      	movs	r0, #4
    7966:	4b0b      	ldr	r3, [pc, #44]	; (7994 <_system_extint_init+0xd8>)
    7968:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    796a:	4b0b      	ldr	r3, [pc, #44]	; (7998 <_system_extint_init+0xdc>)
    796c:	4798      	blx	r3
}
    796e:	46c0      	nop			; (mov r8, r8)
    7970:	46bd      	mov	sp, r7
    7972:	b004      	add	sp, #16
    7974:	bd80      	pop	{r7, pc}
    7976:	46c0      	nop			; (mov r8, r8)
    7978:	40001800 	.word	0x40001800
    797c:	00007779 	.word	0x00007779
    7980:	00007761 	.word	0x00007761
    7984:	0000aedd 	.word	0x0000aedd
    7988:	0000af21 	.word	0x0000af21
    798c:	00007875 	.word	0x00007875
    7990:	200004ac 	.word	0x200004ac
    7994:	000077fd 	.word	0x000077fd
    7998:	0000799d 	.word	0x0000799d

0000799c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    799c:	b580      	push	{r7, lr}
    799e:	b082      	sub	sp, #8
    79a0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    79a2:	4b15      	ldr	r3, [pc, #84]	; (79f8 <_extint_enable+0x5c>)
    79a4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    79a6:	2300      	movs	r3, #0
    79a8:	607b      	str	r3, [r7, #4]
    79aa:	e018      	b.n	79de <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    79ac:	687b      	ldr	r3, [r7, #4]
    79ae:	009b      	lsls	r3, r3, #2
    79b0:	2208      	movs	r2, #8
    79b2:	4694      	mov	ip, r2
    79b4:	44bc      	add	ip, r7
    79b6:	4463      	add	r3, ip
    79b8:	3b08      	subs	r3, #8
    79ba:	681a      	ldr	r2, [r3, #0]
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	009b      	lsls	r3, r3, #2
    79c0:	2108      	movs	r1, #8
    79c2:	468c      	mov	ip, r1
    79c4:	44bc      	add	ip, r7
    79c6:	4463      	add	r3, ip
    79c8:	3b08      	subs	r3, #8
    79ca:	681b      	ldr	r3, [r3, #0]
    79cc:	781b      	ldrb	r3, [r3, #0]
    79ce:	b2db      	uxtb	r3, r3
    79d0:	2102      	movs	r1, #2
    79d2:	430b      	orrs	r3, r1
    79d4:	b2db      	uxtb	r3, r3
    79d6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    79d8:	687b      	ldr	r3, [r7, #4]
    79da:	3301      	adds	r3, #1
    79dc:	607b      	str	r3, [r7, #4]
    79de:	687b      	ldr	r3, [r7, #4]
    79e0:	2b00      	cmp	r3, #0
    79e2:	d0e3      	beq.n	79ac <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    79e4:	46c0      	nop			; (mov r8, r8)
    79e6:	4b05      	ldr	r3, [pc, #20]	; (79fc <_extint_enable+0x60>)
    79e8:	4798      	blx	r3
    79ea:	1e03      	subs	r3, r0, #0
    79ec:	d1fb      	bne.n	79e6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    79ee:	46c0      	nop			; (mov r8, r8)
    79f0:	46bd      	mov	sp, r7
    79f2:	b002      	add	sp, #8
    79f4:	bd80      	pop	{r7, pc}
    79f6:	46c0      	nop			; (mov r8, r8)
    79f8:	40001800 	.word	0x40001800
    79fc:	00007875 	.word	0x00007875

00007a00 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    7a00:	b580      	push	{r7, lr}
    7a02:	b082      	sub	sp, #8
    7a04:	af00      	add	r7, sp, #0
    7a06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	2200      	movs	r2, #0
    7a0c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    7a0e:	687b      	ldr	r3, [r7, #4]
    7a10:	2200      	movs	r2, #0
    7a12:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    7a14:	687b      	ldr	r3, [r7, #4]
    7a16:	2201      	movs	r2, #1
    7a18:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    7a1a:	687b      	ldr	r3, [r7, #4]
    7a1c:	2201      	movs	r2, #1
    7a1e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    7a20:	687b      	ldr	r3, [r7, #4]
    7a22:	2200      	movs	r2, #0
    7a24:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    7a26:	687b      	ldr	r3, [r7, #4]
    7a28:	2202      	movs	r2, #2
    7a2a:	72da      	strb	r2, [r3, #11]
}
    7a2c:	46c0      	nop			; (mov r8, r8)
    7a2e:	46bd      	mov	sp, r7
    7a30:	b002      	add	sp, #8
    7a32:	bd80      	pop	{r7, pc}

00007a34 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    7a34:	b580      	push	{r7, lr}
    7a36:	b086      	sub	sp, #24
    7a38:	af00      	add	r7, sp, #0
    7a3a:	0002      	movs	r2, r0
    7a3c:	6039      	str	r1, [r7, #0]
    7a3e:	1dfb      	adds	r3, r7, #7
    7a40:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    7a42:	2308      	movs	r3, #8
    7a44:	18fb      	adds	r3, r7, r3
    7a46:	0018      	movs	r0, r3
    7a48:	4b36      	ldr	r3, [pc, #216]	; (7b24 <extint_chan_set_config+0xf0>)
    7a4a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    7a4c:	683b      	ldr	r3, [r7, #0]
    7a4e:	685b      	ldr	r3, [r3, #4]
    7a50:	b2da      	uxtb	r2, r3
    7a52:	2308      	movs	r3, #8
    7a54:	18fb      	adds	r3, r7, r3
    7a56:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7a58:	2308      	movs	r3, #8
    7a5a:	18fb      	adds	r3, r7, r3
    7a5c:	2200      	movs	r2, #0
    7a5e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    7a60:	683b      	ldr	r3, [r7, #0]
    7a62:	7a1a      	ldrb	r2, [r3, #8]
    7a64:	2308      	movs	r3, #8
    7a66:	18fb      	adds	r3, r7, r3
    7a68:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    7a6a:	683b      	ldr	r3, [r7, #0]
    7a6c:	681b      	ldr	r3, [r3, #0]
    7a6e:	b2db      	uxtb	r3, r3
    7a70:	2208      	movs	r2, #8
    7a72:	18ba      	adds	r2, r7, r2
    7a74:	0011      	movs	r1, r2
    7a76:	0018      	movs	r0, r3
    7a78:	4b2b      	ldr	r3, [pc, #172]	; (7b28 <extint_chan_set_config+0xf4>)
    7a7a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    7a7c:	1dfb      	adds	r3, r7, #7
    7a7e:	781b      	ldrb	r3, [r3, #0]
    7a80:	0018      	movs	r0, r3
    7a82:	4b2a      	ldr	r3, [pc, #168]	; (7b2c <extint_chan_set_config+0xf8>)
    7a84:	4798      	blx	r3
    7a86:	0003      	movs	r3, r0
    7a88:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    7a8a:	1dfb      	adds	r3, r7, #7
    7a8c:	781b      	ldrb	r3, [r3, #0]
    7a8e:	2207      	movs	r2, #7
    7a90:	4013      	ands	r3, r2
    7a92:	009b      	lsls	r3, r3, #2
    7a94:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    7a96:	683b      	ldr	r3, [r7, #0]
    7a98:	7adb      	ldrb	r3, [r3, #11]
    7a9a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    7a9c:	683b      	ldr	r3, [r7, #0]
    7a9e:	7a9b      	ldrb	r3, [r3, #10]
    7aa0:	2b00      	cmp	r3, #0
    7aa2:	d003      	beq.n	7aac <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    7aa4:	697b      	ldr	r3, [r7, #20]
    7aa6:	2208      	movs	r2, #8
    7aa8:	4313      	orrs	r3, r2
    7aaa:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    7aac:	1dfb      	adds	r3, r7, #7
    7aae:	781b      	ldrb	r3, [r3, #0]
    7ab0:	08db      	lsrs	r3, r3, #3
    7ab2:	b2db      	uxtb	r3, r3
    7ab4:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    7ab6:	1dfb      	adds	r3, r7, #7
    7ab8:	781b      	ldrb	r3, [r3, #0]
    7aba:	08db      	lsrs	r3, r3, #3
    7abc:	b2db      	uxtb	r3, r3
    7abe:	001a      	movs	r2, r3
    7ac0:	693b      	ldr	r3, [r7, #16]
    7ac2:	3206      	adds	r2, #6
    7ac4:	0092      	lsls	r2, r2, #2
    7ac6:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    7ac8:	210f      	movs	r1, #15
    7aca:	68fa      	ldr	r2, [r7, #12]
    7acc:	4091      	lsls	r1, r2
    7ace:	000a      	movs	r2, r1
    7ad0:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    7ad2:	401a      	ands	r2, r3
			(new_config << config_pos);
    7ad4:	6979      	ldr	r1, [r7, #20]
    7ad6:	68fb      	ldr	r3, [r7, #12]
    7ad8:	4099      	lsls	r1, r3
    7ada:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    7adc:	431a      	orrs	r2, r3
    7ade:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    7ae0:	693b      	ldr	r3, [r7, #16]
    7ae2:	1d82      	adds	r2, r0, #6
    7ae4:	0092      	lsls	r2, r2, #2
    7ae6:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    7ae8:	683b      	ldr	r3, [r7, #0]
    7aea:	7a5b      	ldrb	r3, [r3, #9]
    7aec:	2b00      	cmp	r3, #0
    7aee:	d00a      	beq.n	7b06 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    7af0:	693b      	ldr	r3, [r7, #16]
    7af2:	695a      	ldr	r2, [r3, #20]
    7af4:	1dfb      	adds	r3, r7, #7
    7af6:	781b      	ldrb	r3, [r3, #0]
    7af8:	2101      	movs	r1, #1
    7afa:	4099      	lsls	r1, r3
    7afc:	000b      	movs	r3, r1
    7afe:	431a      	orrs	r2, r3
    7b00:	693b      	ldr	r3, [r7, #16]
    7b02:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    7b04:	e00a      	b.n	7b1c <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    7b06:	693b      	ldr	r3, [r7, #16]
    7b08:	695b      	ldr	r3, [r3, #20]
    7b0a:	1dfa      	adds	r2, r7, #7
    7b0c:	7812      	ldrb	r2, [r2, #0]
    7b0e:	2101      	movs	r1, #1
    7b10:	4091      	lsls	r1, r2
    7b12:	000a      	movs	r2, r1
    7b14:	43d2      	mvns	r2, r2
    7b16:	401a      	ands	r2, r3
    7b18:	693b      	ldr	r3, [r7, #16]
    7b1a:	615a      	str	r2, [r3, #20]
}
    7b1c:	46c0      	nop			; (mov r8, r8)
    7b1e:	46bd      	mov	sp, r7
    7b20:	b006      	add	sp, #24
    7b22:	bd80      	pop	{r7, pc}
    7b24:	000077d5 	.word	0x000077d5
    7b28:	0000b1c9 	.word	0x0000b1c9
    7b2c:	00007829 	.word	0x00007829

00007b30 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    7b30:	b580      	push	{r7, lr}
    7b32:	b082      	sub	sp, #8
    7b34:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    7b36:	4b07      	ldr	r3, [pc, #28]	; (7b54 <nvm_is_ready+0x24>)
    7b38:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    7b3a:	687b      	ldr	r3, [r7, #4]
    7b3c:	7d1b      	ldrb	r3, [r3, #20]
    7b3e:	b2db      	uxtb	r3, r3
    7b40:	001a      	movs	r2, r3
    7b42:	2301      	movs	r3, #1
    7b44:	4013      	ands	r3, r2
    7b46:	1e5a      	subs	r2, r3, #1
    7b48:	4193      	sbcs	r3, r2
    7b4a:	b2db      	uxtb	r3, r3
}
    7b4c:	0018      	movs	r0, r3
    7b4e:	46bd      	mov	sp, r7
    7b50:	b002      	add	sp, #8
    7b52:	bd80      	pop	{r7, pc}
    7b54:	41004000 	.word	0x41004000

00007b58 <system_apb_clock_set_mask>:
{
    7b58:	b580      	push	{r7, lr}
    7b5a:	b082      	sub	sp, #8
    7b5c:	af00      	add	r7, sp, #0
    7b5e:	0002      	movs	r2, r0
    7b60:	6039      	str	r1, [r7, #0]
    7b62:	1dfb      	adds	r3, r7, #7
    7b64:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7b66:	1dfb      	adds	r3, r7, #7
    7b68:	781b      	ldrb	r3, [r3, #0]
    7b6a:	2b01      	cmp	r3, #1
    7b6c:	d00a      	beq.n	7b84 <system_apb_clock_set_mask+0x2c>
    7b6e:	2b02      	cmp	r3, #2
    7b70:	d00f      	beq.n	7b92 <system_apb_clock_set_mask+0x3a>
    7b72:	2b00      	cmp	r3, #0
    7b74:	d114      	bne.n	7ba0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7b76:	4b0e      	ldr	r3, [pc, #56]	; (7bb0 <system_apb_clock_set_mask+0x58>)
    7b78:	4a0d      	ldr	r2, [pc, #52]	; (7bb0 <system_apb_clock_set_mask+0x58>)
    7b7a:	6991      	ldr	r1, [r2, #24]
    7b7c:	683a      	ldr	r2, [r7, #0]
    7b7e:	430a      	orrs	r2, r1
    7b80:	619a      	str	r2, [r3, #24]
			break;
    7b82:	e00f      	b.n	7ba4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7b84:	4b0a      	ldr	r3, [pc, #40]	; (7bb0 <system_apb_clock_set_mask+0x58>)
    7b86:	4a0a      	ldr	r2, [pc, #40]	; (7bb0 <system_apb_clock_set_mask+0x58>)
    7b88:	69d1      	ldr	r1, [r2, #28]
    7b8a:	683a      	ldr	r2, [r7, #0]
    7b8c:	430a      	orrs	r2, r1
    7b8e:	61da      	str	r2, [r3, #28]
			break;
    7b90:	e008      	b.n	7ba4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    7b92:	4b07      	ldr	r3, [pc, #28]	; (7bb0 <system_apb_clock_set_mask+0x58>)
    7b94:	4a06      	ldr	r2, [pc, #24]	; (7bb0 <system_apb_clock_set_mask+0x58>)
    7b96:	6a11      	ldr	r1, [r2, #32]
    7b98:	683a      	ldr	r2, [r7, #0]
    7b9a:	430a      	orrs	r2, r1
    7b9c:	621a      	str	r2, [r3, #32]
			break;
    7b9e:	e001      	b.n	7ba4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    7ba0:	2317      	movs	r3, #23
    7ba2:	e000      	b.n	7ba6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7ba4:	2300      	movs	r3, #0
}
    7ba6:	0018      	movs	r0, r3
    7ba8:	46bd      	mov	sp, r7
    7baa:	b002      	add	sp, #8
    7bac:	bd80      	pop	{r7, pc}
    7bae:	46c0      	nop			; (mov r8, r8)
    7bb0:	40000400 	.word	0x40000400

00007bb4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    7bb4:	b580      	push	{r7, lr}
    7bb6:	b084      	sub	sp, #16
    7bb8:	af00      	add	r7, sp, #0
    7bba:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    7bbc:	4b31      	ldr	r3, [pc, #196]	; (7c84 <nvm_set_config+0xd0>)
    7bbe:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAMC20) || (SAMC21)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    7bc0:	2104      	movs	r1, #4
    7bc2:	2001      	movs	r0, #1
    7bc4:	4b30      	ldr	r3, [pc, #192]	; (7c88 <nvm_set_config+0xd4>)
    7bc6:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    7bc8:	68fb      	ldr	r3, [r7, #12]
    7bca:	8b1b      	ldrh	r3, [r3, #24]
    7bcc:	b29b      	uxth	r3, r3
    7bce:	2220      	movs	r2, #32
    7bd0:	32ff      	adds	r2, #255	; 0xff
    7bd2:	4313      	orrs	r3, r2
    7bd4:	b29a      	uxth	r2, r3
    7bd6:	68fb      	ldr	r3, [r7, #12]
    7bd8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    7bda:	4b2c      	ldr	r3, [pc, #176]	; (7c8c <nvm_set_config+0xd8>)
    7bdc:	4798      	blx	r3
    7bde:	0003      	movs	r3, r0
    7be0:	001a      	movs	r2, r3
    7be2:	2301      	movs	r3, #1
    7be4:	4053      	eors	r3, r2
    7be6:	b2db      	uxtb	r3, r3
    7be8:	2b00      	cmp	r3, #0
    7bea:	d001      	beq.n	7bf0 <nvm_set_config+0x3c>
		return STATUS_BUSY;
    7bec:	2305      	movs	r3, #5
    7bee:	e045      	b.n	7c7c <nvm_set_config+0xc8>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    7bf0:	687b      	ldr	r3, [r7, #4]
    7bf2:	781b      	ldrb	r3, [r3, #0]
    7bf4:	021b      	lsls	r3, r3, #8
    7bf6:	001a      	movs	r2, r3
    7bf8:	23c0      	movs	r3, #192	; 0xc0
    7bfa:	009b      	lsls	r3, r3, #2
    7bfc:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    7bfe:	687b      	ldr	r3, [r7, #4]
    7c00:	785b      	ldrb	r3, [r3, #1]
    7c02:	01db      	lsls	r3, r3, #7
    7c04:	0019      	movs	r1, r3
    7c06:	23ff      	movs	r3, #255	; 0xff
    7c08:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    7c0a:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    7c0c:	687b      	ldr	r3, [r7, #4]
    7c0e:	789b      	ldrb	r3, [r3, #2]
    7c10:	005b      	lsls	r3, r3, #1
    7c12:	0019      	movs	r1, r3
    7c14:	231e      	movs	r3, #30
    7c16:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    7c18:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    7c1a:	687b      	ldr	r3, [r7, #4]
    7c1c:	78db      	ldrb	r3, [r3, #3]
    7c1e:	049b      	lsls	r3, r3, #18
    7c20:	0019      	movs	r1, r3
    7c22:	2380      	movs	r3, #128	; 0x80
    7c24:	02db      	lsls	r3, r3, #11
    7c26:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    7c28:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    7c2a:	687b      	ldr	r3, [r7, #4]
    7c2c:	791b      	ldrb	r3, [r3, #4]
    7c2e:	041b      	lsls	r3, r3, #16
    7c30:	0019      	movs	r1, r3
    7c32:	23c0      	movs	r3, #192	; 0xc0
    7c34:	029b      	lsls	r3, r3, #10
    7c36:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    7c38:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    7c3a:	68fb      	ldr	r3, [r7, #12]
    7c3c:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    7c3e:	68fb      	ldr	r3, [r7, #12]
    7c40:	689b      	ldr	r3, [r3, #8]
    7c42:	035b      	lsls	r3, r3, #13
    7c44:	0f5b      	lsrs	r3, r3, #29
    7c46:	b2db      	uxtb	r3, r3
    7c48:	001a      	movs	r2, r3
    7c4a:	2308      	movs	r3, #8
    7c4c:	4093      	lsls	r3, r2
    7c4e:	b29a      	uxth	r2, r3
    7c50:	4b0f      	ldr	r3, [pc, #60]	; (7c90 <nvm_set_config+0xdc>)
    7c52:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    7c54:	68fb      	ldr	r3, [r7, #12]
    7c56:	689b      	ldr	r3, [r3, #8]
    7c58:	b29a      	uxth	r2, r3
    7c5a:	4b0d      	ldr	r3, [pc, #52]	; (7c90 <nvm_set_config+0xdc>)
    7c5c:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    7c5e:	687b      	ldr	r3, [r7, #4]
    7c60:	785a      	ldrb	r2, [r3, #1]
    7c62:	4b0b      	ldr	r3, [pc, #44]	; (7c90 <nvm_set_config+0xdc>)
    7c64:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    7c66:	68fb      	ldr	r3, [r7, #12]
    7c68:	8b1b      	ldrh	r3, [r3, #24]
    7c6a:	b29b      	uxth	r3, r3
    7c6c:	001a      	movs	r2, r3
    7c6e:	2380      	movs	r3, #128	; 0x80
    7c70:	005b      	lsls	r3, r3, #1
    7c72:	4013      	ands	r3, r2
    7c74:	d001      	beq.n	7c7a <nvm_set_config+0xc6>
		return STATUS_ERR_IO;
    7c76:	2310      	movs	r3, #16
    7c78:	e000      	b.n	7c7c <nvm_set_config+0xc8>
	}

	return STATUS_OK;
    7c7a:	2300      	movs	r3, #0
}
    7c7c:	0018      	movs	r0, r3
    7c7e:	46bd      	mov	sp, r7
    7c80:	b004      	add	sp, #16
    7c82:	bd80      	pop	{r7, pc}
    7c84:	41004000 	.word	0x41004000
    7c88:	00007b59 	.word	0x00007b59
    7c8c:	00007b31 	.word	0x00007b31
    7c90:	200002a0 	.word	0x200002a0

00007c94 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    7c94:	b580      	push	{r7, lr}
    7c96:	b086      	sub	sp, #24
    7c98:	af00      	add	r7, sp, #0
    7c9a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    7c9c:	4b28      	ldr	r3, [pc, #160]	; (7d40 <_rtc_interrupt_handler+0xac>)
    7c9e:	687a      	ldr	r2, [r7, #4]
    7ca0:	0092      	lsls	r2, r2, #2
    7ca2:	58d3      	ldr	r3, [r2, r3]
    7ca4:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    7ca6:	697b      	ldr	r3, [r7, #20]
    7ca8:	681b      	ldr	r3, [r3, #0]
    7caa:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    7cac:	230e      	movs	r3, #14
    7cae:	18fb      	adds	r3, r7, r3
    7cb0:	697a      	ldr	r2, [r7, #20]
    7cb2:	8a52      	ldrh	r2, [r2, #18]
    7cb4:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    7cb6:	697b      	ldr	r3, [r7, #20]
    7cb8:	8a1b      	ldrh	r3, [r3, #16]
    7cba:	b29a      	uxth	r2, r3
    7cbc:	230e      	movs	r3, #14
    7cbe:	18fb      	adds	r3, r7, r3
    7cc0:	210e      	movs	r1, #14
    7cc2:	1879      	adds	r1, r7, r1
    7cc4:	8809      	ldrh	r1, [r1, #0]
    7cc6:	400a      	ands	r2, r1
    7cc8:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    7cca:	693b      	ldr	r3, [r7, #16]
    7ccc:	7a1b      	ldrb	r3, [r3, #8]
    7cce:	b2da      	uxtb	r2, r3
    7cd0:	230c      	movs	r3, #12
    7cd2:	18fb      	adds	r3, r7, r3
    7cd4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    7cd6:	693b      	ldr	r3, [r7, #16]
    7cd8:	79db      	ldrb	r3, [r3, #7]
    7cda:	b2db      	uxtb	r3, r3
    7cdc:	b29a      	uxth	r2, r3
    7cde:	230c      	movs	r3, #12
    7ce0:	18fb      	adds	r3, r7, r3
    7ce2:	210c      	movs	r1, #12
    7ce4:	1879      	adds	r1, r7, r1
    7ce6:	8809      	ldrh	r1, [r1, #0]
    7ce8:	400a      	ands	r2, r1
    7cea:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    7cec:	230c      	movs	r3, #12
    7cee:	18fb      	adds	r3, r7, r3
    7cf0:	881b      	ldrh	r3, [r3, #0]
    7cf2:	2280      	movs	r2, #128	; 0x80
    7cf4:	4013      	ands	r3, r2
    7cf6:	d00c      	beq.n	7d12 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    7cf8:	230e      	movs	r3, #14
    7cfa:	18fb      	adds	r3, r7, r3
    7cfc:	881b      	ldrh	r3, [r3, #0]
    7cfe:	2202      	movs	r2, #2
    7d00:	4013      	ands	r3, r2
    7d02:	d002      	beq.n	7d0a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    7d04:	697b      	ldr	r3, [r7, #20]
    7d06:	68db      	ldr	r3, [r3, #12]
    7d08:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    7d0a:	693b      	ldr	r3, [r7, #16]
    7d0c:	2280      	movs	r2, #128	; 0x80
    7d0e:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    7d10:	e011      	b.n	7d36 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    7d12:	230c      	movs	r3, #12
    7d14:	18fb      	adds	r3, r7, r3
    7d16:	881b      	ldrh	r3, [r3, #0]
    7d18:	2201      	movs	r2, #1
    7d1a:	4013      	ands	r3, r2
    7d1c:	d00b      	beq.n	7d36 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    7d1e:	230e      	movs	r3, #14
    7d20:	18fb      	adds	r3, r7, r3
    7d22:	881b      	ldrh	r3, [r3, #0]
    7d24:	2201      	movs	r2, #1
    7d26:	4013      	ands	r3, r2
    7d28:	d002      	beq.n	7d30 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    7d2a:	697b      	ldr	r3, [r7, #20]
    7d2c:	689b      	ldr	r3, [r3, #8]
    7d2e:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    7d30:	693b      	ldr	r3, [r7, #16]
    7d32:	2201      	movs	r2, #1
    7d34:	721a      	strb	r2, [r3, #8]
}
    7d36:	46c0      	nop			; (mov r8, r8)
    7d38:	46bd      	mov	sp, r7
    7d3a:	b006      	add	sp, #24
    7d3c:	bd80      	pop	{r7, pc}
    7d3e:	46c0      	nop			; (mov r8, r8)
    7d40:	200004ec 	.word	0x200004ec

00007d44 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    7d44:	b580      	push	{r7, lr}
    7d46:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    7d48:	2000      	movs	r0, #0
    7d4a:	4b02      	ldr	r3, [pc, #8]	; (7d54 <RTC_Handler+0x10>)
    7d4c:	4798      	blx	r3
}
    7d4e:	46c0      	nop			; (mov r8, r8)
    7d50:	46bd      	mov	sp, r7
    7d52:	bd80      	pop	{r7, pc}
    7d54:	00007c95 	.word	0x00007c95

00007d58 <system_pinmux_get_config_defaults>:
{
    7d58:	b580      	push	{r7, lr}
    7d5a:	b082      	sub	sp, #8
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7d60:	687b      	ldr	r3, [r7, #4]
    7d62:	2280      	movs	r2, #128	; 0x80
    7d64:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7d66:	687b      	ldr	r3, [r7, #4]
    7d68:	2200      	movs	r2, #0
    7d6a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	2201      	movs	r2, #1
    7d70:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7d72:	687b      	ldr	r3, [r7, #4]
    7d74:	2200      	movs	r2, #0
    7d76:	70da      	strb	r2, [r3, #3]
}
    7d78:	46c0      	nop			; (mov r8, r8)
    7d7a:	46bd      	mov	sp, r7
    7d7c:	b002      	add	sp, #8
    7d7e:	bd80      	pop	{r7, pc}

00007d80 <system_pinmux_get_group_from_gpio_pin>:
{
    7d80:	b580      	push	{r7, lr}
    7d82:	b084      	sub	sp, #16
    7d84:	af00      	add	r7, sp, #0
    7d86:	0002      	movs	r2, r0
    7d88:	1dfb      	adds	r3, r7, #7
    7d8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7d8c:	230f      	movs	r3, #15
    7d8e:	18fb      	adds	r3, r7, r3
    7d90:	1dfa      	adds	r2, r7, #7
    7d92:	7812      	ldrb	r2, [r2, #0]
    7d94:	09d2      	lsrs	r2, r2, #7
    7d96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7d98:	230e      	movs	r3, #14
    7d9a:	18fb      	adds	r3, r7, r3
    7d9c:	1dfa      	adds	r2, r7, #7
    7d9e:	7812      	ldrb	r2, [r2, #0]
    7da0:	0952      	lsrs	r2, r2, #5
    7da2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7da4:	4b0d      	ldr	r3, [pc, #52]	; (7ddc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7da6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    7da8:	230f      	movs	r3, #15
    7daa:	18fb      	adds	r3, r7, r3
    7dac:	781b      	ldrb	r3, [r3, #0]
    7dae:	2b00      	cmp	r3, #0
    7db0:	d10f      	bne.n	7dd2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    7db2:	230f      	movs	r3, #15
    7db4:	18fb      	adds	r3, r7, r3
    7db6:	781b      	ldrb	r3, [r3, #0]
    7db8:	009b      	lsls	r3, r3, #2
    7dba:	2210      	movs	r2, #16
    7dbc:	4694      	mov	ip, r2
    7dbe:	44bc      	add	ip, r7
    7dc0:	4463      	add	r3, ip
    7dc2:	3b08      	subs	r3, #8
    7dc4:	681a      	ldr	r2, [r3, #0]
    7dc6:	230e      	movs	r3, #14
    7dc8:	18fb      	adds	r3, r7, r3
    7dca:	781b      	ldrb	r3, [r3, #0]
    7dcc:	01db      	lsls	r3, r3, #7
    7dce:	18d3      	adds	r3, r2, r3
    7dd0:	e000      	b.n	7dd4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    7dd2:	2300      	movs	r3, #0
}
    7dd4:	0018      	movs	r0, r3
    7dd6:	46bd      	mov	sp, r7
    7dd8:	b004      	add	sp, #16
    7dda:	bd80      	pop	{r7, pc}
    7ddc:	41004400 	.word	0x41004400

00007de0 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    7de0:	b580      	push	{r7, lr}
    7de2:	b086      	sub	sp, #24
    7de4:	af00      	add	r7, sp, #0
    7de6:	0002      	movs	r2, r0
    7de8:	1dfb      	adds	r3, r7, #7
    7dea:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7dec:	1dfb      	adds	r3, r7, #7
    7dee:	781b      	ldrb	r3, [r3, #0]
    7df0:	0018      	movs	r0, r3
    7df2:	4b19      	ldr	r3, [pc, #100]	; (7e58 <system_pinmux_pin_get_mux_position+0x78>)
    7df4:	4798      	blx	r3
    7df6:	0003      	movs	r3, r0
    7df8:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    7dfa:	1dfb      	adds	r3, r7, #7
    7dfc:	781b      	ldrb	r3, [r3, #0]
    7dfe:	221f      	movs	r2, #31
    7e00:	4013      	ands	r3, r2
    7e02:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    7e04:	697a      	ldr	r2, [r7, #20]
    7e06:	2140      	movs	r1, #64	; 0x40
    7e08:	693b      	ldr	r3, [r7, #16]
    7e0a:	18d3      	adds	r3, r2, r3
    7e0c:	185b      	adds	r3, r3, r1
    7e0e:	781b      	ldrb	r3, [r3, #0]
    7e10:	b2db      	uxtb	r3, r3
    7e12:	001a      	movs	r2, r3
    7e14:	2301      	movs	r3, #1
    7e16:	4013      	ands	r3, r2
    7e18:	d101      	bne.n	7e1e <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    7e1a:	2380      	movs	r3, #128	; 0x80
    7e1c:	e018      	b.n	7e50 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    7e1e:	693b      	ldr	r3, [r7, #16]
    7e20:	085b      	lsrs	r3, r3, #1
    7e22:	697a      	ldr	r2, [r7, #20]
    7e24:	2130      	movs	r1, #48	; 0x30
    7e26:	18d3      	adds	r3, r2, r3
    7e28:	185b      	adds	r3, r3, r1
    7e2a:	781b      	ldrb	r3, [r3, #0]
    7e2c:	b2db      	uxtb	r3, r3
    7e2e:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    7e30:	693b      	ldr	r3, [r7, #16]
    7e32:	2201      	movs	r2, #1
    7e34:	4013      	ands	r3, r2
    7e36:	d006      	beq.n	7e46 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    7e38:	68fb      	ldr	r3, [r7, #12]
    7e3a:	091b      	lsrs	r3, r3, #4
    7e3c:	b2db      	uxtb	r3, r3
    7e3e:	220f      	movs	r2, #15
    7e40:	4013      	ands	r3, r2
    7e42:	b2db      	uxtb	r3, r3
    7e44:	e004      	b.n	7e50 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    7e46:	68fb      	ldr	r3, [r7, #12]
    7e48:	b2db      	uxtb	r3, r3
    7e4a:	220f      	movs	r2, #15
    7e4c:	4013      	ands	r3, r2
    7e4e:	b2db      	uxtb	r3, r3
	}
}
    7e50:	0018      	movs	r0, r3
    7e52:	46bd      	mov	sp, r7
    7e54:	b006      	add	sp, #24
    7e56:	bd80      	pop	{r7, pc}
    7e58:	00007d81 	.word	0x00007d81

00007e5c <port_get_group_from_gpio_pin>:
{
    7e5c:	b580      	push	{r7, lr}
    7e5e:	b082      	sub	sp, #8
    7e60:	af00      	add	r7, sp, #0
    7e62:	0002      	movs	r2, r0
    7e64:	1dfb      	adds	r3, r7, #7
    7e66:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7e68:	1dfb      	adds	r3, r7, #7
    7e6a:	781b      	ldrb	r3, [r3, #0]
    7e6c:	0018      	movs	r0, r3
    7e6e:	4b03      	ldr	r3, [pc, #12]	; (7e7c <port_get_group_from_gpio_pin+0x20>)
    7e70:	4798      	blx	r3
    7e72:	0003      	movs	r3, r0
}
    7e74:	0018      	movs	r0, r3
    7e76:	46bd      	mov	sp, r7
    7e78:	b002      	add	sp, #8
    7e7a:	bd80      	pop	{r7, pc}
    7e7c:	00007d81 	.word	0x00007d81

00007e80 <port_pin_set_output_level>:
{
    7e80:	b580      	push	{r7, lr}
    7e82:	b084      	sub	sp, #16
    7e84:	af00      	add	r7, sp, #0
    7e86:	0002      	movs	r2, r0
    7e88:	1dfb      	adds	r3, r7, #7
    7e8a:	701a      	strb	r2, [r3, #0]
    7e8c:	1dbb      	adds	r3, r7, #6
    7e8e:	1c0a      	adds	r2, r1, #0
    7e90:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    7e92:	1dfb      	adds	r3, r7, #7
    7e94:	781b      	ldrb	r3, [r3, #0]
    7e96:	0018      	movs	r0, r3
    7e98:	4b0d      	ldr	r3, [pc, #52]	; (7ed0 <port_pin_set_output_level+0x50>)
    7e9a:	4798      	blx	r3
    7e9c:	0003      	movs	r3, r0
    7e9e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7ea0:	1dfb      	adds	r3, r7, #7
    7ea2:	781b      	ldrb	r3, [r3, #0]
    7ea4:	221f      	movs	r2, #31
    7ea6:	4013      	ands	r3, r2
    7ea8:	2201      	movs	r2, #1
    7eaa:	409a      	lsls	r2, r3
    7eac:	0013      	movs	r3, r2
    7eae:	60bb      	str	r3, [r7, #8]
	if (level) {
    7eb0:	1dbb      	adds	r3, r7, #6
    7eb2:	781b      	ldrb	r3, [r3, #0]
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d003      	beq.n	7ec0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    7eb8:	68fb      	ldr	r3, [r7, #12]
    7eba:	68ba      	ldr	r2, [r7, #8]
    7ebc:	619a      	str	r2, [r3, #24]
}
    7ebe:	e002      	b.n	7ec6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    7ec0:	68fb      	ldr	r3, [r7, #12]
    7ec2:	68ba      	ldr	r2, [r7, #8]
    7ec4:	615a      	str	r2, [r3, #20]
}
    7ec6:	46c0      	nop			; (mov r8, r8)
    7ec8:	46bd      	mov	sp, r7
    7eca:	b004      	add	sp, #16
    7ecc:	bd80      	pop	{r7, pc}
    7ece:	46c0      	nop			; (mov r8, r8)
    7ed0:	00007e5d 	.word	0x00007e5d

00007ed4 <system_gclk_chan_get_config_defaults>:
{
    7ed4:	b580      	push	{r7, lr}
    7ed6:	b082      	sub	sp, #8
    7ed8:	af00      	add	r7, sp, #0
    7eda:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7edc:	687b      	ldr	r3, [r7, #4]
    7ede:	2200      	movs	r2, #0
    7ee0:	701a      	strb	r2, [r3, #0]
}
    7ee2:	46c0      	nop			; (mov r8, r8)
    7ee4:	46bd      	mov	sp, r7
    7ee6:	b002      	add	sp, #8
    7ee8:	bd80      	pop	{r7, pc}
	...

00007eec <system_apb_clock_set_mask>:
{
    7eec:	b580      	push	{r7, lr}
    7eee:	b082      	sub	sp, #8
    7ef0:	af00      	add	r7, sp, #0
    7ef2:	0002      	movs	r2, r0
    7ef4:	6039      	str	r1, [r7, #0]
    7ef6:	1dfb      	adds	r3, r7, #7
    7ef8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7efa:	1dfb      	adds	r3, r7, #7
    7efc:	781b      	ldrb	r3, [r3, #0]
    7efe:	2b01      	cmp	r3, #1
    7f00:	d00a      	beq.n	7f18 <system_apb_clock_set_mask+0x2c>
    7f02:	2b02      	cmp	r3, #2
    7f04:	d00f      	beq.n	7f26 <system_apb_clock_set_mask+0x3a>
    7f06:	2b00      	cmp	r3, #0
    7f08:	d114      	bne.n	7f34 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7f0a:	4b0e      	ldr	r3, [pc, #56]	; (7f44 <system_apb_clock_set_mask+0x58>)
    7f0c:	4a0d      	ldr	r2, [pc, #52]	; (7f44 <system_apb_clock_set_mask+0x58>)
    7f0e:	6991      	ldr	r1, [r2, #24]
    7f10:	683a      	ldr	r2, [r7, #0]
    7f12:	430a      	orrs	r2, r1
    7f14:	619a      	str	r2, [r3, #24]
			break;
    7f16:	e00f      	b.n	7f38 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7f18:	4b0a      	ldr	r3, [pc, #40]	; (7f44 <system_apb_clock_set_mask+0x58>)
    7f1a:	4a0a      	ldr	r2, [pc, #40]	; (7f44 <system_apb_clock_set_mask+0x58>)
    7f1c:	69d1      	ldr	r1, [r2, #28]
    7f1e:	683a      	ldr	r2, [r7, #0]
    7f20:	430a      	orrs	r2, r1
    7f22:	61da      	str	r2, [r3, #28]
			break;
    7f24:	e008      	b.n	7f38 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    7f26:	4b07      	ldr	r3, [pc, #28]	; (7f44 <system_apb_clock_set_mask+0x58>)
    7f28:	4a06      	ldr	r2, [pc, #24]	; (7f44 <system_apb_clock_set_mask+0x58>)
    7f2a:	6a11      	ldr	r1, [r2, #32]
    7f2c:	683a      	ldr	r2, [r7, #0]
    7f2e:	430a      	orrs	r2, r1
    7f30:	621a      	str	r2, [r3, #32]
			break;
    7f32:	e001      	b.n	7f38 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    7f34:	2317      	movs	r3, #23
    7f36:	e000      	b.n	7f3a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7f38:	2300      	movs	r3, #0
}
    7f3a:	0018      	movs	r0, r3
    7f3c:	46bd      	mov	sp, r7
    7f3e:	b002      	add	sp, #8
    7f40:	bd80      	pop	{r7, pc}
    7f42:	46c0      	nop			; (mov r8, r8)
    7f44:	40000400 	.word	0x40000400

00007f48 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    7f48:	b580      	push	{r7, lr}
    7f4a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    7f4c:	4b05      	ldr	r3, [pc, #20]	; (7f64 <system_is_debugger_present+0x1c>)
    7f4e:	789b      	ldrb	r3, [r3, #2]
    7f50:	b2db      	uxtb	r3, r3
    7f52:	001a      	movs	r2, r3
    7f54:	2302      	movs	r3, #2
    7f56:	4013      	ands	r3, r2
    7f58:	1e5a      	subs	r2, r3, #1
    7f5a:	4193      	sbcs	r3, r2
    7f5c:	b2db      	uxtb	r3, r3
}
    7f5e:	0018      	movs	r0, r3
    7f60:	46bd      	mov	sp, r7
    7f62:	bd80      	pop	{r7, pc}
    7f64:	41002000 	.word	0x41002000

00007f68 <spi_is_ready_to_write>:
{
    7f68:	b580      	push	{r7, lr}
    7f6a:	b084      	sub	sp, #16
    7f6c:	af00      	add	r7, sp, #0
    7f6e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7f70:	687b      	ldr	r3, [r7, #4]
    7f72:	681b      	ldr	r3, [r3, #0]
    7f74:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7f76:	68fb      	ldr	r3, [r7, #12]
    7f78:	7e1b      	ldrb	r3, [r3, #24]
    7f7a:	b2db      	uxtb	r3, r3
    7f7c:	001a      	movs	r2, r3
    7f7e:	2301      	movs	r3, #1
    7f80:	4013      	ands	r3, r2
    7f82:	1e5a      	subs	r2, r3, #1
    7f84:	4193      	sbcs	r3, r2
    7f86:	b2db      	uxtb	r3, r3
}
    7f88:	0018      	movs	r0, r3
    7f8a:	46bd      	mov	sp, r7
    7f8c:	b004      	add	sp, #16
    7f8e:	bd80      	pop	{r7, pc}

00007f90 <spi_is_ready_to_read>:
{
    7f90:	b580      	push	{r7, lr}
    7f92:	b084      	sub	sp, #16
    7f94:	af00      	add	r7, sp, #0
    7f96:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7f98:	687b      	ldr	r3, [r7, #4]
    7f9a:	681b      	ldr	r3, [r3, #0]
    7f9c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7f9e:	68fb      	ldr	r3, [r7, #12]
    7fa0:	7e1b      	ldrb	r3, [r3, #24]
    7fa2:	b2db      	uxtb	r3, r3
    7fa4:	001a      	movs	r2, r3
    7fa6:	2304      	movs	r3, #4
    7fa8:	4013      	ands	r3, r2
    7faa:	1e5a      	subs	r2, r3, #1
    7fac:	4193      	sbcs	r3, r2
    7fae:	b2db      	uxtb	r3, r3
}
    7fb0:	0018      	movs	r0, r3
    7fb2:	46bd      	mov	sp, r7
    7fb4:	b004      	add	sp, #16
    7fb6:	bd80      	pop	{r7, pc}

00007fb8 <spi_write>:
{
    7fb8:	b580      	push	{r7, lr}
    7fba:	b084      	sub	sp, #16
    7fbc:	af00      	add	r7, sp, #0
    7fbe:	6078      	str	r0, [r7, #4]
    7fc0:	000a      	movs	r2, r1
    7fc2:	1cbb      	adds	r3, r7, #2
    7fc4:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7fc6:	687b      	ldr	r3, [r7, #4]
    7fc8:	681b      	ldr	r3, [r3, #0]
    7fca:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	0018      	movs	r0, r3
    7fd0:	4b0a      	ldr	r3, [pc, #40]	; (7ffc <spi_write+0x44>)
    7fd2:	4798      	blx	r3
    7fd4:	0003      	movs	r3, r0
    7fd6:	001a      	movs	r2, r3
    7fd8:	2301      	movs	r3, #1
    7fda:	4053      	eors	r3, r2
    7fdc:	b2db      	uxtb	r3, r3
    7fde:	2b00      	cmp	r3, #0
    7fe0:	d001      	beq.n	7fe6 <spi_write+0x2e>
		return STATUS_BUSY;
    7fe2:	2305      	movs	r3, #5
    7fe4:	e006      	b.n	7ff4 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7fe6:	1cbb      	adds	r3, r7, #2
    7fe8:	881b      	ldrh	r3, [r3, #0]
    7fea:	05db      	lsls	r3, r3, #23
    7fec:	0dda      	lsrs	r2, r3, #23
    7fee:	68fb      	ldr	r3, [r7, #12]
    7ff0:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    7ff2:	2300      	movs	r3, #0
}
    7ff4:	0018      	movs	r0, r3
    7ff6:	46bd      	mov	sp, r7
    7ff8:	b004      	add	sp, #16
    7ffa:	bd80      	pop	{r7, pc}
    7ffc:	00007f69 	.word	0x00007f69

00008000 <spi_read>:
{
    8000:	b580      	push	{r7, lr}
    8002:	b084      	sub	sp, #16
    8004:	af00      	add	r7, sp, #0
    8006:	6078      	str	r0, [r7, #4]
    8008:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    800a:	687b      	ldr	r3, [r7, #4]
    800c:	681b      	ldr	r3, [r3, #0]
    800e:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    8010:	687b      	ldr	r3, [r7, #4]
    8012:	0018      	movs	r0, r3
    8014:	4b1d      	ldr	r3, [pc, #116]	; (808c <spi_read+0x8c>)
    8016:	4798      	blx	r3
    8018:	0003      	movs	r3, r0
    801a:	001a      	movs	r2, r3
    801c:	2301      	movs	r3, #1
    801e:	4053      	eors	r3, r2
    8020:	b2db      	uxtb	r3, r3
    8022:	2b00      	cmp	r3, #0
    8024:	d001      	beq.n	802a <spi_read+0x2a>
		return STATUS_ERR_IO;
    8026:	2310      	movs	r3, #16
    8028:	e02c      	b.n	8084 <spi_read+0x84>
	enum status_code retval = STATUS_OK;
    802a:	230f      	movs	r3, #15
    802c:	18fb      	adds	r3, r7, r3
    802e:	2200      	movs	r2, #0
    8030:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8032:	68bb      	ldr	r3, [r7, #8]
    8034:	8b5b      	ldrh	r3, [r3, #26]
    8036:	b29b      	uxth	r3, r3
    8038:	001a      	movs	r2, r3
    803a:	2304      	movs	r3, #4
    803c:	4013      	ands	r3, r2
    803e:	d00b      	beq.n	8058 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
    8040:	230f      	movs	r3, #15
    8042:	18fb      	adds	r3, r7, r3
    8044:	221e      	movs	r2, #30
    8046:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    8048:	68bb      	ldr	r3, [r7, #8]
    804a:	8b5b      	ldrh	r3, [r3, #26]
    804c:	b29b      	uxth	r3, r3
    804e:	2204      	movs	r2, #4
    8050:	4313      	orrs	r3, r2
    8052:	b29a      	uxth	r2, r3
    8054:	68bb      	ldr	r3, [r7, #8]
    8056:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8058:	687b      	ldr	r3, [r7, #4]
    805a:	799b      	ldrb	r3, [r3, #6]
    805c:	2b01      	cmp	r3, #1
    805e:	d108      	bne.n	8072 <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8060:	68bb      	ldr	r3, [r7, #8]
    8062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8064:	b29b      	uxth	r3, r3
    8066:	05db      	lsls	r3, r3, #23
    8068:	0ddb      	lsrs	r3, r3, #23
    806a:	b29a      	uxth	r2, r3
    806c:	683b      	ldr	r3, [r7, #0]
    806e:	801a      	strh	r2, [r3, #0]
    8070:	e005      	b.n	807e <spi_read+0x7e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8072:	68bb      	ldr	r3, [r7, #8]
    8074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8076:	b2db      	uxtb	r3, r3
    8078:	b29a      	uxth	r2, r3
    807a:	683b      	ldr	r3, [r7, #0]
    807c:	801a      	strh	r2, [r3, #0]
	return retval;
    807e:	230f      	movs	r3, #15
    8080:	18fb      	adds	r3, r7, r3
    8082:	781b      	ldrb	r3, [r3, #0]
}
    8084:	0018      	movs	r0, r3
    8086:	46bd      	mov	sp, r7
    8088:	b004      	add	sp, #16
    808a:	bd80      	pop	{r7, pc}
    808c:	00007f91 	.word	0x00007f91

00008090 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    8090:	b590      	push	{r4, r7, lr}
    8092:	b093      	sub	sp, #76	; 0x4c
    8094:	af00      	add	r7, sp, #0
    8096:	6078      	str	r0, [r7, #4]
    8098:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    809a:	687b      	ldr	r3, [r7, #4]
    809c:	681b      	ldr	r3, [r3, #0]
    809e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    80a0:	687b      	ldr	r3, [r7, #4]
    80a2:	681b      	ldr	r3, [r3, #0]
    80a4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    80a6:	231c      	movs	r3, #28
    80a8:	18fb      	adds	r3, r7, r3
    80aa:	0018      	movs	r0, r3
    80ac:	4b85      	ldr	r3, [pc, #532]	; (82c4 <_spi_set_config+0x234>)
    80ae:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    80b0:	231c      	movs	r3, #28
    80b2:	18fb      	adds	r3, r7, r3
    80b4:	2200      	movs	r2, #0
    80b6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    80b8:	683b      	ldr	r3, [r7, #0]
    80ba:	781b      	ldrb	r3, [r3, #0]
    80bc:	2b00      	cmp	r3, #0
    80be:	d103      	bne.n	80c8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    80c0:	231c      	movs	r3, #28
    80c2:	18fb      	adds	r3, r7, r3
    80c4:	2200      	movs	r2, #0
    80c6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    80c8:	683b      	ldr	r3, [r7, #0]
    80ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    80cc:	230c      	movs	r3, #12
    80ce:	18fb      	adds	r3, r7, r3
    80d0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    80d2:	683b      	ldr	r3, [r7, #0]
    80d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    80d6:	230c      	movs	r3, #12
    80d8:	18fb      	adds	r3, r7, r3
    80da:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    80dc:	683b      	ldr	r3, [r7, #0]
    80de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    80e0:	230c      	movs	r3, #12
    80e2:	18fb      	adds	r3, r7, r3
    80e4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    80e6:	683b      	ldr	r3, [r7, #0]
    80e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    80ea:	230c      	movs	r3, #12
    80ec:	18fb      	adds	r3, r7, r3
    80ee:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    80f0:	2347      	movs	r3, #71	; 0x47
    80f2:	18fb      	adds	r3, r7, r3
    80f4:	2200      	movs	r2, #0
    80f6:	701a      	strb	r2, [r3, #0]
    80f8:	e02c      	b.n	8154 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    80fa:	2347      	movs	r3, #71	; 0x47
    80fc:	18fb      	adds	r3, r7, r3
    80fe:	781a      	ldrb	r2, [r3, #0]
    8100:	230c      	movs	r3, #12
    8102:	18fb      	adds	r3, r7, r3
    8104:	0092      	lsls	r2, r2, #2
    8106:	58d3      	ldr	r3, [r2, r3]
    8108:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    810a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    810c:	2b00      	cmp	r3, #0
    810e:	d109      	bne.n	8124 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    8110:	2347      	movs	r3, #71	; 0x47
    8112:	18fb      	adds	r3, r7, r3
    8114:	781a      	ldrb	r2, [r3, #0]
    8116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8118:	0011      	movs	r1, r2
    811a:	0018      	movs	r0, r3
    811c:	4b6a      	ldr	r3, [pc, #424]	; (82c8 <_spi_set_config+0x238>)
    811e:	4798      	blx	r3
    8120:	0003      	movs	r3, r0
    8122:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    8124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8126:	3301      	adds	r3, #1
    8128:	d00d      	beq.n	8146 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    812a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    812c:	b2da      	uxtb	r2, r3
    812e:	231c      	movs	r3, #28
    8130:	18fb      	adds	r3, r7, r3
    8132:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    8134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8136:	0c1b      	lsrs	r3, r3, #16
    8138:	b2db      	uxtb	r3, r3
    813a:	221c      	movs	r2, #28
    813c:	18ba      	adds	r2, r7, r2
    813e:	0011      	movs	r1, r2
    8140:	0018      	movs	r0, r3
    8142:	4b62      	ldr	r3, [pc, #392]	; (82cc <_spi_set_config+0x23c>)
    8144:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    8146:	2347      	movs	r3, #71	; 0x47
    8148:	18fb      	adds	r3, r7, r3
    814a:	781a      	ldrb	r2, [r3, #0]
    814c:	2347      	movs	r3, #71	; 0x47
    814e:	18fb      	adds	r3, r7, r3
    8150:	3201      	adds	r2, #1
    8152:	701a      	strb	r2, [r3, #0]
    8154:	2347      	movs	r3, #71	; 0x47
    8156:	18fb      	adds	r3, r7, r3
    8158:	781b      	ldrb	r3, [r3, #0]
    815a:	2b03      	cmp	r3, #3
    815c:	d9cd      	bls.n	80fa <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    815e:	683b      	ldr	r3, [r7, #0]
    8160:	781a      	ldrb	r2, [r3, #0]
    8162:	687b      	ldr	r3, [r7, #4]
    8164:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    8166:	683b      	ldr	r3, [r7, #0]
    8168:	7c1a      	ldrb	r2, [r3, #16]
    816a:	687b      	ldr	r3, [r7, #4]
    816c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    816e:	683b      	ldr	r3, [r7, #0]
    8170:	7c9a      	ldrb	r2, [r3, #18]
    8172:	687b      	ldr	r3, [r7, #4]
    8174:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    8176:	683b      	ldr	r3, [r7, #0]
    8178:	7d1a      	ldrb	r2, [r3, #20]
    817a:	687b      	ldr	r3, [r7, #4]
    817c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    817e:	230a      	movs	r3, #10
    8180:	18fb      	adds	r3, r7, r3
    8182:	2200      	movs	r2, #0
    8184:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    8186:	2300      	movs	r3, #0
    8188:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    818a:	2300      	movs	r3, #0
    818c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    818e:	683b      	ldr	r3, [r7, #0]
    8190:	781b      	ldrb	r3, [r3, #0]
    8192:	2b01      	cmp	r3, #1
    8194:	d129      	bne.n	81ea <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8196:	687b      	ldr	r3, [r7, #4]
    8198:	681b      	ldr	r3, [r3, #0]
    819a:	0018      	movs	r0, r3
    819c:	4b4c      	ldr	r3, [pc, #304]	; (82d0 <_spi_set_config+0x240>)
    819e:	4798      	blx	r3
    81a0:	0003      	movs	r3, r0
    81a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    81a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81a6:	3314      	adds	r3, #20
    81a8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    81aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    81ac:	b2db      	uxtb	r3, r3
    81ae:	0018      	movs	r0, r3
    81b0:	4b48      	ldr	r3, [pc, #288]	; (82d4 <_spi_set_config+0x244>)
    81b2:	4798      	blx	r3
    81b4:	0003      	movs	r3, r0
    81b6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    81b8:	683b      	ldr	r3, [r7, #0]
    81ba:	699b      	ldr	r3, [r3, #24]
    81bc:	2223      	movs	r2, #35	; 0x23
    81be:	18bc      	adds	r4, r7, r2
    81c0:	220a      	movs	r2, #10
    81c2:	18ba      	adds	r2, r7, r2
    81c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    81c6:	0018      	movs	r0, r3
    81c8:	4b43      	ldr	r3, [pc, #268]	; (82d8 <_spi_set_config+0x248>)
    81ca:	4798      	blx	r3
    81cc:	0003      	movs	r3, r0
    81ce:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    81d0:	2323      	movs	r3, #35	; 0x23
    81d2:	18fb      	adds	r3, r7, r3
    81d4:	781b      	ldrb	r3, [r3, #0]
    81d6:	2b00      	cmp	r3, #0
    81d8:	d001      	beq.n	81de <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    81da:	2317      	movs	r3, #23
    81dc:	e06d      	b.n	82ba <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    81de:	230a      	movs	r3, #10
    81e0:	18fb      	adds	r3, r7, r3
    81e2:	881b      	ldrh	r3, [r3, #0]
    81e4:	b2da      	uxtb	r2, r3
    81e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    81e8:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    81ea:	683b      	ldr	r3, [r7, #0]
    81ec:	781b      	ldrb	r3, [r3, #0]
    81ee:	2b00      	cmp	r3, #0
    81f0:	d11a      	bne.n	8228 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    81f2:	683b      	ldr	r3, [r7, #0]
    81f4:	699b      	ldr	r3, [r3, #24]
    81f6:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    81f8:	683b      	ldr	r3, [r7, #0]
    81fa:	8b9b      	ldrh	r3, [r3, #28]
    81fc:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    81fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    8202:	683a      	ldr	r2, [r7, #0]
    8204:	7f92      	ldrb	r2, [r2, #30]
    8206:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    8208:	683a      	ldr	r2, [r7, #0]
    820a:	7fd2      	ldrb	r2, [r2, #31]
    820c:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    820e:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
    8210:	431a      	orrs	r2, r3
    8212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8214:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
    8216:	683b      	ldr	r3, [r7, #0]
    8218:	2220      	movs	r2, #32
    821a:	5c9b      	ldrb	r3, [r3, r2]
    821c:	2b00      	cmp	r3, #0
    821e:	d003      	beq.n	8228 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    8220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8222:	2240      	movs	r2, #64	; 0x40
    8224:	4313      	orrs	r3, r2
    8226:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    8228:	683b      	ldr	r3, [r7, #0]
    822a:	685b      	ldr	r3, [r3, #4]
    822c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    822e:	4313      	orrs	r3, r2
    8230:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    8232:	683b      	ldr	r3, [r7, #0]
    8234:	689b      	ldr	r3, [r3, #8]
    8236:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8238:	4313      	orrs	r3, r2
    823a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    823c:	683b      	ldr	r3, [r7, #0]
    823e:	68db      	ldr	r3, [r3, #12]
    8240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8242:	4313      	orrs	r3, r2
    8244:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    8246:	683b      	ldr	r3, [r7, #0]
    8248:	7c1b      	ldrb	r3, [r3, #16]
    824a:	001a      	movs	r2, r3
    824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    824e:	4313      	orrs	r3, r2
    8250:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    8252:	683b      	ldr	r3, [r7, #0]
    8254:	7c5b      	ldrb	r3, [r3, #17]
    8256:	2b00      	cmp	r3, #0
    8258:	d103      	bne.n	8262 <_spi_set_config+0x1d2>
    825a:	4b20      	ldr	r3, [pc, #128]	; (82dc <_spi_set_config+0x24c>)
    825c:	4798      	blx	r3
    825e:	1e03      	subs	r3, r0, #0
    8260:	d003      	beq.n	826a <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    8262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8264:	2280      	movs	r2, #128	; 0x80
    8266:	4313      	orrs	r3, r2
    8268:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    826a:	683b      	ldr	r3, [r7, #0]
    826c:	7c9b      	ldrb	r3, [r3, #18]
    826e:	2b00      	cmp	r3, #0
    8270:	d004      	beq.n	827c <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    8272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8274:	2280      	movs	r2, #128	; 0x80
    8276:	0292      	lsls	r2, r2, #10
    8278:	4313      	orrs	r3, r2
    827a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    827c:	683b      	ldr	r3, [r7, #0]
    827e:	7cdb      	ldrb	r3, [r3, #19]
    8280:	2b00      	cmp	r3, #0
    8282:	d004      	beq.n	828e <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    8284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8286:	2280      	movs	r2, #128	; 0x80
    8288:	0092      	lsls	r2, r2, #2
    828a:	4313      	orrs	r3, r2
    828c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    828e:	683b      	ldr	r3, [r7, #0]
    8290:	7d1b      	ldrb	r3, [r3, #20]
    8292:	2b00      	cmp	r3, #0
    8294:	d004      	beq.n	82a0 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    8296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8298:	2280      	movs	r2, #128	; 0x80
    829a:	0192      	lsls	r2, r2, #6
    829c:	4313      	orrs	r3, r2
    829e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    82a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    82a2:	681a      	ldr	r2, [r3, #0]
    82a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    82a6:	431a      	orrs	r2, r3
    82a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    82aa:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    82ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    82ae:	685a      	ldr	r2, [r3, #4]
    82b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    82b2:	431a      	orrs	r2, r3
    82b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    82b6:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    82b8:	2300      	movs	r3, #0
}
    82ba:	0018      	movs	r0, r3
    82bc:	46bd      	mov	sp, r7
    82be:	b013      	add	sp, #76	; 0x4c
    82c0:	bd90      	pop	{r4, r7, pc}
    82c2:	46c0      	nop			; (mov r8, r8)
    82c4:	00007d59 	.word	0x00007d59
    82c8:	00008b81 	.word	0x00008b81
    82cc:	0000b1c9 	.word	0x0000b1c9
    82d0:	00008d3d 	.word	0x00008d3d
    82d4:	0000b001 	.word	0x0000b001
    82d8:	0000888b 	.word	0x0000888b
    82dc:	00007f49 	.word	0x00007f49

000082e0 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    82e0:	b590      	push	{r4, r7, lr}
    82e2:	b091      	sub	sp, #68	; 0x44
    82e4:	af00      	add	r7, sp, #0
    82e6:	6078      	str	r0, [r7, #4]
    82e8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    82ea:	687b      	ldr	r3, [r7, #4]
    82ec:	681b      	ldr	r3, [r3, #0]
    82ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	681b      	ldr	r3, [r3, #0]
    82f4:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    82f6:	683b      	ldr	r3, [r7, #0]
    82f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    82fa:	230c      	movs	r3, #12
    82fc:	18fb      	adds	r3, r7, r3
    82fe:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    8300:	683b      	ldr	r3, [r7, #0]
    8302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    8304:	230c      	movs	r3, #12
    8306:	18fb      	adds	r3, r7, r3
    8308:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
    830a:	683b      	ldr	r3, [r7, #0]
    830c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    830e:	230c      	movs	r3, #12
    8310:	18fb      	adds	r3, r7, r3
    8312:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
    8314:	683b      	ldr	r3, [r7, #0]
    8316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    8318:	230c      	movs	r3, #12
    831a:	18fb      	adds	r3, r7, r3
    831c:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    831e:	233f      	movs	r3, #63	; 0x3f
    8320:	18fb      	adds	r3, r7, r3
    8322:	2200      	movs	r2, #0
    8324:	701a      	strb	r2, [r3, #0]
    8326:	e030      	b.n	838a <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    8328:	233f      	movs	r3, #63	; 0x3f
    832a:	18fb      	adds	r3, r7, r3
    832c:	781a      	ldrb	r2, [r3, #0]
    832e:	230c      	movs	r3, #12
    8330:	18fb      	adds	r3, r7, r3
    8332:	0092      	lsls	r2, r2, #2
    8334:	58d3      	ldr	r3, [r2, r3]
    8336:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    8338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    833a:	2b00      	cmp	r3, #0
    833c:	d109      	bne.n	8352 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    833e:	233f      	movs	r3, #63	; 0x3f
    8340:	18fb      	adds	r3, r7, r3
    8342:	781a      	ldrb	r2, [r3, #0]
    8344:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8346:	0011      	movs	r1, r2
    8348:	0018      	movs	r0, r3
    834a:	4b6e      	ldr	r3, [pc, #440]	; (8504 <_spi_check_config+0x224>)
    834c:	4798      	blx	r3
    834e:	0003      	movs	r3, r0
    8350:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    8352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8354:	3301      	adds	r3, #1
    8356:	d010      	beq.n	837a <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    8358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    835a:	041b      	lsls	r3, r3, #16
    835c:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8360:	0c1b      	lsrs	r3, r3, #16
    8362:	b2db      	uxtb	r3, r3
    8364:	0018      	movs	r0, r3
    8366:	4b68      	ldr	r3, [pc, #416]	; (8508 <_spi_check_config+0x228>)
    8368:	4798      	blx	r3
    836a:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
    836c:	429c      	cmp	r4, r3
    836e:	d005      	beq.n	837c <_spi_check_config+0x9c>
			module->hw = NULL;
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	2200      	movs	r2, #0
    8374:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    8376:	231c      	movs	r3, #28
    8378:	e0bf      	b.n	84fa <_spi_check_config+0x21a>
			continue;
    837a:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
    837c:	233f      	movs	r3, #63	; 0x3f
    837e:	18fb      	adds	r3, r7, r3
    8380:	781a      	ldrb	r2, [r3, #0]
    8382:	233f      	movs	r3, #63	; 0x3f
    8384:	18fb      	adds	r3, r7, r3
    8386:	3201      	adds	r2, #1
    8388:	701a      	strb	r2, [r3, #0]
    838a:	233f      	movs	r3, #63	; 0x3f
    838c:	18fb      	adds	r3, r7, r3
    838e:	781b      	ldrb	r3, [r3, #0]
    8390:	2b03      	cmp	r3, #3
    8392:	d9c9      	bls.n	8328 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    8394:	2013      	movs	r0, #19
    8396:	4b5d      	ldr	r3, [pc, #372]	; (850c <_spi_check_config+0x22c>)
    8398:	4798      	blx	r3
    839a:	0003      	movs	r3, r0
    839c:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    839e:	2300      	movs	r3, #0
    83a0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    83a2:	2300      	movs	r3, #0
    83a4:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    83a6:	2300      	movs	r3, #0
    83a8:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    83aa:	683b      	ldr	r3, [r7, #0]
    83ac:	781b      	ldrb	r3, [r3, #0]
    83ae:	2b01      	cmp	r3, #1
    83b0:	d121      	bne.n	83f6 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
    83b2:	683b      	ldr	r3, [r7, #0]
    83b4:	699b      	ldr	r3, [r3, #24]
    83b6:	221f      	movs	r2, #31
    83b8:	18bc      	adds	r4, r7, r2
    83ba:	220a      	movs	r2, #10
    83bc:	18ba      	adds	r2, r7, r2
    83be:	6a79      	ldr	r1, [r7, #36]	; 0x24
    83c0:	0018      	movs	r0, r3
    83c2:	4b53      	ldr	r3, [pc, #332]	; (8510 <_spi_check_config+0x230>)
    83c4:	4798      	blx	r3
    83c6:	0003      	movs	r3, r0
    83c8:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    83ca:	231f      	movs	r3, #31
    83cc:	18fb      	adds	r3, r7, r3
    83ce:	781b      	ldrb	r3, [r3, #0]
    83d0:	2b00      	cmp	r3, #0
    83d2:	d001      	beq.n	83d8 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    83d4:	2317      	movs	r3, #23
    83d6:	e090      	b.n	84fa <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    83d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83da:	7b1b      	ldrb	r3, [r3, #12]
    83dc:	b2da      	uxtb	r2, r3
    83de:	230a      	movs	r3, #10
    83e0:	18fb      	adds	r3, r7, r3
    83e2:	881b      	ldrh	r3, [r3, #0]
    83e4:	b2db      	uxtb	r3, r3
    83e6:	429a      	cmp	r2, r3
    83e8:	d001      	beq.n	83ee <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
    83ea:	231c      	movs	r3, #28
    83ec:	e085      	b.n	84fa <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    83ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    83f0:	220c      	movs	r2, #12
    83f2:	4313      	orrs	r3, r2
    83f4:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    83f6:	683b      	ldr	r3, [r7, #0]
    83f8:	781b      	ldrb	r3, [r3, #0]
    83fa:	2b00      	cmp	r3, #0
    83fc:	d129      	bne.n	8452 <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    83fe:	683b      	ldr	r3, [r7, #0]
    8400:	699b      	ldr	r3, [r3, #24]
    8402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8404:	4313      	orrs	r3, r2
    8406:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    8408:	683b      	ldr	r3, [r7, #0]
    840a:	8b9b      	ldrh	r3, [r3, #28]
    840c:	001a      	movs	r2, r3
    840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8410:	4313      	orrs	r3, r2
    8412:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    8414:	683b      	ldr	r3, [r7, #0]
    8416:	7f9b      	ldrb	r3, [r3, #30]
    8418:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    841a:	683b      	ldr	r3, [r7, #0]
    841c:	7fdb      	ldrb	r3, [r3, #31]
    841e:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    8420:	4313      	orrs	r3, r2
    8422:	001a      	movs	r2, r3
    8424:	6a3b      	ldr	r3, [r7, #32]
    8426:	4313      	orrs	r3, r2
    8428:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
    842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    842c:	681a      	ldr	r2, [r3, #0]
    842e:	6a3b      	ldr	r3, [r7, #32]
    8430:	429a      	cmp	r2, r3
    8432:	d001      	beq.n	8438 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    8434:	231c      	movs	r3, #28
    8436:	e060      	b.n	84fa <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
    8438:	683b      	ldr	r3, [r7, #0]
    843a:	2220      	movs	r2, #32
    843c:	5c9b      	ldrb	r3, [r3, r2]
    843e:	2b00      	cmp	r3, #0
    8440:	d003      	beq.n	844a <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    8442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8444:	2240      	movs	r2, #64	; 0x40
    8446:	4313      	orrs	r3, r2
    8448:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    844c:	2208      	movs	r2, #8
    844e:	4313      	orrs	r3, r2
    8450:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    8452:	683b      	ldr	r3, [r7, #0]
    8454:	685b      	ldr	r3, [r3, #4]
    8456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8458:	4313      	orrs	r3, r2
    845a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    845c:	683b      	ldr	r3, [r7, #0]
    845e:	689b      	ldr	r3, [r3, #8]
    8460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8462:	4313      	orrs	r3, r2
    8464:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    8466:	683b      	ldr	r3, [r7, #0]
    8468:	68db      	ldr	r3, [r3, #12]
    846a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    846c:	4313      	orrs	r3, r2
    846e:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    8470:	683b      	ldr	r3, [r7, #0]
    8472:	7c1b      	ldrb	r3, [r3, #16]
    8474:	001a      	movs	r2, r3
    8476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8478:	4313      	orrs	r3, r2
    847a:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    847c:	683b      	ldr	r3, [r7, #0]
    847e:	7c5b      	ldrb	r3, [r3, #17]
    8480:	2b00      	cmp	r3, #0
    8482:	d003      	beq.n	848c <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    8484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8486:	2280      	movs	r2, #128	; 0x80
    8488:	4313      	orrs	r3, r2
    848a:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    848c:	683b      	ldr	r3, [r7, #0]
    848e:	7c9b      	ldrb	r3, [r3, #18]
    8490:	2b00      	cmp	r3, #0
    8492:	d004      	beq.n	849e <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    8494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8496:	2280      	movs	r2, #128	; 0x80
    8498:	0292      	lsls	r2, r2, #10
    849a:	4313      	orrs	r3, r2
    849c:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    849e:	683b      	ldr	r3, [r7, #0]
    84a0:	7cdb      	ldrb	r3, [r3, #19]
    84a2:	2b00      	cmp	r3, #0
    84a4:	d004      	beq.n	84b0 <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    84a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    84a8:	2280      	movs	r2, #128	; 0x80
    84aa:	0092      	lsls	r2, r2, #2
    84ac:	4313      	orrs	r3, r2
    84ae:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    84b0:	683b      	ldr	r3, [r7, #0]
    84b2:	7d1b      	ldrb	r3, [r3, #20]
    84b4:	2b00      	cmp	r3, #0
    84b6:	d004      	beq.n	84c2 <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    84b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    84ba:	2280      	movs	r2, #128	; 0x80
    84bc:	0192      	lsls	r2, r2, #6
    84be:	4313      	orrs	r3, r2
    84c0:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    84c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84c4:	2202      	movs	r2, #2
    84c6:	4313      	orrs	r3, r2
    84c8:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    84ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84cc:	681a      	ldr	r2, [r3, #0]
    84ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84d0:	429a      	cmp	r2, r3
    84d2:	d10e      	bne.n	84f2 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    84d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84d6:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    84d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    84da:	429a      	cmp	r2, r3
    84dc:	d109      	bne.n	84f2 <_spi_check_config+0x212>
		module->mode           = config->mode;
    84de:	683b      	ldr	r3, [r7, #0]
    84e0:	781a      	ldrb	r2, [r3, #0]
    84e2:	687b      	ldr	r3, [r7, #4]
    84e4:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    84e6:	683b      	ldr	r3, [r7, #0]
    84e8:	7c1a      	ldrb	r2, [r3, #16]
    84ea:	687b      	ldr	r3, [r7, #4]
    84ec:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    84ee:	2300      	movs	r3, #0
    84f0:	e003      	b.n	84fa <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    84f2:	687b      	ldr	r3, [r7, #4]
    84f4:	2200      	movs	r2, #0
    84f6:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    84f8:	231c      	movs	r3, #28
}
    84fa:	0018      	movs	r0, r3
    84fc:	46bd      	mov	sp, r7
    84fe:	b011      	add	sp, #68	; 0x44
    8500:	bd90      	pop	{r4, r7, pc}
    8502:	46c0      	nop			; (mov r8, r8)
    8504:	00008b81 	.word	0x00008b81
    8508:	00007de1 	.word	0x00007de1
    850c:	0000b001 	.word	0x0000b001
    8510:	0000888b 	.word	0x0000888b

00008514 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    8514:	b580      	push	{r7, lr}
    8516:	b08a      	sub	sp, #40	; 0x28
    8518:	af00      	add	r7, sp, #0
    851a:	60f8      	str	r0, [r7, #12]
    851c:	60b9      	str	r1, [r7, #8]
    851e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    8520:	68fb      	ldr	r3, [r7, #12]
    8522:	68ba      	ldr	r2, [r7, #8]
    8524:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    8526:	68fb      	ldr	r3, [r7, #12]
    8528:	681b      	ldr	r3, [r3, #0]
    852a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    852e:	681b      	ldr	r3, [r3, #0]
    8530:	2202      	movs	r2, #2
    8532:	4013      	ands	r3, r2
    8534:	d007      	beq.n	8546 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    8536:	687a      	ldr	r2, [r7, #4]
    8538:	68fb      	ldr	r3, [r7, #12]
    853a:	0011      	movs	r1, r2
    853c:	0018      	movs	r0, r3
    853e:	4b2f      	ldr	r3, [pc, #188]	; (85fc <spi_init+0xe8>)
    8540:	4798      	blx	r3
    8542:	0003      	movs	r3, r0
    8544:	e055      	b.n	85f2 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    8546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8548:	681b      	ldr	r3, [r3, #0]
    854a:	2201      	movs	r2, #1
    854c:	4013      	ands	r3, r2
    854e:	d001      	beq.n	8554 <spi_init+0x40>
		return STATUS_BUSY;
    8550:	2305      	movs	r3, #5
    8552:	e04e      	b.n	85f2 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8554:	68fb      	ldr	r3, [r7, #12]
    8556:	681b      	ldr	r3, [r3, #0]
    8558:	0018      	movs	r0, r3
    855a:	4b29      	ldr	r3, [pc, #164]	; (8600 <spi_init+0xec>)
    855c:	4798      	blx	r3
    855e:	0003      	movs	r3, r0
    8560:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    8562:	6a3b      	ldr	r3, [r7, #32]
    8564:	3302      	adds	r3, #2
    8566:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8568:	6a3b      	ldr	r3, [r7, #32]
    856a:	3314      	adds	r3, #20
    856c:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    856e:	2201      	movs	r2, #1
    8570:	69fb      	ldr	r3, [r7, #28]
    8572:	409a      	lsls	r2, r3
    8574:	0013      	movs	r3, r2
    8576:	0019      	movs	r1, r3
    8578:	2002      	movs	r0, #2
    857a:	4b22      	ldr	r3, [pc, #136]	; (8604 <spi_init+0xf0>)
    857c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    857e:	2314      	movs	r3, #20
    8580:	18fb      	adds	r3, r7, r3
    8582:	0018      	movs	r0, r3
    8584:	4b20      	ldr	r3, [pc, #128]	; (8608 <spi_init+0xf4>)
    8586:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    8588:	687b      	ldr	r3, [r7, #4]
    858a:	2224      	movs	r2, #36	; 0x24
    858c:	5c9a      	ldrb	r2, [r3, r2]
    858e:	2314      	movs	r3, #20
    8590:	18fb      	adds	r3, r7, r3
    8592:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    8594:	69bb      	ldr	r3, [r7, #24]
    8596:	b2db      	uxtb	r3, r3
    8598:	2214      	movs	r2, #20
    859a:	18ba      	adds	r2, r7, r2
    859c:	0011      	movs	r1, r2
    859e:	0018      	movs	r0, r3
    85a0:	4b1a      	ldr	r3, [pc, #104]	; (860c <spi_init+0xf8>)
    85a2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    85a4:	69bb      	ldr	r3, [r7, #24]
    85a6:	b2db      	uxtb	r3, r3
    85a8:	0018      	movs	r0, r3
    85aa:	4b19      	ldr	r3, [pc, #100]	; (8610 <spi_init+0xfc>)
    85ac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    85ae:	687b      	ldr	r3, [r7, #4]
    85b0:	2224      	movs	r2, #36	; 0x24
    85b2:	5c9b      	ldrb	r3, [r3, r2]
    85b4:	2100      	movs	r1, #0
    85b6:	0018      	movs	r0, r3
    85b8:	4b16      	ldr	r3, [pc, #88]	; (8614 <spi_init+0x100>)
    85ba:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	781b      	ldrb	r3, [r3, #0]
    85c0:	2b01      	cmp	r3, #1
    85c2:	d105      	bne.n	85d0 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    85c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85c6:	681b      	ldr	r3, [r3, #0]
    85c8:	220c      	movs	r2, #12
    85ca:	431a      	orrs	r2, r3
    85cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85ce:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    85d0:	687b      	ldr	r3, [r7, #4]
    85d2:	781b      	ldrb	r3, [r3, #0]
    85d4:	2b00      	cmp	r3, #0
    85d6:	d105      	bne.n	85e4 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    85d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85da:	681b      	ldr	r3, [r3, #0]
    85dc:	2208      	movs	r2, #8
    85de:	431a      	orrs	r2, r3
    85e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85e2:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    85e4:	687a      	ldr	r2, [r7, #4]
    85e6:	68fb      	ldr	r3, [r7, #12]
    85e8:	0011      	movs	r1, r2
    85ea:	0018      	movs	r0, r3
    85ec:	4b0a      	ldr	r3, [pc, #40]	; (8618 <spi_init+0x104>)
    85ee:	4798      	blx	r3
    85f0:	0003      	movs	r3, r0
}
    85f2:	0018      	movs	r0, r3
    85f4:	46bd      	mov	sp, r7
    85f6:	b00a      	add	sp, #40	; 0x28
    85f8:	bd80      	pop	{r7, pc}
    85fa:	46c0      	nop			; (mov r8, r8)
    85fc:	000082e1 	.word	0x000082e1
    8600:	00008d3d 	.word	0x00008d3d
    8604:	00007eed 	.word	0x00007eed
    8608:	00007ed5 	.word	0x00007ed5
    860c:	0000aedd 	.word	0x0000aedd
    8610:	0000af21 	.word	0x0000af21
    8614:	00008af5 	.word	0x00008af5
    8618:	00008091 	.word	0x00008091

0000861c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    861c:	b580      	push	{r7, lr}
    861e:	b086      	sub	sp, #24
    8620:	af00      	add	r7, sp, #0
    8622:	60f8      	str	r0, [r7, #12]
    8624:	60b9      	str	r1, [r7, #8]
    8626:	1dfb      	adds	r3, r7, #7
    8628:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    862a:	68fb      	ldr	r3, [r7, #12]
    862c:	795b      	ldrb	r3, [r3, #5]
    862e:	2b01      	cmp	r3, #1
    8630:	d001      	beq.n	8636 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    8632:	2315      	movs	r3, #21
    8634:	e05c      	b.n	86f0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    8636:	68fb      	ldr	r3, [r7, #12]
    8638:	7a1b      	ldrb	r3, [r3, #8]
    863a:	2201      	movs	r2, #1
    863c:	4053      	eors	r3, r2
    863e:	b2db      	uxtb	r3, r3
    8640:	2b00      	cmp	r3, #0
    8642:	d054      	beq.n	86ee <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    8644:	1dfb      	adds	r3, r7, #7
    8646:	781b      	ldrb	r3, [r3, #0]
    8648:	2b00      	cmp	r3, #0
    864a:	d04a      	beq.n	86e2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    864c:	68bb      	ldr	r3, [r7, #8]
    864e:	785b      	ldrb	r3, [r3, #1]
    8650:	2b00      	cmp	r3, #0
    8652:	d03f      	beq.n	86d4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    8654:	68fb      	ldr	r3, [r7, #12]
    8656:	0018      	movs	r0, r3
    8658:	4b27      	ldr	r3, [pc, #156]	; (86f8 <spi_select_slave+0xdc>)
    865a:	4798      	blx	r3
    865c:	0003      	movs	r3, r0
    865e:	001a      	movs	r2, r3
    8660:	2301      	movs	r3, #1
    8662:	4053      	eors	r3, r2
    8664:	b2db      	uxtb	r3, r3
    8666:	2b00      	cmp	r3, #0
    8668:	d007      	beq.n	867a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    866a:	68bb      	ldr	r3, [r7, #8]
    866c:	781b      	ldrb	r3, [r3, #0]
    866e:	2101      	movs	r1, #1
    8670:	0018      	movs	r0, r3
    8672:	4b22      	ldr	r3, [pc, #136]	; (86fc <spi_select_slave+0xe0>)
    8674:	4798      	blx	r3
					return STATUS_BUSY;
    8676:	2305      	movs	r3, #5
    8678:	e03a      	b.n	86f0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    867a:	68bb      	ldr	r3, [r7, #8]
    867c:	781b      	ldrb	r3, [r3, #0]
    867e:	2100      	movs	r1, #0
    8680:	0018      	movs	r0, r3
    8682:	4b1e      	ldr	r3, [pc, #120]	; (86fc <spi_select_slave+0xe0>)
    8684:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    8686:	68bb      	ldr	r3, [r7, #8]
    8688:	789b      	ldrb	r3, [r3, #2]
    868a:	b29a      	uxth	r2, r3
    868c:	68fb      	ldr	r3, [r7, #12]
    868e:	0011      	movs	r1, r2
    8690:	0018      	movs	r0, r3
    8692:	4b1b      	ldr	r3, [pc, #108]	; (8700 <spi_select_slave+0xe4>)
    8694:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    8696:	68fb      	ldr	r3, [r7, #12]
    8698:	79db      	ldrb	r3, [r3, #7]
    869a:	2201      	movs	r2, #1
    869c:	4053      	eors	r3, r2
    869e:	b2db      	uxtb	r3, r3
    86a0:	2b00      	cmp	r3, #0
    86a2:	d024      	beq.n	86ee <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    86a4:	46c0      	nop			; (mov r8, r8)
    86a6:	68fb      	ldr	r3, [r7, #12]
    86a8:	0018      	movs	r0, r3
    86aa:	4b16      	ldr	r3, [pc, #88]	; (8704 <spi_select_slave+0xe8>)
    86ac:	4798      	blx	r3
    86ae:	0003      	movs	r3, r0
    86b0:	001a      	movs	r2, r3
    86b2:	2301      	movs	r3, #1
    86b4:	4053      	eors	r3, r2
    86b6:	b2db      	uxtb	r3, r3
    86b8:	2b00      	cmp	r3, #0
    86ba:	d1f4      	bne.n	86a6 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    86bc:	2316      	movs	r3, #22
    86be:	18fb      	adds	r3, r7, r3
    86c0:	2200      	movs	r2, #0
    86c2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    86c4:	2316      	movs	r3, #22
    86c6:	18fa      	adds	r2, r7, r3
    86c8:	68fb      	ldr	r3, [r7, #12]
    86ca:	0011      	movs	r1, r2
    86cc:	0018      	movs	r0, r3
    86ce:	4b0e      	ldr	r3, [pc, #56]	; (8708 <spi_select_slave+0xec>)
    86d0:	4798      	blx	r3
    86d2:	e00c      	b.n	86ee <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    86d4:	68bb      	ldr	r3, [r7, #8]
    86d6:	781b      	ldrb	r3, [r3, #0]
    86d8:	2100      	movs	r1, #0
    86da:	0018      	movs	r0, r3
    86dc:	4b07      	ldr	r3, [pc, #28]	; (86fc <spi_select_slave+0xe0>)
    86de:	4798      	blx	r3
    86e0:	e005      	b.n	86ee <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    86e2:	68bb      	ldr	r3, [r7, #8]
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	2101      	movs	r1, #1
    86e8:	0018      	movs	r0, r3
    86ea:	4b04      	ldr	r3, [pc, #16]	; (86fc <spi_select_slave+0xe0>)
    86ec:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    86ee:	2300      	movs	r3, #0
}
    86f0:	0018      	movs	r0, r3
    86f2:	46bd      	mov	sp, r7
    86f4:	b006      	add	sp, #24
    86f6:	bd80      	pop	{r7, pc}
    86f8:	00007f69 	.word	0x00007f69
    86fc:	00007e81 	.word	0x00007e81
    8700:	00007fb9 	.word	0x00007fb9
    8704:	00007f91 	.word	0x00007f91
    8708:	00008001 	.word	0x00008001

0000870c <system_pinmux_get_config_defaults>:
{
    870c:	b580      	push	{r7, lr}
    870e:	b082      	sub	sp, #8
    8710:	af00      	add	r7, sp, #0
    8712:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8714:	687b      	ldr	r3, [r7, #4]
    8716:	2280      	movs	r2, #128	; 0x80
    8718:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    871a:	687b      	ldr	r3, [r7, #4]
    871c:	2200      	movs	r2, #0
    871e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	2201      	movs	r2, #1
    8724:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8726:	687b      	ldr	r3, [r7, #4]
    8728:	2200      	movs	r2, #0
    872a:	70da      	strb	r2, [r3, #3]
}
    872c:	46c0      	nop			; (mov r8, r8)
    872e:	46bd      	mov	sp, r7
    8730:	b002      	add	sp, #8
    8732:	bd80      	pop	{r7, pc}

00008734 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    8734:	b580      	push	{r7, lr}
    8736:	b084      	sub	sp, #16
    8738:	af00      	add	r7, sp, #0
    873a:	0002      	movs	r2, r0
    873c:	6039      	str	r1, [r7, #0]
    873e:	1dfb      	adds	r3, r7, #7
    8740:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    8742:	230c      	movs	r3, #12
    8744:	18fb      	adds	r3, r7, r3
    8746:	0018      	movs	r0, r3
    8748:	4b10      	ldr	r3, [pc, #64]	; (878c <port_pin_set_config+0x58>)
    874a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    874c:	230c      	movs	r3, #12
    874e:	18fb      	adds	r3, r7, r3
    8750:	2280      	movs	r2, #128	; 0x80
    8752:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    8754:	683b      	ldr	r3, [r7, #0]
    8756:	781a      	ldrb	r2, [r3, #0]
    8758:	230c      	movs	r3, #12
    875a:	18fb      	adds	r3, r7, r3
    875c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    875e:	683b      	ldr	r3, [r7, #0]
    8760:	785a      	ldrb	r2, [r3, #1]
    8762:	230c      	movs	r3, #12
    8764:	18fb      	adds	r3, r7, r3
    8766:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    8768:	683b      	ldr	r3, [r7, #0]
    876a:	789a      	ldrb	r2, [r3, #2]
    876c:	230c      	movs	r3, #12
    876e:	18fb      	adds	r3, r7, r3
    8770:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    8772:	230c      	movs	r3, #12
    8774:	18fa      	adds	r2, r7, r3
    8776:	1dfb      	adds	r3, r7, #7
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	0011      	movs	r1, r2
    877c:	0018      	movs	r0, r3
    877e:	4b04      	ldr	r3, [pc, #16]	; (8790 <port_pin_set_config+0x5c>)
    8780:	4798      	blx	r3
}
    8782:	46c0      	nop			; (mov r8, r8)
    8784:	46bd      	mov	sp, r7
    8786:	b004      	add	sp, #16
    8788:	bd80      	pop	{r7, pc}
    878a:	46c0      	nop			; (mov r8, r8)
    878c:	0000870d 	.word	0x0000870d
    8790:	0000b1c9 	.word	0x0000b1c9

00008794 <system_gclk_chan_get_config_defaults>:
{
    8794:	b580      	push	{r7, lr}
    8796:	b082      	sub	sp, #8
    8798:	af00      	add	r7, sp, #0
    879a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    879c:	687b      	ldr	r3, [r7, #4]
    879e:	2200      	movs	r2, #0
    87a0:	701a      	strb	r2, [r3, #0]
}
    87a2:	46c0      	nop			; (mov r8, r8)
    87a4:	46bd      	mov	sp, r7
    87a6:	b002      	add	sp, #8
    87a8:	bd80      	pop	{r7, pc}

000087aa <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    87aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    87ac:	b08d      	sub	sp, #52	; 0x34
    87ae:	af00      	add	r7, sp, #0
    87b0:	60b8      	str	r0, [r7, #8]
    87b2:	60f9      	str	r1, [r7, #12]
    87b4:	603a      	str	r2, [r7, #0]
    87b6:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    87b8:	2300      	movs	r3, #0
    87ba:	2400      	movs	r4, #0
    87bc:	623b      	str	r3, [r7, #32]
    87be:	627c      	str	r4, [r7, #36]	; 0x24
    87c0:	2300      	movs	r3, #0
    87c2:	2400      	movs	r4, #0
    87c4:	61bb      	str	r3, [r7, #24]
    87c6:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    87c8:	233f      	movs	r3, #63	; 0x3f
    87ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    87cc:	e053      	b.n	8876 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    87ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87d0:	3b20      	subs	r3, #32
    87d2:	2b00      	cmp	r3, #0
    87d4:	db04      	blt.n	87e0 <long_division+0x36>
    87d6:	2201      	movs	r2, #1
    87d8:	409a      	lsls	r2, r3
    87da:	0013      	movs	r3, r2
    87dc:	617b      	str	r3, [r7, #20]
    87de:	e00b      	b.n	87f8 <long_division+0x4e>
    87e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87e2:	2220      	movs	r2, #32
    87e4:	1ad3      	subs	r3, r2, r3
    87e6:	2201      	movs	r2, #1
    87e8:	40da      	lsrs	r2, r3
    87ea:	0013      	movs	r3, r2
    87ec:	2100      	movs	r1, #0
    87ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    87f0:	4091      	lsls	r1, r2
    87f2:	000a      	movs	r2, r1
    87f4:	4313      	orrs	r3, r2
    87f6:	617b      	str	r3, [r7, #20]
    87f8:	2201      	movs	r2, #1
    87fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87fc:	409a      	lsls	r2, r3
    87fe:	0013      	movs	r3, r2
    8800:	613b      	str	r3, [r7, #16]

		r = r << 1;
    8802:	69bb      	ldr	r3, [r7, #24]
    8804:	69fc      	ldr	r4, [r7, #28]
    8806:	18db      	adds	r3, r3, r3
    8808:	4164      	adcs	r4, r4
    880a:	61bb      	str	r3, [r7, #24]
    880c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    880e:	68bb      	ldr	r3, [r7, #8]
    8810:	693a      	ldr	r2, [r7, #16]
    8812:	401a      	ands	r2, r3
    8814:	0015      	movs	r5, r2
    8816:	68fb      	ldr	r3, [r7, #12]
    8818:	697a      	ldr	r2, [r7, #20]
    881a:	401a      	ands	r2, r3
    881c:	0016      	movs	r6, r2
    881e:	002b      	movs	r3, r5
    8820:	4333      	orrs	r3, r6
    8822:	d007      	beq.n	8834 <long_division+0x8a>
			r |= 0x01;
    8824:	69bb      	ldr	r3, [r7, #24]
    8826:	2201      	movs	r2, #1
    8828:	4313      	orrs	r3, r2
    882a:	61bb      	str	r3, [r7, #24]
    882c:	69fb      	ldr	r3, [r7, #28]
    882e:	2200      	movs	r2, #0
    8830:	4313      	orrs	r3, r2
    8832:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    8834:	687a      	ldr	r2, [r7, #4]
    8836:	69fb      	ldr	r3, [r7, #28]
    8838:	429a      	cmp	r2, r3
    883a:	d819      	bhi.n	8870 <long_division+0xc6>
    883c:	687a      	ldr	r2, [r7, #4]
    883e:	69fb      	ldr	r3, [r7, #28]
    8840:	429a      	cmp	r2, r3
    8842:	d103      	bne.n	884c <long_division+0xa2>
    8844:	683a      	ldr	r2, [r7, #0]
    8846:	69bb      	ldr	r3, [r7, #24]
    8848:	429a      	cmp	r2, r3
    884a:	d811      	bhi.n	8870 <long_division+0xc6>
			r = r - d;
    884c:	69b9      	ldr	r1, [r7, #24]
    884e:	69fa      	ldr	r2, [r7, #28]
    8850:	683b      	ldr	r3, [r7, #0]
    8852:	687c      	ldr	r4, [r7, #4]
    8854:	1ac9      	subs	r1, r1, r3
    8856:	41a2      	sbcs	r2, r4
    8858:	000b      	movs	r3, r1
    885a:	0014      	movs	r4, r2
    885c:	61bb      	str	r3, [r7, #24]
    885e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    8860:	6a3a      	ldr	r2, [r7, #32]
    8862:	693b      	ldr	r3, [r7, #16]
    8864:	4313      	orrs	r3, r2
    8866:	623b      	str	r3, [r7, #32]
    8868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    886a:	697b      	ldr	r3, [r7, #20]
    886c:	4313      	orrs	r3, r2
    886e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    8870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8872:	3b01      	subs	r3, #1
    8874:	62fb      	str	r3, [r7, #44]	; 0x2c
    8876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8878:	2b00      	cmp	r3, #0
    887a:	daa8      	bge.n	87ce <long_division+0x24>
		}
	}

	return q;
    887c:	6a3b      	ldr	r3, [r7, #32]
    887e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    8880:	0018      	movs	r0, r3
    8882:	0021      	movs	r1, r4
    8884:	46bd      	mov	sp, r7
    8886:	b00d      	add	sp, #52	; 0x34
    8888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000888a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    888a:	b580      	push	{r7, lr}
    888c:	b086      	sub	sp, #24
    888e:	af00      	add	r7, sp, #0
    8890:	60f8      	str	r0, [r7, #12]
    8892:	60b9      	str	r1, [r7, #8]
    8894:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    8896:	2316      	movs	r3, #22
    8898:	18fb      	adds	r3, r7, r3
    889a:	2200      	movs	r2, #0
    889c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    889e:	68bb      	ldr	r3, [r7, #8]
    88a0:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    88a2:	68bb      	ldr	r3, [r7, #8]
    88a4:	085a      	lsrs	r2, r3, #1
    88a6:	68fb      	ldr	r3, [r7, #12]
    88a8:	429a      	cmp	r2, r3
    88aa:	d201      	bcs.n	88b0 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    88ac:	2340      	movs	r3, #64	; 0x40
    88ae:	e026      	b.n	88fe <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    88b0:	68bb      	ldr	r3, [r7, #8]
    88b2:	085b      	lsrs	r3, r3, #1
    88b4:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    88b6:	e00a      	b.n	88ce <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    88b8:	693a      	ldr	r2, [r7, #16]
    88ba:	68fb      	ldr	r3, [r7, #12]
    88bc:	1ad3      	subs	r3, r2, r3
    88be:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    88c0:	2316      	movs	r3, #22
    88c2:	18fb      	adds	r3, r7, r3
    88c4:	881a      	ldrh	r2, [r3, #0]
    88c6:	2316      	movs	r3, #22
    88c8:	18fb      	adds	r3, r7, r3
    88ca:	3201      	adds	r2, #1
    88cc:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    88ce:	693a      	ldr	r2, [r7, #16]
    88d0:	68fb      	ldr	r3, [r7, #12]
    88d2:	429a      	cmp	r2, r3
    88d4:	d2f0      	bcs.n	88b8 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    88d6:	2316      	movs	r3, #22
    88d8:	18fb      	adds	r3, r7, r3
    88da:	2216      	movs	r2, #22
    88dc:	18ba      	adds	r2, r7, r2
    88de:	8812      	ldrh	r2, [r2, #0]
    88e0:	3a01      	subs	r2, #1
    88e2:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    88e4:	2316      	movs	r3, #22
    88e6:	18fb      	adds	r3, r7, r3
    88e8:	881b      	ldrh	r3, [r3, #0]
    88ea:	2bff      	cmp	r3, #255	; 0xff
    88ec:	d901      	bls.n	88f2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    88ee:	2340      	movs	r3, #64	; 0x40
    88f0:	e005      	b.n	88fe <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	2216      	movs	r2, #22
    88f6:	18ba      	adds	r2, r7, r2
    88f8:	8812      	ldrh	r2, [r2, #0]
    88fa:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    88fc:	2300      	movs	r3, #0
	}
}
    88fe:	0018      	movs	r0, r3
    8900:	46bd      	mov	sp, r7
    8902:	b006      	add	sp, #24
    8904:	bd80      	pop	{r7, pc}
	...

00008908 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    8908:	b5f0      	push	{r4, r5, r6, r7, lr}
    890a:	b09d      	sub	sp, #116	; 0x74
    890c:	af00      	add	r7, sp, #0
    890e:	63f8      	str	r0, [r7, #60]	; 0x3c
    8910:	63b9      	str	r1, [r7, #56]	; 0x38
    8912:	637a      	str	r2, [r7, #52]	; 0x34
    8914:	2233      	movs	r2, #51	; 0x33
    8916:	18ba      	adds	r2, r7, r2
    8918:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    891a:	2300      	movs	r3, #0
    891c:	2400      	movs	r4, #0
    891e:	65bb      	str	r3, [r7, #88]	; 0x58
    8920:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    8922:	2300      	movs	r3, #0
    8924:	2400      	movs	r4, #0
    8926:	653b      	str	r3, [r7, #80]	; 0x50
    8928:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    892a:	2300      	movs	r3, #0
    892c:	2400      	movs	r4, #0
    892e:	66bb      	str	r3, [r7, #104]	; 0x68
    8930:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    8932:	2300      	movs	r3, #0
    8934:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    8936:	2358      	movs	r3, #88	; 0x58
    8938:	2230      	movs	r2, #48	; 0x30
    893a:	4694      	mov	ip, r2
    893c:	44bc      	add	ip, r7
    893e:	4463      	add	r3, ip
    8940:	781a      	ldrb	r2, [r3, #0]
    8942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8944:	435a      	muls	r2, r3
    8946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8948:	429a      	cmp	r2, r3
    894a:	d901      	bls.n	8950 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    894c:	2340      	movs	r3, #64	; 0x40
    894e:	e0c6      	b.n	8ade <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    8950:	2333      	movs	r3, #51	; 0x33
    8952:	18fb      	adds	r3, r7, r3
    8954:	781b      	ldrb	r3, [r3, #0]
    8956:	2b00      	cmp	r3, #0
    8958:	d13d      	bne.n	89d6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    895a:	2358      	movs	r3, #88	; 0x58
    895c:	2230      	movs	r2, #48	; 0x30
    895e:	4694      	mov	ip, r2
    8960:	44bc      	add	ip, r7
    8962:	4463      	add	r3, ip
    8964:	781b      	ldrb	r3, [r3, #0]
    8966:	b2db      	uxtb	r3, r3
    8968:	613b      	str	r3, [r7, #16]
    896a:	2300      	movs	r3, #0
    896c:	617b      	str	r3, [r7, #20]
    896e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8970:	60bb      	str	r3, [r7, #8]
    8972:	2300      	movs	r3, #0
    8974:	60fb      	str	r3, [r7, #12]
    8976:	4c5c      	ldr	r4, [pc, #368]	; (8ae8 <_sercom_get_async_baud_val+0x1e0>)
    8978:	68ba      	ldr	r2, [r7, #8]
    897a:	68fb      	ldr	r3, [r7, #12]
    897c:	6938      	ldr	r0, [r7, #16]
    897e:	6979      	ldr	r1, [r7, #20]
    8980:	47a0      	blx	r4
    8982:	0003      	movs	r3, r0
    8984:	000c      	movs	r4, r1
    8986:	001b      	movs	r3, r3
    8988:	64fb      	str	r3, [r7, #76]	; 0x4c
    898a:	2300      	movs	r3, #0
    898c:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8990:	603b      	str	r3, [r7, #0]
    8992:	2300      	movs	r3, #0
    8994:	607b      	str	r3, [r7, #4]
    8996:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    8998:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    899a:	683a      	ldr	r2, [r7, #0]
    899c:	687b      	ldr	r3, [r7, #4]
    899e:	4c53      	ldr	r4, [pc, #332]	; (8aec <_sercom_get_async_baud_val+0x1e4>)
    89a0:	47a0      	blx	r4
    89a2:	0003      	movs	r3, r0
    89a4:	000c      	movs	r4, r1
    89a6:	65bb      	str	r3, [r7, #88]	; 0x58
    89a8:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    89aa:	2100      	movs	r1, #0
    89ac:	2201      	movs	r2, #1
    89ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    89b0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    89b2:	1ac9      	subs	r1, r1, r3
    89b4:	41a2      	sbcs	r2, r4
    89b6:	000b      	movs	r3, r1
    89b8:	0014      	movs	r4, r2
    89ba:	653b      	str	r3, [r7, #80]	; 0x50
    89bc:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    89be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    89c0:	0c1b      	lsrs	r3, r3, #16
    89c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    89c4:	0416      	lsls	r6, r2, #16
    89c6:	431e      	orrs	r6, r3
    89c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    89ca:	041d      	lsls	r5, r3, #16
    89cc:	0033      	movs	r3, r6
    89ce:	66bb      	str	r3, [r7, #104]	; 0x68
    89d0:	2300      	movs	r3, #0
    89d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    89d4:	e07d      	b.n	8ad2 <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    89d6:	2333      	movs	r3, #51	; 0x33
    89d8:	18fb      	adds	r3, r7, r3
    89da:	781b      	ldrb	r3, [r3, #0]
    89dc:	2b01      	cmp	r3, #1
    89de:	d000      	beq.n	89e2 <_sercom_get_async_baud_val+0xda>
    89e0:	e077      	b.n	8ad2 <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    89e2:	2337      	movs	r3, #55	; 0x37
    89e4:	2230      	movs	r2, #48	; 0x30
    89e6:	4694      	mov	ip, r2
    89e8:	44bc      	add	ip, r7
    89ea:	4463      	add	r3, ip
    89ec:	2200      	movs	r2, #0
    89ee:	701a      	strb	r2, [r3, #0]
    89f0:	e04e      	b.n	8a90 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    89f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89f4:	62bb      	str	r3, [r7, #40]	; 0x28
    89f6:	2300      	movs	r3, #0
    89f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    89fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    89fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    89fe:	0003      	movs	r3, r0
    8a00:	0f5b      	lsrs	r3, r3, #29
    8a02:	000a      	movs	r2, r1
    8a04:	00d2      	lsls	r2, r2, #3
    8a06:	4313      	orrs	r3, r2
    8a08:	64fb      	str	r3, [r7, #76]	; 0x4c
    8a0a:	0003      	movs	r3, r0
    8a0c:	00db      	lsls	r3, r3, #3
    8a0e:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    8a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a12:	623b      	str	r3, [r7, #32]
    8a14:	2300      	movs	r3, #0
    8a16:	627b      	str	r3, [r7, #36]	; 0x24
    8a18:	2358      	movs	r3, #88	; 0x58
    8a1a:	2230      	movs	r2, #48	; 0x30
    8a1c:	4694      	mov	ip, r2
    8a1e:	44bc      	add	ip, r7
    8a20:	4463      	add	r3, ip
    8a22:	781b      	ldrb	r3, [r3, #0]
    8a24:	b2db      	uxtb	r3, r3
    8a26:	61bb      	str	r3, [r7, #24]
    8a28:	2300      	movs	r3, #0
    8a2a:	61fb      	str	r3, [r7, #28]
    8a2c:	4c2e      	ldr	r4, [pc, #184]	; (8ae8 <_sercom_get_async_baud_val+0x1e0>)
    8a2e:	69ba      	ldr	r2, [r7, #24]
    8a30:	69fb      	ldr	r3, [r7, #28]
    8a32:	6a38      	ldr	r0, [r7, #32]
    8a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8a36:	47a0      	blx	r4
    8a38:	0003      	movs	r3, r0
    8a3a:	000c      	movs	r4, r1
    8a3c:	643b      	str	r3, [r7, #64]	; 0x40
    8a3e:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    8a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8a42:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    8a44:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    8a46:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    8a48:	001a      	movs	r2, r3
    8a4a:	0023      	movs	r3, r4
    8a4c:	4c27      	ldr	r4, [pc, #156]	; (8aec <_sercom_get_async_baud_val+0x1e4>)
    8a4e:	47a0      	blx	r4
    8a50:	0003      	movs	r3, r0
    8a52:	000c      	movs	r4, r1
    8a54:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    8a56:	2337      	movs	r3, #55	; 0x37
    8a58:	2230      	movs	r2, #48	; 0x30
    8a5a:	4694      	mov	ip, r2
    8a5c:	44bc      	add	ip, r7
    8a5e:	4463      	add	r3, ip
    8a60:	781b      	ldrb	r3, [r3, #0]
    8a62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    8a64:	1ad3      	subs	r3, r2, r3
    8a66:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    8a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    8a6a:	08db      	lsrs	r3, r3, #3
    8a6c:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    8a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    8a70:	4a1f      	ldr	r2, [pc, #124]	; (8af0 <_sercom_get_async_baud_val+0x1e8>)
    8a72:	4293      	cmp	r3, r2
    8a74:	d915      	bls.n	8aa2 <_sercom_get_async_baud_val+0x19a>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    8a76:	2337      	movs	r3, #55	; 0x37
    8a78:	2230      	movs	r2, #48	; 0x30
    8a7a:	4694      	mov	ip, r2
    8a7c:	44bc      	add	ip, r7
    8a7e:	4463      	add	r3, ip
    8a80:	781a      	ldrb	r2, [r3, #0]
    8a82:	2337      	movs	r3, #55	; 0x37
    8a84:	2130      	movs	r1, #48	; 0x30
    8a86:	468c      	mov	ip, r1
    8a88:	44bc      	add	ip, r7
    8a8a:	4463      	add	r3, ip
    8a8c:	3201      	adds	r2, #1
    8a8e:	701a      	strb	r2, [r3, #0]
    8a90:	2337      	movs	r3, #55	; 0x37
    8a92:	2230      	movs	r2, #48	; 0x30
    8a94:	4694      	mov	ip, r2
    8a96:	44bc      	add	ip, r7
    8a98:	4463      	add	r3, ip
    8a9a:	781b      	ldrb	r3, [r3, #0]
    8a9c:	2b07      	cmp	r3, #7
    8a9e:	d9a8      	bls.n	89f2 <_sercom_get_async_baud_val+0xea>
    8aa0:	e000      	b.n	8aa4 <_sercom_get_async_baud_val+0x19c>
				break;
    8aa2:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    8aa4:	2337      	movs	r3, #55	; 0x37
    8aa6:	2230      	movs	r2, #48	; 0x30
    8aa8:	4694      	mov	ip, r2
    8aaa:	44bc      	add	ip, r7
    8aac:	4463      	add	r3, ip
    8aae:	781b      	ldrb	r3, [r3, #0]
    8ab0:	2b08      	cmp	r3, #8
    8ab2:	d101      	bne.n	8ab8 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    8ab4:	2340      	movs	r3, #64	; 0x40
    8ab6:	e012      	b.n	8ade <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    8ab8:	2337      	movs	r3, #55	; 0x37
    8aba:	2230      	movs	r2, #48	; 0x30
    8abc:	4694      	mov	ip, r2
    8abe:	44bc      	add	ip, r7
    8ac0:	4463      	add	r3, ip
    8ac2:	781b      	ldrb	r3, [r3, #0]
    8ac4:	035b      	lsls	r3, r3, #13
    8ac6:	001a      	movs	r2, r3
    8ac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    8aca:	4313      	orrs	r3, r2
    8acc:	66bb      	str	r3, [r7, #104]	; 0x68
    8ace:	2300      	movs	r3, #0
    8ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    8ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    8ad4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    8ad6:	b29a      	uxth	r2, r3
    8ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8ada:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    8adc:	2300      	movs	r3, #0
}
    8ade:	0018      	movs	r0, r3
    8ae0:	46bd      	mov	sp, r7
    8ae2:	b01d      	add	sp, #116	; 0x74
    8ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ae6:	46c0      	nop			; (mov r8, r8)
    8ae8:	00010319 	.word	0x00010319
    8aec:	000087ab 	.word	0x000087ab
    8af0:	00001fff 	.word	0x00001fff

00008af4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    8af4:	b580      	push	{r7, lr}
    8af6:	b084      	sub	sp, #16
    8af8:	af00      	add	r7, sp, #0
    8afa:	0002      	movs	r2, r0
    8afc:	1dfb      	adds	r3, r7, #7
    8afe:	701a      	strb	r2, [r3, #0]
    8b00:	1dbb      	adds	r3, r7, #6
    8b02:	1c0a      	adds	r2, r1, #0
    8b04:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    8b06:	4b1a      	ldr	r3, [pc, #104]	; (8b70 <sercom_set_gclk_generator+0x7c>)
    8b08:	781b      	ldrb	r3, [r3, #0]
    8b0a:	2201      	movs	r2, #1
    8b0c:	4053      	eors	r3, r2
    8b0e:	b2db      	uxtb	r3, r3
    8b10:	2b00      	cmp	r3, #0
    8b12:	d103      	bne.n	8b1c <sercom_set_gclk_generator+0x28>
    8b14:	1dbb      	adds	r3, r7, #6
    8b16:	781b      	ldrb	r3, [r3, #0]
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d01b      	beq.n	8b54 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8b1c:	230c      	movs	r3, #12
    8b1e:	18fb      	adds	r3, r7, r3
    8b20:	0018      	movs	r0, r3
    8b22:	4b14      	ldr	r3, [pc, #80]	; (8b74 <sercom_set_gclk_generator+0x80>)
    8b24:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    8b26:	230c      	movs	r3, #12
    8b28:	18fb      	adds	r3, r7, r3
    8b2a:	1dfa      	adds	r2, r7, #7
    8b2c:	7812      	ldrb	r2, [r2, #0]
    8b2e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    8b30:	230c      	movs	r3, #12
    8b32:	18fb      	adds	r3, r7, r3
    8b34:	0019      	movs	r1, r3
    8b36:	2013      	movs	r0, #19
    8b38:	4b0f      	ldr	r3, [pc, #60]	; (8b78 <sercom_set_gclk_generator+0x84>)
    8b3a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    8b3c:	2013      	movs	r0, #19
    8b3e:	4b0f      	ldr	r3, [pc, #60]	; (8b7c <sercom_set_gclk_generator+0x88>)
    8b40:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    8b42:	4b0b      	ldr	r3, [pc, #44]	; (8b70 <sercom_set_gclk_generator+0x7c>)
    8b44:	1dfa      	adds	r2, r7, #7
    8b46:	7812      	ldrb	r2, [r2, #0]
    8b48:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    8b4a:	4b09      	ldr	r3, [pc, #36]	; (8b70 <sercom_set_gclk_generator+0x7c>)
    8b4c:	2201      	movs	r2, #1
    8b4e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    8b50:	2300      	movs	r3, #0
    8b52:	e008      	b.n	8b66 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    8b54:	4b06      	ldr	r3, [pc, #24]	; (8b70 <sercom_set_gclk_generator+0x7c>)
    8b56:	785b      	ldrb	r3, [r3, #1]
    8b58:	1dfa      	adds	r2, r7, #7
    8b5a:	7812      	ldrb	r2, [r2, #0]
    8b5c:	429a      	cmp	r2, r3
    8b5e:	d101      	bne.n	8b64 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    8b60:	2300      	movs	r3, #0
    8b62:	e000      	b.n	8b66 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    8b64:	231d      	movs	r3, #29
}
    8b66:	0018      	movs	r0, r3
    8b68:	46bd      	mov	sp, r7
    8b6a:	b004      	add	sp, #16
    8b6c:	bd80      	pop	{r7, pc}
    8b6e:	46c0      	nop			; (mov r8, r8)
    8b70:	200002a8 	.word	0x200002a8
    8b74:	00008795 	.word	0x00008795
    8b78:	0000aedd 	.word	0x0000aedd
    8b7c:	0000af21 	.word	0x0000af21

00008b80 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	b082      	sub	sp, #8
    8b84:	af00      	add	r7, sp, #0
    8b86:	6078      	str	r0, [r7, #4]
    8b88:	000a      	movs	r2, r1
    8b8a:	1cfb      	adds	r3, r7, #3
    8b8c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    8b8e:	687b      	ldr	r3, [r7, #4]
    8b90:	4a4d      	ldr	r2, [pc, #308]	; (8cc8 <_sercom_get_default_pad+0x148>)
    8b92:	4293      	cmp	r3, r2
    8b94:	d03f      	beq.n	8c16 <_sercom_get_default_pad+0x96>
    8b96:	4a4c      	ldr	r2, [pc, #304]	; (8cc8 <_sercom_get_default_pad+0x148>)
    8b98:	4293      	cmp	r3, r2
    8b9a:	d806      	bhi.n	8baa <_sercom_get_default_pad+0x2a>
    8b9c:	4a4b      	ldr	r2, [pc, #300]	; (8ccc <_sercom_get_default_pad+0x14c>)
    8b9e:	4293      	cmp	r3, r2
    8ba0:	d00f      	beq.n	8bc2 <_sercom_get_default_pad+0x42>
    8ba2:	4a4b      	ldr	r2, [pc, #300]	; (8cd0 <_sercom_get_default_pad+0x150>)
    8ba4:	4293      	cmp	r3, r2
    8ba6:	d021      	beq.n	8bec <_sercom_get_default_pad+0x6c>
    8ba8:	e089      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8baa:	4a4a      	ldr	r2, [pc, #296]	; (8cd4 <_sercom_get_default_pad+0x154>)
    8bac:	4293      	cmp	r3, r2
    8bae:	d100      	bne.n	8bb2 <_sercom_get_default_pad+0x32>
    8bb0:	e05b      	b.n	8c6a <_sercom_get_default_pad+0xea>
    8bb2:	4a49      	ldr	r2, [pc, #292]	; (8cd8 <_sercom_get_default_pad+0x158>)
    8bb4:	4293      	cmp	r3, r2
    8bb6:	d100      	bne.n	8bba <_sercom_get_default_pad+0x3a>
    8bb8:	e06c      	b.n	8c94 <_sercom_get_default_pad+0x114>
    8bba:	4a48      	ldr	r2, [pc, #288]	; (8cdc <_sercom_get_default_pad+0x15c>)
    8bbc:	4293      	cmp	r3, r2
    8bbe:	d03f      	beq.n	8c40 <_sercom_get_default_pad+0xc0>
    8bc0:	e07d      	b.n	8cbe <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    8bc2:	1cfb      	adds	r3, r7, #3
    8bc4:	781b      	ldrb	r3, [r3, #0]
    8bc6:	2b01      	cmp	r3, #1
    8bc8:	d00a      	beq.n	8be0 <_sercom_get_default_pad+0x60>
    8bca:	dc02      	bgt.n	8bd2 <_sercom_get_default_pad+0x52>
    8bcc:	2b00      	cmp	r3, #0
    8bce:	d005      	beq.n	8bdc <_sercom_get_default_pad+0x5c>
    8bd0:	e075      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8bd2:	2b02      	cmp	r3, #2
    8bd4:	d006      	beq.n	8be4 <_sercom_get_default_pad+0x64>
    8bd6:	2b03      	cmp	r3, #3
    8bd8:	d006      	beq.n	8be8 <_sercom_get_default_pad+0x68>
    8bda:	e070      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8bdc:	4b40      	ldr	r3, [pc, #256]	; (8ce0 <_sercom_get_default_pad+0x160>)
    8bde:	e06f      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8be0:	4b40      	ldr	r3, [pc, #256]	; (8ce4 <_sercom_get_default_pad+0x164>)
    8be2:	e06d      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8be4:	4b40      	ldr	r3, [pc, #256]	; (8ce8 <_sercom_get_default_pad+0x168>)
    8be6:	e06b      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8be8:	4b40      	ldr	r3, [pc, #256]	; (8cec <_sercom_get_default_pad+0x16c>)
    8bea:	e069      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8bec:	1cfb      	adds	r3, r7, #3
    8bee:	781b      	ldrb	r3, [r3, #0]
    8bf0:	2b01      	cmp	r3, #1
    8bf2:	d00a      	beq.n	8c0a <_sercom_get_default_pad+0x8a>
    8bf4:	dc02      	bgt.n	8bfc <_sercom_get_default_pad+0x7c>
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d005      	beq.n	8c06 <_sercom_get_default_pad+0x86>
    8bfa:	e060      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8bfc:	2b02      	cmp	r3, #2
    8bfe:	d006      	beq.n	8c0e <_sercom_get_default_pad+0x8e>
    8c00:	2b03      	cmp	r3, #3
    8c02:	d006      	beq.n	8c12 <_sercom_get_default_pad+0x92>
    8c04:	e05b      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8c06:	2303      	movs	r3, #3
    8c08:	e05a      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c0a:	4b39      	ldr	r3, [pc, #228]	; (8cf0 <_sercom_get_default_pad+0x170>)
    8c0c:	e058      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c0e:	4b39      	ldr	r3, [pc, #228]	; (8cf4 <_sercom_get_default_pad+0x174>)
    8c10:	e056      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c12:	4b39      	ldr	r3, [pc, #228]	; (8cf8 <_sercom_get_default_pad+0x178>)
    8c14:	e054      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c16:	1cfb      	adds	r3, r7, #3
    8c18:	781b      	ldrb	r3, [r3, #0]
    8c1a:	2b01      	cmp	r3, #1
    8c1c:	d00a      	beq.n	8c34 <_sercom_get_default_pad+0xb4>
    8c1e:	dc02      	bgt.n	8c26 <_sercom_get_default_pad+0xa6>
    8c20:	2b00      	cmp	r3, #0
    8c22:	d005      	beq.n	8c30 <_sercom_get_default_pad+0xb0>
    8c24:	e04b      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8c26:	2b02      	cmp	r3, #2
    8c28:	d006      	beq.n	8c38 <_sercom_get_default_pad+0xb8>
    8c2a:	2b03      	cmp	r3, #3
    8c2c:	d006      	beq.n	8c3c <_sercom_get_default_pad+0xbc>
    8c2e:	e046      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8c30:	4b32      	ldr	r3, [pc, #200]	; (8cfc <_sercom_get_default_pad+0x17c>)
    8c32:	e045      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c34:	4b32      	ldr	r3, [pc, #200]	; (8d00 <_sercom_get_default_pad+0x180>)
    8c36:	e043      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c38:	4b32      	ldr	r3, [pc, #200]	; (8d04 <_sercom_get_default_pad+0x184>)
    8c3a:	e041      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c3c:	4b32      	ldr	r3, [pc, #200]	; (8d08 <_sercom_get_default_pad+0x188>)
    8c3e:	e03f      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c40:	1cfb      	adds	r3, r7, #3
    8c42:	781b      	ldrb	r3, [r3, #0]
    8c44:	2b01      	cmp	r3, #1
    8c46:	d00a      	beq.n	8c5e <_sercom_get_default_pad+0xde>
    8c48:	dc02      	bgt.n	8c50 <_sercom_get_default_pad+0xd0>
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d005      	beq.n	8c5a <_sercom_get_default_pad+0xda>
    8c4e:	e036      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8c50:	2b02      	cmp	r3, #2
    8c52:	d006      	beq.n	8c62 <_sercom_get_default_pad+0xe2>
    8c54:	2b03      	cmp	r3, #3
    8c56:	d006      	beq.n	8c66 <_sercom_get_default_pad+0xe6>
    8c58:	e031      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8c5a:	4b2c      	ldr	r3, [pc, #176]	; (8d0c <_sercom_get_default_pad+0x18c>)
    8c5c:	e030      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c5e:	4b2c      	ldr	r3, [pc, #176]	; (8d10 <_sercom_get_default_pad+0x190>)
    8c60:	e02e      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c62:	4b2c      	ldr	r3, [pc, #176]	; (8d14 <_sercom_get_default_pad+0x194>)
    8c64:	e02c      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c66:	4b2c      	ldr	r3, [pc, #176]	; (8d18 <_sercom_get_default_pad+0x198>)
    8c68:	e02a      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c6a:	1cfb      	adds	r3, r7, #3
    8c6c:	781b      	ldrb	r3, [r3, #0]
    8c6e:	2b01      	cmp	r3, #1
    8c70:	d00a      	beq.n	8c88 <_sercom_get_default_pad+0x108>
    8c72:	dc02      	bgt.n	8c7a <_sercom_get_default_pad+0xfa>
    8c74:	2b00      	cmp	r3, #0
    8c76:	d005      	beq.n	8c84 <_sercom_get_default_pad+0x104>
    8c78:	e021      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8c7a:	2b02      	cmp	r3, #2
    8c7c:	d006      	beq.n	8c8c <_sercom_get_default_pad+0x10c>
    8c7e:	2b03      	cmp	r3, #3
    8c80:	d006      	beq.n	8c90 <_sercom_get_default_pad+0x110>
    8c82:	e01c      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8c84:	4b25      	ldr	r3, [pc, #148]	; (8d1c <_sercom_get_default_pad+0x19c>)
    8c86:	e01b      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c88:	4b25      	ldr	r3, [pc, #148]	; (8d20 <_sercom_get_default_pad+0x1a0>)
    8c8a:	e019      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c8c:	4b25      	ldr	r3, [pc, #148]	; (8d24 <_sercom_get_default_pad+0x1a4>)
    8c8e:	e017      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c90:	4b25      	ldr	r3, [pc, #148]	; (8d28 <_sercom_get_default_pad+0x1a8>)
    8c92:	e015      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8c94:	1cfb      	adds	r3, r7, #3
    8c96:	781b      	ldrb	r3, [r3, #0]
    8c98:	2b01      	cmp	r3, #1
    8c9a:	d00a      	beq.n	8cb2 <_sercom_get_default_pad+0x132>
    8c9c:	dc02      	bgt.n	8ca4 <_sercom_get_default_pad+0x124>
    8c9e:	2b00      	cmp	r3, #0
    8ca0:	d005      	beq.n	8cae <_sercom_get_default_pad+0x12e>
    8ca2:	e00c      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8ca4:	2b02      	cmp	r3, #2
    8ca6:	d006      	beq.n	8cb6 <_sercom_get_default_pad+0x136>
    8ca8:	2b03      	cmp	r3, #3
    8caa:	d006      	beq.n	8cba <_sercom_get_default_pad+0x13a>
    8cac:	e007      	b.n	8cbe <_sercom_get_default_pad+0x13e>
    8cae:	4b1f      	ldr	r3, [pc, #124]	; (8d2c <_sercom_get_default_pad+0x1ac>)
    8cb0:	e006      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8cb2:	4b1f      	ldr	r3, [pc, #124]	; (8d30 <_sercom_get_default_pad+0x1b0>)
    8cb4:	e004      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8cb6:	4b1f      	ldr	r3, [pc, #124]	; (8d34 <_sercom_get_default_pad+0x1b4>)
    8cb8:	e002      	b.n	8cc0 <_sercom_get_default_pad+0x140>
    8cba:	4b1f      	ldr	r3, [pc, #124]	; (8d38 <_sercom_get_default_pad+0x1b8>)
    8cbc:	e000      	b.n	8cc0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    8cbe:	2300      	movs	r3, #0
}
    8cc0:	0018      	movs	r0, r3
    8cc2:	46bd      	mov	sp, r7
    8cc4:	b002      	add	sp, #8
    8cc6:	bd80      	pop	{r7, pc}
    8cc8:	42001000 	.word	0x42001000
    8ccc:	42000800 	.word	0x42000800
    8cd0:	42000c00 	.word	0x42000c00
    8cd4:	42001800 	.word	0x42001800
    8cd8:	42001c00 	.word	0x42001c00
    8cdc:	42001400 	.word	0x42001400
    8ce0:	00040003 	.word	0x00040003
    8ce4:	00050003 	.word	0x00050003
    8ce8:	00060003 	.word	0x00060003
    8cec:	00070003 	.word	0x00070003
    8cf0:	00010003 	.word	0x00010003
    8cf4:	001e0003 	.word	0x001e0003
    8cf8:	001f0003 	.word	0x001f0003
    8cfc:	00080003 	.word	0x00080003
    8d00:	00090003 	.word	0x00090003
    8d04:	000a0003 	.word	0x000a0003
    8d08:	000b0003 	.word	0x000b0003
    8d0c:	00100003 	.word	0x00100003
    8d10:	00110003 	.word	0x00110003
    8d14:	00120003 	.word	0x00120003
    8d18:	00130003 	.word	0x00130003
    8d1c:	000c0003 	.word	0x000c0003
    8d20:	000d0003 	.word	0x000d0003
    8d24:	000e0003 	.word	0x000e0003
    8d28:	000f0003 	.word	0x000f0003
    8d2c:	00160003 	.word	0x00160003
    8d30:	00170003 	.word	0x00170003
    8d34:	00180003 	.word	0x00180003
    8d38:	00190003 	.word	0x00190003

00008d3c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    8d3c:	b590      	push	{r4, r7, lr}
    8d3e:	b08b      	sub	sp, #44	; 0x2c
    8d40:	af00      	add	r7, sp, #0
    8d42:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    8d44:	230c      	movs	r3, #12
    8d46:	18fb      	adds	r3, r7, r3
    8d48:	4a0f      	ldr	r2, [pc, #60]	; (8d88 <_sercom_get_sercom_inst_index+0x4c>)
    8d4a:	ca13      	ldmia	r2!, {r0, r1, r4}
    8d4c:	c313      	stmia	r3!, {r0, r1, r4}
    8d4e:	ca13      	ldmia	r2!, {r0, r1, r4}
    8d50:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8d52:	2300      	movs	r3, #0
    8d54:	627b      	str	r3, [r7, #36]	; 0x24
    8d56:	e00e      	b.n	8d76 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    8d58:	230c      	movs	r3, #12
    8d5a:	18fb      	adds	r3, r7, r3
    8d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8d5e:	0092      	lsls	r2, r2, #2
    8d60:	58d3      	ldr	r3, [r2, r3]
    8d62:	001a      	movs	r2, r3
    8d64:	687b      	ldr	r3, [r7, #4]
    8d66:	429a      	cmp	r2, r3
    8d68:	d102      	bne.n	8d70 <_sercom_get_sercom_inst_index+0x34>
			return i;
    8d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d6c:	b2db      	uxtb	r3, r3
    8d6e:	e006      	b.n	8d7e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d72:	3301      	adds	r3, #1
    8d74:	627b      	str	r3, [r7, #36]	; 0x24
    8d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d78:	2b05      	cmp	r3, #5
    8d7a:	d9ed      	bls.n	8d58 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    8d7c:	2300      	movs	r3, #0
}
    8d7e:	0018      	movs	r0, r3
    8d80:	46bd      	mov	sp, r7
    8d82:	b00b      	add	sp, #44	; 0x2c
    8d84:	bd90      	pop	{r4, r7, pc}
    8d86:	46c0      	nop			; (mov r8, r8)
    8d88:	00014820 	.word	0x00014820

00008d8c <system_gclk_chan_get_config_defaults>:
{
    8d8c:	b580      	push	{r7, lr}
    8d8e:	b082      	sub	sp, #8
    8d90:	af00      	add	r7, sp, #0
    8d92:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	2200      	movs	r2, #0
    8d98:	701a      	strb	r2, [r3, #0]
}
    8d9a:	46c0      	nop			; (mov r8, r8)
    8d9c:	46bd      	mov	sp, r7
    8d9e:	b002      	add	sp, #8
    8da0:	bd80      	pop	{r7, pc}

00008da2 <system_pinmux_get_config_defaults>:
{
    8da2:	b580      	push	{r7, lr}
    8da4:	b082      	sub	sp, #8
    8da6:	af00      	add	r7, sp, #0
    8da8:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8daa:	687b      	ldr	r3, [r7, #4]
    8dac:	2280      	movs	r2, #128	; 0x80
    8dae:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8db0:	687b      	ldr	r3, [r7, #4]
    8db2:	2200      	movs	r2, #0
    8db4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8db6:	687b      	ldr	r3, [r7, #4]
    8db8:	2201      	movs	r2, #1
    8dba:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8dbc:	687b      	ldr	r3, [r7, #4]
    8dbe:	2200      	movs	r2, #0
    8dc0:	70da      	strb	r2, [r3, #3]
}
    8dc2:	46c0      	nop			; (mov r8, r8)
    8dc4:	46bd      	mov	sp, r7
    8dc6:	b002      	add	sp, #8
    8dc8:	bd80      	pop	{r7, pc}
	...

00008dcc <system_apb_clock_set_mask>:
{
    8dcc:	b580      	push	{r7, lr}
    8dce:	b082      	sub	sp, #8
    8dd0:	af00      	add	r7, sp, #0
    8dd2:	0002      	movs	r2, r0
    8dd4:	6039      	str	r1, [r7, #0]
    8dd6:	1dfb      	adds	r3, r7, #7
    8dd8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8dda:	1dfb      	adds	r3, r7, #7
    8ddc:	781b      	ldrb	r3, [r3, #0]
    8dde:	2b01      	cmp	r3, #1
    8de0:	d00a      	beq.n	8df8 <system_apb_clock_set_mask+0x2c>
    8de2:	2b02      	cmp	r3, #2
    8de4:	d00f      	beq.n	8e06 <system_apb_clock_set_mask+0x3a>
    8de6:	2b00      	cmp	r3, #0
    8de8:	d114      	bne.n	8e14 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    8dea:	4b0e      	ldr	r3, [pc, #56]	; (8e24 <system_apb_clock_set_mask+0x58>)
    8dec:	4a0d      	ldr	r2, [pc, #52]	; (8e24 <system_apb_clock_set_mask+0x58>)
    8dee:	6991      	ldr	r1, [r2, #24]
    8df0:	683a      	ldr	r2, [r7, #0]
    8df2:	430a      	orrs	r2, r1
    8df4:	619a      	str	r2, [r3, #24]
			break;
    8df6:	e00f      	b.n	8e18 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    8df8:	4b0a      	ldr	r3, [pc, #40]	; (8e24 <system_apb_clock_set_mask+0x58>)
    8dfa:	4a0a      	ldr	r2, [pc, #40]	; (8e24 <system_apb_clock_set_mask+0x58>)
    8dfc:	69d1      	ldr	r1, [r2, #28]
    8dfe:	683a      	ldr	r2, [r7, #0]
    8e00:	430a      	orrs	r2, r1
    8e02:	61da      	str	r2, [r3, #28]
			break;
    8e04:	e008      	b.n	8e18 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    8e06:	4b07      	ldr	r3, [pc, #28]	; (8e24 <system_apb_clock_set_mask+0x58>)
    8e08:	4a06      	ldr	r2, [pc, #24]	; (8e24 <system_apb_clock_set_mask+0x58>)
    8e0a:	6a11      	ldr	r1, [r2, #32]
    8e0c:	683a      	ldr	r2, [r7, #0]
    8e0e:	430a      	orrs	r2, r1
    8e10:	621a      	str	r2, [r3, #32]
			break;
    8e12:	e001      	b.n	8e18 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    8e14:	2317      	movs	r3, #23
    8e16:	e000      	b.n	8e1a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    8e18:	2300      	movs	r3, #0
}
    8e1a:	0018      	movs	r0, r3
    8e1c:	46bd      	mov	sp, r7
    8e1e:	b002      	add	sp, #8
    8e20:	bd80      	pop	{r7, pc}
    8e22:	46c0      	nop			; (mov r8, r8)
    8e24:	40000400 	.word	0x40000400

00008e28 <system_is_debugger_present>:
{
    8e28:	b580      	push	{r7, lr}
    8e2a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    8e2c:	4b05      	ldr	r3, [pc, #20]	; (8e44 <system_is_debugger_present+0x1c>)
    8e2e:	789b      	ldrb	r3, [r3, #2]
    8e30:	b2db      	uxtb	r3, r3
    8e32:	001a      	movs	r2, r3
    8e34:	2302      	movs	r3, #2
    8e36:	4013      	ands	r3, r2
    8e38:	1e5a      	subs	r2, r3, #1
    8e3a:	4193      	sbcs	r3, r2
    8e3c:	b2db      	uxtb	r3, r3
}
    8e3e:	0018      	movs	r0, r3
    8e40:	46bd      	mov	sp, r7
    8e42:	bd80      	pop	{r7, pc}
    8e44:	41002000 	.word	0x41002000

00008e48 <system_interrupt_enable>:
{
    8e48:	b580      	push	{r7, lr}
    8e4a:	b082      	sub	sp, #8
    8e4c:	af00      	add	r7, sp, #0
    8e4e:	0002      	movs	r2, r0
    8e50:	1dfb      	adds	r3, r7, #7
    8e52:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8e54:	4b06      	ldr	r3, [pc, #24]	; (8e70 <system_interrupt_enable+0x28>)
    8e56:	1dfa      	adds	r2, r7, #7
    8e58:	7812      	ldrb	r2, [r2, #0]
    8e5a:	0011      	movs	r1, r2
    8e5c:	221f      	movs	r2, #31
    8e5e:	400a      	ands	r2, r1
    8e60:	2101      	movs	r1, #1
    8e62:	4091      	lsls	r1, r2
    8e64:	000a      	movs	r2, r1
    8e66:	601a      	str	r2, [r3, #0]
}
    8e68:	46c0      	nop			; (mov r8, r8)
    8e6a:	46bd      	mov	sp, r7
    8e6c:	b002      	add	sp, #8
    8e6e:	bd80      	pop	{r7, pc}
    8e70:	e000e100 	.word	0xe000e100

00008e74 <_spi_master_vec_wait_for_sync>:
 * \param[in] sercom_spi SERCOM SPI to check for synchronization.
 *
 * \note The implementation of this function depends on the SERCOM revision.
 */
static inline void _spi_master_vec_wait_for_sync(SercomSpi *const sercom_spi)
{
    8e74:	b580      	push	{r7, lr}
    8e76:	b082      	sub	sp, #8
    8e78:	af00      	add	r7, sp, #0
    8e7a:	6078      	str	r0, [r7, #4]
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	while (sercom_spi->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY) {
		/* Intentionally left empty */
	}
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	while (sercom_spi->SYNCBUSY.reg) {
    8e7c:	46c0      	nop			; (mov r8, r8)
    8e7e:	687b      	ldr	r3, [r7, #4]
    8e80:	69db      	ldr	r3, [r3, #28]
    8e82:	2b00      	cmp	r3, #0
    8e84:	d1fb      	bne.n	8e7e <_spi_master_vec_wait_for_sync+0xa>
		/* Intentionally left empty */
	}
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    8e86:	46c0      	nop			; (mov r8, r8)
    8e88:	46bd      	mov	sp, r7
    8e8a:	b002      	add	sp, #8
    8e8c:	bd80      	pop	{r7, pc}
	...

00008e90 <_spi_master_vec_pinmux_helper>:
 * \arg \c PINMUX_DEFAULT to use default pin MUX for the SERCOM pad.
 * \param[in] sercom,padnum SERCOM pad specification, for \ref PINMUX_DEFAULT.
 */
static inline void _spi_master_vec_pinmux_helper(uint32_t pinmux,
		Sercom *const sercom, uint8_t padnum)
{
    8e90:	b580      	push	{r7, lr}
    8e92:	b086      	sub	sp, #24
    8e94:	af00      	add	r7, sp, #0
    8e96:	60f8      	str	r0, [r7, #12]
    8e98:	60b9      	str	r1, [r7, #8]
    8e9a:	1dfb      	adds	r3, r7, #7
    8e9c:	701a      	strb	r2, [r3, #0]
	struct system_pinmux_config pin_conf;

	if (pinmux == PINMUX_DEFAULT) {
    8e9e:	68fb      	ldr	r3, [r7, #12]
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d108      	bne.n	8eb6 <_spi_master_vec_pinmux_helper+0x26>
		pinmux = _sercom_get_default_pad(sercom, padnum);
    8ea4:	1dfb      	adds	r3, r7, #7
    8ea6:	781a      	ldrb	r2, [r3, #0]
    8ea8:	68bb      	ldr	r3, [r7, #8]
    8eaa:	0011      	movs	r1, r2
    8eac:	0018      	movs	r0, r3
    8eae:	4b0f      	ldr	r3, [pc, #60]	; (8eec <_spi_master_vec_pinmux_helper+0x5c>)
    8eb0:	4798      	blx	r3
    8eb2:	0003      	movs	r3, r0
    8eb4:	60fb      	str	r3, [r7, #12]
	}

	if (pinmux == PINMUX_UNUSED) {
    8eb6:	68fb      	ldr	r3, [r7, #12]
    8eb8:	3301      	adds	r3, #1
    8eba:	d013      	beq.n	8ee4 <_spi_master_vec_pinmux_helper+0x54>
		return;
	}

	system_pinmux_get_config_defaults(&pin_conf);
    8ebc:	2314      	movs	r3, #20
    8ebe:	18fb      	adds	r3, r7, r3
    8ec0:	0018      	movs	r0, r3
    8ec2:	4b0b      	ldr	r3, [pc, #44]	; (8ef0 <_spi_master_vec_pinmux_helper+0x60>)
    8ec4:	4798      	blx	r3
	pin_conf.mux_position = pinmux & 0xFFFF;
    8ec6:	68fb      	ldr	r3, [r7, #12]
    8ec8:	b2da      	uxtb	r2, r3
    8eca:	2314      	movs	r3, #20
    8ecc:	18fb      	adds	r3, r7, r3
    8ece:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(pinmux >> 16, &pin_conf);
    8ed0:	68fb      	ldr	r3, [r7, #12]
    8ed2:	0c1b      	lsrs	r3, r3, #16
    8ed4:	b2db      	uxtb	r3, r3
    8ed6:	2214      	movs	r2, #20
    8ed8:	18ba      	adds	r2, r7, r2
    8eda:	0011      	movs	r1, r2
    8edc:	0018      	movs	r0, r3
    8ede:	4b05      	ldr	r3, [pc, #20]	; (8ef4 <_spi_master_vec_pinmux_helper+0x64>)
    8ee0:	4798      	blx	r3
    8ee2:	e000      	b.n	8ee6 <_spi_master_vec_pinmux_helper+0x56>
		return;
    8ee4:	46c0      	nop			; (mov r8, r8)
};
    8ee6:	46bd      	mov	sp, r7
    8ee8:	b006      	add	sp, #24
    8eea:	bd80      	pop	{r7, pc}
    8eec:	00008b81 	.word	0x00008b81
    8ef0:	00008da3 	.word	0x00008da3
    8ef4:	0000b1c9 	.word	0x0000b1c9

00008ef8 <spi_master_vec_init>:
 * \retval STATUS_OK if initialization succeeded.
 * \retval STATUS_ERR_INVALID_ARG if driver has been misconfigured.
 */
enum status_code spi_master_vec_init(struct spi_master_vec_module *const module,
		Sercom *const sercom, const struct spi_master_vec_config *const config)
{
    8ef8:	b590      	push	{r4, r7, lr}
    8efa:	b08d      	sub	sp, #52	; 0x34
    8efc:	af00      	add	r7, sp, #0
    8efe:	60f8      	str	r0, [r7, #12]
    8f00:	60b9      	str	r1, [r7, #8]
    8f02:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(sercom);
	Assert(config);

	enum status_code status;
	SercomSpi *const spi_hw = &(sercom->SPI);
    8f04:	68bb      	ldr	r3, [r7, #8]
    8f06:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct system_gclk_chan_config gclk_chan_conf;
	uint16_t tmp_baud;
	uint32_t sercom_index = _sercom_get_sercom_inst_index((Sercom *)spi_hw);
    8f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f0a:	0018      	movs	r0, r3
    8f0c:	4b59      	ldr	r3, [pc, #356]	; (9074 <spi_master_vec_init+0x17c>)
    8f0e:	4798      	blx	r3
    8f10:	0003      	movs	r3, r0
    8f12:	62bb      	str	r3, [r7, #40]	; 0x28
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	uint32_t pm_index = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    8f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f16:	3302      	adds	r3, #2
    8f18:	627b      	str	r3, [r7, #36]	; 0x24
#endif
	uint32_t gclk_index = sercom_index + SERCOM0_GCLK_ID_CORE;
    8f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f1c:	3314      	adds	r3, #20
    8f1e:	623b      	str	r3, [r7, #32]
	uint32_t gclk_hz;

	module->sercom = sercom;
    8f20:	68fb      	ldr	r3, [r7, #12]
    8f22:	68ba      	ldr	r2, [r7, #8]
    8f24:	601a      	str	r2, [r3, #0]

	/* Enable clock for the module interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    8f26:	2201      	movs	r2, #1
    8f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f2a:	409a      	lsls	r2, r3
    8f2c:	0013      	movs	r3, r2
    8f2e:	0019      	movs	r1, r3
    8f30:	2002      	movs	r0, #2
    8f32:	4b51      	ldr	r3, [pc, #324]	; (9078 <spi_master_vec_init+0x180>)
    8f34:	4798      	blx	r3

	/* Set up the GCLK for the module */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8f36:	2318      	movs	r3, #24
    8f38:	18fb      	adds	r3, r7, r3
    8f3a:	0018      	movs	r0, r3
    8f3c:	4b4f      	ldr	r3, [pc, #316]	; (907c <spi_master_vec_init+0x184>)
    8f3e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->gclk_generator;
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	791a      	ldrb	r2, [r3, #4]
    8f44:	2318      	movs	r3, #24
    8f46:	18fb      	adds	r3, r7, r3
    8f48:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    8f4a:	6a3b      	ldr	r3, [r7, #32]
    8f4c:	b2db      	uxtb	r3, r3
    8f4e:	2218      	movs	r2, #24
    8f50:	18ba      	adds	r2, r7, r2
    8f52:	0011      	movs	r1, r2
    8f54:	0018      	movs	r0, r3
    8f56:	4b4a      	ldr	r3, [pc, #296]	; (9080 <spi_master_vec_init+0x188>)
    8f58:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    8f5a:	6a3b      	ldr	r3, [r7, #32]
    8f5c:	b2db      	uxtb	r3, r3
    8f5e:	0018      	movs	r0, r3
    8f60:	4b48      	ldr	r3, [pc, #288]	; (9084 <spi_master_vec_init+0x18c>)
    8f62:	4798      	blx	r3
	sercom_set_gclk_generator(config->gclk_generator, false);
    8f64:	687b      	ldr	r3, [r7, #4]
    8f66:	791b      	ldrb	r3, [r3, #4]
    8f68:	2100      	movs	r1, #0
    8f6a:	0018      	movs	r0, r3
    8f6c:	4b46      	ldr	r3, [pc, #280]	; (9088 <spi_master_vec_init+0x190>)
    8f6e:	4798      	blx	r3

	_spi_master_vec_wait_for_sync(spi_hw);
    8f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f72:	0018      	movs	r0, r3
    8f74:	4b45      	ldr	r3, [pc, #276]	; (908c <spi_master_vec_init+0x194>)
    8f76:	4798      	blx	r3

	/* Set up the SERCOM SPI module as master */
	spi_hw->CTRLA.reg = SERCOM_SPI_CTRLA_MODE(0x3);
    8f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f7a:	220c      	movs	r2, #12
    8f7c:	601a      	str	r2, [r3, #0]
	spi_hw->CTRLA.reg |= (uint32_t)config->mux_setting
    8f7e:	687b      	ldr	r3, [r7, #4]
    8f80:	689a      	ldr	r2, [r3, #8]
			| config->transfer_mode
    8f82:	687b      	ldr	r3, [r7, #4]
    8f84:	68db      	ldr	r3, [r3, #12]
    8f86:	431a      	orrs	r2, r3
			| config->data_order
    8f88:	687b      	ldr	r3, [r7, #4]
    8f8a:	691b      	ldr	r3, [r3, #16]
    8f8c:	431a      	orrs	r2, r3
    8f8e:	0014      	movs	r4, r2
			| ((config->run_in_standby || system_is_debugger_present()) ?
    8f90:	687b      	ldr	r3, [r7, #4]
    8f92:	795b      	ldrb	r3, [r3, #5]
					SERCOM_SPI_CTRLA_RUNSTDBY : 0);
    8f94:	2b00      	cmp	r3, #0
    8f96:	d103      	bne.n	8fa0 <spi_master_vec_init+0xa8>
			| ((config->run_in_standby || system_is_debugger_present()) ?
    8f98:	4b3d      	ldr	r3, [pc, #244]	; (9090 <spi_master_vec_init+0x198>)
    8f9a:	4798      	blx	r3
    8f9c:	1e03      	subs	r3, r0, #0
    8f9e:	d001      	beq.n	8fa4 <spi_master_vec_init+0xac>
					SERCOM_SPI_CTRLA_RUNSTDBY : 0);
    8fa0:	2380      	movs	r3, #128	; 0x80
    8fa2:	e000      	b.n	8fa6 <spi_master_vec_init+0xae>
    8fa4:	2300      	movs	r3, #0
			| ((config->run_in_standby || system_is_debugger_present()) ?
    8fa6:	0022      	movs	r2, r4
    8fa8:	431a      	orrs	r2, r3
	spi_hw->CTRLA.reg |= (uint32_t)config->mux_setting
    8faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8fac:	681b      	ldr	r3, [r3, #0]
    8fae:	431a      	orrs	r2, r3
    8fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8fb2:	601a      	str	r2, [r3, #0]

	/* Get baud value from configured baudrate and internal clock rate */
	gclk_hz = system_gclk_chan_get_hz(gclk_index);
    8fb4:	6a3b      	ldr	r3, [r7, #32]
    8fb6:	b2db      	uxtb	r3, r3
    8fb8:	0018      	movs	r0, r3
    8fba:	4b36      	ldr	r3, [pc, #216]	; (9094 <spi_master_vec_init+0x19c>)
    8fbc:	4798      	blx	r3
    8fbe:	0003      	movs	r3, r0
    8fc0:	61fb      	str	r3, [r7, #28]
	status = _sercom_get_sync_baud_val(config->baudrate, gclk_hz, &tmp_baud);
    8fc2:	687b      	ldr	r3, [r7, #4]
    8fc4:	681b      	ldr	r3, [r3, #0]
    8fc6:	221b      	movs	r2, #27
    8fc8:	18bc      	adds	r4, r7, r2
    8fca:	2216      	movs	r2, #22
    8fcc:	18ba      	adds	r2, r7, r2
    8fce:	69f9      	ldr	r1, [r7, #28]
    8fd0:	0018      	movs	r0, r3
    8fd2:	4b31      	ldr	r3, [pc, #196]	; (9098 <spi_master_vec_init+0x1a0>)
    8fd4:	4798      	blx	r3
    8fd6:	0003      	movs	r3, r0
    8fd8:	7023      	strb	r3, [r4, #0]

	if (status != STATUS_OK) {
    8fda:	231b      	movs	r3, #27
    8fdc:	18fb      	adds	r3, r7, r3
    8fde:	781b      	ldrb	r3, [r3, #0]
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d001      	beq.n	8fe8 <spi_master_vec_init+0xf0>
		/* Baud rate calculation error! */
		return STATUS_ERR_INVALID_ARG;
    8fe4:	2317      	movs	r3, #23
    8fe6:	e041      	b.n	906c <spi_master_vec_init+0x174>
	}

	spi_hw->BAUD.reg = (uint8_t)tmp_baud;
    8fe8:	2316      	movs	r3, #22
    8fea:	18fb      	adds	r3, r7, r3
    8fec:	881b      	ldrh	r3, [r3, #0]
    8fee:	b2da      	uxtb	r2, r3
    8ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ff2:	731a      	strb	r2, [r3, #12]

	/* Configure the pin multiplexers */
	_spi_master_vec_pinmux_helper(config->pinmux_pad0, sercom, 0);
    8ff4:	687b      	ldr	r3, [r7, #4]
    8ff6:	695b      	ldr	r3, [r3, #20]
    8ff8:	68b9      	ldr	r1, [r7, #8]
    8ffa:	2200      	movs	r2, #0
    8ffc:	0018      	movs	r0, r3
    8ffe:	4b27      	ldr	r3, [pc, #156]	; (909c <spi_master_vec_init+0x1a4>)
    9000:	4798      	blx	r3
	_spi_master_vec_pinmux_helper(config->pinmux_pad3, sercom, 3);
    9002:	687b      	ldr	r3, [r7, #4]
    9004:	6a1b      	ldr	r3, [r3, #32]
    9006:	68b9      	ldr	r1, [r7, #8]
    9008:	2203      	movs	r2, #3
    900a:	0018      	movs	r0, r3
    900c:	4b23      	ldr	r3, [pc, #140]	; (909c <spi_master_vec_init+0x1a4>)
    900e:	4798      	blx	r3
	 * the PORT module, i.e., peripheral MUX should not be set for that pin.
	 * DOPO controls which PAD is used for slave SS:
	 * If DOPO is odd, SERCOM_PAD1 is SS: SERCOM_PAD2 can be MUXed.
	 * If DOPO is even, SERCOM_PAD2 is SS: SERCOM_PAD1 can be MUXed.
	 */
	if (config->mux_setting & (1 << SERCOM_SPI_CTRLA_DOPO_Pos)) {
    9010:	687b      	ldr	r3, [r7, #4]
    9012:	689a      	ldr	r2, [r3, #8]
    9014:	2380      	movs	r3, #128	; 0x80
    9016:	025b      	lsls	r3, r3, #9
    9018:	4013      	ands	r3, r2
    901a:	d007      	beq.n	902c <spi_master_vec_init+0x134>
		_spi_master_vec_pinmux_helper(config->pinmux_pad2, sercom, 2);
    901c:	687b      	ldr	r3, [r7, #4]
    901e:	69db      	ldr	r3, [r3, #28]
    9020:	68b9      	ldr	r1, [r7, #8]
    9022:	2202      	movs	r2, #2
    9024:	0018      	movs	r0, r3
    9026:	4b1d      	ldr	r3, [pc, #116]	; (909c <spi_master_vec_init+0x1a4>)
    9028:	4798      	blx	r3
    902a:	e006      	b.n	903a <spi_master_vec_init+0x142>
	} else {
		_spi_master_vec_pinmux_helper(config->pinmux_pad1, sercom, 1);
    902c:	687b      	ldr	r3, [r7, #4]
    902e:	699b      	ldr	r3, [r3, #24]
    9030:	68b9      	ldr	r1, [r7, #8]
    9032:	2201      	movs	r2, #1
    9034:	0018      	movs	r0, r3
    9036:	4b19      	ldr	r3, [pc, #100]	; (909c <spi_master_vec_init+0x1a4>)
    9038:	4798      	blx	r3
	}

	/* Initialize our instance and register interrupt handler + data */
	module->rx_bufdesc_ptr = NULL;
    903a:	68fb      	ldr	r3, [r7, #12]
    903c:	2200      	movs	r2, #0
    903e:	619a      	str	r2, [r3, #24]
	module->tx_bufdesc_ptr = NULL;
    9040:	68fb      	ldr	r3, [r7, #12]
    9042:	2200      	movs	r2, #0
    9044:	61da      	str	r2, [r3, #28]
	module->direction = SPI_MASTER_VEC_DIRECTION_IDLE;
    9046:	68fb      	ldr	r3, [r7, #12]
    9048:	2203      	movs	r2, #3
    904a:	715a      	strb	r2, [r3, #5]
	module->status = STATUS_OK;
    904c:	68fb      	ldr	r3, [r7, #12]
    904e:	2200      	movs	r2, #0
    9050:	719a      	strb	r2, [r3, #6]
#ifdef CONF_SPI_MASTER_VEC_OS_SUPPORT
	CONF_SPI_MASTER_VEC_CREATE_SEMAPHORE(module->busy_semaphore);
#endif

	_sercom_set_handler(sercom_index, _spi_master_vec_int_handler);
    9052:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9054:	b2db      	uxtb	r3, r3
    9056:	4a12      	ldr	r2, [pc, #72]	; (90a0 <spi_master_vec_init+0x1a8>)
    9058:	0011      	movs	r1, r2
    905a:	0018      	movs	r0, r3
    905c:	4b11      	ldr	r3, [pc, #68]	; (90a4 <spi_master_vec_init+0x1ac>)
    905e:	4798      	blx	r3
	_sercom_instances[sercom_index] = module;
    9060:	4b11      	ldr	r3, [pc, #68]	; (90a8 <spi_master_vec_init+0x1b0>)
    9062:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9064:	0092      	lsls	r2, r2, #2
    9066:	68f9      	ldr	r1, [r7, #12]
    9068:	50d1      	str	r1, [r2, r3]

	return STATUS_OK;
    906a:	2300      	movs	r3, #0
}
    906c:	0018      	movs	r0, r3
    906e:	46bd      	mov	sp, r7
    9070:	b00d      	add	sp, #52	; 0x34
    9072:	bd90      	pop	{r4, r7, pc}
    9074:	00008d3d 	.word	0x00008d3d
    9078:	00008dcd 	.word	0x00008dcd
    907c:	00008d8d 	.word	0x00008d8d
    9080:	0000aedd 	.word	0x0000aedd
    9084:	0000af21 	.word	0x0000af21
    9088:	00008af5 	.word	0x00008af5
    908c:	00008e75 	.word	0x00008e75
    9090:	00008e29 	.word	0x00008e29
    9094:	0000b001 	.word	0x0000b001
    9098:	0000888b 	.word	0x0000888b
    909c:	00008e91 	.word	0x00008e91
    90a0:	000090fd 	.word	0x000090fd
    90a4:	0000a101 	.word	0x0000a101
    90a8:	200004f0 	.word	0x200004f0

000090ac <spi_master_vec_enable>:
 * transfer can be started.
 *
 * \param[in,out] module Driver instance to operate on.
 */
void spi_master_vec_enable(const struct spi_master_vec_module *const module)
{
    90ac:	b580      	push	{r7, lr}
    90ae:	b084      	sub	sp, #16
    90b0:	af00      	add	r7, sp, #0
    90b2:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->sercom);

	SercomSpi *const spi_hw = &(module->sercom->SPI);
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	681b      	ldr	r3, [r3, #0]
    90b8:	60fb      	str	r3, [r7, #12]

	spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_DRE | SERCOM_SPI_INTFLAG_RXC
    90ba:	68fb      	ldr	r3, [r7, #12]
    90bc:	2207      	movs	r2, #7
    90be:	751a      	strb	r2, [r3, #20]
			| SERCOM_SPI_INTFLAG_TXC;

	_spi_master_vec_wait_for_sync(spi_hw);
    90c0:	68fb      	ldr	r3, [r7, #12]
    90c2:	0018      	movs	r0, r3
    90c4:	4b0a      	ldr	r3, [pc, #40]	; (90f0 <spi_master_vec_enable+0x44>)
    90c6:	4798      	blx	r3

	spi_hw->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    90c8:	68fb      	ldr	r3, [r7, #12]
    90ca:	681b      	ldr	r3, [r3, #0]
    90cc:	2202      	movs	r2, #2
    90ce:	431a      	orrs	r2, r3
    90d0:	68fb      	ldr	r3, [r7, #12]
    90d2:	601a      	str	r2, [r3, #0]

	system_interrupt_enable(_sercom_get_interrupt_vector(module->sercom));
    90d4:	687b      	ldr	r3, [r7, #4]
    90d6:	681b      	ldr	r3, [r3, #0]
    90d8:	0018      	movs	r0, r3
    90da:	4b06      	ldr	r3, [pc, #24]	; (90f4 <spi_master_vec_enable+0x48>)
    90dc:	4798      	blx	r3
    90de:	0003      	movs	r3, r0
    90e0:	0018      	movs	r0, r3
    90e2:	4b05      	ldr	r3, [pc, #20]	; (90f8 <spi_master_vec_enable+0x4c>)
    90e4:	4798      	blx	r3
}
    90e6:	46c0      	nop			; (mov r8, r8)
    90e8:	46bd      	mov	sp, r7
    90ea:	b004      	add	sp, #16
    90ec:	bd80      	pop	{r7, pc}
    90ee:	46c0      	nop			; (mov r8, r8)
    90f0:	00008e75 	.word	0x00008e75
    90f4:	0000a16d 	.word	0x0000a16d
    90f8:	00008e49 	.word	0x00008e49

000090fc <_spi_master_vec_int_handler>:
 *
 * \param[in] sercom_index SERCOM instance number passed from the master SERCOM
 * driver.
 */
static void _spi_master_vec_int_handler(uint8_t sercom_index)
{
    90fc:	b580      	push	{r7, lr}
    90fe:	b08c      	sub	sp, #48	; 0x30
    9100:	af00      	add	r7, sp, #0
    9102:	0002      	movs	r2, r0
    9104:	1dfb      	adds	r3, r7, #7
    9106:	701a      	strb	r2, [r3, #0]
	struct spi_master_vec_module *const module =
			_sercom_instances[sercom_index];
    9108:	1dfb      	adds	r3, r7, #7
    910a:	781a      	ldrb	r2, [r3, #0]
	struct spi_master_vec_module *const module =
    910c:	4b96      	ldr	r3, [pc, #600]	; (9368 <_spi_master_vec_int_handler+0x26c>)
    910e:	0092      	lsls	r2, r2, #2
    9110:	58d3      	ldr	r3, [r2, r3]
    9112:	627b      	str	r3, [r7, #36]	; 0x24
	enum _spi_master_vec_direction dir = module->direction;
    9114:	232f      	movs	r3, #47	; 0x2f
    9116:	18fb      	adds	r3, r7, r3
    9118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    911a:	7952      	ldrb	r2, [r2, #5]
    911c:	701a      	strb	r2, [r3, #0]
	SercomSpi *const spi_hw = &(module->sercom->SPI);
    911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9120:	681b      	ldr	r3, [r3, #0]
    9122:	623b      	str	r3, [r7, #32]
	uint8_t int_status;

	int_status = spi_hw->INTFLAG.reg ;
    9124:	231f      	movs	r3, #31
    9126:	18fb      	adds	r3, r7, r3
    9128:	6a3a      	ldr	r2, [r7, #32]
    912a:	7e12      	ldrb	r2, [r2, #24]
    912c:	701a      	strb	r2, [r3, #0]
    int_status &= spi_hw->INTENSET.reg;
    912e:	6a3b      	ldr	r3, [r7, #32]
    9130:	7d9b      	ldrb	r3, [r3, #22]
    9132:	b2da      	uxtb	r2, r3
    9134:	231f      	movs	r3, #31
    9136:	18fb      	adds	r3, r7, r3
    9138:	211f      	movs	r1, #31
    913a:	1879      	adds	r1, r7, r1
    913c:	7809      	ldrb	r1, [r1, #0]
    913e:	400a      	ands	r2, r1
    9140:	701a      	strb	r2, [r3, #0]

	if (int_status & SERCOM_SPI_INTFLAG_DRE) {
    9142:	231f      	movs	r3, #31
    9144:	18fb      	adds	r3, r7, r3
    9146:	781b      	ldrb	r3, [r3, #0]
    9148:	2201      	movs	r2, #1
    914a:	4013      	ands	r3, r2
    914c:	d100      	bne.n	9150 <_spi_master_vec_int_handler+0x54>
    914e:	e085      	b.n	925c <_spi_master_vec_int_handler+0x160>
		uint_fast8_t tx_lead_on_rx = module->tx_lead_on_rx;
    9150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9152:	695b      	ldr	r3, [r3, #20]
    9154:	61bb      	str	r3, [r7, #24]

		/* If TX is ahead of RX by 2+ bytes, allow RX to catch up.
		 * Note: will only happen _once_ per READ or BOTH.
		 */
		if ((tx_lead_on_rx >= 2) && (dir != SPI_MASTER_VEC_DIRECTION_WRITE)) {
    9156:	69bb      	ldr	r3, [r7, #24]
    9158:	2b01      	cmp	r3, #1
    915a:	d905      	bls.n	9168 <_spi_master_vec_int_handler+0x6c>
    915c:	232f      	movs	r3, #47	; 0x2f
    915e:	18fb      	adds	r3, r7, r3
    9160:	781b      	ldrb	r3, [r3, #0]
    9162:	2b01      	cmp	r3, #1
    9164:	d000      	beq.n	9168 <_spi_master_vec_int_handler+0x6c>
    9166:	e078      	b.n	925a <_spi_master_vec_int_handler+0x15e>
			Assert((dir == SPI_MASTER_VEC_DIRECTION_READ)
					|| (dir == SPI_MASTER_VEC_DIRECTION_BOTH));
			Assert(int_status & SERCOM_SPI_INTFLAG_RXC);
		/* Otherwise, we can send more bytes */
		} else {
			module->tx_lead_on_rx = ++tx_lead_on_rx;
    9168:	69bb      	ldr	r3, [r7, #24]
    916a:	3301      	adds	r3, #1
    916c:	61bb      	str	r3, [r7, #24]
    916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9170:	69ba      	ldr	r2, [r7, #24]
    9172:	615a      	str	r2, [r3, #20]

			/* If doing a READ, just send 0 to trigger the transfer */
			if (dir == SPI_MASTER_VEC_DIRECTION_READ) {
    9174:	232f      	movs	r3, #47	; 0x2f
    9176:	18fb      	adds	r3, r7, r3
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	2b00      	cmp	r3, #0
    917c:	d11f      	bne.n	91be <_spi_master_vec_int_handler+0xc2>
				uint32_t tx_lead_limit;

				spi_hw->DATA.reg = 0;
    917e:	6a3b      	ldr	r3, [r7, #32]
    9180:	2200      	movs	r2, #0
    9182:	629a      	str	r2, [r3, #40]	; 0x28
				 *
				 * Since a buffer can have minimum 1 byte length, this check is
				 * simplified by first checking if the RX end is so close that
				 * the max. 2 byte lead of TX may actually fill the buffers.
				 */
				tx_lead_limit = (module->rx_bufdesc_ptr + 1)->length;
    9184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9186:	699b      	ldr	r3, [r3, #24]
    9188:	3308      	adds	r3, #8
    918a:	889b      	ldrh	r3, [r3, #4]
    918c:	60fb      	str	r3, [r7, #12]

				if (!tx_lead_limit || !(module->rx_bufdesc_ptr + 2)->length) {
    918e:	68fb      	ldr	r3, [r7, #12]
    9190:	2b00      	cmp	r3, #0
    9192:	d005      	beq.n	91a0 <_spi_master_vec_int_handler+0xa4>
    9194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9196:	699b      	ldr	r3, [r3, #24]
    9198:	3310      	adds	r3, #16
    919a:	889b      	ldrh	r3, [r3, #4]
    919c:	2b00      	cmp	r3, #0
    919e:	d15d      	bne.n	925c <_spi_master_vec_int_handler+0x160>
					tx_lead_limit += module->rx_length;
    91a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91a2:	891b      	ldrh	r3, [r3, #8]
    91a4:	b29b      	uxth	r3, r3
    91a6:	001a      	movs	r2, r3
    91a8:	68fb      	ldr	r3, [r7, #12]
    91aa:	189b      	adds	r3, r3, r2
    91ac:	60fb      	str	r3, [r7, #12]

					if (tx_lead_on_rx >= tx_lead_limit) {
    91ae:	69ba      	ldr	r2, [r7, #24]
    91b0:	68fb      	ldr	r3, [r7, #12]
    91b2:	429a      	cmp	r2, r3
    91b4:	d352      	bcc.n	925c <_spi_master_vec_int_handler+0x160>
						spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_DRE;
    91b6:	6a3b      	ldr	r3, [r7, #32]
    91b8:	2201      	movs	r2, #1
    91ba:	751a      	strb	r2, [r3, #20]
    91bc:	e04e      	b.n	925c <_spi_master_vec_int_handler+0x160>
			/* For WRITE and BOTH, output current byte */
			} else {
				spi_master_vec_buflen_t tx_length;
				uint8_t *tx_head_ptr;

				tx_head_ptr = module->tx_head_ptr;
    91be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91c0:	691b      	ldr	r3, [r3, #16]
    91c2:	617b      	str	r3, [r7, #20]
				spi_hw->DATA.reg = *(tx_head_ptr++);
    91c4:	697b      	ldr	r3, [r7, #20]
    91c6:	1c5a      	adds	r2, r3, #1
    91c8:	617a      	str	r2, [r7, #20]
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	001a      	movs	r2, r3
    91ce:	6a3b      	ldr	r3, [r7, #32]
    91d0:	629a      	str	r2, [r3, #40]	; 0x28

				/* Check if this was the last byte to send */
				tx_length = module->tx_length - 1;
    91d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91d4:	895b      	ldrh	r3, [r3, #10]
    91d6:	b29a      	uxth	r2, r3
    91d8:	2312      	movs	r3, #18
    91da:	18fb      	adds	r3, r7, r3
    91dc:	3a01      	subs	r2, #1
    91de:	801a      	strh	r2, [r3, #0]

				if (tx_length) {
    91e0:	2312      	movs	r3, #18
    91e2:	18fb      	adds	r3, r7, r3
    91e4:	881b      	ldrh	r3, [r3, #0]
    91e6:	2b00      	cmp	r3, #0
    91e8:	d008      	beq.n	91fc <_spi_master_vec_int_handler+0x100>
					module->tx_head_ptr = tx_head_ptr;
    91ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91ec:	697a      	ldr	r2, [r7, #20]
    91ee:	611a      	str	r2, [r3, #16]
					module->tx_length = tx_length;
    91f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91f2:	2212      	movs	r2, #18
    91f4:	18ba      	adds	r2, r7, r2
    91f6:	8812      	ldrh	r2, [r2, #0]
    91f8:	815a      	strh	r2, [r3, #10]
    91fa:	e02f      	b.n	925c <_spi_master_vec_int_handler+0x160>
				} else {
				/* Any more buffers left to send, perhaps? */
					tx_length = (++module->tx_bufdesc_ptr)->length;
    91fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91fe:	69db      	ldr	r3, [r3, #28]
    9200:	3308      	adds	r3, #8
    9202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9204:	61d3      	str	r3, [r2, #28]
    9206:	2212      	movs	r2, #18
    9208:	18ba      	adds	r2, r7, r2
    920a:	889b      	ldrh	r3, [r3, #4]
    920c:	8013      	strh	r3, [r2, #0]

					if (tx_length) {
    920e:	2312      	movs	r3, #18
    9210:	18fb      	adds	r3, r7, r3
    9212:	881b      	ldrh	r3, [r3, #0]
    9214:	2b00      	cmp	r3, #0
    9216:	d00a      	beq.n	922e <_spi_master_vec_int_handler+0x132>
						module->tx_head_ptr = module->tx_bufdesc_ptr->data;
    9218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    921a:	69db      	ldr	r3, [r3, #28]
    921c:	681a      	ldr	r2, [r3, #0]
    921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9220:	611a      	str	r2, [r3, #16]
						module->tx_length = tx_length;
    9222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9224:	2212      	movs	r2, #18
    9226:	18ba      	adds	r2, r7, r2
    9228:	8812      	ldrh	r2, [r2, #0]
    922a:	815a      	strh	r2, [r3, #10]
    922c:	e016      	b.n	925c <_spi_master_vec_int_handler+0x160>
					} else {
						if (dir == SPI_MASTER_VEC_DIRECTION_WRITE) {
    922e:	232f      	movs	r3, #47	; 0x2f
    9230:	18fb      	adds	r3, r7, r3
    9232:	781b      	ldrb	r3, [r3, #0]
    9234:	2b01      	cmp	r3, #1
    9236:	d106      	bne.n	9246 <_spi_master_vec_int_handler+0x14a>
						/* Disable DRE and enable TXC to end WRITE */
							spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_DRE;
    9238:	6a3b      	ldr	r3, [r7, #32]
    923a:	2201      	movs	r2, #1
    923c:	751a      	strb	r2, [r3, #20]
							spi_hw->INTENSET.reg = SERCOM_SPI_INTFLAG_TXC;
    923e:	6a3b      	ldr	r3, [r7, #32]
    9240:	2202      	movs	r2, #2
    9242:	759a      	strb	r2, [r3, #22]
    9244:	e00a      	b.n	925c <_spi_master_vec_int_handler+0x160>
						} else {
						/* For BOTH, check if we still have bytes to read */
							dir = SPI_MASTER_VEC_DIRECTION_READ;
    9246:	232f      	movs	r3, #47	; 0x2f
    9248:	18fb      	adds	r3, r7, r3
    924a:	2200      	movs	r2, #0
    924c:	701a      	strb	r2, [r3, #0]
							module->direction = dir;
    924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9250:	222f      	movs	r2, #47	; 0x2f
    9252:	18ba      	adds	r2, r7, r2
    9254:	7812      	ldrb	r2, [r2, #0]
    9256:	715a      	strb	r2, [r3, #5]
							goto check_for_read_end;
    9258:	e794      	b.n	9184 <_spi_master_vec_int_handler+0x88>
			Assert(int_status & SERCOM_SPI_INTFLAG_RXC);
    925a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	/* For READ and BOTH, store the received byte */
	if (int_status & SERCOM_SPI_INTFLAG_RXC) {
    925c:	231f      	movs	r3, #31
    925e:	18fb      	adds	r3, r7, r3
    9260:	781b      	ldrb	r3, [r3, #0]
    9262:	2204      	movs	r2, #4
    9264:	4013      	ands	r3, r2
    9266:	d066      	beq.n	9336 <_spi_master_vec_int_handler+0x23a>
		spi_master_vec_buflen_t rx_length;
		uint8_t *rx_head_ptr;

		rx_head_ptr = module->rx_head_ptr;
    9268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    926a:	68db      	ldr	r3, [r3, #12]
    926c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rx_head_ptr != NULL) {
    926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9270:	2b00      	cmp	r3, #0
    9272:	d007      	beq.n	9284 <_spi_master_vec_int_handler+0x188>
			*(rx_head_ptr++) = spi_hw->DATA.reg;
    9274:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9276:	1c5a      	adds	r2, r3, #1
    9278:	62ba      	str	r2, [r7, #40]	; 0x28
    927a:	6a3a      	ldr	r2, [r7, #32]
    927c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    927e:	b2d2      	uxtb	r2, r2
    9280:	701a      	strb	r2, [r3, #0]
    9282:	e004      	b.n	928e <_spi_master_vec_int_handler+0x192>
		} else {
			uint8_t dummy;
			dummy = spi_hw->DATA.reg;
    9284:	6a3b      	ldr	r3, [r7, #32]
    9286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9288:	230b      	movs	r3, #11
    928a:	18fb      	adds	r3, r7, r3
    928c:	701a      	strb	r2, [r3, #0]
			UNUSED(dummy);
		}
		module->tx_lead_on_rx--;
    928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9290:	695b      	ldr	r3, [r3, #20]
    9292:	1e5a      	subs	r2, r3, #1
    9294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9296:	615a      	str	r2, [r3, #20]

		/* Check if this was the last byte to receive */
		rx_length = module->rx_length - 1;
    9298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    929a:	891b      	ldrh	r3, [r3, #8]
    929c:	b29a      	uxth	r2, r3
    929e:	2308      	movs	r3, #8
    92a0:	18fb      	adds	r3, r7, r3
    92a2:	3a01      	subs	r2, #1
    92a4:	801a      	strh	r2, [r3, #0]

		if (rx_length) {
    92a6:	2308      	movs	r3, #8
    92a8:	18fb      	adds	r3, r7, r3
    92aa:	881b      	ldrh	r3, [r3, #0]
    92ac:	2b00      	cmp	r3, #0
    92ae:	d008      	beq.n	92c2 <_spi_master_vec_int_handler+0x1c6>
			module->rx_head_ptr = rx_head_ptr;
    92b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    92b4:	60da      	str	r2, [r3, #12]
			module->rx_length = rx_length;
    92b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92b8:	2208      	movs	r2, #8
    92ba:	18ba      	adds	r2, r7, r2
    92bc:	8812      	ldrh	r2, [r2, #0]
    92be:	811a      	strh	r2, [r3, #8]
    92c0:	e039      	b.n	9336 <_spi_master_vec_int_handler+0x23a>
		} else {
			/* Any more buffers left to receive into? */
			rx_length = (++module->rx_bufdesc_ptr)->length;
    92c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92c4:	699b      	ldr	r3, [r3, #24]
    92c6:	3308      	adds	r3, #8
    92c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    92ca:	6193      	str	r3, [r2, #24]
    92cc:	2208      	movs	r2, #8
    92ce:	18ba      	adds	r2, r7, r2
    92d0:	889b      	ldrh	r3, [r3, #4]
    92d2:	8013      	strh	r3, [r2, #0]

			if (rx_length) {
    92d4:	2308      	movs	r3, #8
    92d6:	18fb      	adds	r3, r7, r3
    92d8:	881b      	ldrh	r3, [r3, #0]
    92da:	2b00      	cmp	r3, #0
    92dc:	d00a      	beq.n	92f4 <_spi_master_vec_int_handler+0x1f8>
				module->rx_head_ptr = module->rx_bufdesc_ptr->data;
    92de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92e0:	699b      	ldr	r3, [r3, #24]
    92e2:	681a      	ldr	r2, [r3, #0]
    92e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92e6:	60da      	str	r2, [r3, #12]
				module->rx_length = rx_length;
    92e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92ea:	2208      	movs	r2, #8
    92ec:	18ba      	adds	r2, r7, r2
    92ee:	8812      	ldrh	r2, [r2, #0]
    92f0:	811a      	strh	r2, [r3, #8]
    92f2:	e020      	b.n	9336 <_spi_master_vec_int_handler+0x23a>
			} else {
				/* Disable the SPI receiver (instant effect) and RX interrupt */
				spi_hw->CTRLB.reg = 0;
    92f4:	6a3b      	ldr	r3, [r7, #32]
    92f6:	2200      	movs	r2, #0
    92f8:	605a      	str	r2, [r3, #4]
				spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_RXC;
    92fa:	6a3b      	ldr	r3, [r7, #32]
    92fc:	2204      	movs	r2, #4
    92fe:	751a      	strb	r2, [r3, #20]

				if (dir == SPI_MASTER_VEC_DIRECTION_READ) {
    9300:	232f      	movs	r3, #47	; 0x2f
    9302:	18fb      	adds	r3, r7, r3
    9304:	781b      	ldrb	r3, [r3, #0]
    9306:	2b00      	cmp	r3, #0
    9308:	d10c      	bne.n	9324 <_spi_master_vec_int_handler+0x228>
					/* If doing READ, end the transaction here */
					dir = SPI_MASTER_VEC_DIRECTION_IDLE;
    930a:	232f      	movs	r3, #47	; 0x2f
    930c:	18fb      	adds	r3, r7, r3
    930e:	2203      	movs	r2, #3
    9310:	701a      	strb	r2, [r3, #0]
					module->direction = dir;
    9312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9314:	222f      	movs	r2, #47	; 0x2f
    9316:	18ba      	adds	r2, r7, r2
    9318:	7812      	ldrb	r2, [r2, #0]
    931a:	715a      	strb	r2, [r3, #5]
					module->status = STATUS_OK;
    931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    931e:	2200      	movs	r2, #0
    9320:	719a      	strb	r2, [r3, #6]
    9322:	e008      	b.n	9336 <_spi_master_vec_int_handler+0x23a>
#ifdef CONF_SPI_MASTER_VEC_OS_SUPPORT
					CONF_SPI_MASTER_VEC_GIVE_SEMAPHORE_FROM_ISR(module->busy_semaphore);
#endif
				} else {
					/* If doing BOTH, change direction to WRITE */
					dir = SPI_MASTER_VEC_DIRECTION_WRITE;
    9324:	232f      	movs	r3, #47	; 0x2f
    9326:	18fb      	adds	r3, r7, r3
    9328:	2201      	movs	r2, #1
    932a:	701a      	strb	r2, [r3, #0]
					module->direction = dir;
    932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    932e:	222f      	movs	r2, #47	; 0x2f
    9330:	18ba      	adds	r2, r7, r2
    9332:	7812      	ldrb	r2, [r2, #0]
    9334:	715a      	strb	r2, [r3, #5]
			}
		}
	}

	/* For WRITE */
	if (int_status & SERCOM_SPI_INTFLAG_TXC) {
    9336:	231f      	movs	r3, #31
    9338:	18fb      	adds	r3, r7, r3
    933a:	781b      	ldrb	r3, [r3, #0]
    933c:	2202      	movs	r2, #2
    933e:	4013      	ands	r3, r2
    9340:	d00e      	beq.n	9360 <_spi_master_vec_int_handler+0x264>
		/* End transaction here, since last byte has been sent */
		spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_TXC;
    9342:	6a3b      	ldr	r3, [r7, #32]
    9344:	2202      	movs	r2, #2
    9346:	751a      	strb	r2, [r3, #20]

		dir = SPI_MASTER_VEC_DIRECTION_IDLE;
    9348:	232f      	movs	r3, #47	; 0x2f
    934a:	18fb      	adds	r3, r7, r3
    934c:	2203      	movs	r2, #3
    934e:	701a      	strb	r2, [r3, #0]
		module->direction = dir;
    9350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9352:	222f      	movs	r2, #47	; 0x2f
    9354:	18ba      	adds	r2, r7, r2
    9356:	7812      	ldrb	r2, [r2, #0]
    9358:	715a      	strb	r2, [r3, #5]
		module->status = STATUS_OK;
    935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    935c:	2200      	movs	r2, #0
    935e:	719a      	strb	r2, [r3, #6]
#ifdef CONF_SPI_MASTER_VEC_OS_SUPPORT
		CONF_SPI_MASTER_VEC_GIVE_SEMAPHORE_FROM_ISR(module->busy_semaphore);
#endif
	}
}
    9360:	46c0      	nop			; (mov r8, r8)
    9362:	46bd      	mov	sp, r7
    9364:	b00c      	add	sp, #48	; 0x30
    9366:	bd80      	pop	{r7, pc}
    9368:	200004f0 	.word	0x200004f0

0000936c <system_gclk_chan_get_config_defaults>:
{
    936c:	b580      	push	{r7, lr}
    936e:	b082      	sub	sp, #8
    9370:	af00      	add	r7, sp, #0
    9372:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    9374:	687b      	ldr	r3, [r7, #4]
    9376:	2200      	movs	r2, #0
    9378:	701a      	strb	r2, [r3, #0]
}
    937a:	46c0      	nop			; (mov r8, r8)
    937c:	46bd      	mov	sp, r7
    937e:	b002      	add	sp, #8
    9380:	bd80      	pop	{r7, pc}
	...

00009384 <system_apb_clock_set_mask>:
{
    9384:	b580      	push	{r7, lr}
    9386:	b082      	sub	sp, #8
    9388:	af00      	add	r7, sp, #0
    938a:	0002      	movs	r2, r0
    938c:	6039      	str	r1, [r7, #0]
    938e:	1dfb      	adds	r3, r7, #7
    9390:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9392:	1dfb      	adds	r3, r7, #7
    9394:	781b      	ldrb	r3, [r3, #0]
    9396:	2b01      	cmp	r3, #1
    9398:	d00a      	beq.n	93b0 <system_apb_clock_set_mask+0x2c>
    939a:	2b02      	cmp	r3, #2
    939c:	d00f      	beq.n	93be <system_apb_clock_set_mask+0x3a>
    939e:	2b00      	cmp	r3, #0
    93a0:	d114      	bne.n	93cc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    93a2:	4b0e      	ldr	r3, [pc, #56]	; (93dc <system_apb_clock_set_mask+0x58>)
    93a4:	4a0d      	ldr	r2, [pc, #52]	; (93dc <system_apb_clock_set_mask+0x58>)
    93a6:	6991      	ldr	r1, [r2, #24]
    93a8:	683a      	ldr	r2, [r7, #0]
    93aa:	430a      	orrs	r2, r1
    93ac:	619a      	str	r2, [r3, #24]
			break;
    93ae:	e00f      	b.n	93d0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    93b0:	4b0a      	ldr	r3, [pc, #40]	; (93dc <system_apb_clock_set_mask+0x58>)
    93b2:	4a0a      	ldr	r2, [pc, #40]	; (93dc <system_apb_clock_set_mask+0x58>)
    93b4:	69d1      	ldr	r1, [r2, #28]
    93b6:	683a      	ldr	r2, [r7, #0]
    93b8:	430a      	orrs	r2, r1
    93ba:	61da      	str	r2, [r3, #28]
			break;
    93bc:	e008      	b.n	93d0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    93be:	4b07      	ldr	r3, [pc, #28]	; (93dc <system_apb_clock_set_mask+0x58>)
    93c0:	4a06      	ldr	r2, [pc, #24]	; (93dc <system_apb_clock_set_mask+0x58>)
    93c2:	6a11      	ldr	r1, [r2, #32]
    93c4:	683a      	ldr	r2, [r7, #0]
    93c6:	430a      	orrs	r2, r1
    93c8:	621a      	str	r2, [r3, #32]
			break;
    93ca:	e001      	b.n	93d0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    93cc:	2317      	movs	r3, #23
    93ce:	e000      	b.n	93d2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    93d0:	2300      	movs	r3, #0
}
    93d2:	0018      	movs	r0, r3
    93d4:	46bd      	mov	sp, r7
    93d6:	b002      	add	sp, #8
    93d8:	bd80      	pop	{r7, pc}
    93da:	46c0      	nop			; (mov r8, r8)
    93dc:	40000400 	.word	0x40000400

000093e0 <system_pinmux_get_config_defaults>:
{
    93e0:	b580      	push	{r7, lr}
    93e2:	b082      	sub	sp, #8
    93e4:	af00      	add	r7, sp, #0
    93e6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    93e8:	687b      	ldr	r3, [r7, #4]
    93ea:	2280      	movs	r2, #128	; 0x80
    93ec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    93ee:	687b      	ldr	r3, [r7, #4]
    93f0:	2200      	movs	r2, #0
    93f2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    93f4:	687b      	ldr	r3, [r7, #4]
    93f6:	2201      	movs	r2, #1
    93f8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    93fa:	687b      	ldr	r3, [r7, #4]
    93fc:	2200      	movs	r2, #0
    93fe:	70da      	strb	r2, [r3, #3]
}
    9400:	46c0      	nop			; (mov r8, r8)
    9402:	46bd      	mov	sp, r7
    9404:	b002      	add	sp, #8
    9406:	bd80      	pop	{r7, pc}

00009408 <system_is_debugger_present>:
{
    9408:	b580      	push	{r7, lr}
    940a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    940c:	4b05      	ldr	r3, [pc, #20]	; (9424 <system_is_debugger_present+0x1c>)
    940e:	789b      	ldrb	r3, [r3, #2]
    9410:	b2db      	uxtb	r3, r3
    9412:	001a      	movs	r2, r3
    9414:	2302      	movs	r3, #2
    9416:	4013      	ands	r3, r2
    9418:	1e5a      	subs	r2, r3, #1
    941a:	4193      	sbcs	r3, r2
    941c:	b2db      	uxtb	r3, r3
}
    941e:	0018      	movs	r0, r3
    9420:	46bd      	mov	sp, r7
    9422:	bd80      	pop	{r7, pc}
    9424:	41002000 	.word	0x41002000

00009428 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    9428:	b580      	push	{r7, lr}
    942a:	b084      	sub	sp, #16
    942c:	af00      	add	r7, sp, #0
    942e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    9430:	687b      	ldr	r3, [r7, #4]
    9432:	681b      	ldr	r3, [r3, #0]
    9434:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    9436:	68fb      	ldr	r3, [r7, #12]
    9438:	69db      	ldr	r3, [r3, #28]
    943a:	1e5a      	subs	r2, r3, #1
    943c:	4193      	sbcs	r3, r2
    943e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    9440:	0018      	movs	r0, r3
    9442:	46bd      	mov	sp, r7
    9444:	b004      	add	sp, #16
    9446:	bd80      	pop	{r7, pc}

00009448 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    9448:	b580      	push	{r7, lr}
    944a:	b082      	sub	sp, #8
    944c:	af00      	add	r7, sp, #0
    944e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    9450:	46c0      	nop			; (mov r8, r8)
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	0018      	movs	r0, r3
    9456:	4b04      	ldr	r3, [pc, #16]	; (9468 <_usart_wait_for_sync+0x20>)
    9458:	4798      	blx	r3
    945a:	1e03      	subs	r3, r0, #0
    945c:	d1f9      	bne.n	9452 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    945e:	46c0      	nop			; (mov r8, r8)
    9460:	46bd      	mov	sp, r7
    9462:	b002      	add	sp, #8
    9464:	bd80      	pop	{r7, pc}
    9466:	46c0      	nop			; (mov r8, r8)
    9468:	00009429 	.word	0x00009429

0000946c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    946c:	b5b0      	push	{r4, r5, r7, lr}
    946e:	b08c      	sub	sp, #48	; 0x30
    9470:	af02      	add	r7, sp, #8
    9472:	6078      	str	r0, [r7, #4]
    9474:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9476:	687b      	ldr	r3, [r7, #4]
    9478:	681b      	ldr	r3, [r3, #0]
    947a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    947c:	687b      	ldr	r3, [r7, #4]
    947e:	681b      	ldr	r3, [r3, #0]
    9480:	0018      	movs	r0, r3
    9482:	4bab      	ldr	r3, [pc, #684]	; (9730 <_usart_set_config+0x2c4>)
    9484:	4798      	blx	r3
    9486:	0003      	movs	r3, r0
    9488:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    948a:	697b      	ldr	r3, [r7, #20]
    948c:	3314      	adds	r3, #20
    948e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    9490:	2300      	movs	r3, #0
    9492:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    9494:	2300      	movs	r3, #0
    9496:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    9498:	230a      	movs	r3, #10
    949a:	18fb      	adds	r3, r7, r3
    949c:	2200      	movs	r2, #0
    949e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    94a0:	231f      	movs	r3, #31
    94a2:	18fb      	adds	r3, r7, r3
    94a4:	2200      	movs	r2, #0
    94a6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    94a8:	231e      	movs	r3, #30
    94aa:	18fb      	adds	r3, r7, r3
    94ac:	2210      	movs	r2, #16
    94ae:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    94b0:	683b      	ldr	r3, [r7, #0]
    94b2:	8a1b      	ldrh	r3, [r3, #16]
    94b4:	2280      	movs	r2, #128	; 0x80
    94b6:	01d2      	lsls	r2, r2, #7
    94b8:	4293      	cmp	r3, r2
    94ba:	d01c      	beq.n	94f6 <_usart_set_config+0x8a>
    94bc:	2280      	movs	r2, #128	; 0x80
    94be:	01d2      	lsls	r2, r2, #7
    94c0:	4293      	cmp	r3, r2
    94c2:	dc06      	bgt.n	94d2 <_usart_set_config+0x66>
    94c4:	2b00      	cmp	r3, #0
    94c6:	d00d      	beq.n	94e4 <_usart_set_config+0x78>
    94c8:	2280      	movs	r2, #128	; 0x80
    94ca:	0192      	lsls	r2, r2, #6
    94cc:	4293      	cmp	r3, r2
    94ce:	d024      	beq.n	951a <_usart_set_config+0xae>
    94d0:	e035      	b.n	953e <_usart_set_config+0xd2>
    94d2:	22c0      	movs	r2, #192	; 0xc0
    94d4:	01d2      	lsls	r2, r2, #7
    94d6:	4293      	cmp	r3, r2
    94d8:	d028      	beq.n	952c <_usart_set_config+0xc0>
    94da:	2280      	movs	r2, #128	; 0x80
    94dc:	0212      	lsls	r2, r2, #8
    94de:	4293      	cmp	r3, r2
    94e0:	d012      	beq.n	9508 <_usart_set_config+0x9c>
    94e2:	e02c      	b.n	953e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    94e4:	231f      	movs	r3, #31
    94e6:	18fb      	adds	r3, r7, r3
    94e8:	2200      	movs	r2, #0
    94ea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    94ec:	231e      	movs	r3, #30
    94ee:	18fb      	adds	r3, r7, r3
    94f0:	2210      	movs	r2, #16
    94f2:	701a      	strb	r2, [r3, #0]
			break;
    94f4:	e023      	b.n	953e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    94f6:	231f      	movs	r3, #31
    94f8:	18fb      	adds	r3, r7, r3
    94fa:	2200      	movs	r2, #0
    94fc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    94fe:	231e      	movs	r3, #30
    9500:	18fb      	adds	r3, r7, r3
    9502:	2208      	movs	r2, #8
    9504:	701a      	strb	r2, [r3, #0]
			break;
    9506:	e01a      	b.n	953e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    9508:	231f      	movs	r3, #31
    950a:	18fb      	adds	r3, r7, r3
    950c:	2200      	movs	r2, #0
    950e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    9510:	231e      	movs	r3, #30
    9512:	18fb      	adds	r3, r7, r3
    9514:	2203      	movs	r2, #3
    9516:	701a      	strb	r2, [r3, #0]
			break;
    9518:	e011      	b.n	953e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    951a:	231f      	movs	r3, #31
    951c:	18fb      	adds	r3, r7, r3
    951e:	2201      	movs	r2, #1
    9520:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    9522:	231e      	movs	r3, #30
    9524:	18fb      	adds	r3, r7, r3
    9526:	2210      	movs	r2, #16
    9528:	701a      	strb	r2, [r3, #0]
			break;
    952a:	e008      	b.n	953e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    952c:	231f      	movs	r3, #31
    952e:	18fb      	adds	r3, r7, r3
    9530:	2201      	movs	r2, #1
    9532:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    9534:	231e      	movs	r3, #30
    9536:	18fb      	adds	r3, r7, r3
    9538:	2208      	movs	r2, #8
    953a:	701a      	strb	r2, [r3, #0]
			break;
    953c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    953e:	683b      	ldr	r3, [r7, #0]
    9540:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    9542:	683b      	ldr	r3, [r7, #0]
    9544:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    9546:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    9548:	683b      	ldr	r3, [r7, #0]
    954a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    954c:	4313      	orrs	r3, r2
		config->sample_rate |
    954e:	683a      	ldr	r2, [r7, #0]
    9550:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    9552:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    9554:	683a      	ldr	r2, [r7, #0]
    9556:	7e12      	ldrb	r2, [r2, #24]
    9558:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    955a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    955c:	683a      	ldr	r2, [r7, #0]
    955e:	2126      	movs	r1, #38	; 0x26
    9560:	5c52      	ldrb	r2, [r2, r1]
    9562:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    9564:	4313      	orrs	r3, r2
    9566:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    9568:	231d      	movs	r3, #29
    956a:	18fb      	adds	r3, r7, r3
    956c:	2200      	movs	r2, #0
    956e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    9570:	683b      	ldr	r3, [r7, #0]
    9572:	685b      	ldr	r3, [r3, #4]
    9574:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    9576:	68fb      	ldr	r3, [r7, #12]
    9578:	2b00      	cmp	r3, #0
    957a:	d01e      	beq.n	95ba <_usart_set_config+0x14e>
    957c:	2280      	movs	r2, #128	; 0x80
    957e:	0552      	lsls	r2, r2, #21
    9580:	4293      	cmp	r3, r2
    9582:	d14f      	bne.n	9624 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    9584:	683b      	ldr	r3, [r7, #0]
    9586:	2227      	movs	r2, #39	; 0x27
    9588:	5c9b      	ldrb	r3, [r3, r2]
    958a:	2201      	movs	r2, #1
    958c:	4053      	eors	r3, r2
    958e:	b2db      	uxtb	r3, r3
    9590:	2b00      	cmp	r3, #0
    9592:	d046      	beq.n	9622 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    9594:	683b      	ldr	r3, [r7, #0]
    9596:	6a1d      	ldr	r5, [r3, #32]
    9598:	693b      	ldr	r3, [r7, #16]
    959a:	b2db      	uxtb	r3, r3
    959c:	0018      	movs	r0, r3
    959e:	4b65      	ldr	r3, [pc, #404]	; (9734 <_usart_set_config+0x2c8>)
    95a0:	4798      	blx	r3
    95a2:	0001      	movs	r1, r0
    95a4:	231d      	movs	r3, #29
    95a6:	18fc      	adds	r4, r7, r3
    95a8:	230a      	movs	r3, #10
    95aa:	18fb      	adds	r3, r7, r3
    95ac:	001a      	movs	r2, r3
    95ae:	0028      	movs	r0, r5
    95b0:	4b61      	ldr	r3, [pc, #388]	; (9738 <_usart_set_config+0x2cc>)
    95b2:	4798      	blx	r3
    95b4:	0003      	movs	r3, r0
    95b6:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    95b8:	e033      	b.n	9622 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    95ba:	683b      	ldr	r3, [r7, #0]
    95bc:	2227      	movs	r2, #39	; 0x27
    95be:	5c9b      	ldrb	r3, [r3, r2]
    95c0:	2b00      	cmp	r3, #0
    95c2:	d014      	beq.n	95ee <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    95c4:	683b      	ldr	r3, [r7, #0]
    95c6:	6a18      	ldr	r0, [r3, #32]
    95c8:	683b      	ldr	r3, [r7, #0]
    95ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    95cc:	231d      	movs	r3, #29
    95ce:	18fc      	adds	r4, r7, r3
    95d0:	231f      	movs	r3, #31
    95d2:	18fb      	adds	r3, r7, r3
    95d4:	781d      	ldrb	r5, [r3, #0]
    95d6:	230a      	movs	r3, #10
    95d8:	18fa      	adds	r2, r7, r3
    95da:	231e      	movs	r3, #30
    95dc:	18fb      	adds	r3, r7, r3
    95de:	781b      	ldrb	r3, [r3, #0]
    95e0:	9300      	str	r3, [sp, #0]
    95e2:	002b      	movs	r3, r5
    95e4:	4d55      	ldr	r5, [pc, #340]	; (973c <_usart_set_config+0x2d0>)
    95e6:	47a8      	blx	r5
    95e8:	0003      	movs	r3, r0
    95ea:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    95ec:	e01a      	b.n	9624 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    95ee:	683b      	ldr	r3, [r7, #0]
    95f0:	6a1d      	ldr	r5, [r3, #32]
    95f2:	693b      	ldr	r3, [r7, #16]
    95f4:	b2db      	uxtb	r3, r3
    95f6:	0018      	movs	r0, r3
    95f8:	4b4e      	ldr	r3, [pc, #312]	; (9734 <_usart_set_config+0x2c8>)
    95fa:	4798      	blx	r3
				status_code =
    95fc:	231d      	movs	r3, #29
    95fe:	18fc      	adds	r4, r7, r3
    9600:	231f      	movs	r3, #31
    9602:	18fb      	adds	r3, r7, r3
    9604:	7819      	ldrb	r1, [r3, #0]
    9606:	230a      	movs	r3, #10
    9608:	18fa      	adds	r2, r7, r3
    960a:	231e      	movs	r3, #30
    960c:	18fb      	adds	r3, r7, r3
    960e:	781b      	ldrb	r3, [r3, #0]
    9610:	9300      	str	r3, [sp, #0]
    9612:	000b      	movs	r3, r1
    9614:	0001      	movs	r1, r0
    9616:	0028      	movs	r0, r5
    9618:	4d48      	ldr	r5, [pc, #288]	; (973c <_usart_set_config+0x2d0>)
    961a:	47a8      	blx	r5
    961c:	0003      	movs	r3, r0
    961e:	7023      	strb	r3, [r4, #0]
			break;
    9620:	e000      	b.n	9624 <_usart_set_config+0x1b8>
			break;
    9622:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    9624:	231d      	movs	r3, #29
    9626:	18fb      	adds	r3, r7, r3
    9628:	781b      	ldrb	r3, [r3, #0]
    962a:	2b00      	cmp	r3, #0
    962c:	d003      	beq.n	9636 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    962e:	231d      	movs	r3, #29
    9630:	18fb      	adds	r3, r7, r3
    9632:	781b      	ldrb	r3, [r3, #0]
    9634:	e077      	b.n	9726 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    9636:	683b      	ldr	r3, [r7, #0]
    9638:	7e5b      	ldrb	r3, [r3, #25]
    963a:	2b00      	cmp	r3, #0
    963c:	d003      	beq.n	9646 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    963e:	683b      	ldr	r3, [r7, #0]
    9640:	7e9a      	ldrb	r2, [r3, #26]
    9642:	69bb      	ldr	r3, [r7, #24]
    9644:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9646:	687b      	ldr	r3, [r7, #4]
    9648:	0018      	movs	r0, r3
    964a:	4b3d      	ldr	r3, [pc, #244]	; (9740 <_usart_set_config+0x2d4>)
    964c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    964e:	230a      	movs	r3, #10
    9650:	18fb      	adds	r3, r7, r3
    9652:	881a      	ldrh	r2, [r3, #0]
    9654:	69bb      	ldr	r3, [r7, #24]
    9656:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    9658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    965a:	68fb      	ldr	r3, [r7, #12]
    965c:	4313      	orrs	r3, r2
    965e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    9660:	683b      	ldr	r3, [r7, #0]
    9662:	2227      	movs	r2, #39	; 0x27
    9664:	5c9b      	ldrb	r3, [r3, r2]
    9666:	2201      	movs	r2, #1
    9668:	4053      	eors	r3, r2
    966a:	b2db      	uxtb	r3, r3
    966c:	2b00      	cmp	r3, #0
    966e:	d003      	beq.n	9678 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    9670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9672:	2204      	movs	r2, #4
    9674:	4313      	orrs	r3, r2
    9676:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    9678:	683b      	ldr	r3, [r7, #0]
    967a:	7e5b      	ldrb	r3, [r3, #25]
    967c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    967e:	683b      	ldr	r3, [r7, #0]
    9680:	7f1b      	ldrb	r3, [r3, #28]
    9682:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    9684:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    9686:	683b      	ldr	r3, [r7, #0]
    9688:	7f5b      	ldrb	r3, [r3, #29]
    968a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    968c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    968e:	683b      	ldr	r3, [r7, #0]
    9690:	2124      	movs	r1, #36	; 0x24
    9692:	5c5b      	ldrb	r3, [r3, r1]
    9694:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    9696:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    9698:	683b      	ldr	r3, [r7, #0]
    969a:	2125      	movs	r1, #37	; 0x25
    969c:	5c5b      	ldrb	r3, [r3, r1]
    969e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    96a0:	4313      	orrs	r3, r2
	ctrlb =  
    96a2:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    96a4:	683b      	ldr	r3, [r7, #0]
    96a6:	7a9b      	ldrb	r3, [r3, #10]
    96a8:	001a      	movs	r2, r3
    96aa:	6a3b      	ldr	r3, [r7, #32]
    96ac:	4313      	orrs	r3, r2
    96ae:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    96b0:	683b      	ldr	r3, [r7, #0]
    96b2:	7adb      	ldrb	r3, [r3, #11]
    96b4:	001a      	movs	r2, r3
    96b6:	6a3b      	ldr	r3, [r7, #32]
    96b8:	4313      	orrs	r3, r2
    96ba:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    96bc:	683b      	ldr	r3, [r7, #0]
    96be:	891b      	ldrh	r3, [r3, #8]
    96c0:	2bff      	cmp	r3, #255	; 0xff
    96c2:	d00b      	beq.n	96dc <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    96c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    96c6:	2280      	movs	r2, #128	; 0x80
    96c8:	0452      	lsls	r2, r2, #17
    96ca:	4313      	orrs	r3, r2
    96cc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    96ce:	683b      	ldr	r3, [r7, #0]
    96d0:	891b      	ldrh	r3, [r3, #8]
    96d2:	001a      	movs	r2, r3
    96d4:	6a3b      	ldr	r3, [r7, #32]
    96d6:	4313      	orrs	r3, r2
    96d8:	623b      	str	r3, [r7, #32]
    96da:	e008      	b.n	96ee <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    96dc:	683b      	ldr	r3, [r7, #0]
    96de:	7edb      	ldrb	r3, [r3, #27]
    96e0:	2b00      	cmp	r3, #0
    96e2:	d004      	beq.n	96ee <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    96e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    96e6:	2280      	movs	r2, #128	; 0x80
    96e8:	04d2      	lsls	r2, r2, #19
    96ea:	4313      	orrs	r3, r2
    96ec:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    96ee:	683b      	ldr	r3, [r7, #0]
    96f0:	222c      	movs	r2, #44	; 0x2c
    96f2:	5c9b      	ldrb	r3, [r3, r2]
    96f4:	2b00      	cmp	r3, #0
    96f6:	d103      	bne.n	9700 <_usart_set_config+0x294>
    96f8:	4b12      	ldr	r3, [pc, #72]	; (9744 <_usart_set_config+0x2d8>)
    96fa:	4798      	blx	r3
    96fc:	1e03      	subs	r3, r0, #0
    96fe:	d003      	beq.n	9708 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    9700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9702:	2280      	movs	r2, #128	; 0x80
    9704:	4313      	orrs	r3, r2
    9706:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9708:	687b      	ldr	r3, [r7, #4]
    970a:	0018      	movs	r0, r3
    970c:	4b0c      	ldr	r3, [pc, #48]	; (9740 <_usart_set_config+0x2d4>)
    970e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    9710:	69bb      	ldr	r3, [r7, #24]
    9712:	6a3a      	ldr	r2, [r7, #32]
    9714:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9716:	687b      	ldr	r3, [r7, #4]
    9718:	0018      	movs	r0, r3
    971a:	4b09      	ldr	r3, [pc, #36]	; (9740 <_usart_set_config+0x2d4>)
    971c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    971e:	69bb      	ldr	r3, [r7, #24]
    9720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9722:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    9724:	2300      	movs	r3, #0
}
    9726:	0018      	movs	r0, r3
    9728:	46bd      	mov	sp, r7
    972a:	b00a      	add	sp, #40	; 0x28
    972c:	bdb0      	pop	{r4, r5, r7, pc}
    972e:	46c0      	nop			; (mov r8, r8)
    9730:	00008d3d 	.word	0x00008d3d
    9734:	0000b001 	.word	0x0000b001
    9738:	0000888b 	.word	0x0000888b
    973c:	00008909 	.word	0x00008909
    9740:	00009449 	.word	0x00009449
    9744:	00009409 	.word	0x00009409

00009748 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    9748:	b590      	push	{r4, r7, lr}
    974a:	b093      	sub	sp, #76	; 0x4c
    974c:	af00      	add	r7, sp, #0
    974e:	60f8      	str	r0, [r7, #12]
    9750:	60b9      	str	r1, [r7, #8]
    9752:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    9754:	233b      	movs	r3, #59	; 0x3b
    9756:	18fb      	adds	r3, r7, r3
    9758:	2200      	movs	r2, #0
    975a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    975c:	68fb      	ldr	r3, [r7, #12]
    975e:	68ba      	ldr	r2, [r7, #8]
    9760:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9762:	68fb      	ldr	r3, [r7, #12]
    9764:	681b      	ldr	r3, [r3, #0]
    9766:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9768:	68fb      	ldr	r3, [r7, #12]
    976a:	681b      	ldr	r3, [r3, #0]
    976c:	0018      	movs	r0, r3
    976e:	4b86      	ldr	r3, [pc, #536]	; (9988 <usart_init+0x240>)
    9770:	4798      	blx	r3
    9772:	0003      	movs	r3, r0
    9774:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    9776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9778:	3302      	adds	r3, #2
    977a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    977e:	3314      	adds	r3, #20
    9780:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    9782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9784:	681b      	ldr	r3, [r3, #0]
    9786:	2201      	movs	r2, #1
    9788:	4013      	ands	r3, r2
    978a:	d001      	beq.n	9790 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    978c:	2305      	movs	r3, #5
    978e:	e0f6      	b.n	997e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    9790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9792:	681b      	ldr	r3, [r3, #0]
    9794:	2202      	movs	r2, #2
    9796:	4013      	ands	r3, r2
    9798:	d001      	beq.n	979e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    979a:	231c      	movs	r3, #28
    979c:	e0ef      	b.n	997e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    979e:	2201      	movs	r2, #1
    97a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    97a2:	409a      	lsls	r2, r3
    97a4:	0013      	movs	r3, r2
    97a6:	0019      	movs	r1, r3
    97a8:	2002      	movs	r0, #2
    97aa:	4b78      	ldr	r3, [pc, #480]	; (998c <usart_init+0x244>)
    97ac:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    97ae:	2324      	movs	r3, #36	; 0x24
    97b0:	18fb      	adds	r3, r7, r3
    97b2:	0018      	movs	r0, r3
    97b4:	4b76      	ldr	r3, [pc, #472]	; (9990 <usart_init+0x248>)
    97b6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    97b8:	687b      	ldr	r3, [r7, #4]
    97ba:	222d      	movs	r2, #45	; 0x2d
    97bc:	5c9a      	ldrb	r2, [r3, r2]
    97be:	2324      	movs	r3, #36	; 0x24
    97c0:	18fb      	adds	r3, r7, r3
    97c2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    97c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97c6:	b2db      	uxtb	r3, r3
    97c8:	2224      	movs	r2, #36	; 0x24
    97ca:	18ba      	adds	r2, r7, r2
    97cc:	0011      	movs	r1, r2
    97ce:	0018      	movs	r0, r3
    97d0:	4b70      	ldr	r3, [pc, #448]	; (9994 <usart_init+0x24c>)
    97d2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    97d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97d6:	b2db      	uxtb	r3, r3
    97d8:	0018      	movs	r0, r3
    97da:	4b6f      	ldr	r3, [pc, #444]	; (9998 <usart_init+0x250>)
    97dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    97de:	687b      	ldr	r3, [r7, #4]
    97e0:	222d      	movs	r2, #45	; 0x2d
    97e2:	5c9b      	ldrb	r3, [r3, r2]
    97e4:	2100      	movs	r1, #0
    97e6:	0018      	movs	r0, r3
    97e8:	4b6c      	ldr	r3, [pc, #432]	; (999c <usart_init+0x254>)
    97ea:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    97ec:	687b      	ldr	r3, [r7, #4]
    97ee:	7ada      	ldrb	r2, [r3, #11]
    97f0:	68fb      	ldr	r3, [r7, #12]
    97f2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    97f4:	687b      	ldr	r3, [r7, #4]
    97f6:	2224      	movs	r2, #36	; 0x24
    97f8:	5c9a      	ldrb	r2, [r3, r2]
    97fa:	68fb      	ldr	r3, [r7, #12]
    97fc:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    97fe:	687b      	ldr	r3, [r7, #4]
    9800:	2225      	movs	r2, #37	; 0x25
    9802:	5c9a      	ldrb	r2, [r3, r2]
    9804:	68fb      	ldr	r3, [r7, #12]
    9806:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    9808:	687b      	ldr	r3, [r7, #4]
    980a:	7eda      	ldrb	r2, [r3, #27]
    980c:	68fb      	ldr	r3, [r7, #12]
    980e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    9810:	687b      	ldr	r3, [r7, #4]
    9812:	7f1a      	ldrb	r2, [r3, #28]
    9814:	68fb      	ldr	r3, [r7, #12]
    9816:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    9818:	233b      	movs	r3, #59	; 0x3b
    981a:	18fc      	adds	r4, r7, r3
    981c:	687a      	ldr	r2, [r7, #4]
    981e:	68fb      	ldr	r3, [r7, #12]
    9820:	0011      	movs	r1, r2
    9822:	0018      	movs	r0, r3
    9824:	4b5e      	ldr	r3, [pc, #376]	; (99a0 <usart_init+0x258>)
    9826:	4798      	blx	r3
    9828:	0003      	movs	r3, r0
    982a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    982c:	233b      	movs	r3, #59	; 0x3b
    982e:	18fb      	adds	r3, r7, r3
    9830:	781b      	ldrb	r3, [r3, #0]
    9832:	2b00      	cmp	r3, #0
    9834:	d003      	beq.n	983e <usart_init+0xf6>
		return status_code;
    9836:	233b      	movs	r3, #59	; 0x3b
    9838:	18fb      	adds	r3, r7, r3
    983a:	781b      	ldrb	r3, [r3, #0]
    983c:	e09f      	b.n	997e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    983e:	2320      	movs	r3, #32
    9840:	18fb      	adds	r3, r7, r3
    9842:	0018      	movs	r0, r3
    9844:	4b57      	ldr	r3, [pc, #348]	; (99a4 <usart_init+0x25c>)
    9846:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9848:	2320      	movs	r3, #32
    984a:	18fb      	adds	r3, r7, r3
    984c:	2200      	movs	r2, #0
    984e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    9850:	2320      	movs	r3, #32
    9852:	18fb      	adds	r3, r7, r3
    9854:	2200      	movs	r2, #0
    9856:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    9858:	687b      	ldr	r3, [r7, #4]
    985a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    985c:	2310      	movs	r3, #16
    985e:	18fb      	adds	r3, r7, r3
    9860:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    9862:	687b      	ldr	r3, [r7, #4]
    9864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    9866:	2310      	movs	r3, #16
    9868:	18fb      	adds	r3, r7, r3
    986a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    986c:	687b      	ldr	r3, [r7, #4]
    986e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    9870:	2310      	movs	r3, #16
    9872:	18fb      	adds	r3, r7, r3
    9874:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    9876:	687b      	ldr	r3, [r7, #4]
    9878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    987a:	2310      	movs	r3, #16
    987c:	18fb      	adds	r3, r7, r3
    987e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    9880:	2347      	movs	r3, #71	; 0x47
    9882:	18fb      	adds	r3, r7, r3
    9884:	2200      	movs	r2, #0
    9886:	701a      	strb	r2, [r3, #0]
    9888:	e02c      	b.n	98e4 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    988a:	2347      	movs	r3, #71	; 0x47
    988c:	18fb      	adds	r3, r7, r3
    988e:	781a      	ldrb	r2, [r3, #0]
    9890:	2310      	movs	r3, #16
    9892:	18fb      	adds	r3, r7, r3
    9894:	0092      	lsls	r2, r2, #2
    9896:	58d3      	ldr	r3, [r2, r3]
    9898:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    989a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    989c:	2b00      	cmp	r3, #0
    989e:	d109      	bne.n	98b4 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    98a0:	2347      	movs	r3, #71	; 0x47
    98a2:	18fb      	adds	r3, r7, r3
    98a4:	781a      	ldrb	r2, [r3, #0]
    98a6:	68bb      	ldr	r3, [r7, #8]
    98a8:	0011      	movs	r1, r2
    98aa:	0018      	movs	r0, r3
    98ac:	4b3e      	ldr	r3, [pc, #248]	; (99a8 <usart_init+0x260>)
    98ae:	4798      	blx	r3
    98b0:	0003      	movs	r3, r0
    98b2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    98b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    98b6:	3301      	adds	r3, #1
    98b8:	d00d      	beq.n	98d6 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    98ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    98bc:	b2da      	uxtb	r2, r3
    98be:	2320      	movs	r3, #32
    98c0:	18fb      	adds	r3, r7, r3
    98c2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    98c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    98c6:	0c1b      	lsrs	r3, r3, #16
    98c8:	b2db      	uxtb	r3, r3
    98ca:	2220      	movs	r2, #32
    98cc:	18ba      	adds	r2, r7, r2
    98ce:	0011      	movs	r1, r2
    98d0:	0018      	movs	r0, r3
    98d2:	4b36      	ldr	r3, [pc, #216]	; (99ac <usart_init+0x264>)
    98d4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    98d6:	2347      	movs	r3, #71	; 0x47
    98d8:	18fb      	adds	r3, r7, r3
    98da:	781a      	ldrb	r2, [r3, #0]
    98dc:	2347      	movs	r3, #71	; 0x47
    98de:	18fb      	adds	r3, r7, r3
    98e0:	3201      	adds	r2, #1
    98e2:	701a      	strb	r2, [r3, #0]
    98e4:	2347      	movs	r3, #71	; 0x47
    98e6:	18fb      	adds	r3, r7, r3
    98e8:	781b      	ldrb	r3, [r3, #0]
    98ea:	2b03      	cmp	r3, #3
    98ec:	d9cd      	bls.n	988a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    98ee:	2300      	movs	r3, #0
    98f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    98f2:	e00a      	b.n	990a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    98f4:	68fa      	ldr	r2, [r7, #12]
    98f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    98f8:	3302      	adds	r3, #2
    98fa:	009b      	lsls	r3, r3, #2
    98fc:	18d3      	adds	r3, r2, r3
    98fe:	3304      	adds	r3, #4
    9900:	2200      	movs	r2, #0
    9902:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    9904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9906:	3301      	adds	r3, #1
    9908:	63fb      	str	r3, [r7, #60]	; 0x3c
    990a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    990c:	2b05      	cmp	r3, #5
    990e:	d9f1      	bls.n	98f4 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    9910:	68fb      	ldr	r3, [r7, #12]
    9912:	2200      	movs	r2, #0
    9914:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    9916:	68fb      	ldr	r3, [r7, #12]
    9918:	2200      	movs	r2, #0
    991a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    991c:	68fb      	ldr	r3, [r7, #12]
    991e:	2200      	movs	r2, #0
    9920:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    9922:	68fb      	ldr	r3, [r7, #12]
    9924:	2200      	movs	r2, #0
    9926:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    9928:	68fb      	ldr	r3, [r7, #12]
    992a:	2230      	movs	r2, #48	; 0x30
    992c:	2100      	movs	r1, #0
    992e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    9930:	68fb      	ldr	r3, [r7, #12]
    9932:	2231      	movs	r2, #49	; 0x31
    9934:	2100      	movs	r1, #0
    9936:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    9938:	68fb      	ldr	r3, [r7, #12]
    993a:	2232      	movs	r2, #50	; 0x32
    993c:	2100      	movs	r1, #0
    993e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    9940:	68fb      	ldr	r3, [r7, #12]
    9942:	2233      	movs	r2, #51	; 0x33
    9944:	2100      	movs	r1, #0
    9946:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    9948:	68fb      	ldr	r3, [r7, #12]
    994a:	681b      	ldr	r3, [r3, #0]
    994c:	2227      	movs	r2, #39	; 0x27
    994e:	18bc      	adds	r4, r7, r2
    9950:	0018      	movs	r0, r3
    9952:	4b0d      	ldr	r3, [pc, #52]	; (9988 <usart_init+0x240>)
    9954:	4798      	blx	r3
    9956:	0003      	movs	r3, r0
    9958:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    995a:	4a15      	ldr	r2, [pc, #84]	; (99b0 <usart_init+0x268>)
    995c:	2327      	movs	r3, #39	; 0x27
    995e:	18fb      	adds	r3, r7, r3
    9960:	781b      	ldrb	r3, [r3, #0]
    9962:	0011      	movs	r1, r2
    9964:	0018      	movs	r0, r3
    9966:	4b13      	ldr	r3, [pc, #76]	; (99b4 <usart_init+0x26c>)
    9968:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    996a:	2327      	movs	r3, #39	; 0x27
    996c:	18fb      	adds	r3, r7, r3
    996e:	781a      	ldrb	r2, [r3, #0]
    9970:	4b11      	ldr	r3, [pc, #68]	; (99b8 <usart_init+0x270>)
    9972:	0092      	lsls	r2, r2, #2
    9974:	68f9      	ldr	r1, [r7, #12]
    9976:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    9978:	233b      	movs	r3, #59	; 0x3b
    997a:	18fb      	adds	r3, r7, r3
    997c:	781b      	ldrb	r3, [r3, #0]
}
    997e:	0018      	movs	r0, r3
    9980:	46bd      	mov	sp, r7
    9982:	b013      	add	sp, #76	; 0x4c
    9984:	bd90      	pop	{r4, r7, pc}
    9986:	46c0      	nop			; (mov r8, r8)
    9988:	00008d3d 	.word	0x00008d3d
    998c:	00009385 	.word	0x00009385
    9990:	0000936d 	.word	0x0000936d
    9994:	0000aedd 	.word	0x0000aedd
    9998:	0000af21 	.word	0x0000af21
    999c:	00008af5 	.word	0x00008af5
    99a0:	0000946d 	.word	0x0000946d
    99a4:	000093e1 	.word	0x000093e1
    99a8:	00008b81 	.word	0x00008b81
    99ac:	0000b1c9 	.word	0x0000b1c9
    99b0:	00009dad 	.word	0x00009dad
    99b4:	0000a101 	.word	0x0000a101
    99b8:	200004f0 	.word	0x200004f0

000099bc <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    99bc:	b580      	push	{r7, lr}
    99be:	b084      	sub	sp, #16
    99c0:	af00      	add	r7, sp, #0
    99c2:	6078      	str	r0, [r7, #4]
    99c4:	000a      	movs	r2, r1
    99c6:	1cbb      	adds	r3, r7, #2
    99c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    99ca:	687b      	ldr	r3, [r7, #4]
    99cc:	681b      	ldr	r3, [r3, #0]
    99ce:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    99d0:	687b      	ldr	r3, [r7, #4]
    99d2:	79db      	ldrb	r3, [r3, #7]
    99d4:	2201      	movs	r2, #1
    99d6:	4053      	eors	r3, r2
    99d8:	b2db      	uxtb	r3, r3
    99da:	2b00      	cmp	r3, #0
    99dc:	d001      	beq.n	99e2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    99de:	231c      	movs	r3, #28
    99e0:	e017      	b.n	9a12 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    99e2:	687b      	ldr	r3, [r7, #4]
    99e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    99e6:	b29b      	uxth	r3, r3
    99e8:	2b00      	cmp	r3, #0
    99ea:	d001      	beq.n	99f0 <usart_write_wait+0x34>
		return STATUS_BUSY;
    99ec:	2305      	movs	r3, #5
    99ee:	e010      	b.n	9a12 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	0018      	movs	r0, r3
    99f4:	4b09      	ldr	r3, [pc, #36]	; (9a1c <usart_write_wait+0x60>)
    99f6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    99f8:	68fb      	ldr	r3, [r7, #12]
    99fa:	1cba      	adds	r2, r7, #2
    99fc:	8812      	ldrh	r2, [r2, #0]
    99fe:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    9a00:	46c0      	nop			; (mov r8, r8)
    9a02:	68fb      	ldr	r3, [r7, #12]
    9a04:	7e1b      	ldrb	r3, [r3, #24]
    9a06:	b2db      	uxtb	r3, r3
    9a08:	001a      	movs	r2, r3
    9a0a:	2302      	movs	r3, #2
    9a0c:	4013      	ands	r3, r2
    9a0e:	d0f8      	beq.n	9a02 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    9a10:	2300      	movs	r3, #0
}
    9a12:	0018      	movs	r0, r3
    9a14:	46bd      	mov	sp, r7
    9a16:	b004      	add	sp, #16
    9a18:	bd80      	pop	{r7, pc}
    9a1a:	46c0      	nop			; (mov r8, r8)
    9a1c:	00009449 	.word	0x00009449

00009a20 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    9a20:	b580      	push	{r7, lr}
    9a22:	b084      	sub	sp, #16
    9a24:	af00      	add	r7, sp, #0
    9a26:	6078      	str	r0, [r7, #4]
    9a28:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9a2a:	687b      	ldr	r3, [r7, #4]
    9a2c:	681b      	ldr	r3, [r3, #0]
    9a2e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    9a30:	687b      	ldr	r3, [r7, #4]
    9a32:	799b      	ldrb	r3, [r3, #6]
    9a34:	2201      	movs	r2, #1
    9a36:	4053      	eors	r3, r2
    9a38:	b2db      	uxtb	r3, r3
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d001      	beq.n	9a42 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    9a3e:	231c      	movs	r3, #28
    9a40:	e05e      	b.n	9b00 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    9a42:	687b      	ldr	r3, [r7, #4]
    9a44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9a46:	b29b      	uxth	r3, r3
    9a48:	2b00      	cmp	r3, #0
    9a4a:	d001      	beq.n	9a50 <usart_read_wait+0x30>
		return STATUS_BUSY;
    9a4c:	2305      	movs	r3, #5
    9a4e:	e057      	b.n	9b00 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    9a50:	68fb      	ldr	r3, [r7, #12]
    9a52:	7e1b      	ldrb	r3, [r3, #24]
    9a54:	b2db      	uxtb	r3, r3
    9a56:	001a      	movs	r2, r3
    9a58:	2304      	movs	r3, #4
    9a5a:	4013      	ands	r3, r2
    9a5c:	d101      	bne.n	9a62 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    9a5e:	2305      	movs	r3, #5
    9a60:	e04e      	b.n	9b00 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9a62:	687b      	ldr	r3, [r7, #4]
    9a64:	0018      	movs	r0, r3
    9a66:	4b28      	ldr	r3, [pc, #160]	; (9b08 <usart_read_wait+0xe8>)
    9a68:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    9a6a:	68fb      	ldr	r3, [r7, #12]
    9a6c:	8b5b      	ldrh	r3, [r3, #26]
    9a6e:	b29b      	uxth	r3, r3
    9a70:	b2da      	uxtb	r2, r3
    9a72:	230b      	movs	r3, #11
    9a74:	18fb      	adds	r3, r7, r3
    9a76:	213f      	movs	r1, #63	; 0x3f
    9a78:	400a      	ands	r2, r1
    9a7a:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    9a7c:	230b      	movs	r3, #11
    9a7e:	18fb      	adds	r3, r7, r3
    9a80:	781b      	ldrb	r3, [r3, #0]
    9a82:	2b00      	cmp	r3, #0
    9a84:	d036      	beq.n	9af4 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    9a86:	230b      	movs	r3, #11
    9a88:	18fb      	adds	r3, r7, r3
    9a8a:	781b      	ldrb	r3, [r3, #0]
    9a8c:	2202      	movs	r2, #2
    9a8e:	4013      	ands	r3, r2
    9a90:	d004      	beq.n	9a9c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    9a92:	68fb      	ldr	r3, [r7, #12]
    9a94:	2202      	movs	r2, #2
    9a96:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    9a98:	231a      	movs	r3, #26
    9a9a:	e031      	b.n	9b00 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    9a9c:	230b      	movs	r3, #11
    9a9e:	18fb      	adds	r3, r7, r3
    9aa0:	781b      	ldrb	r3, [r3, #0]
    9aa2:	2204      	movs	r2, #4
    9aa4:	4013      	ands	r3, r2
    9aa6:	d004      	beq.n	9ab2 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    9aa8:	68fb      	ldr	r3, [r7, #12]
    9aaa:	2204      	movs	r2, #4
    9aac:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    9aae:	231e      	movs	r3, #30
    9ab0:	e026      	b.n	9b00 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    9ab2:	230b      	movs	r3, #11
    9ab4:	18fb      	adds	r3, r7, r3
    9ab6:	781b      	ldrb	r3, [r3, #0]
    9ab8:	2201      	movs	r2, #1
    9aba:	4013      	ands	r3, r2
    9abc:	d004      	beq.n	9ac8 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    9abe:	68fb      	ldr	r3, [r7, #12]
    9ac0:	2201      	movs	r2, #1
    9ac2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    9ac4:	2313      	movs	r3, #19
    9ac6:	e01b      	b.n	9b00 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    9ac8:	230b      	movs	r3, #11
    9aca:	18fb      	adds	r3, r7, r3
    9acc:	781b      	ldrb	r3, [r3, #0]
    9ace:	2210      	movs	r2, #16
    9ad0:	4013      	ands	r3, r2
    9ad2:	d004      	beq.n	9ade <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    9ad4:	68fb      	ldr	r3, [r7, #12]
    9ad6:	2210      	movs	r2, #16
    9ad8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    9ada:	2342      	movs	r3, #66	; 0x42
    9adc:	e010      	b.n	9b00 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    9ade:	230b      	movs	r3, #11
    9ae0:	18fb      	adds	r3, r7, r3
    9ae2:	781b      	ldrb	r3, [r3, #0]
    9ae4:	2220      	movs	r2, #32
    9ae6:	4013      	ands	r3, r2
    9ae8:	d004      	beq.n	9af4 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    9aea:	68fb      	ldr	r3, [r7, #12]
    9aec:	2220      	movs	r2, #32
    9aee:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    9af0:	2341      	movs	r3, #65	; 0x41
    9af2:	e005      	b.n	9b00 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    9af4:	68fb      	ldr	r3, [r7, #12]
    9af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9af8:	b29a      	uxth	r2, r3
    9afa:	683b      	ldr	r3, [r7, #0]
    9afc:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    9afe:	2300      	movs	r3, #0
}
    9b00:	0018      	movs	r0, r3
    9b02:	46bd      	mov	sp, r7
    9b04:	b004      	add	sp, #16
    9b06:	bd80      	pop	{r7, pc}
    9b08:	00009449 	.word	0x00009449

00009b0c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    9b0c:	b580      	push	{r7, lr}
    9b0e:	b08a      	sub	sp, #40	; 0x28
    9b10:	af00      	add	r7, sp, #0
    9b12:	60f8      	str	r0, [r7, #12]
    9b14:	60b9      	str	r1, [r7, #8]
    9b16:	1dbb      	adds	r3, r7, #6
    9b18:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    9b1a:	1dbb      	adds	r3, r7, #6
    9b1c:	881b      	ldrh	r3, [r3, #0]
    9b1e:	2b00      	cmp	r3, #0
    9b20:	d101      	bne.n	9b26 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    9b22:	2317      	movs	r3, #23
    9b24:	e07e      	b.n	9c24 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    9b26:	68fb      	ldr	r3, [r7, #12]
    9b28:	79db      	ldrb	r3, [r3, #7]
    9b2a:	2201      	movs	r2, #1
    9b2c:	4053      	eors	r3, r2
    9b2e:	b2db      	uxtb	r3, r3
    9b30:	2b00      	cmp	r3, #0
    9b32:	d001      	beq.n	9b38 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    9b34:	231c      	movs	r3, #28
    9b36:	e075      	b.n	9c24 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9b38:	68fb      	ldr	r3, [r7, #12]
    9b3a:	681b      	ldr	r3, [r3, #0]
    9b3c:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9b3e:	68fb      	ldr	r3, [r7, #12]
    9b40:	0018      	movs	r0, r3
    9b42:	4b3a      	ldr	r3, [pc, #232]	; (9c2c <usart_write_buffer_wait+0x120>)
    9b44:	4798      	blx	r3

	uint16_t tx_pos = 0;
    9b46:	2326      	movs	r3, #38	; 0x26
    9b48:	18fb      	adds	r3, r7, r3
    9b4a:	2200      	movs	r2, #0
    9b4c:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
    9b4e:	e048      	b.n	9be2 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    9b50:	2300      	movs	r3, #0
    9b52:	623b      	str	r3, [r7, #32]
    9b54:	e00f      	b.n	9b76 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    9b56:	697b      	ldr	r3, [r7, #20]
    9b58:	7e1b      	ldrb	r3, [r3, #24]
    9b5a:	b2db      	uxtb	r3, r3
    9b5c:	001a      	movs	r2, r3
    9b5e:	2301      	movs	r3, #1
    9b60:	4013      	ands	r3, r2
    9b62:	d10d      	bne.n	9b80 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
    9b64:	6a3b      	ldr	r3, [r7, #32]
    9b66:	4a32      	ldr	r2, [pc, #200]	; (9c30 <usart_write_buffer_wait+0x124>)
    9b68:	4293      	cmp	r3, r2
    9b6a:	d101      	bne.n	9b70 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
    9b6c:	2312      	movs	r3, #18
    9b6e:	e059      	b.n	9c24 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    9b70:	6a3b      	ldr	r3, [r7, #32]
    9b72:	3301      	adds	r3, #1
    9b74:	623b      	str	r3, [r7, #32]
    9b76:	6a3b      	ldr	r3, [r7, #32]
    9b78:	4a2d      	ldr	r2, [pc, #180]	; (9c30 <usart_write_buffer_wait+0x124>)
    9b7a:	4293      	cmp	r3, r2
    9b7c:	d9eb      	bls.n	9b56 <usart_write_buffer_wait+0x4a>
    9b7e:	e000      	b.n	9b82 <usart_write_buffer_wait+0x76>
				break;
    9b80:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    9b82:	2326      	movs	r3, #38	; 0x26
    9b84:	18fb      	adds	r3, r7, r3
    9b86:	881b      	ldrh	r3, [r3, #0]
    9b88:	2226      	movs	r2, #38	; 0x26
    9b8a:	18ba      	adds	r2, r7, r2
    9b8c:	1c59      	adds	r1, r3, #1
    9b8e:	8011      	strh	r1, [r2, #0]
    9b90:	001a      	movs	r2, r3
    9b92:	68bb      	ldr	r3, [r7, #8]
    9b94:	189b      	adds	r3, r3, r2
    9b96:	781a      	ldrb	r2, [r3, #0]
    9b98:	231e      	movs	r3, #30
    9b9a:	18fb      	adds	r3, r7, r3
    9b9c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    9b9e:	68fb      	ldr	r3, [r7, #12]
    9ba0:	795b      	ldrb	r3, [r3, #5]
    9ba2:	2b01      	cmp	r3, #1
    9ba4:	d115      	bne.n	9bd2 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    9ba6:	2326      	movs	r3, #38	; 0x26
    9ba8:	18fb      	adds	r3, r7, r3
    9baa:	881b      	ldrh	r3, [r3, #0]
    9bac:	2226      	movs	r2, #38	; 0x26
    9bae:	18ba      	adds	r2, r7, r2
    9bb0:	1c59      	adds	r1, r3, #1
    9bb2:	8011      	strh	r1, [r2, #0]
    9bb4:	001a      	movs	r2, r3
    9bb6:	68bb      	ldr	r3, [r7, #8]
    9bb8:	189b      	adds	r3, r3, r2
    9bba:	781b      	ldrb	r3, [r3, #0]
    9bbc:	021b      	lsls	r3, r3, #8
    9bbe:	b21a      	sxth	r2, r3
    9bc0:	231e      	movs	r3, #30
    9bc2:	18fb      	adds	r3, r7, r3
    9bc4:	2100      	movs	r1, #0
    9bc6:	5e5b      	ldrsh	r3, [r3, r1]
    9bc8:	4313      	orrs	r3, r2
    9bca:	b21a      	sxth	r2, r3
    9bcc:	231e      	movs	r3, #30
    9bce:	18fb      	adds	r3, r7, r3
    9bd0:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    9bd2:	231e      	movs	r3, #30
    9bd4:	18fb      	adds	r3, r7, r3
    9bd6:	881a      	ldrh	r2, [r3, #0]
    9bd8:	68fb      	ldr	r3, [r7, #12]
    9bda:	0011      	movs	r1, r2
    9bdc:	0018      	movs	r0, r3
    9bde:	4b15      	ldr	r3, [pc, #84]	; (9c34 <usart_write_buffer_wait+0x128>)
    9be0:	4798      	blx	r3
	while (length--) {
    9be2:	1dbb      	adds	r3, r7, #6
    9be4:	881b      	ldrh	r3, [r3, #0]
    9be6:	1dba      	adds	r2, r7, #6
    9be8:	1e59      	subs	r1, r3, #1
    9bea:	8011      	strh	r1, [r2, #0]
    9bec:	2b00      	cmp	r3, #0
    9bee:	d1af      	bne.n	9b50 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    9bf0:	2300      	movs	r3, #0
    9bf2:	61bb      	str	r3, [r7, #24]
    9bf4:	e00f      	b.n	9c16 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    9bf6:	697b      	ldr	r3, [r7, #20]
    9bf8:	7e1b      	ldrb	r3, [r3, #24]
    9bfa:	b2db      	uxtb	r3, r3
    9bfc:	001a      	movs	r2, r3
    9bfe:	2302      	movs	r3, #2
    9c00:	4013      	ands	r3, r2
    9c02:	d10d      	bne.n	9c20 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
    9c04:	69bb      	ldr	r3, [r7, #24]
    9c06:	4a0a      	ldr	r2, [pc, #40]	; (9c30 <usart_write_buffer_wait+0x124>)
    9c08:	4293      	cmp	r3, r2
    9c0a:	d101      	bne.n	9c10 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
    9c0c:	2312      	movs	r3, #18
    9c0e:	e009      	b.n	9c24 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    9c10:	69bb      	ldr	r3, [r7, #24]
    9c12:	3301      	adds	r3, #1
    9c14:	61bb      	str	r3, [r7, #24]
    9c16:	69bb      	ldr	r3, [r7, #24]
    9c18:	4a05      	ldr	r2, [pc, #20]	; (9c30 <usart_write_buffer_wait+0x124>)
    9c1a:	4293      	cmp	r3, r2
    9c1c:	d9eb      	bls.n	9bf6 <usart_write_buffer_wait+0xea>
    9c1e:	e000      	b.n	9c22 <usart_write_buffer_wait+0x116>
			break;
    9c20:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
    9c22:	2300      	movs	r3, #0
}
    9c24:	0018      	movs	r0, r3
    9c26:	46bd      	mov	sp, r7
    9c28:	b00a      	add	sp, #40	; 0x28
    9c2a:	bd80      	pop	{r7, pc}
    9c2c:	00009449 	.word	0x00009449
    9c30:	0000ffff 	.word	0x0000ffff
    9c34:	000099bd 	.word	0x000099bd

00009c38 <system_interrupt_enter_critical_section>:
{
    9c38:	b580      	push	{r7, lr}
    9c3a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    9c3c:	4b02      	ldr	r3, [pc, #8]	; (9c48 <system_interrupt_enter_critical_section+0x10>)
    9c3e:	4798      	blx	r3
}
    9c40:	46c0      	nop			; (mov r8, r8)
    9c42:	46bd      	mov	sp, r7
    9c44:	bd80      	pop	{r7, pc}
    9c46:	46c0      	nop			; (mov r8, r8)
    9c48:	0000a24d 	.word	0x0000a24d

00009c4c <system_interrupt_leave_critical_section>:
{
    9c4c:	b580      	push	{r7, lr}
    9c4e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    9c50:	4b02      	ldr	r3, [pc, #8]	; (9c5c <system_interrupt_leave_critical_section+0x10>)
    9c52:	4798      	blx	r3
}
    9c54:	46c0      	nop			; (mov r8, r8)
    9c56:	46bd      	mov	sp, r7
    9c58:	bd80      	pop	{r7, pc}
    9c5a:	46c0      	nop			; (mov r8, r8)
    9c5c:	0000a2a1 	.word	0x0000a2a1

00009c60 <usart_is_syncing>:
{
    9c60:	b580      	push	{r7, lr}
    9c62:	b084      	sub	sp, #16
    9c64:	af00      	add	r7, sp, #0
    9c66:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    9c68:	687b      	ldr	r3, [r7, #4]
    9c6a:	681b      	ldr	r3, [r3, #0]
    9c6c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    9c6e:	68fb      	ldr	r3, [r7, #12]
    9c70:	69db      	ldr	r3, [r3, #28]
    9c72:	1e5a      	subs	r2, r3, #1
    9c74:	4193      	sbcs	r3, r2
    9c76:	b2db      	uxtb	r3, r3
}
    9c78:	0018      	movs	r0, r3
    9c7a:	46bd      	mov	sp, r7
    9c7c:	b004      	add	sp, #16
    9c7e:	bd80      	pop	{r7, pc}

00009c80 <_usart_wait_for_sync>:
{
    9c80:	b580      	push	{r7, lr}
    9c82:	b082      	sub	sp, #8
    9c84:	af00      	add	r7, sp, #0
    9c86:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    9c88:	46c0      	nop			; (mov r8, r8)
    9c8a:	687b      	ldr	r3, [r7, #4]
    9c8c:	0018      	movs	r0, r3
    9c8e:	4b04      	ldr	r3, [pc, #16]	; (9ca0 <_usart_wait_for_sync+0x20>)
    9c90:	4798      	blx	r3
    9c92:	1e03      	subs	r3, r0, #0
    9c94:	d1f9      	bne.n	9c8a <_usart_wait_for_sync+0xa>
}
    9c96:	46c0      	nop			; (mov r8, r8)
    9c98:	46bd      	mov	sp, r7
    9c9a:	b002      	add	sp, #8
    9c9c:	bd80      	pop	{r7, pc}
    9c9e:	46c0      	nop			; (mov r8, r8)
    9ca0:	00009c61 	.word	0x00009c61

00009ca4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    9ca4:	b580      	push	{r7, lr}
    9ca6:	b086      	sub	sp, #24
    9ca8:	af00      	add	r7, sp, #0
    9caa:	60f8      	str	r0, [r7, #12]
    9cac:	60b9      	str	r1, [r7, #8]
    9cae:	1dbb      	adds	r3, r7, #6
    9cb0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9cb2:	68fb      	ldr	r3, [r7, #12]
    9cb4:	681b      	ldr	r3, [r3, #0]
    9cb6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    9cb8:	4b16      	ldr	r3, [pc, #88]	; (9d14 <_usart_read_buffer+0x70>)
    9cba:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    9cbc:	68fb      	ldr	r3, [r7, #12]
    9cbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9cc0:	b29b      	uxth	r3, r3
    9cc2:	2b00      	cmp	r3, #0
    9cc4:	d003      	beq.n	9cce <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    9cc6:	4b14      	ldr	r3, [pc, #80]	; (9d18 <_usart_read_buffer+0x74>)
    9cc8:	4798      	blx	r3
		return STATUS_BUSY;
    9cca:	2305      	movs	r3, #5
    9ccc:	e01e      	b.n	9d0c <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    9cce:	68fb      	ldr	r3, [r7, #12]
    9cd0:	1dba      	adds	r2, r7, #6
    9cd2:	8812      	ldrh	r2, [r2, #0]
    9cd4:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    9cd6:	4b10      	ldr	r3, [pc, #64]	; (9d18 <_usart_read_buffer+0x74>)
    9cd8:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    9cda:	68fb      	ldr	r3, [r7, #12]
    9cdc:	68ba      	ldr	r2, [r7, #8]
    9cde:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    9ce0:	68fb      	ldr	r3, [r7, #12]
    9ce2:	2232      	movs	r2, #50	; 0x32
    9ce4:	2105      	movs	r1, #5
    9ce6:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    9ce8:	697b      	ldr	r3, [r7, #20]
    9cea:	2204      	movs	r2, #4
    9cec:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    9cee:	68fb      	ldr	r3, [r7, #12]
    9cf0:	7a1b      	ldrb	r3, [r3, #8]
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	d002      	beq.n	9cfc <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    9cf6:	697b      	ldr	r3, [r7, #20]
    9cf8:	2220      	movs	r2, #32
    9cfa:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    9cfc:	68fb      	ldr	r3, [r7, #12]
    9cfe:	7a5b      	ldrb	r3, [r3, #9]
    9d00:	2b00      	cmp	r3, #0
    9d02:	d002      	beq.n	9d0a <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    9d04:	697b      	ldr	r3, [r7, #20]
    9d06:	2208      	movs	r2, #8
    9d08:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    9d0a:	2300      	movs	r3, #0
}
    9d0c:	0018      	movs	r0, r3
    9d0e:	46bd      	mov	sp, r7
    9d10:	b006      	add	sp, #24
    9d12:	bd80      	pop	{r7, pc}
    9d14:	00009c39 	.word	0x00009c39
    9d18:	00009c4d 	.word	0x00009c4d

00009d1c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    9d1c:	b580      	push	{r7, lr}
    9d1e:	b084      	sub	sp, #16
    9d20:	af00      	add	r7, sp, #0
    9d22:	60f8      	str	r0, [r7, #12]
    9d24:	60b9      	str	r1, [r7, #8]
    9d26:	1dfb      	adds	r3, r7, #7
    9d28:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    9d2a:	1dfb      	adds	r3, r7, #7
    9d2c:	781b      	ldrb	r3, [r3, #0]
    9d2e:	68fa      	ldr	r2, [r7, #12]
    9d30:	3302      	adds	r3, #2
    9d32:	009b      	lsls	r3, r3, #2
    9d34:	18d3      	adds	r3, r2, r3
    9d36:	3304      	adds	r3, #4
    9d38:	68ba      	ldr	r2, [r7, #8]
    9d3a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    9d3c:	68fb      	ldr	r3, [r7, #12]
    9d3e:	2230      	movs	r2, #48	; 0x30
    9d40:	5c9b      	ldrb	r3, [r3, r2]
    9d42:	b25a      	sxtb	r2, r3
    9d44:	1dfb      	adds	r3, r7, #7
    9d46:	781b      	ldrb	r3, [r3, #0]
    9d48:	2101      	movs	r1, #1
    9d4a:	4099      	lsls	r1, r3
    9d4c:	000b      	movs	r3, r1
    9d4e:	b25b      	sxtb	r3, r3
    9d50:	4313      	orrs	r3, r2
    9d52:	b25b      	sxtb	r3, r3
    9d54:	b2d9      	uxtb	r1, r3
    9d56:	68fb      	ldr	r3, [r7, #12]
    9d58:	2230      	movs	r2, #48	; 0x30
    9d5a:	5499      	strb	r1, [r3, r2]
}
    9d5c:	46c0      	nop			; (mov r8, r8)
    9d5e:	46bd      	mov	sp, r7
    9d60:	b004      	add	sp, #16
    9d62:	bd80      	pop	{r7, pc}

00009d64 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    9d64:	b580      	push	{r7, lr}
    9d66:	b084      	sub	sp, #16
    9d68:	af00      	add	r7, sp, #0
    9d6a:	60f8      	str	r0, [r7, #12]
    9d6c:	60b9      	str	r1, [r7, #8]
    9d6e:	1dbb      	adds	r3, r7, #6
    9d70:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    9d72:	1dbb      	adds	r3, r7, #6
    9d74:	881b      	ldrh	r3, [r3, #0]
    9d76:	2b00      	cmp	r3, #0
    9d78:	d101      	bne.n	9d7e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    9d7a:	2317      	movs	r3, #23
    9d7c:	e010      	b.n	9da0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    9d7e:	68fb      	ldr	r3, [r7, #12]
    9d80:	799b      	ldrb	r3, [r3, #6]
    9d82:	2201      	movs	r2, #1
    9d84:	4053      	eors	r3, r2
    9d86:	b2db      	uxtb	r3, r3
    9d88:	2b00      	cmp	r3, #0
    9d8a:	d001      	beq.n	9d90 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    9d8c:	231c      	movs	r3, #28
    9d8e:	e007      	b.n	9da0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    9d90:	1dbb      	adds	r3, r7, #6
    9d92:	881a      	ldrh	r2, [r3, #0]
    9d94:	68b9      	ldr	r1, [r7, #8]
    9d96:	68fb      	ldr	r3, [r7, #12]
    9d98:	0018      	movs	r0, r3
    9d9a:	4b03      	ldr	r3, [pc, #12]	; (9da8 <usart_read_buffer_job+0x44>)
    9d9c:	4798      	blx	r3
    9d9e:	0003      	movs	r3, r0
}
    9da0:	0018      	movs	r0, r3
    9da2:	46bd      	mov	sp, r7
    9da4:	b004      	add	sp, #16
    9da6:	bd80      	pop	{r7, pc}
    9da8:	00009ca5 	.word	0x00009ca5

00009dac <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    9dac:	b580      	push	{r7, lr}
    9dae:	b088      	sub	sp, #32
    9db0:	af00      	add	r7, sp, #0
    9db2:	0002      	movs	r2, r0
    9db4:	1dfb      	adds	r3, r7, #7
    9db6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    9db8:	1dfb      	adds	r3, r7, #7
    9dba:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    9dbc:	4ba3      	ldr	r3, [pc, #652]	; (a04c <_usart_interrupt_handler+0x2a0>)
    9dbe:	0092      	lsls	r2, r2, #2
    9dc0:	58d3      	ldr	r3, [r2, r3]
    9dc2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    9dc4:	69bb      	ldr	r3, [r7, #24]
    9dc6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    9dc8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    9dca:	69bb      	ldr	r3, [r7, #24]
    9dcc:	0018      	movs	r0, r3
    9dce:	4ba0      	ldr	r3, [pc, #640]	; (a050 <_usart_interrupt_handler+0x2a4>)
    9dd0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    9dd2:	697b      	ldr	r3, [r7, #20]
    9dd4:	7e1b      	ldrb	r3, [r3, #24]
    9dd6:	b2da      	uxtb	r2, r3
    9dd8:	2312      	movs	r3, #18
    9dda:	18fb      	adds	r3, r7, r3
    9ddc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    9dde:	697b      	ldr	r3, [r7, #20]
    9de0:	7d9b      	ldrb	r3, [r3, #22]
    9de2:	b2db      	uxtb	r3, r3
    9de4:	b29a      	uxth	r2, r3
    9de6:	2312      	movs	r3, #18
    9de8:	18fb      	adds	r3, r7, r3
    9dea:	2112      	movs	r1, #18
    9dec:	1879      	adds	r1, r7, r1
    9dee:	8809      	ldrh	r1, [r1, #0]
    9df0:	400a      	ands	r2, r1
    9df2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    9df4:	69bb      	ldr	r3, [r7, #24]
    9df6:	2230      	movs	r2, #48	; 0x30
    9df8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    9dfa:	69ba      	ldr	r2, [r7, #24]
    9dfc:	2131      	movs	r1, #49	; 0x31
    9dfe:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    9e00:	4013      	ands	r3, r2
    9e02:	b2da      	uxtb	r2, r3
    9e04:	2310      	movs	r3, #16
    9e06:	18fb      	adds	r3, r7, r3
    9e08:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    9e0a:	2312      	movs	r3, #18
    9e0c:	18fb      	adds	r3, r7, r3
    9e0e:	881b      	ldrh	r3, [r3, #0]
    9e10:	2201      	movs	r2, #1
    9e12:	4013      	ands	r3, r2
    9e14:	d044      	beq.n	9ea0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    9e16:	69bb      	ldr	r3, [r7, #24]
    9e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9e1a:	b29b      	uxth	r3, r3
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	d03c      	beq.n	9e9a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    9e20:	69bb      	ldr	r3, [r7, #24]
    9e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e24:	781b      	ldrb	r3, [r3, #0]
    9e26:	b2da      	uxtb	r2, r3
    9e28:	231c      	movs	r3, #28
    9e2a:	18fb      	adds	r3, r7, r3
    9e2c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    9e2e:	69bb      	ldr	r3, [r7, #24]
    9e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e32:	1c5a      	adds	r2, r3, #1
    9e34:	69bb      	ldr	r3, [r7, #24]
    9e36:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    9e38:	69bb      	ldr	r3, [r7, #24]
    9e3a:	795b      	ldrb	r3, [r3, #5]
    9e3c:	2b01      	cmp	r3, #1
    9e3e:	d113      	bne.n	9e68 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    9e40:	69bb      	ldr	r3, [r7, #24]
    9e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e44:	781b      	ldrb	r3, [r3, #0]
    9e46:	b2db      	uxtb	r3, r3
    9e48:	021b      	lsls	r3, r3, #8
    9e4a:	b21a      	sxth	r2, r3
    9e4c:	231c      	movs	r3, #28
    9e4e:	18fb      	adds	r3, r7, r3
    9e50:	2100      	movs	r1, #0
    9e52:	5e5b      	ldrsh	r3, [r3, r1]
    9e54:	4313      	orrs	r3, r2
    9e56:	b21a      	sxth	r2, r3
    9e58:	231c      	movs	r3, #28
    9e5a:	18fb      	adds	r3, r7, r3
    9e5c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    9e5e:	69bb      	ldr	r3, [r7, #24]
    9e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e62:	1c5a      	adds	r2, r3, #1
    9e64:	69bb      	ldr	r3, [r7, #24]
    9e66:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    9e68:	231c      	movs	r3, #28
    9e6a:	18fb      	adds	r3, r7, r3
    9e6c:	881b      	ldrh	r3, [r3, #0]
    9e6e:	05db      	lsls	r3, r3, #23
    9e70:	0ddb      	lsrs	r3, r3, #23
    9e72:	b29a      	uxth	r2, r3
    9e74:	697b      	ldr	r3, [r7, #20]
    9e76:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    9e78:	69bb      	ldr	r3, [r7, #24]
    9e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9e7c:	b29b      	uxth	r3, r3
    9e7e:	3b01      	subs	r3, #1
    9e80:	b29b      	uxth	r3, r3
    9e82:	69ba      	ldr	r2, [r7, #24]
    9e84:	1c19      	adds	r1, r3, #0
    9e86:	85d1      	strh	r1, [r2, #46]	; 0x2e
    9e88:	2b00      	cmp	r3, #0
    9e8a:	d109      	bne.n	9ea0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    9e8c:	697b      	ldr	r3, [r7, #20]
    9e8e:	2201      	movs	r2, #1
    9e90:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    9e92:	697b      	ldr	r3, [r7, #20]
    9e94:	2202      	movs	r2, #2
    9e96:	759a      	strb	r2, [r3, #22]
    9e98:	e002      	b.n	9ea0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    9e9a:	697b      	ldr	r3, [r7, #20]
    9e9c:	2201      	movs	r2, #1
    9e9e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    9ea0:	2312      	movs	r3, #18
    9ea2:	18fb      	adds	r3, r7, r3
    9ea4:	881b      	ldrh	r3, [r3, #0]
    9ea6:	2202      	movs	r2, #2
    9ea8:	4013      	ands	r3, r2
    9eaa:	d011      	beq.n	9ed0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    9eac:	697b      	ldr	r3, [r7, #20]
    9eae:	2202      	movs	r2, #2
    9eb0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    9eb2:	69bb      	ldr	r3, [r7, #24]
    9eb4:	2233      	movs	r2, #51	; 0x33
    9eb6:	2100      	movs	r1, #0
    9eb8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    9eba:	2310      	movs	r3, #16
    9ebc:	18fb      	adds	r3, r7, r3
    9ebe:	881b      	ldrh	r3, [r3, #0]
    9ec0:	2201      	movs	r2, #1
    9ec2:	4013      	ands	r3, r2
    9ec4:	d004      	beq.n	9ed0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    9ec6:	69bb      	ldr	r3, [r7, #24]
    9ec8:	68db      	ldr	r3, [r3, #12]
    9eca:	69ba      	ldr	r2, [r7, #24]
    9ecc:	0010      	movs	r0, r2
    9ece:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    9ed0:	2312      	movs	r3, #18
    9ed2:	18fb      	adds	r3, r7, r3
    9ed4:	881b      	ldrh	r3, [r3, #0]
    9ed6:	2204      	movs	r2, #4
    9ed8:	4013      	ands	r3, r2
    9eda:	d100      	bne.n	9ede <_usart_interrupt_handler+0x132>
    9edc:	e0bd      	b.n	a05a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    9ede:	69bb      	ldr	r3, [r7, #24]
    9ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9ee2:	b29b      	uxth	r3, r3
    9ee4:	2b00      	cmp	r3, #0
    9ee6:	d100      	bne.n	9eea <_usart_interrupt_handler+0x13e>
    9ee8:	e0b4      	b.n	a054 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    9eea:	697b      	ldr	r3, [r7, #20]
    9eec:	8b5b      	ldrh	r3, [r3, #26]
    9eee:	b29b      	uxth	r3, r3
    9ef0:	b2da      	uxtb	r2, r3
    9ef2:	231f      	movs	r3, #31
    9ef4:	18fb      	adds	r3, r7, r3
    9ef6:	213f      	movs	r1, #63	; 0x3f
    9ef8:	400a      	ands	r2, r1
    9efa:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    9efc:	231f      	movs	r3, #31
    9efe:	18fb      	adds	r3, r7, r3
    9f00:	781b      	ldrb	r3, [r3, #0]
    9f02:	2208      	movs	r2, #8
    9f04:	4013      	ands	r3, r2
    9f06:	d007      	beq.n	9f18 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    9f08:	231f      	movs	r3, #31
    9f0a:	18fb      	adds	r3, r7, r3
    9f0c:	221f      	movs	r2, #31
    9f0e:	18ba      	adds	r2, r7, r2
    9f10:	7812      	ldrb	r2, [r2, #0]
    9f12:	2108      	movs	r1, #8
    9f14:	438a      	bics	r2, r1
    9f16:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    9f18:	231f      	movs	r3, #31
    9f1a:	18fb      	adds	r3, r7, r3
    9f1c:	781b      	ldrb	r3, [r3, #0]
    9f1e:	2b00      	cmp	r3, #0
    9f20:	d050      	beq.n	9fc4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    9f22:	231f      	movs	r3, #31
    9f24:	18fb      	adds	r3, r7, r3
    9f26:	781b      	ldrb	r3, [r3, #0]
    9f28:	2202      	movs	r2, #2
    9f2a:	4013      	ands	r3, r2
    9f2c:	d007      	beq.n	9f3e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    9f2e:	69bb      	ldr	r3, [r7, #24]
    9f30:	2232      	movs	r2, #50	; 0x32
    9f32:	211a      	movs	r1, #26
    9f34:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    9f36:	697b      	ldr	r3, [r7, #20]
    9f38:	2202      	movs	r2, #2
    9f3a:	835a      	strh	r2, [r3, #26]
    9f3c:	e036      	b.n	9fac <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    9f3e:	231f      	movs	r3, #31
    9f40:	18fb      	adds	r3, r7, r3
    9f42:	781b      	ldrb	r3, [r3, #0]
    9f44:	2204      	movs	r2, #4
    9f46:	4013      	ands	r3, r2
    9f48:	d007      	beq.n	9f5a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    9f4a:	69bb      	ldr	r3, [r7, #24]
    9f4c:	2232      	movs	r2, #50	; 0x32
    9f4e:	211e      	movs	r1, #30
    9f50:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    9f52:	697b      	ldr	r3, [r7, #20]
    9f54:	2204      	movs	r2, #4
    9f56:	835a      	strh	r2, [r3, #26]
    9f58:	e028      	b.n	9fac <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    9f5a:	231f      	movs	r3, #31
    9f5c:	18fb      	adds	r3, r7, r3
    9f5e:	781b      	ldrb	r3, [r3, #0]
    9f60:	2201      	movs	r2, #1
    9f62:	4013      	ands	r3, r2
    9f64:	d007      	beq.n	9f76 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    9f66:	69bb      	ldr	r3, [r7, #24]
    9f68:	2232      	movs	r2, #50	; 0x32
    9f6a:	2113      	movs	r1, #19
    9f6c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    9f6e:	697b      	ldr	r3, [r7, #20]
    9f70:	2201      	movs	r2, #1
    9f72:	835a      	strh	r2, [r3, #26]
    9f74:	e01a      	b.n	9fac <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    9f76:	231f      	movs	r3, #31
    9f78:	18fb      	adds	r3, r7, r3
    9f7a:	781b      	ldrb	r3, [r3, #0]
    9f7c:	2210      	movs	r2, #16
    9f7e:	4013      	ands	r3, r2
    9f80:	d007      	beq.n	9f92 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    9f82:	69bb      	ldr	r3, [r7, #24]
    9f84:	2232      	movs	r2, #50	; 0x32
    9f86:	2142      	movs	r1, #66	; 0x42
    9f88:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    9f8a:	697b      	ldr	r3, [r7, #20]
    9f8c:	2210      	movs	r2, #16
    9f8e:	835a      	strh	r2, [r3, #26]
    9f90:	e00c      	b.n	9fac <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    9f92:	231f      	movs	r3, #31
    9f94:	18fb      	adds	r3, r7, r3
    9f96:	781b      	ldrb	r3, [r3, #0]
    9f98:	2220      	movs	r2, #32
    9f9a:	4013      	ands	r3, r2
    9f9c:	d006      	beq.n	9fac <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    9f9e:	69bb      	ldr	r3, [r7, #24]
    9fa0:	2232      	movs	r2, #50	; 0x32
    9fa2:	2141      	movs	r1, #65	; 0x41
    9fa4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    9fa6:	697b      	ldr	r3, [r7, #20]
    9fa8:	2220      	movs	r2, #32
    9faa:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    9fac:	2310      	movs	r3, #16
    9fae:	18fb      	adds	r3, r7, r3
    9fb0:	881b      	ldrh	r3, [r3, #0]
    9fb2:	2204      	movs	r2, #4
    9fb4:	4013      	ands	r3, r2
				if (callback_status
    9fb6:	d050      	beq.n	a05a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    9fb8:	69bb      	ldr	r3, [r7, #24]
    9fba:	695b      	ldr	r3, [r3, #20]
    9fbc:	69ba      	ldr	r2, [r7, #24]
    9fbe:	0010      	movs	r0, r2
    9fc0:	4798      	blx	r3
    9fc2:	e04a      	b.n	a05a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    9fc4:	697b      	ldr	r3, [r7, #20]
    9fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9fc8:	b29a      	uxth	r2, r3
    9fca:	230e      	movs	r3, #14
    9fcc:	18fb      	adds	r3, r7, r3
    9fce:	05d2      	lsls	r2, r2, #23
    9fd0:	0dd2      	lsrs	r2, r2, #23
    9fd2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    9fd4:	69bb      	ldr	r3, [r7, #24]
    9fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9fd8:	220e      	movs	r2, #14
    9fda:	18ba      	adds	r2, r7, r2
    9fdc:	8812      	ldrh	r2, [r2, #0]
    9fde:	b2d2      	uxtb	r2, r2
    9fe0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    9fe2:	69bb      	ldr	r3, [r7, #24]
    9fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9fe6:	1c5a      	adds	r2, r3, #1
    9fe8:	69bb      	ldr	r3, [r7, #24]
    9fea:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    9fec:	69bb      	ldr	r3, [r7, #24]
    9fee:	795b      	ldrb	r3, [r3, #5]
    9ff0:	2b01      	cmp	r3, #1
    9ff2:	d10d      	bne.n	a010 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    9ff4:	69bb      	ldr	r3, [r7, #24]
    9ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ff8:	220e      	movs	r2, #14
    9ffa:	18ba      	adds	r2, r7, r2
    9ffc:	8812      	ldrh	r2, [r2, #0]
    9ffe:	0a12      	lsrs	r2, r2, #8
    a000:	b292      	uxth	r2, r2
    a002:	b2d2      	uxtb	r2, r2
    a004:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    a006:	69bb      	ldr	r3, [r7, #24]
    a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a00a:	1c5a      	adds	r2, r3, #1
    a00c:	69bb      	ldr	r3, [r7, #24]
    a00e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    a010:	69bb      	ldr	r3, [r7, #24]
    a012:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    a014:	b29b      	uxth	r3, r3
    a016:	3b01      	subs	r3, #1
    a018:	b29b      	uxth	r3, r3
    a01a:	69ba      	ldr	r2, [r7, #24]
    a01c:	1c19      	adds	r1, r3, #0
    a01e:	8591      	strh	r1, [r2, #44]	; 0x2c
    a020:	2b00      	cmp	r3, #0
    a022:	d11a      	bne.n	a05a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    a024:	697b      	ldr	r3, [r7, #20]
    a026:	2204      	movs	r2, #4
    a028:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    a02a:	69bb      	ldr	r3, [r7, #24]
    a02c:	2232      	movs	r2, #50	; 0x32
    a02e:	2100      	movs	r1, #0
    a030:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    a032:	2310      	movs	r3, #16
    a034:	18fb      	adds	r3, r7, r3
    a036:	881b      	ldrh	r3, [r3, #0]
    a038:	2202      	movs	r2, #2
    a03a:	4013      	ands	r3, r2
					if (callback_status
    a03c:	d00d      	beq.n	a05a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    a03e:	69bb      	ldr	r3, [r7, #24]
    a040:	691b      	ldr	r3, [r3, #16]
    a042:	69ba      	ldr	r2, [r7, #24]
    a044:	0010      	movs	r0, r2
    a046:	4798      	blx	r3
    a048:	e007      	b.n	a05a <_usart_interrupt_handler+0x2ae>
    a04a:	46c0      	nop			; (mov r8, r8)
    a04c:	200004f0 	.word	0x200004f0
    a050:	00009c81 	.word	0x00009c81
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    a054:	697b      	ldr	r3, [r7, #20]
    a056:	2204      	movs	r2, #4
    a058:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    a05a:	2312      	movs	r3, #18
    a05c:	18fb      	adds	r3, r7, r3
    a05e:	881b      	ldrh	r3, [r3, #0]
    a060:	2210      	movs	r2, #16
    a062:	4013      	ands	r3, r2
    a064:	d010      	beq.n	a088 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    a066:	697b      	ldr	r3, [r7, #20]
    a068:	2210      	movs	r2, #16
    a06a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    a06c:	697b      	ldr	r3, [r7, #20]
    a06e:	2210      	movs	r2, #16
    a070:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    a072:	2310      	movs	r3, #16
    a074:	18fb      	adds	r3, r7, r3
    a076:	881b      	ldrh	r3, [r3, #0]
    a078:	2210      	movs	r2, #16
    a07a:	4013      	ands	r3, r2
    a07c:	d004      	beq.n	a088 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    a07e:	69bb      	ldr	r3, [r7, #24]
    a080:	69db      	ldr	r3, [r3, #28]
    a082:	69ba      	ldr	r2, [r7, #24]
    a084:	0010      	movs	r0, r2
    a086:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    a088:	2312      	movs	r3, #18
    a08a:	18fb      	adds	r3, r7, r3
    a08c:	881b      	ldrh	r3, [r3, #0]
    a08e:	2220      	movs	r2, #32
    a090:	4013      	ands	r3, r2
    a092:	d010      	beq.n	a0b6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    a094:	697b      	ldr	r3, [r7, #20]
    a096:	2220      	movs	r2, #32
    a098:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    a09a:	697b      	ldr	r3, [r7, #20]
    a09c:	2220      	movs	r2, #32
    a09e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    a0a0:	2310      	movs	r3, #16
    a0a2:	18fb      	adds	r3, r7, r3
    a0a4:	881b      	ldrh	r3, [r3, #0]
    a0a6:	2208      	movs	r2, #8
    a0a8:	4013      	ands	r3, r2
    a0aa:	d004      	beq.n	a0b6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    a0ac:	69bb      	ldr	r3, [r7, #24]
    a0ae:	699b      	ldr	r3, [r3, #24]
    a0b0:	69ba      	ldr	r2, [r7, #24]
    a0b2:	0010      	movs	r0, r2
    a0b4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    a0b6:	2312      	movs	r3, #18
    a0b8:	18fb      	adds	r3, r7, r3
    a0ba:	881b      	ldrh	r3, [r3, #0]
    a0bc:	2208      	movs	r2, #8
    a0be:	4013      	ands	r3, r2
    a0c0:	d010      	beq.n	a0e4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    a0c2:	697b      	ldr	r3, [r7, #20]
    a0c4:	2208      	movs	r2, #8
    a0c6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    a0c8:	697b      	ldr	r3, [r7, #20]
    a0ca:	2208      	movs	r2, #8
    a0cc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    a0ce:	2310      	movs	r3, #16
    a0d0:	18fb      	adds	r3, r7, r3
    a0d2:	881b      	ldrh	r3, [r3, #0]
    a0d4:	2220      	movs	r2, #32
    a0d6:	4013      	ands	r3, r2
    a0d8:	d004      	beq.n	a0e4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    a0da:	69bb      	ldr	r3, [r7, #24]
    a0dc:	6a1b      	ldr	r3, [r3, #32]
    a0de:	69ba      	ldr	r2, [r7, #24]
    a0e0:	0010      	movs	r0, r2
    a0e2:	4798      	blx	r3
		}
	}
#endif
}
    a0e4:	46c0      	nop			; (mov r8, r8)
    a0e6:	46bd      	mov	sp, r7
    a0e8:	b008      	add	sp, #32
    a0ea:	bd80      	pop	{r7, pc}

0000a0ec <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    a0ec:	b580      	push	{r7, lr}
    a0ee:	b082      	sub	sp, #8
    a0f0:	af00      	add	r7, sp, #0
    a0f2:	0002      	movs	r2, r0
    a0f4:	1dfb      	adds	r3, r7, #7
    a0f6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    a0f8:	46c0      	nop			; (mov r8, r8)
    a0fa:	46bd      	mov	sp, r7
    a0fc:	b002      	add	sp, #8
    a0fe:	bd80      	pop	{r7, pc}

0000a100 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    a100:	b580      	push	{r7, lr}
    a102:	b084      	sub	sp, #16
    a104:	af00      	add	r7, sp, #0
    a106:	0002      	movs	r2, r0
    a108:	6039      	str	r1, [r7, #0]
    a10a:	1dfb      	adds	r3, r7, #7
    a10c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    a10e:	4b13      	ldr	r3, [pc, #76]	; (a15c <_sercom_set_handler+0x5c>)
    a110:	781b      	ldrb	r3, [r3, #0]
    a112:	2201      	movs	r2, #1
    a114:	4053      	eors	r3, r2
    a116:	b2db      	uxtb	r3, r3
    a118:	2b00      	cmp	r3, #0
    a11a:	d015      	beq.n	a148 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a11c:	2300      	movs	r3, #0
    a11e:	60fb      	str	r3, [r7, #12]
    a120:	e00c      	b.n	a13c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    a122:	4b0f      	ldr	r3, [pc, #60]	; (a160 <_sercom_set_handler+0x60>)
    a124:	68fa      	ldr	r2, [r7, #12]
    a126:	0092      	lsls	r2, r2, #2
    a128:	490e      	ldr	r1, [pc, #56]	; (a164 <_sercom_set_handler+0x64>)
    a12a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    a12c:	4b0e      	ldr	r3, [pc, #56]	; (a168 <_sercom_set_handler+0x68>)
    a12e:	68fa      	ldr	r2, [r7, #12]
    a130:	0092      	lsls	r2, r2, #2
    a132:	2100      	movs	r1, #0
    a134:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a136:	68fb      	ldr	r3, [r7, #12]
    a138:	3301      	adds	r3, #1
    a13a:	60fb      	str	r3, [r7, #12]
    a13c:	68fb      	ldr	r3, [r7, #12]
    a13e:	2b05      	cmp	r3, #5
    a140:	d9ef      	bls.n	a122 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    a142:	4b06      	ldr	r3, [pc, #24]	; (a15c <_sercom_set_handler+0x5c>)
    a144:	2201      	movs	r2, #1
    a146:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    a148:	1dfb      	adds	r3, r7, #7
    a14a:	781a      	ldrb	r2, [r3, #0]
    a14c:	4b04      	ldr	r3, [pc, #16]	; (a160 <_sercom_set_handler+0x60>)
    a14e:	0092      	lsls	r2, r2, #2
    a150:	6839      	ldr	r1, [r7, #0]
    a152:	50d1      	str	r1, [r2, r3]
}
    a154:	46c0      	nop			; (mov r8, r8)
    a156:	46bd      	mov	sp, r7
    a158:	b004      	add	sp, #16
    a15a:	bd80      	pop	{r7, pc}
    a15c:	200002aa 	.word	0x200002aa
    a160:	200002ac 	.word	0x200002ac
    a164:	0000a0ed 	.word	0x0000a0ed
    a168:	200004f0 	.word	0x200004f0

0000a16c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    a16c:	b590      	push	{r4, r7, lr}
    a16e:	b085      	sub	sp, #20
    a170:	af00      	add	r7, sp, #0
    a172:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    a174:	2308      	movs	r3, #8
    a176:	18fb      	adds	r3, r7, r3
    a178:	4a0b      	ldr	r2, [pc, #44]	; (a1a8 <_sercom_get_interrupt_vector+0x3c>)
    a17a:	6811      	ldr	r1, [r2, #0]
    a17c:	6019      	str	r1, [r3, #0]
    a17e:	8892      	ldrh	r2, [r2, #4]
    a180:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    a182:	230f      	movs	r3, #15
    a184:	18fc      	adds	r4, r7, r3
    a186:	687b      	ldr	r3, [r7, #4]
    a188:	0018      	movs	r0, r3
    a18a:	4b08      	ldr	r3, [pc, #32]	; (a1ac <_sercom_get_interrupt_vector+0x40>)
    a18c:	4798      	blx	r3
    a18e:	0003      	movs	r3, r0
    a190:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    a192:	230f      	movs	r3, #15
    a194:	18fb      	adds	r3, r7, r3
    a196:	781b      	ldrb	r3, [r3, #0]
    a198:	2208      	movs	r2, #8
    a19a:	18ba      	adds	r2, r7, r2
    a19c:	5cd3      	ldrb	r3, [r2, r3]
    a19e:	b25b      	sxtb	r3, r3
}
    a1a0:	0018      	movs	r0, r3
    a1a2:	46bd      	mov	sp, r7
    a1a4:	b005      	add	sp, #20
    a1a6:	bd90      	pop	{r4, r7, pc}
    a1a8:	00014838 	.word	0x00014838
    a1ac:	00008d3d 	.word	0x00008d3d

0000a1b0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    a1b0:	b580      	push	{r7, lr}
    a1b2:	af00      	add	r7, sp, #0
    a1b4:	4b03      	ldr	r3, [pc, #12]	; (a1c4 <SERCOM0_Handler+0x14>)
    a1b6:	681b      	ldr	r3, [r3, #0]
    a1b8:	2000      	movs	r0, #0
    a1ba:	4798      	blx	r3
    a1bc:	46c0      	nop			; (mov r8, r8)
    a1be:	46bd      	mov	sp, r7
    a1c0:	bd80      	pop	{r7, pc}
    a1c2:	46c0      	nop			; (mov r8, r8)
    a1c4:	200002ac 	.word	0x200002ac

0000a1c8 <SERCOM1_Handler>:
    a1c8:	b580      	push	{r7, lr}
    a1ca:	af00      	add	r7, sp, #0
    a1cc:	4b03      	ldr	r3, [pc, #12]	; (a1dc <SERCOM1_Handler+0x14>)
    a1ce:	685b      	ldr	r3, [r3, #4]
    a1d0:	2001      	movs	r0, #1
    a1d2:	4798      	blx	r3
    a1d4:	46c0      	nop			; (mov r8, r8)
    a1d6:	46bd      	mov	sp, r7
    a1d8:	bd80      	pop	{r7, pc}
    a1da:	46c0      	nop			; (mov r8, r8)
    a1dc:	200002ac 	.word	0x200002ac

0000a1e0 <SERCOM2_Handler>:
    a1e0:	b580      	push	{r7, lr}
    a1e2:	af00      	add	r7, sp, #0
    a1e4:	4b03      	ldr	r3, [pc, #12]	; (a1f4 <SERCOM2_Handler+0x14>)
    a1e6:	689b      	ldr	r3, [r3, #8]
    a1e8:	2002      	movs	r0, #2
    a1ea:	4798      	blx	r3
    a1ec:	46c0      	nop			; (mov r8, r8)
    a1ee:	46bd      	mov	sp, r7
    a1f0:	bd80      	pop	{r7, pc}
    a1f2:	46c0      	nop			; (mov r8, r8)
    a1f4:	200002ac 	.word	0x200002ac

0000a1f8 <SERCOM3_Handler>:
    a1f8:	b580      	push	{r7, lr}
    a1fa:	af00      	add	r7, sp, #0
    a1fc:	4b03      	ldr	r3, [pc, #12]	; (a20c <SERCOM3_Handler+0x14>)
    a1fe:	68db      	ldr	r3, [r3, #12]
    a200:	2003      	movs	r0, #3
    a202:	4798      	blx	r3
    a204:	46c0      	nop			; (mov r8, r8)
    a206:	46bd      	mov	sp, r7
    a208:	bd80      	pop	{r7, pc}
    a20a:	46c0      	nop			; (mov r8, r8)
    a20c:	200002ac 	.word	0x200002ac

0000a210 <SERCOM4_Handler>:
    a210:	b580      	push	{r7, lr}
    a212:	af00      	add	r7, sp, #0
    a214:	4b03      	ldr	r3, [pc, #12]	; (a224 <SERCOM4_Handler+0x14>)
    a216:	691b      	ldr	r3, [r3, #16]
    a218:	2004      	movs	r0, #4
    a21a:	4798      	blx	r3
    a21c:	46c0      	nop			; (mov r8, r8)
    a21e:	46bd      	mov	sp, r7
    a220:	bd80      	pop	{r7, pc}
    a222:	46c0      	nop			; (mov r8, r8)
    a224:	200002ac 	.word	0x200002ac

0000a228 <SERCOM5_Handler>:
    a228:	b580      	push	{r7, lr}
    a22a:	af00      	add	r7, sp, #0
    a22c:	4b03      	ldr	r3, [pc, #12]	; (a23c <SERCOM5_Handler+0x14>)
    a22e:	695b      	ldr	r3, [r3, #20]
    a230:	2005      	movs	r0, #5
    a232:	4798      	blx	r3
    a234:	46c0      	nop			; (mov r8, r8)
    a236:	46bd      	mov	sp, r7
    a238:	bd80      	pop	{r7, pc}
    a23a:	46c0      	nop			; (mov r8, r8)
    a23c:	200002ac 	.word	0x200002ac

0000a240 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    a240:	b580      	push	{r7, lr}
    a242:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    a244:	46c0      	nop			; (mov r8, r8)
    a246:	46bd      	mov	sp, r7
    a248:	bd80      	pop	{r7, pc}
	...

0000a24c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    a24c:	b580      	push	{r7, lr}
    a24e:	b082      	sub	sp, #8
    a250:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    a252:	4b10      	ldr	r3, [pc, #64]	; (a294 <cpu_irq_enter_critical+0x48>)
    a254:	681b      	ldr	r3, [r3, #0]
    a256:	2b00      	cmp	r3, #0
    a258:	d112      	bne.n	a280 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    a25a:	f3ef 8310 	mrs	r3, PRIMASK
    a25e:	607b      	str	r3, [r7, #4]
  return(result);
    a260:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    a262:	2b00      	cmp	r3, #0
    a264:	d109      	bne.n	a27a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    a266:	b672      	cpsid	i
    a268:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    a26c:	4b0a      	ldr	r3, [pc, #40]	; (a298 <cpu_irq_enter_critical+0x4c>)
    a26e:	2200      	movs	r2, #0
    a270:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    a272:	4b0a      	ldr	r3, [pc, #40]	; (a29c <cpu_irq_enter_critical+0x50>)
    a274:	2201      	movs	r2, #1
    a276:	701a      	strb	r2, [r3, #0]
    a278:	e002      	b.n	a280 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    a27a:	4b08      	ldr	r3, [pc, #32]	; (a29c <cpu_irq_enter_critical+0x50>)
    a27c:	2200      	movs	r2, #0
    a27e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    a280:	4b04      	ldr	r3, [pc, #16]	; (a294 <cpu_irq_enter_critical+0x48>)
    a282:	681b      	ldr	r3, [r3, #0]
    a284:	1c5a      	adds	r2, r3, #1
    a286:	4b03      	ldr	r3, [pc, #12]	; (a294 <cpu_irq_enter_critical+0x48>)
    a288:	601a      	str	r2, [r3, #0]
}
    a28a:	46c0      	nop			; (mov r8, r8)
    a28c:	46bd      	mov	sp, r7
    a28e:	b002      	add	sp, #8
    a290:	bd80      	pop	{r7, pc}
    a292:	46c0      	nop			; (mov r8, r8)
    a294:	200002c4 	.word	0x200002c4
    a298:	20000014 	.word	0x20000014
    a29c:	200002c8 	.word	0x200002c8

0000a2a0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    a2a0:	b580      	push	{r7, lr}
    a2a2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    a2a4:	4b0b      	ldr	r3, [pc, #44]	; (a2d4 <cpu_irq_leave_critical+0x34>)
    a2a6:	681b      	ldr	r3, [r3, #0]
    a2a8:	1e5a      	subs	r2, r3, #1
    a2aa:	4b0a      	ldr	r3, [pc, #40]	; (a2d4 <cpu_irq_leave_critical+0x34>)
    a2ac:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    a2ae:	4b09      	ldr	r3, [pc, #36]	; (a2d4 <cpu_irq_leave_critical+0x34>)
    a2b0:	681b      	ldr	r3, [r3, #0]
    a2b2:	2b00      	cmp	r3, #0
    a2b4:	d10a      	bne.n	a2cc <cpu_irq_leave_critical+0x2c>
    a2b6:	4b08      	ldr	r3, [pc, #32]	; (a2d8 <cpu_irq_leave_critical+0x38>)
    a2b8:	781b      	ldrb	r3, [r3, #0]
    a2ba:	b2db      	uxtb	r3, r3
    a2bc:	2b00      	cmp	r3, #0
    a2be:	d005      	beq.n	a2cc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    a2c0:	4b06      	ldr	r3, [pc, #24]	; (a2dc <cpu_irq_leave_critical+0x3c>)
    a2c2:	2201      	movs	r2, #1
    a2c4:	701a      	strb	r2, [r3, #0]
    a2c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a2ca:	b662      	cpsie	i
	}
}
    a2cc:	46c0      	nop			; (mov r8, r8)
    a2ce:	46bd      	mov	sp, r7
    a2d0:	bd80      	pop	{r7, pc}
    a2d2:	46c0      	nop			; (mov r8, r8)
    a2d4:	200002c4 	.word	0x200002c4
    a2d8:	200002c8 	.word	0x200002c8
    a2dc:	20000014 	.word	0x20000014

0000a2e0 <system_gclk_gen_get_config_defaults>:
{
    a2e0:	b580      	push	{r7, lr}
    a2e2:	b082      	sub	sp, #8
    a2e4:	af00      	add	r7, sp, #0
    a2e6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    a2e8:	687b      	ldr	r3, [r7, #4]
    a2ea:	2201      	movs	r2, #1
    a2ec:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    a2ee:	687b      	ldr	r3, [r7, #4]
    a2f0:	2200      	movs	r2, #0
    a2f2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    a2f4:	687b      	ldr	r3, [r7, #4]
    a2f6:	2206      	movs	r2, #6
    a2f8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    a2fa:	687b      	ldr	r3, [r7, #4]
    a2fc:	2200      	movs	r2, #0
    a2fe:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    a300:	687b      	ldr	r3, [r7, #4]
    a302:	2200      	movs	r2, #0
    a304:	725a      	strb	r2, [r3, #9]
}
    a306:	46c0      	nop			; (mov r8, r8)
    a308:	46bd      	mov	sp, r7
    a30a:	b002      	add	sp, #8
    a30c:	bd80      	pop	{r7, pc}

0000a30e <system_gclk_chan_get_config_defaults>:
{
    a30e:	b580      	push	{r7, lr}
    a310:	b082      	sub	sp, #8
    a312:	af00      	add	r7, sp, #0
    a314:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a316:	687b      	ldr	r3, [r7, #4]
    a318:	2200      	movs	r2, #0
    a31a:	701a      	strb	r2, [r3, #0]
}
    a31c:	46c0      	nop			; (mov r8, r8)
    a31e:	46bd      	mov	sp, r7
    a320:	b002      	add	sp, #8
    a322:	bd80      	pop	{r7, pc}

0000a324 <system_clock_source_osc32k_get_config_defaults>:
{
    a324:	b580      	push	{r7, lr}
    a326:	b082      	sub	sp, #8
    a328:	af00      	add	r7, sp, #0
    a32a:	6078      	str	r0, [r7, #4]
	config->enable_1khz_output  = true;
    a32c:	687b      	ldr	r3, [r7, #4]
    a32e:	2201      	movs	r2, #1
    a330:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    a332:	687b      	ldr	r3, [r7, #4]
    a334:	2201      	movs	r2, #1
    a336:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    a338:	687b      	ldr	r3, [r7, #4]
    a33a:	2200      	movs	r2, #0
    a33c:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    a33e:	687b      	ldr	r3, [r7, #4]
    a340:	2201      	movs	r2, #1
    a342:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    a344:	687b      	ldr	r3, [r7, #4]
    a346:	2207      	movs	r2, #7
    a348:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    a34a:	687b      	ldr	r3, [r7, #4]
    a34c:	2200      	movs	r2, #0
    a34e:	715a      	strb	r2, [r3, #5]
}
    a350:	46c0      	nop			; (mov r8, r8)
    a352:	46bd      	mov	sp, r7
    a354:	b002      	add	sp, #8
    a356:	bd80      	pop	{r7, pc}

0000a358 <system_clock_source_osc8m_get_config_defaults>:
{
    a358:	b580      	push	{r7, lr}
    a35a:	b082      	sub	sp, #8
    a35c:	af00      	add	r7, sp, #0
    a35e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	2203      	movs	r2, #3
    a364:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    a366:	687b      	ldr	r3, [r7, #4]
    a368:	2200      	movs	r2, #0
    a36a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    a36c:	687b      	ldr	r3, [r7, #4]
    a36e:	2201      	movs	r2, #1
    a370:	709a      	strb	r2, [r3, #2]
}
    a372:	46c0      	nop			; (mov r8, r8)
    a374:	46bd      	mov	sp, r7
    a376:	b002      	add	sp, #8
    a378:	bd80      	pop	{r7, pc}

0000a37a <system_clock_source_dfll_get_config_defaults>:
{
    a37a:	b580      	push	{r7, lr}
    a37c:	b082      	sub	sp, #8
    a37e:	af00      	add	r7, sp, #0
    a380:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    a382:	687b      	ldr	r3, [r7, #4]
    a384:	2200      	movs	r2, #0
    a386:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    a388:	687b      	ldr	r3, [r7, #4]
    a38a:	2200      	movs	r2, #0
    a38c:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    a38e:	687b      	ldr	r3, [r7, #4]
    a390:	2200      	movs	r2, #0
    a392:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    a394:	687b      	ldr	r3, [r7, #4]
    a396:	2200      	movs	r2, #0
    a398:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    a39a:	687b      	ldr	r3, [r7, #4]
    a39c:	2200      	movs	r2, #0
    a39e:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    a3a0:	687b      	ldr	r3, [r7, #4]
    a3a2:	2201      	movs	r2, #1
    a3a4:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    a3a6:	687b      	ldr	r3, [r7, #4]
    a3a8:	2207      	movs	r2, #7
    a3aa:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    a3ac:	687b      	ldr	r3, [r7, #4]
    a3ae:	223f      	movs	r2, #63	; 0x3f
    a3b0:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    a3b2:	687b      	ldr	r3, [r7, #4]
    a3b4:	2201      	movs	r2, #1
    a3b6:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    a3b8:	687b      	ldr	r3, [r7, #4]
    a3ba:	2201      	movs	r2, #1
    a3bc:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	2206      	movs	r2, #6
    a3c2:	821a      	strh	r2, [r3, #16]
}
    a3c4:	46c0      	nop			; (mov r8, r8)
    a3c6:	46bd      	mov	sp, r7
    a3c8:	b002      	add	sp, #8
    a3ca:	bd80      	pop	{r7, pc}

0000a3cc <system_cpu_clock_set_divider>:
{
    a3cc:	b580      	push	{r7, lr}
    a3ce:	b082      	sub	sp, #8
    a3d0:	af00      	add	r7, sp, #0
    a3d2:	0002      	movs	r2, r0
    a3d4:	1dfb      	adds	r3, r7, #7
    a3d6:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    a3d8:	4a03      	ldr	r2, [pc, #12]	; (a3e8 <system_cpu_clock_set_divider+0x1c>)
    a3da:	1dfb      	adds	r3, r7, #7
    a3dc:	781b      	ldrb	r3, [r3, #0]
    a3de:	7213      	strb	r3, [r2, #8]
}
    a3e0:	46c0      	nop			; (mov r8, r8)
    a3e2:	46bd      	mov	sp, r7
    a3e4:	b002      	add	sp, #8
    a3e6:	bd80      	pop	{r7, pc}
    a3e8:	40000400 	.word	0x40000400

0000a3ec <system_apb_clock_set_divider>:
{
    a3ec:	b580      	push	{r7, lr}
    a3ee:	b082      	sub	sp, #8
    a3f0:	af00      	add	r7, sp, #0
    a3f2:	0002      	movs	r2, r0
    a3f4:	1dfb      	adds	r3, r7, #7
    a3f6:	701a      	strb	r2, [r3, #0]
    a3f8:	1dbb      	adds	r3, r7, #6
    a3fa:	1c0a      	adds	r2, r1, #0
    a3fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a3fe:	1dfb      	adds	r3, r7, #7
    a400:	781b      	ldrb	r3, [r3, #0]
    a402:	2b01      	cmp	r3, #1
    a404:	d008      	beq.n	a418 <system_apb_clock_set_divider+0x2c>
    a406:	2b02      	cmp	r3, #2
    a408:	d00b      	beq.n	a422 <system_apb_clock_set_divider+0x36>
    a40a:	2b00      	cmp	r3, #0
    a40c:	d10e      	bne.n	a42c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    a40e:	4a0b      	ldr	r2, [pc, #44]	; (a43c <system_apb_clock_set_divider+0x50>)
    a410:	1dbb      	adds	r3, r7, #6
    a412:	781b      	ldrb	r3, [r3, #0]
    a414:	7253      	strb	r3, [r2, #9]
			break;
    a416:	e00b      	b.n	a430 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    a418:	4a08      	ldr	r2, [pc, #32]	; (a43c <system_apb_clock_set_divider+0x50>)
    a41a:	1dbb      	adds	r3, r7, #6
    a41c:	781b      	ldrb	r3, [r3, #0]
    a41e:	7293      	strb	r3, [r2, #10]
			break;
    a420:	e006      	b.n	a430 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    a422:	4a06      	ldr	r2, [pc, #24]	; (a43c <system_apb_clock_set_divider+0x50>)
    a424:	1dbb      	adds	r3, r7, #6
    a426:	781b      	ldrb	r3, [r3, #0]
    a428:	72d3      	strb	r3, [r2, #11]
			break;
    a42a:	e001      	b.n	a430 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    a42c:	2317      	movs	r3, #23
    a42e:	e000      	b.n	a432 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    a430:	2300      	movs	r3, #0
}
    a432:	0018      	movs	r0, r3
    a434:	46bd      	mov	sp, r7
    a436:	b002      	add	sp, #8
    a438:	bd80      	pop	{r7, pc}
    a43a:	46c0      	nop			; (mov r8, r8)
    a43c:	40000400 	.word	0x40000400

0000a440 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    a440:	b580      	push	{r7, lr}
    a442:	b082      	sub	sp, #8
    a444:	af00      	add	r7, sp, #0
    a446:	0002      	movs	r2, r0
    a448:	1dfb      	adds	r3, r7, #7
    a44a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    a44c:	4a08      	ldr	r2, [pc, #32]	; (a470 <system_flash_set_waitstates+0x30>)
    a44e:	1dfb      	adds	r3, r7, #7
    a450:	781b      	ldrb	r3, [r3, #0]
    a452:	210f      	movs	r1, #15
    a454:	400b      	ands	r3, r1
    a456:	b2d9      	uxtb	r1, r3
    a458:	6853      	ldr	r3, [r2, #4]
    a45a:	200f      	movs	r0, #15
    a45c:	4001      	ands	r1, r0
    a45e:	0049      	lsls	r1, r1, #1
    a460:	201e      	movs	r0, #30
    a462:	4383      	bics	r3, r0
    a464:	430b      	orrs	r3, r1
    a466:	6053      	str	r3, [r2, #4]
}
    a468:	46c0      	nop			; (mov r8, r8)
    a46a:	46bd      	mov	sp, r7
    a46c:	b002      	add	sp, #8
    a46e:	bd80      	pop	{r7, pc}
    a470:	41004000 	.word	0x41004000

0000a474 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    a474:	b580      	push	{r7, lr}
    a476:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    a478:	46c0      	nop			; (mov r8, r8)
    a47a:	4b04      	ldr	r3, [pc, #16]	; (a48c <_system_dfll_wait_for_sync+0x18>)
    a47c:	68db      	ldr	r3, [r3, #12]
    a47e:	2210      	movs	r2, #16
    a480:	4013      	ands	r3, r2
    a482:	d0fa      	beq.n	a47a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    a484:	46c0      	nop			; (mov r8, r8)
    a486:	46bd      	mov	sp, r7
    a488:	bd80      	pop	{r7, pc}
    a48a:	46c0      	nop			; (mov r8, r8)
    a48c:	40000800 	.word	0x40000800

0000a490 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    a490:	b580      	push	{r7, lr}
    a492:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    a494:	4b0c      	ldr	r3, [pc, #48]	; (a4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a496:	2202      	movs	r2, #2
    a498:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    a49a:	4b0c      	ldr	r3, [pc, #48]	; (a4cc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    a49c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    a49e:	4a0a      	ldr	r2, [pc, #40]	; (a4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a4a0:	4b0b      	ldr	r3, [pc, #44]	; (a4d0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    a4a2:	689b      	ldr	r3, [r3, #8]
    a4a4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    a4a6:	4a08      	ldr	r2, [pc, #32]	; (a4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a4a8:	4b09      	ldr	r3, [pc, #36]	; (a4d0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    a4aa:	685b      	ldr	r3, [r3, #4]
    a4ac:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    a4ae:	4b06      	ldr	r3, [pc, #24]	; (a4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a4b0:	2200      	movs	r2, #0
    a4b2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    a4b4:	4b05      	ldr	r3, [pc, #20]	; (a4cc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    a4b6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    a4b8:	4a03      	ldr	r2, [pc, #12]	; (a4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    a4ba:	4b05      	ldr	r3, [pc, #20]	; (a4d0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    a4bc:	681b      	ldr	r3, [r3, #0]
    a4be:	b29b      	uxth	r3, r3
    a4c0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    a4c2:	46c0      	nop			; (mov r8, r8)
    a4c4:	46bd      	mov	sp, r7
    a4c6:	bd80      	pop	{r7, pc}
    a4c8:	40000800 	.word	0x40000800
    a4cc:	0000a475 	.word	0x0000a475
    a4d0:	200002cc 	.word	0x200002cc

0000a4d4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    a4d4:	b580      	push	{r7, lr}
    a4d6:	b082      	sub	sp, #8
    a4d8:	af00      	add	r7, sp, #0
    a4da:	0002      	movs	r2, r0
    a4dc:	1dfb      	adds	r3, r7, #7
    a4de:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    a4e0:	1dfb      	adds	r3, r7, #7
    a4e2:	781b      	ldrb	r3, [r3, #0]
    a4e4:	2b08      	cmp	r3, #8
    a4e6:	d840      	bhi.n	a56a <system_clock_source_get_hz+0x96>
    a4e8:	009a      	lsls	r2, r3, #2
    a4ea:	4b22      	ldr	r3, [pc, #136]	; (a574 <system_clock_source_get_hz+0xa0>)
    a4ec:	18d3      	adds	r3, r2, r3
    a4ee:	681b      	ldr	r3, [r3, #0]
    a4f0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    a4f2:	4b21      	ldr	r3, [pc, #132]	; (a578 <system_clock_source_get_hz+0xa4>)
    a4f4:	691b      	ldr	r3, [r3, #16]
    a4f6:	e039      	b.n	a56c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    a4f8:	4b20      	ldr	r3, [pc, #128]	; (a57c <system_clock_source_get_hz+0xa8>)
    a4fa:	6a1b      	ldr	r3, [r3, #32]
    a4fc:	059b      	lsls	r3, r3, #22
    a4fe:	0f9b      	lsrs	r3, r3, #30
    a500:	b2db      	uxtb	r3, r3
    a502:	001a      	movs	r2, r3
    a504:	4b1e      	ldr	r3, [pc, #120]	; (a580 <system_clock_source_get_hz+0xac>)
    a506:	40d3      	lsrs	r3, r2
    a508:	e030      	b.n	a56c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    a50a:	2380      	movs	r3, #128	; 0x80
    a50c:	021b      	lsls	r3, r3, #8
    a50e:	e02d      	b.n	a56c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    a510:	2380      	movs	r3, #128	; 0x80
    a512:	021b      	lsls	r3, r3, #8
    a514:	e02a      	b.n	a56c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    a516:	4b18      	ldr	r3, [pc, #96]	; (a578 <system_clock_source_get_hz+0xa4>)
    a518:	695b      	ldr	r3, [r3, #20]
    a51a:	e027      	b.n	a56c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    a51c:	4b16      	ldr	r3, [pc, #88]	; (a578 <system_clock_source_get_hz+0xa4>)
    a51e:	681b      	ldr	r3, [r3, #0]
    a520:	2202      	movs	r2, #2
    a522:	4013      	ands	r3, r2
    a524:	d101      	bne.n	a52a <system_clock_source_get_hz+0x56>
			return 0;
    a526:	2300      	movs	r3, #0
    a528:	e020      	b.n	a56c <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    a52a:	4b16      	ldr	r3, [pc, #88]	; (a584 <system_clock_source_get_hz+0xb0>)
    a52c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    a52e:	4b12      	ldr	r3, [pc, #72]	; (a578 <system_clock_source_get_hz+0xa4>)
    a530:	681b      	ldr	r3, [r3, #0]
    a532:	2204      	movs	r2, #4
    a534:	4013      	ands	r3, r2
    a536:	d009      	beq.n	a54c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    a538:	2000      	movs	r0, #0
    a53a:	4b13      	ldr	r3, [pc, #76]	; (a588 <system_clock_source_get_hz+0xb4>)
    a53c:	4798      	blx	r3
    a53e:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    a540:	4b0d      	ldr	r3, [pc, #52]	; (a578 <system_clock_source_get_hz+0xa4>)
    a542:	689b      	ldr	r3, [r3, #8]
    a544:	041b      	lsls	r3, r3, #16
    a546:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    a548:	4353      	muls	r3, r2
    a54a:	e00f      	b.n	a56c <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    a54c:	4b0f      	ldr	r3, [pc, #60]	; (a58c <system_clock_source_get_hz+0xb8>)
    a54e:	e00d      	b.n	a56c <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    a550:	4a0a      	ldr	r2, [pc, #40]	; (a57c <system_clock_source_get_hz+0xa8>)
    a552:	2350      	movs	r3, #80	; 0x50
    a554:	5cd3      	ldrb	r3, [r2, r3]
    a556:	b2db      	uxtb	r3, r3
    a558:	001a      	movs	r2, r3
    a55a:	2304      	movs	r3, #4
    a55c:	4013      	ands	r3, r2
    a55e:	d101      	bne.n	a564 <system_clock_source_get_hz+0x90>
			return 0;
    a560:	2300      	movs	r3, #0
    a562:	e003      	b.n	a56c <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    a564:	4b04      	ldr	r3, [pc, #16]	; (a578 <system_clock_source_get_hz+0xa4>)
    a566:	68db      	ldr	r3, [r3, #12]
    a568:	e000      	b.n	a56c <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    a56a:	2300      	movs	r3, #0
	}
}
    a56c:	0018      	movs	r0, r3
    a56e:	46bd      	mov	sp, r7
    a570:	b002      	add	sp, #8
    a572:	bd80      	pop	{r7, pc}
    a574:	00014840 	.word	0x00014840
    a578:	200002cc 	.word	0x200002cc
    a57c:	40000800 	.word	0x40000800
    a580:	007a1200 	.word	0x007a1200
    a584:	0000a475 	.word	0x0000a475
    a588:	0000b001 	.word	0x0000b001
    a58c:	02dc6c00 	.word	0x02dc6c00

0000a590 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    a590:	b580      	push	{r7, lr}
    a592:	b084      	sub	sp, #16
    a594:	af00      	add	r7, sp, #0
    a596:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    a598:	4b1a      	ldr	r3, [pc, #104]	; (a604 <system_clock_source_osc8m_set_config+0x74>)
    a59a:	6a1b      	ldr	r3, [r3, #32]
    a59c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    a59e:	687b      	ldr	r3, [r7, #4]
    a5a0:	781b      	ldrb	r3, [r3, #0]
    a5a2:	1c1a      	adds	r2, r3, #0
    a5a4:	2303      	movs	r3, #3
    a5a6:	4013      	ands	r3, r2
    a5a8:	b2da      	uxtb	r2, r3
    a5aa:	230d      	movs	r3, #13
    a5ac:	18fb      	adds	r3, r7, r3
    a5ae:	2103      	movs	r1, #3
    a5b0:	400a      	ands	r2, r1
    a5b2:	0010      	movs	r0, r2
    a5b4:	781a      	ldrb	r2, [r3, #0]
    a5b6:	2103      	movs	r1, #3
    a5b8:	438a      	bics	r2, r1
    a5ba:	1c11      	adds	r1, r2, #0
    a5bc:	1c02      	adds	r2, r0, #0
    a5be:	430a      	orrs	r2, r1
    a5c0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    a5c2:	687b      	ldr	r3, [r7, #4]
    a5c4:	789a      	ldrb	r2, [r3, #2]
    a5c6:	230c      	movs	r3, #12
    a5c8:	18fb      	adds	r3, r7, r3
    a5ca:	01d0      	lsls	r0, r2, #7
    a5cc:	781a      	ldrb	r2, [r3, #0]
    a5ce:	217f      	movs	r1, #127	; 0x7f
    a5d0:	400a      	ands	r2, r1
    a5d2:	1c11      	adds	r1, r2, #0
    a5d4:	1c02      	adds	r2, r0, #0
    a5d6:	430a      	orrs	r2, r1
    a5d8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    a5da:	687b      	ldr	r3, [r7, #4]
    a5dc:	785a      	ldrb	r2, [r3, #1]
    a5de:	230c      	movs	r3, #12
    a5e0:	18fb      	adds	r3, r7, r3
    a5e2:	2101      	movs	r1, #1
    a5e4:	400a      	ands	r2, r1
    a5e6:	0190      	lsls	r0, r2, #6
    a5e8:	781a      	ldrb	r2, [r3, #0]
    a5ea:	2140      	movs	r1, #64	; 0x40
    a5ec:	438a      	bics	r2, r1
    a5ee:	1c11      	adds	r1, r2, #0
    a5f0:	1c02      	adds	r2, r0, #0
    a5f2:	430a      	orrs	r2, r1
    a5f4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    a5f6:	4b03      	ldr	r3, [pc, #12]	; (a604 <system_clock_source_osc8m_set_config+0x74>)
    a5f8:	68fa      	ldr	r2, [r7, #12]
    a5fa:	621a      	str	r2, [r3, #32]
}
    a5fc:	46c0      	nop			; (mov r8, r8)
    a5fe:	46bd      	mov	sp, r7
    a600:	b004      	add	sp, #16
    a602:	bd80      	pop	{r7, pc}
    a604:	40000800 	.word	0x40000800

0000a608 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    a608:	b580      	push	{r7, lr}
    a60a:	b084      	sub	sp, #16
    a60c:	af00      	add	r7, sp, #0
    a60e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    a610:	4b2f      	ldr	r3, [pc, #188]	; (a6d0 <system_clock_source_osc32k_set_config+0xc8>)
    a612:	699b      	ldr	r3, [r3, #24]
    a614:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    a616:	687b      	ldr	r3, [r7, #4]
    a618:	785a      	ldrb	r2, [r3, #1]
    a61a:	230c      	movs	r3, #12
    a61c:	18fb      	adds	r3, r7, r3
    a61e:	2101      	movs	r1, #1
    a620:	400a      	ands	r2, r1
    a622:	00d0      	lsls	r0, r2, #3
    a624:	781a      	ldrb	r2, [r3, #0]
    a626:	2108      	movs	r1, #8
    a628:	438a      	bics	r2, r1
    a62a:	1c11      	adds	r1, r2, #0
    a62c:	1c02      	adds	r2, r0, #0
    a62e:	430a      	orrs	r2, r1
    a630:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    a632:	687b      	ldr	r3, [r7, #4]
    a634:	789a      	ldrb	r2, [r3, #2]
    a636:	230c      	movs	r3, #12
    a638:	18fb      	adds	r3, r7, r3
    a63a:	2101      	movs	r1, #1
    a63c:	400a      	ands	r2, r1
    a63e:	0090      	lsls	r0, r2, #2
    a640:	781a      	ldrb	r2, [r3, #0]
    a642:	2104      	movs	r1, #4
    a644:	438a      	bics	r2, r1
    a646:	1c11      	adds	r1, r2, #0
    a648:	1c02      	adds	r2, r0, #0
    a64a:	430a      	orrs	r2, r1
    a64c:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    a64e:	687b      	ldr	r3, [r7, #4]
    a650:	781b      	ldrb	r3, [r3, #0]
    a652:	1c1a      	adds	r2, r3, #0
    a654:	2307      	movs	r3, #7
    a656:	4013      	ands	r3, r2
    a658:	b2da      	uxtb	r2, r3
    a65a:	230d      	movs	r3, #13
    a65c:	18fb      	adds	r3, r7, r3
    a65e:	2107      	movs	r1, #7
    a660:	400a      	ands	r2, r1
    a662:	0010      	movs	r0, r2
    a664:	781a      	ldrb	r2, [r3, #0]
    a666:	2107      	movs	r1, #7
    a668:	438a      	bics	r2, r1
    a66a:	1c11      	adds	r1, r2, #0
    a66c:	1c02      	adds	r2, r0, #0
    a66e:	430a      	orrs	r2, r1
    a670:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    a672:	687b      	ldr	r3, [r7, #4]
    a674:	791a      	ldrb	r2, [r3, #4]
    a676:	230c      	movs	r3, #12
    a678:	18fb      	adds	r3, r7, r3
    a67a:	01d0      	lsls	r0, r2, #7
    a67c:	781a      	ldrb	r2, [r3, #0]
    a67e:	217f      	movs	r1, #127	; 0x7f
    a680:	400a      	ands	r2, r1
    a682:	1c11      	adds	r1, r2, #0
    a684:	1c02      	adds	r2, r0, #0
    a686:	430a      	orrs	r2, r1
    a688:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    a68a:	687b      	ldr	r3, [r7, #4]
    a68c:	78da      	ldrb	r2, [r3, #3]
    a68e:	230c      	movs	r3, #12
    a690:	18fb      	adds	r3, r7, r3
    a692:	2101      	movs	r1, #1
    a694:	400a      	ands	r2, r1
    a696:	0190      	lsls	r0, r2, #6
    a698:	781a      	ldrb	r2, [r3, #0]
    a69a:	2140      	movs	r1, #64	; 0x40
    a69c:	438a      	bics	r2, r1
    a69e:	1c11      	adds	r1, r2, #0
    a6a0:	1c02      	adds	r2, r0, #0
    a6a2:	430a      	orrs	r2, r1
    a6a4:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	795a      	ldrb	r2, [r3, #5]
    a6aa:	230d      	movs	r3, #13
    a6ac:	18fb      	adds	r3, r7, r3
    a6ae:	2101      	movs	r1, #1
    a6b0:	400a      	ands	r2, r1
    a6b2:	0110      	lsls	r0, r2, #4
    a6b4:	781a      	ldrb	r2, [r3, #0]
    a6b6:	2110      	movs	r1, #16
    a6b8:	438a      	bics	r2, r1
    a6ba:	1c11      	adds	r1, r2, #0
    a6bc:	1c02      	adds	r2, r0, #0
    a6be:	430a      	orrs	r2, r1
    a6c0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    a6c2:	4b03      	ldr	r3, [pc, #12]	; (a6d0 <system_clock_source_osc32k_set_config+0xc8>)
    a6c4:	68fa      	ldr	r2, [r7, #12]
    a6c6:	619a      	str	r2, [r3, #24]
}
    a6c8:	46c0      	nop			; (mov r8, r8)
    a6ca:	46bd      	mov	sp, r7
    a6cc:	b004      	add	sp, #16
    a6ce:	bd80      	pop	{r7, pc}
    a6d0:	40000800 	.word	0x40000800

0000a6d4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    a6d4:	b580      	push	{r7, lr}
    a6d6:	b082      	sub	sp, #8
    a6d8:	af00      	add	r7, sp, #0
    a6da:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    a6dc:	687b      	ldr	r3, [r7, #4]
    a6de:	7a1b      	ldrb	r3, [r3, #8]
    a6e0:	029b      	lsls	r3, r3, #10
    a6e2:	041b      	lsls	r3, r3, #16
    a6e4:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    a6e6:	687b      	ldr	r3, [r7, #4]
    a6e8:	895b      	ldrh	r3, [r3, #10]
    a6ea:	059b      	lsls	r3, r3, #22
    a6ec:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    a6ee:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    a6f0:	4b2a      	ldr	r3, [pc, #168]	; (a79c <system_clock_source_dfll_set_config+0xc8>)
    a6f2:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    a6f4:	687b      	ldr	r3, [r7, #4]
    a6f6:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    a6f8:	687b      	ldr	r3, [r7, #4]
    a6fa:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    a6fc:	4313      	orrs	r3, r2
    a6fe:	b2db      	uxtb	r3, r3
    a700:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    a702:	687b      	ldr	r3, [r7, #4]
    a704:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    a706:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    a708:	687a      	ldr	r2, [r7, #4]
    a70a:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    a70c:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	785b      	ldrb	r3, [r3, #1]
    a712:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    a714:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    a716:	4b21      	ldr	r3, [pc, #132]	; (a79c <system_clock_source_dfll_set_config+0xc8>)
    a718:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    a71a:	687b      	ldr	r3, [r7, #4]
    a71c:	781b      	ldrb	r3, [r3, #0]
    a71e:	2b04      	cmp	r3, #4
    a720:	d116      	bne.n	a750 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a722:	687b      	ldr	r3, [r7, #4]
    a724:	7b1b      	ldrb	r3, [r3, #12]
    a726:	069b      	lsls	r3, r3, #26
    a728:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a72a:	687b      	ldr	r3, [r7, #4]
    a72c:	89db      	ldrh	r3, [r3, #14]
    a72e:	041b      	lsls	r3, r3, #16
    a730:	0019      	movs	r1, r3
    a732:	4b1b      	ldr	r3, [pc, #108]	; (a7a0 <system_clock_source_dfll_set_config+0xcc>)
    a734:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a736:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    a738:	687a      	ldr	r2, [r7, #4]
    a73a:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a73c:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    a73e:	4b17      	ldr	r3, [pc, #92]	; (a79c <system_clock_source_dfll_set_config+0xc8>)
    a740:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    a742:	4b16      	ldr	r3, [pc, #88]	; (a79c <system_clock_source_dfll_set_config+0xc8>)
    a744:	681b      	ldr	r3, [r3, #0]
    a746:	687a      	ldr	r2, [r7, #4]
    a748:	7812      	ldrb	r2, [r2, #0]
    a74a:	431a      	orrs	r2, r3
    a74c:	4b13      	ldr	r3, [pc, #76]	; (a79c <system_clock_source_dfll_set_config+0xc8>)
    a74e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    a750:	687b      	ldr	r3, [r7, #4]
    a752:	781b      	ldrb	r3, [r3, #0]
    a754:	2b20      	cmp	r3, #32
    a756:	d11c      	bne.n	a792 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a758:	687b      	ldr	r3, [r7, #4]
    a75a:	7b1b      	ldrb	r3, [r3, #12]
    a75c:	069b      	lsls	r3, r3, #26
    a75e:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a760:	687b      	ldr	r3, [r7, #4]
    a762:	89db      	ldrh	r3, [r3, #14]
    a764:	041b      	lsls	r3, r3, #16
    a766:	0019      	movs	r1, r3
    a768:	4b0d      	ldr	r3, [pc, #52]	; (a7a0 <system_clock_source_dfll_set_config+0xcc>)
    a76a:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a76c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    a76e:	687a      	ldr	r2, [r7, #4]
    a770:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a772:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    a774:	4b09      	ldr	r3, [pc, #36]	; (a79c <system_clock_source_dfll_set_config+0xc8>)
    a776:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    a778:	4b08      	ldr	r3, [pc, #32]	; (a79c <system_clock_source_dfll_set_config+0xc8>)
    a77a:	681b      	ldr	r3, [r3, #0]
    a77c:	687a      	ldr	r2, [r7, #4]
    a77e:	7812      	ldrb	r2, [r2, #0]
    a780:	2104      	movs	r1, #4
    a782:	430a      	orrs	r2, r1
    a784:	b2d2      	uxtb	r2, r2
    a786:	4313      	orrs	r3, r2
    a788:	2280      	movs	r2, #128	; 0x80
    a78a:	00d2      	lsls	r2, r2, #3
    a78c:	431a      	orrs	r2, r3
    a78e:	4b03      	ldr	r3, [pc, #12]	; (a79c <system_clock_source_dfll_set_config+0xc8>)
    a790:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    a792:	46c0      	nop			; (mov r8, r8)
    a794:	46bd      	mov	sp, r7
    a796:	b002      	add	sp, #8
    a798:	bd80      	pop	{r7, pc}
    a79a:	46c0      	nop			; (mov r8, r8)
    a79c:	200002cc 	.word	0x200002cc
    a7a0:	03ff0000 	.word	0x03ff0000

0000a7a4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    a7a4:	b580      	push	{r7, lr}
    a7a6:	b082      	sub	sp, #8
    a7a8:	af00      	add	r7, sp, #0
    a7aa:	0002      	movs	r2, r0
    a7ac:	1dfb      	adds	r3, r7, #7
    a7ae:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    a7b0:	1dfb      	adds	r3, r7, #7
    a7b2:	781b      	ldrb	r3, [r3, #0]
    a7b4:	2b08      	cmp	r3, #8
    a7b6:	d83b      	bhi.n	a830 <system_clock_source_enable+0x8c>
    a7b8:	009a      	lsls	r2, r3, #2
    a7ba:	4b21      	ldr	r3, [pc, #132]	; (a840 <system_clock_source_enable+0x9c>)
    a7bc:	18d3      	adds	r3, r2, r3
    a7be:	681b      	ldr	r3, [r3, #0]
    a7c0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    a7c2:	4b20      	ldr	r3, [pc, #128]	; (a844 <system_clock_source_enable+0xa0>)
    a7c4:	4a1f      	ldr	r2, [pc, #124]	; (a844 <system_clock_source_enable+0xa0>)
    a7c6:	6a12      	ldr	r2, [r2, #32]
    a7c8:	2102      	movs	r1, #2
    a7ca:	430a      	orrs	r2, r1
    a7cc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    a7ce:	2300      	movs	r3, #0
    a7d0:	e031      	b.n	a836 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    a7d2:	4b1c      	ldr	r3, [pc, #112]	; (a844 <system_clock_source_enable+0xa0>)
    a7d4:	4a1b      	ldr	r2, [pc, #108]	; (a844 <system_clock_source_enable+0xa0>)
    a7d6:	6992      	ldr	r2, [r2, #24]
    a7d8:	2102      	movs	r1, #2
    a7da:	430a      	orrs	r2, r1
    a7dc:	619a      	str	r2, [r3, #24]
		break;
    a7de:	e029      	b.n	a834 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    a7e0:	4a18      	ldr	r2, [pc, #96]	; (a844 <system_clock_source_enable+0xa0>)
    a7e2:	4b18      	ldr	r3, [pc, #96]	; (a844 <system_clock_source_enable+0xa0>)
    a7e4:	8a1b      	ldrh	r3, [r3, #16]
    a7e6:	b29b      	uxth	r3, r3
    a7e8:	2102      	movs	r1, #2
    a7ea:	430b      	orrs	r3, r1
    a7ec:	b29b      	uxth	r3, r3
    a7ee:	8213      	strh	r3, [r2, #16]
		break;
    a7f0:	e020      	b.n	a834 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    a7f2:	4a14      	ldr	r2, [pc, #80]	; (a844 <system_clock_source_enable+0xa0>)
    a7f4:	4b13      	ldr	r3, [pc, #76]	; (a844 <system_clock_source_enable+0xa0>)
    a7f6:	8a9b      	ldrh	r3, [r3, #20]
    a7f8:	b29b      	uxth	r3, r3
    a7fa:	2102      	movs	r1, #2
    a7fc:	430b      	orrs	r3, r1
    a7fe:	b29b      	uxth	r3, r3
    a800:	8293      	strh	r3, [r2, #20]
		break;
    a802:	e017      	b.n	a834 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    a804:	4b10      	ldr	r3, [pc, #64]	; (a848 <system_clock_source_enable+0xa4>)
    a806:	681b      	ldr	r3, [r3, #0]
    a808:	2202      	movs	r2, #2
    a80a:	431a      	orrs	r2, r3
    a80c:	4b0e      	ldr	r3, [pc, #56]	; (a848 <system_clock_source_enable+0xa4>)
    a80e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    a810:	4b0e      	ldr	r3, [pc, #56]	; (a84c <system_clock_source_enable+0xa8>)
    a812:	4798      	blx	r3
		break;
    a814:	e00e      	b.n	a834 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    a816:	4a0b      	ldr	r2, [pc, #44]	; (a844 <system_clock_source_enable+0xa0>)
    a818:	490a      	ldr	r1, [pc, #40]	; (a844 <system_clock_source_enable+0xa0>)
    a81a:	2344      	movs	r3, #68	; 0x44
    a81c:	5ccb      	ldrb	r3, [r1, r3]
    a81e:	b2db      	uxtb	r3, r3
    a820:	2102      	movs	r1, #2
    a822:	430b      	orrs	r3, r1
    a824:	b2d9      	uxtb	r1, r3
    a826:	2344      	movs	r3, #68	; 0x44
    a828:	54d1      	strb	r1, [r2, r3]
		break;
    a82a:	e003      	b.n	a834 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    a82c:	2300      	movs	r3, #0
    a82e:	e002      	b.n	a836 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    a830:	2317      	movs	r3, #23
    a832:	e000      	b.n	a836 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    a834:	2300      	movs	r3, #0
}
    a836:	0018      	movs	r0, r3
    a838:	46bd      	mov	sp, r7
    a83a:	b002      	add	sp, #8
    a83c:	bd80      	pop	{r7, pc}
    a83e:	46c0      	nop			; (mov r8, r8)
    a840:	00014864 	.word	0x00014864
    a844:	40000800 	.word	0x40000800
    a848:	200002cc 	.word	0x200002cc
    a84c:	0000a491 	.word	0x0000a491

0000a850 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    a850:	b580      	push	{r7, lr}
    a852:	b084      	sub	sp, #16
    a854:	af00      	add	r7, sp, #0
    a856:	0002      	movs	r2, r0
    a858:	1dfb      	adds	r3, r7, #7
    a85a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    a85c:	2300      	movs	r3, #0
    a85e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    a860:	1dfb      	adds	r3, r7, #7
    a862:	781b      	ldrb	r3, [r3, #0]
    a864:	2b08      	cmp	r3, #8
    a866:	d821      	bhi.n	a8ac <system_clock_source_is_ready+0x5c>
    a868:	009a      	lsls	r2, r3, #2
    a86a:	4b18      	ldr	r3, [pc, #96]	; (a8cc <system_clock_source_is_ready+0x7c>)
    a86c:	18d3      	adds	r3, r2, r3
    a86e:	681b      	ldr	r3, [r3, #0]
    a870:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    a872:	2308      	movs	r3, #8
    a874:	60fb      	str	r3, [r7, #12]
		break;
    a876:	e01b      	b.n	a8b0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    a878:	2304      	movs	r3, #4
    a87a:	60fb      	str	r3, [r7, #12]
		break;
    a87c:	e018      	b.n	a8b0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    a87e:	2301      	movs	r3, #1
    a880:	60fb      	str	r3, [r7, #12]
		break;
    a882:	e015      	b.n	a8b0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    a884:	2302      	movs	r3, #2
    a886:	60fb      	str	r3, [r7, #12]
		break;
    a888:	e012      	b.n	a8b0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    a88a:	23d0      	movs	r3, #208	; 0xd0
    a88c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    a88e:	e00f      	b.n	a8b0 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    a890:	4a0f      	ldr	r2, [pc, #60]	; (a8d0 <system_clock_source_is_ready+0x80>)
    a892:	2350      	movs	r3, #80	; 0x50
    a894:	5cd3      	ldrb	r3, [r2, r3]
    a896:	b2db      	uxtb	r3, r3
    a898:	001a      	movs	r2, r3
    a89a:	2303      	movs	r3, #3
    a89c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    a89e:	3b03      	subs	r3, #3
    a8a0:	425a      	negs	r2, r3
    a8a2:	4153      	adcs	r3, r2
    a8a4:	b2db      	uxtb	r3, r3
    a8a6:	e00c      	b.n	a8c2 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    a8a8:	2301      	movs	r3, #1
    a8aa:	e00a      	b.n	a8c2 <system_clock_source_is_ready+0x72>

	default:
		return false;
    a8ac:	2300      	movs	r3, #0
    a8ae:	e008      	b.n	a8c2 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    a8b0:	4b07      	ldr	r3, [pc, #28]	; (a8d0 <system_clock_source_is_ready+0x80>)
    a8b2:	68db      	ldr	r3, [r3, #12]
    a8b4:	68fa      	ldr	r2, [r7, #12]
    a8b6:	401a      	ands	r2, r3
    a8b8:	68fb      	ldr	r3, [r7, #12]
    a8ba:	1ad3      	subs	r3, r2, r3
    a8bc:	425a      	negs	r2, r3
    a8be:	4153      	adcs	r3, r2
    a8c0:	b2db      	uxtb	r3, r3
}
    a8c2:	0018      	movs	r0, r3
    a8c4:	46bd      	mov	sp, r7
    a8c6:	b004      	add	sp, #16
    a8c8:	bd80      	pop	{r7, pc}
    a8ca:	46c0      	nop			; (mov r8, r8)
    a8cc:	00014888 	.word	0x00014888
    a8d0:	40000800 	.word	0x40000800

0000a8d4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    a8d4:	b580      	push	{r7, lr}
    a8d6:	b082      	sub	sp, #8
    a8d8:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    a8da:	003b      	movs	r3, r7
    a8dc:	2202      	movs	r2, #2
    a8de:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    a8e0:	2300      	movs	r3, #0
    a8e2:	607b      	str	r3, [r7, #4]
    a8e4:	e009      	b.n	a8fa <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    a8e6:	687b      	ldr	r3, [r7, #4]
    a8e8:	b2db      	uxtb	r3, r3
    a8ea:	003a      	movs	r2, r7
    a8ec:	0011      	movs	r1, r2
    a8ee:	0018      	movs	r0, r3
    a8f0:	4b05      	ldr	r3, [pc, #20]	; (a908 <_switch_peripheral_gclk+0x34>)
    a8f2:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	3301      	adds	r3, #1
    a8f8:	607b      	str	r3, [r7, #4]
    a8fa:	687b      	ldr	r3, [r7, #4]
    a8fc:	2b24      	cmp	r3, #36	; 0x24
    a8fe:	d9f2      	bls.n	a8e6 <_switch_peripheral_gclk+0x12>
	}
}
    a900:	46c0      	nop			; (mov r8, r8)
    a902:	46bd      	mov	sp, r7
    a904:	b002      	add	sp, #8
    a906:	bd80      	pop	{r7, pc}
    a908:	0000aedd 	.word	0x0000aedd

0000a90c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    a90c:	b580      	push	{r7, lr}
    a90e:	b0a8      	sub	sp, #160	; 0xa0
    a910:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    a912:	4b90      	ldr	r3, [pc, #576]	; (ab54 <system_clock_init+0x248>)
    a914:	22c2      	movs	r2, #194	; 0xc2
    a916:	00d2      	lsls	r2, r2, #3
    a918:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    a91a:	2002      	movs	r0, #2
    a91c:	4b8e      	ldr	r3, [pc, #568]	; (ab58 <system_clock_init+0x24c>)
    a91e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    a920:	4b8e      	ldr	r3, [pc, #568]	; (ab5c <system_clock_init+0x250>)
    a922:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    a924:	4a8b      	ldr	r2, [pc, #556]	; (ab54 <system_clock_init+0x248>)
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    a926:	4b8e      	ldr	r3, [pc, #568]	; (ab60 <system_clock_init+0x254>)
    a928:	681b      	ldr	r3, [r3, #0]
    a92a:	099b      	lsrs	r3, r3, #6
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    a92c:	b2db      	uxtb	r3, r3
    a92e:	1c19      	adds	r1, r3, #0
    a930:	237f      	movs	r3, #127	; 0x7f
    a932:	400b      	ands	r3, r1
    a934:	b2d9      	uxtb	r1, r3
	SYSCTRL->OSC32K.bit.CALIB =
    a936:	6993      	ldr	r3, [r2, #24]
    a938:	207f      	movs	r0, #127	; 0x7f
    a93a:	4001      	ands	r1, r0
    a93c:	0409      	lsls	r1, r1, #16
    a93e:	4889      	ldr	r0, [pc, #548]	; (ab64 <system_clock_init+0x258>)
    a940:	4003      	ands	r3, r0
    a942:	430b      	orrs	r3, r1
    a944:	6193      	str	r3, [r2, #24]

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    a946:	2394      	movs	r3, #148	; 0x94
    a948:	18fb      	adds	r3, r7, r3
    a94a:	0018      	movs	r0, r3
    a94c:	4b86      	ldr	r3, [pc, #536]	; (ab68 <system_clock_init+0x25c>)
    a94e:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    a950:	2394      	movs	r3, #148	; 0x94
    a952:	18fb      	adds	r3, r7, r3
    a954:	2203      	movs	r2, #3
    a956:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    a958:	2394      	movs	r3, #148	; 0x94
    a95a:	18fb      	adds	r3, r7, r3
    a95c:	2200      	movs	r2, #0
    a95e:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    a960:	2394      	movs	r3, #148	; 0x94
    a962:	18fb      	adds	r3, r7, r3
    a964:	2201      	movs	r2, #1
    a966:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    a968:	2394      	movs	r3, #148	; 0x94
    a96a:	18fb      	adds	r3, r7, r3
    a96c:	2201      	movs	r2, #1
    a96e:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    a970:	2394      	movs	r3, #148	; 0x94
    a972:	18fb      	adds	r3, r7, r3
    a974:	2200      	movs	r2, #0
    a976:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    a978:	2394      	movs	r3, #148	; 0x94
    a97a:	18fb      	adds	r3, r7, r3
    a97c:	0018      	movs	r0, r3
    a97e:	4b7b      	ldr	r3, [pc, #492]	; (ab6c <system_clock_init+0x260>)
    a980:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    a982:	2004      	movs	r0, #4
    a984:	4b7a      	ldr	r3, [pc, #488]	; (ab70 <system_clock_init+0x264>)
    a986:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    a988:	2380      	movs	r3, #128	; 0x80
    a98a:	18fb      	adds	r3, r7, r3
    a98c:	0018      	movs	r0, r3
    a98e:	4b79      	ldr	r3, [pc, #484]	; (ab74 <system_clock_init+0x268>)
    a990:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    a992:	2380      	movs	r3, #128	; 0x80
    a994:	18fb      	adds	r3, r7, r3
    a996:	2204      	movs	r2, #4
    a998:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    a99a:	2380      	movs	r3, #128	; 0x80
    a99c:	18fb      	adds	r3, r7, r3
    a99e:	2200      	movs	r2, #0
    a9a0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    a9a2:	4b6f      	ldr	r3, [pc, #444]	; (ab60 <system_clock_init+0x254>)
    a9a4:	681b      	ldr	r3, [r3, #0]
    a9a6:	0e9b      	lsrs	r3, r3, #26
    a9a8:	229c      	movs	r2, #156	; 0x9c
    a9aa:	18ba      	adds	r2, r7, r2
    a9ac:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    a9ae:	239c      	movs	r3, #156	; 0x9c
    a9b0:	18fb      	adds	r3, r7, r3
    a9b2:	681b      	ldr	r3, [r3, #0]
    a9b4:	2b3f      	cmp	r3, #63	; 0x3f
    a9b6:	d103      	bne.n	a9c0 <system_clock_init+0xb4>
		coarse = 0x1f;
    a9b8:	231f      	movs	r3, #31
    a9ba:	229c      	movs	r2, #156	; 0x9c
    a9bc:	18ba      	adds	r2, r7, r2
    a9be:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    a9c0:	239c      	movs	r3, #156	; 0x9c
    a9c2:	18fb      	adds	r3, r7, r3
    a9c4:	681b      	ldr	r3, [r3, #0]
    a9c6:	b2da      	uxtb	r2, r3
    a9c8:	2380      	movs	r3, #128	; 0x80
    a9ca:	18fb      	adds	r3, r7, r3
    a9cc:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    a9ce:	2380      	movs	r3, #128	; 0x80
    a9d0:	18fb      	adds	r3, r7, r3
    a9d2:	2200      	movs	r2, #0
    a9d4:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    a9d6:	2380      	movs	r3, #128	; 0x80
    a9d8:	18fb      	adds	r3, r7, r3
    a9da:	2200      	movs	r2, #0
    a9dc:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    a9de:	2380      	movs	r3, #128	; 0x80
    a9e0:	18fb      	adds	r3, r7, r3
    a9e2:	2200      	movs	r2, #0
    a9e4:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    a9e6:	2380      	movs	r3, #128	; 0x80
    a9e8:	18fb      	adds	r3, r7, r3
    a9ea:	2200      	movs	r2, #0
    a9ec:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    a9ee:	2380      	movs	r3, #128	; 0x80
    a9f0:	18fb      	adds	r3, r7, r3
    a9f2:	4a61      	ldr	r2, [pc, #388]	; (ab78 <system_clock_init+0x26c>)
    a9f4:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    a9f6:	2380      	movs	r3, #128	; 0x80
    a9f8:	18fb      	adds	r3, r7, r3
    a9fa:	2207      	movs	r2, #7
    a9fc:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    a9fe:	2380      	movs	r3, #128	; 0x80
    aa00:	18fb      	adds	r3, r7, r3
    aa02:	223f      	movs	r2, #63	; 0x3f
    aa04:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    aa06:	2380      	movs	r3, #128	; 0x80
    aa08:	18fb      	adds	r3, r7, r3
    aa0a:	0018      	movs	r0, r3
    aa0c:	4b5b      	ldr	r3, [pc, #364]	; (ab7c <system_clock_init+0x270>)
    aa0e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    aa10:	237c      	movs	r3, #124	; 0x7c
    aa12:	18fb      	adds	r3, r7, r3
    aa14:	0018      	movs	r0, r3
    aa16:	4b5a      	ldr	r3, [pc, #360]	; (ab80 <system_clock_init+0x274>)
    aa18:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    aa1a:	237c      	movs	r3, #124	; 0x7c
    aa1c:	18fb      	adds	r3, r7, r3
    aa1e:	2200      	movs	r2, #0
    aa20:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    aa22:	237c      	movs	r3, #124	; 0x7c
    aa24:	18fb      	adds	r3, r7, r3
    aa26:	2201      	movs	r2, #1
    aa28:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    aa2a:	237c      	movs	r3, #124	; 0x7c
    aa2c:	18fb      	adds	r3, r7, r3
    aa2e:	2200      	movs	r2, #0
    aa30:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    aa32:	237c      	movs	r3, #124	; 0x7c
    aa34:	18fb      	adds	r3, r7, r3
    aa36:	0018      	movs	r0, r3
    aa38:	4b52      	ldr	r3, [pc, #328]	; (ab84 <system_clock_init+0x278>)
    aa3a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    aa3c:	2006      	movs	r0, #6
    aa3e:	4b4c      	ldr	r3, [pc, #304]	; (ab70 <system_clock_init+0x264>)
    aa40:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    aa42:	4b51      	ldr	r3, [pc, #324]	; (ab88 <system_clock_init+0x27c>)
    aa44:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    aa46:	2364      	movs	r3, #100	; 0x64
    aa48:	18fb      	adds	r3, r7, r3
    aa4a:	0018      	movs	r0, r3
    aa4c:	4b4f      	ldr	r3, [pc, #316]	; (ab8c <system_clock_init+0x280>)
    aa4e:	4798      	blx	r3
    aa50:	2364      	movs	r3, #100	; 0x64
    aa52:	18fb      	adds	r3, r7, r3
    aa54:	2204      	movs	r2, #4
    aa56:	701a      	strb	r2, [r3, #0]
    aa58:	2364      	movs	r3, #100	; 0x64
    aa5a:	18fb      	adds	r3, r7, r3
    aa5c:	2201      	movs	r2, #1
    aa5e:	605a      	str	r2, [r3, #4]
    aa60:	2364      	movs	r3, #100	; 0x64
    aa62:	18fb      	adds	r3, r7, r3
    aa64:	2200      	movs	r2, #0
    aa66:	721a      	strb	r2, [r3, #8]
    aa68:	2364      	movs	r3, #100	; 0x64
    aa6a:	18fb      	adds	r3, r7, r3
    aa6c:	2200      	movs	r2, #0
    aa6e:	725a      	strb	r2, [r3, #9]
    aa70:	2364      	movs	r3, #100	; 0x64
    aa72:	18fb      	adds	r3, r7, r3
    aa74:	0019      	movs	r1, r3
    aa76:	2001      	movs	r0, #1
    aa78:	4b45      	ldr	r3, [pc, #276]	; (ab90 <system_clock_init+0x284>)
    aa7a:	4798      	blx	r3
    aa7c:	2001      	movs	r0, #1
    aa7e:	4b45      	ldr	r3, [pc, #276]	; (ab94 <system_clock_init+0x288>)
    aa80:	4798      	blx	r3
    aa82:	234c      	movs	r3, #76	; 0x4c
    aa84:	18fb      	adds	r3, r7, r3
    aa86:	0018      	movs	r0, r3
    aa88:	4b40      	ldr	r3, [pc, #256]	; (ab8c <system_clock_init+0x280>)
    aa8a:	4798      	blx	r3
    aa8c:	234c      	movs	r3, #76	; 0x4c
    aa8e:	18fb      	adds	r3, r7, r3
    aa90:	2206      	movs	r2, #6
    aa92:	701a      	strb	r2, [r3, #0]
    aa94:	234c      	movs	r3, #76	; 0x4c
    aa96:	18fb      	adds	r3, r7, r3
    aa98:	2201      	movs	r2, #1
    aa9a:	605a      	str	r2, [r3, #4]
    aa9c:	234c      	movs	r3, #76	; 0x4c
    aa9e:	18fb      	adds	r3, r7, r3
    aaa0:	2200      	movs	r2, #0
    aaa2:	721a      	strb	r2, [r3, #8]
    aaa4:	234c      	movs	r3, #76	; 0x4c
    aaa6:	18fb      	adds	r3, r7, r3
    aaa8:	2200      	movs	r2, #0
    aaaa:	725a      	strb	r2, [r3, #9]
    aaac:	234c      	movs	r3, #76	; 0x4c
    aaae:	18fb      	adds	r3, r7, r3
    aab0:	0019      	movs	r1, r3
    aab2:	2003      	movs	r0, #3
    aab4:	4b36      	ldr	r3, [pc, #216]	; (ab90 <system_clock_init+0x284>)
    aab6:	4798      	blx	r3
    aab8:	2003      	movs	r0, #3
    aaba:	4b36      	ldr	r3, [pc, #216]	; (ab94 <system_clock_init+0x288>)
    aabc:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    aabe:	230c      	movs	r3, #12
    aac0:	18fb      	adds	r3, r7, r3
    aac2:	0018      	movs	r0, r3
    aac4:	4b34      	ldr	r3, [pc, #208]	; (ab98 <system_clock_init+0x28c>)
    aac6:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    aac8:	230c      	movs	r3, #12
    aaca:	18fb      	adds	r3, r7, r3
    aacc:	2201      	movs	r2, #1
    aace:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    aad0:	230c      	movs	r3, #12
    aad2:	18fb      	adds	r3, r7, r3
    aad4:	0019      	movs	r1, r3
    aad6:	2000      	movs	r0, #0
    aad8:	4b30      	ldr	r3, [pc, #192]	; (ab9c <system_clock_init+0x290>)
    aada:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    aadc:	2000      	movs	r0, #0
    aade:	4b30      	ldr	r3, [pc, #192]	; (aba0 <system_clock_init+0x294>)
    aae0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    aae2:	2007      	movs	r0, #7
    aae4:	4b22      	ldr	r3, [pc, #136]	; (ab70 <system_clock_init+0x264>)
    aae6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    aae8:	46c0      	nop			; (mov r8, r8)
    aaea:	2007      	movs	r0, #7
    aaec:	4b2d      	ldr	r3, [pc, #180]	; (aba4 <system_clock_init+0x298>)
    aaee:	4798      	blx	r3
    aaf0:	0003      	movs	r3, r0
    aaf2:	001a      	movs	r2, r3
    aaf4:	2301      	movs	r3, #1
    aaf6:	4053      	eors	r3, r2
    aaf8:	b2db      	uxtb	r3, r3
    aafa:	2b00      	cmp	r3, #0
    aafc:	d1f5      	bne.n	aaea <system_clock_init+0x1de>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    aafe:	2000      	movs	r0, #0
    ab00:	4b29      	ldr	r3, [pc, #164]	; (aba8 <system_clock_init+0x29c>)
    ab02:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    ab04:	2100      	movs	r1, #0
    ab06:	2000      	movs	r0, #0
    ab08:	4b28      	ldr	r3, [pc, #160]	; (abac <system_clock_init+0x2a0>)
    ab0a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    ab0c:	2100      	movs	r1, #0
    ab0e:	2001      	movs	r0, #1
    ab10:	4b26      	ldr	r3, [pc, #152]	; (abac <system_clock_init+0x2a0>)
    ab12:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    ab14:	2100      	movs	r1, #0
    ab16:	2002      	movs	r0, #2
    ab18:	4b24      	ldr	r3, [pc, #144]	; (abac <system_clock_init+0x2a0>)
    ab1a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    ab1c:	003b      	movs	r3, r7
    ab1e:	0018      	movs	r0, r3
    ab20:	4b1a      	ldr	r3, [pc, #104]	; (ab8c <system_clock_init+0x280>)
    ab22:	4798      	blx	r3
    ab24:	003b      	movs	r3, r7
    ab26:	2207      	movs	r2, #7
    ab28:	701a      	strb	r2, [r3, #0]
    ab2a:	003b      	movs	r3, r7
    ab2c:	2201      	movs	r2, #1
    ab2e:	605a      	str	r2, [r3, #4]
    ab30:	003b      	movs	r3, r7
    ab32:	2200      	movs	r2, #0
    ab34:	721a      	strb	r2, [r3, #8]
    ab36:	003b      	movs	r3, r7
    ab38:	2200      	movs	r2, #0
    ab3a:	725a      	strb	r2, [r3, #9]
    ab3c:	003b      	movs	r3, r7
    ab3e:	0019      	movs	r1, r3
    ab40:	2000      	movs	r0, #0
    ab42:	4b13      	ldr	r3, [pc, #76]	; (ab90 <system_clock_init+0x284>)
    ab44:	4798      	blx	r3
    ab46:	2000      	movs	r0, #0
    ab48:	4b12      	ldr	r3, [pc, #72]	; (ab94 <system_clock_init+0x288>)
    ab4a:	4798      	blx	r3
#endif
}
    ab4c:	46c0      	nop			; (mov r8, r8)
    ab4e:	46bd      	mov	sp, r7
    ab50:	b028      	add	sp, #160	; 0xa0
    ab52:	bd80      	pop	{r7, pc}
    ab54:	40000800 	.word	0x40000800
    ab58:	0000a441 	.word	0x0000a441
    ab5c:	0000a8d5 	.word	0x0000a8d5
    ab60:	00806024 	.word	0x00806024
    ab64:	ff80ffff 	.word	0xff80ffff
    ab68:	0000a325 	.word	0x0000a325
    ab6c:	0000a609 	.word	0x0000a609
    ab70:	0000a7a5 	.word	0x0000a7a5
    ab74:	0000a37b 	.word	0x0000a37b
    ab78:	000005b9 	.word	0x000005b9
    ab7c:	0000a6d5 	.word	0x0000a6d5
    ab80:	0000a359 	.word	0x0000a359
    ab84:	0000a591 	.word	0x0000a591
    ab88:	0000ac55 	.word	0x0000ac55
    ab8c:	0000a2e1 	.word	0x0000a2e1
    ab90:	0000ac85 	.word	0x0000ac85
    ab94:	0000ada9 	.word	0x0000ada9
    ab98:	0000a30f 	.word	0x0000a30f
    ab9c:	0000aedd 	.word	0x0000aedd
    aba0:	0000af21 	.word	0x0000af21
    aba4:	0000a851 	.word	0x0000a851
    aba8:	0000a3cd 	.word	0x0000a3cd
    abac:	0000a3ed 	.word	0x0000a3ed

0000abb0 <system_apb_clock_set_mask>:
{
    abb0:	b580      	push	{r7, lr}
    abb2:	b082      	sub	sp, #8
    abb4:	af00      	add	r7, sp, #0
    abb6:	0002      	movs	r2, r0
    abb8:	6039      	str	r1, [r7, #0]
    abba:	1dfb      	adds	r3, r7, #7
    abbc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    abbe:	1dfb      	adds	r3, r7, #7
    abc0:	781b      	ldrb	r3, [r3, #0]
    abc2:	2b01      	cmp	r3, #1
    abc4:	d00a      	beq.n	abdc <system_apb_clock_set_mask+0x2c>
    abc6:	2b02      	cmp	r3, #2
    abc8:	d00f      	beq.n	abea <system_apb_clock_set_mask+0x3a>
    abca:	2b00      	cmp	r3, #0
    abcc:	d114      	bne.n	abf8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    abce:	4b0e      	ldr	r3, [pc, #56]	; (ac08 <system_apb_clock_set_mask+0x58>)
    abd0:	4a0d      	ldr	r2, [pc, #52]	; (ac08 <system_apb_clock_set_mask+0x58>)
    abd2:	6991      	ldr	r1, [r2, #24]
    abd4:	683a      	ldr	r2, [r7, #0]
    abd6:	430a      	orrs	r2, r1
    abd8:	619a      	str	r2, [r3, #24]
			break;
    abda:	e00f      	b.n	abfc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    abdc:	4b0a      	ldr	r3, [pc, #40]	; (ac08 <system_apb_clock_set_mask+0x58>)
    abde:	4a0a      	ldr	r2, [pc, #40]	; (ac08 <system_apb_clock_set_mask+0x58>)
    abe0:	69d1      	ldr	r1, [r2, #28]
    abe2:	683a      	ldr	r2, [r7, #0]
    abe4:	430a      	orrs	r2, r1
    abe6:	61da      	str	r2, [r3, #28]
			break;
    abe8:	e008      	b.n	abfc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    abea:	4b07      	ldr	r3, [pc, #28]	; (ac08 <system_apb_clock_set_mask+0x58>)
    abec:	4a06      	ldr	r2, [pc, #24]	; (ac08 <system_apb_clock_set_mask+0x58>)
    abee:	6a11      	ldr	r1, [r2, #32]
    abf0:	683a      	ldr	r2, [r7, #0]
    abf2:	430a      	orrs	r2, r1
    abf4:	621a      	str	r2, [r3, #32]
			break;
    abf6:	e001      	b.n	abfc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    abf8:	2317      	movs	r3, #23
    abfa:	e000      	b.n	abfe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    abfc:	2300      	movs	r3, #0
}
    abfe:	0018      	movs	r0, r3
    ac00:	46bd      	mov	sp, r7
    ac02:	b002      	add	sp, #8
    ac04:	bd80      	pop	{r7, pc}
    ac06:	46c0      	nop			; (mov r8, r8)
    ac08:	40000400 	.word	0x40000400

0000ac0c <system_interrupt_enter_critical_section>:
{
    ac0c:	b580      	push	{r7, lr}
    ac0e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    ac10:	4b02      	ldr	r3, [pc, #8]	; (ac1c <system_interrupt_enter_critical_section+0x10>)
    ac12:	4798      	blx	r3
}
    ac14:	46c0      	nop			; (mov r8, r8)
    ac16:	46bd      	mov	sp, r7
    ac18:	bd80      	pop	{r7, pc}
    ac1a:	46c0      	nop			; (mov r8, r8)
    ac1c:	0000a24d 	.word	0x0000a24d

0000ac20 <system_interrupt_leave_critical_section>:
{
    ac20:	b580      	push	{r7, lr}
    ac22:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    ac24:	4b02      	ldr	r3, [pc, #8]	; (ac30 <system_interrupt_leave_critical_section+0x10>)
    ac26:	4798      	blx	r3
}
    ac28:	46c0      	nop			; (mov r8, r8)
    ac2a:	46bd      	mov	sp, r7
    ac2c:	bd80      	pop	{r7, pc}
    ac2e:	46c0      	nop			; (mov r8, r8)
    ac30:	0000a2a1 	.word	0x0000a2a1

0000ac34 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    ac34:	b580      	push	{r7, lr}
    ac36:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ac38:	4b05      	ldr	r3, [pc, #20]	; (ac50 <system_gclk_is_syncing+0x1c>)
    ac3a:	785b      	ldrb	r3, [r3, #1]
    ac3c:	b2db      	uxtb	r3, r3
    ac3e:	b25b      	sxtb	r3, r3
    ac40:	2b00      	cmp	r3, #0
    ac42:	da01      	bge.n	ac48 <system_gclk_is_syncing+0x14>
		return true;
    ac44:	2301      	movs	r3, #1
    ac46:	e000      	b.n	ac4a <system_gclk_is_syncing+0x16>
	}

	return false;
    ac48:	2300      	movs	r3, #0
}
    ac4a:	0018      	movs	r0, r3
    ac4c:	46bd      	mov	sp, r7
    ac4e:	bd80      	pop	{r7, pc}
    ac50:	40000c00 	.word	0x40000c00

0000ac54 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    ac54:	b580      	push	{r7, lr}
    ac56:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    ac58:	2108      	movs	r1, #8
    ac5a:	2000      	movs	r0, #0
    ac5c:	4b07      	ldr	r3, [pc, #28]	; (ac7c <system_gclk_init+0x28>)
    ac5e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    ac60:	4b07      	ldr	r3, [pc, #28]	; (ac80 <system_gclk_init+0x2c>)
    ac62:	2201      	movs	r2, #1
    ac64:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    ac66:	46c0      	nop			; (mov r8, r8)
    ac68:	4b05      	ldr	r3, [pc, #20]	; (ac80 <system_gclk_init+0x2c>)
    ac6a:	781b      	ldrb	r3, [r3, #0]
    ac6c:	b2db      	uxtb	r3, r3
    ac6e:	001a      	movs	r2, r3
    ac70:	2301      	movs	r3, #1
    ac72:	4013      	ands	r3, r2
    ac74:	d1f8      	bne.n	ac68 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    ac76:	46c0      	nop			; (mov r8, r8)
    ac78:	46bd      	mov	sp, r7
    ac7a:	bd80      	pop	{r7, pc}
    ac7c:	0000abb1 	.word	0x0000abb1
    ac80:	40000c00 	.word	0x40000c00

0000ac84 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    ac84:	b580      	push	{r7, lr}
    ac86:	b086      	sub	sp, #24
    ac88:	af00      	add	r7, sp, #0
    ac8a:	0002      	movs	r2, r0
    ac8c:	6039      	str	r1, [r7, #0]
    ac8e:	1dfb      	adds	r3, r7, #7
    ac90:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    ac92:	1dfb      	adds	r3, r7, #7
    ac94:	781b      	ldrb	r3, [r3, #0]
    ac96:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    ac98:	1dfb      	adds	r3, r7, #7
    ac9a:	781b      	ldrb	r3, [r3, #0]
    ac9c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    ac9e:	683b      	ldr	r3, [r7, #0]
    aca0:	781b      	ldrb	r3, [r3, #0]
    aca2:	021b      	lsls	r3, r3, #8
    aca4:	001a      	movs	r2, r3
    aca6:	697b      	ldr	r3, [r7, #20]
    aca8:	4313      	orrs	r3, r2
    acaa:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    acac:	683b      	ldr	r3, [r7, #0]
    acae:	785b      	ldrb	r3, [r3, #1]
    acb0:	2b00      	cmp	r3, #0
    acb2:	d004      	beq.n	acbe <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    acb4:	697b      	ldr	r3, [r7, #20]
    acb6:	2280      	movs	r2, #128	; 0x80
    acb8:	02d2      	lsls	r2, r2, #11
    acba:	4313      	orrs	r3, r2
    acbc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    acbe:	683b      	ldr	r3, [r7, #0]
    acc0:	7a5b      	ldrb	r3, [r3, #9]
    acc2:	2b00      	cmp	r3, #0
    acc4:	d004      	beq.n	acd0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    acc6:	697b      	ldr	r3, [r7, #20]
    acc8:	2280      	movs	r2, #128	; 0x80
    acca:	0312      	lsls	r2, r2, #12
    accc:	4313      	orrs	r3, r2
    acce:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    acd0:	683b      	ldr	r3, [r7, #0]
    acd2:	685b      	ldr	r3, [r3, #4]
    acd4:	2b01      	cmp	r3, #1
    acd6:	d92c      	bls.n	ad32 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    acd8:	683b      	ldr	r3, [r7, #0]
    acda:	685a      	ldr	r2, [r3, #4]
    acdc:	683b      	ldr	r3, [r7, #0]
    acde:	685b      	ldr	r3, [r3, #4]
    ace0:	3b01      	subs	r3, #1
    ace2:	4013      	ands	r3, r2
    ace4:	d11a      	bne.n	ad1c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    ace6:	2300      	movs	r3, #0
    ace8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    acea:	2302      	movs	r3, #2
    acec:	60bb      	str	r3, [r7, #8]
    acee:	e005      	b.n	acfc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    acf0:	68fb      	ldr	r3, [r7, #12]
    acf2:	3301      	adds	r3, #1
    acf4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    acf6:	68bb      	ldr	r3, [r7, #8]
    acf8:	005b      	lsls	r3, r3, #1
    acfa:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    acfc:	683b      	ldr	r3, [r7, #0]
    acfe:	685a      	ldr	r2, [r3, #4]
    ad00:	68bb      	ldr	r3, [r7, #8]
    ad02:	429a      	cmp	r2, r3
    ad04:	d8f4      	bhi.n	acf0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    ad06:	68fb      	ldr	r3, [r7, #12]
    ad08:	021b      	lsls	r3, r3, #8
    ad0a:	693a      	ldr	r2, [r7, #16]
    ad0c:	4313      	orrs	r3, r2
    ad0e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    ad10:	697b      	ldr	r3, [r7, #20]
    ad12:	2280      	movs	r2, #128	; 0x80
    ad14:	0352      	lsls	r2, r2, #13
    ad16:	4313      	orrs	r3, r2
    ad18:	617b      	str	r3, [r7, #20]
    ad1a:	e00a      	b.n	ad32 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    ad1c:	683b      	ldr	r3, [r7, #0]
    ad1e:	685b      	ldr	r3, [r3, #4]
    ad20:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    ad22:	693a      	ldr	r2, [r7, #16]
    ad24:	4313      	orrs	r3, r2
    ad26:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    ad28:	697b      	ldr	r3, [r7, #20]
    ad2a:	2280      	movs	r2, #128	; 0x80
    ad2c:	0292      	lsls	r2, r2, #10
    ad2e:	4313      	orrs	r3, r2
    ad30:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    ad32:	683b      	ldr	r3, [r7, #0]
    ad34:	7a1b      	ldrb	r3, [r3, #8]
    ad36:	2b00      	cmp	r3, #0
    ad38:	d004      	beq.n	ad44 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    ad3a:	697b      	ldr	r3, [r7, #20]
    ad3c:	2280      	movs	r2, #128	; 0x80
    ad3e:	0392      	lsls	r2, r2, #14
    ad40:	4313      	orrs	r3, r2
    ad42:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    ad44:	46c0      	nop			; (mov r8, r8)
    ad46:	4b13      	ldr	r3, [pc, #76]	; (ad94 <system_gclk_gen_set_config+0x110>)
    ad48:	4798      	blx	r3
    ad4a:	1e03      	subs	r3, r0, #0
    ad4c:	d1fb      	bne.n	ad46 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ad4e:	4b12      	ldr	r3, [pc, #72]	; (ad98 <system_gclk_gen_set_config+0x114>)
    ad50:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ad52:	4a12      	ldr	r2, [pc, #72]	; (ad9c <system_gclk_gen_set_config+0x118>)
    ad54:	1dfb      	adds	r3, r7, #7
    ad56:	781b      	ldrb	r3, [r3, #0]
    ad58:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    ad5a:	46c0      	nop			; (mov r8, r8)
    ad5c:	4b0d      	ldr	r3, [pc, #52]	; (ad94 <system_gclk_gen_set_config+0x110>)
    ad5e:	4798      	blx	r3
    ad60:	1e03      	subs	r3, r0, #0
    ad62:	d1fb      	bne.n	ad5c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    ad64:	4b0e      	ldr	r3, [pc, #56]	; (ada0 <system_gclk_gen_set_config+0x11c>)
    ad66:	693a      	ldr	r2, [r7, #16]
    ad68:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    ad6a:	46c0      	nop			; (mov r8, r8)
    ad6c:	4b09      	ldr	r3, [pc, #36]	; (ad94 <system_gclk_gen_set_config+0x110>)
    ad6e:	4798      	blx	r3
    ad70:	1e03      	subs	r3, r0, #0
    ad72:	d1fb      	bne.n	ad6c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    ad74:	4b0a      	ldr	r3, [pc, #40]	; (ada0 <system_gclk_gen_set_config+0x11c>)
    ad76:	4a0a      	ldr	r2, [pc, #40]	; (ada0 <system_gclk_gen_set_config+0x11c>)
    ad78:	6851      	ldr	r1, [r2, #4]
    ad7a:	2280      	movs	r2, #128	; 0x80
    ad7c:	0252      	lsls	r2, r2, #9
    ad7e:	4011      	ands	r1, r2
    ad80:	697a      	ldr	r2, [r7, #20]
    ad82:	430a      	orrs	r2, r1
    ad84:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    ad86:	4b07      	ldr	r3, [pc, #28]	; (ada4 <system_gclk_gen_set_config+0x120>)
    ad88:	4798      	blx	r3
}
    ad8a:	46c0      	nop			; (mov r8, r8)
    ad8c:	46bd      	mov	sp, r7
    ad8e:	b006      	add	sp, #24
    ad90:	bd80      	pop	{r7, pc}
    ad92:	46c0      	nop			; (mov r8, r8)
    ad94:	0000ac35 	.word	0x0000ac35
    ad98:	0000ac0d 	.word	0x0000ac0d
    ad9c:	40000c08 	.word	0x40000c08
    ada0:	40000c00 	.word	0x40000c00
    ada4:	0000ac21 	.word	0x0000ac21

0000ada8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    ada8:	b580      	push	{r7, lr}
    adaa:	b082      	sub	sp, #8
    adac:	af00      	add	r7, sp, #0
    adae:	0002      	movs	r2, r0
    adb0:	1dfb      	adds	r3, r7, #7
    adb2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    adb4:	46c0      	nop			; (mov r8, r8)
    adb6:	4b0e      	ldr	r3, [pc, #56]	; (adf0 <system_gclk_gen_enable+0x48>)
    adb8:	4798      	blx	r3
    adba:	1e03      	subs	r3, r0, #0
    adbc:	d1fb      	bne.n	adb6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    adbe:	4b0d      	ldr	r3, [pc, #52]	; (adf4 <system_gclk_gen_enable+0x4c>)
    adc0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    adc2:	4a0d      	ldr	r2, [pc, #52]	; (adf8 <system_gclk_gen_enable+0x50>)
    adc4:	1dfb      	adds	r3, r7, #7
    adc6:	781b      	ldrb	r3, [r3, #0]
    adc8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    adca:	46c0      	nop			; (mov r8, r8)
    adcc:	4b08      	ldr	r3, [pc, #32]	; (adf0 <system_gclk_gen_enable+0x48>)
    adce:	4798      	blx	r3
    add0:	1e03      	subs	r3, r0, #0
    add2:	d1fb      	bne.n	adcc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    add4:	4b09      	ldr	r3, [pc, #36]	; (adfc <system_gclk_gen_enable+0x54>)
    add6:	4a09      	ldr	r2, [pc, #36]	; (adfc <system_gclk_gen_enable+0x54>)
    add8:	6852      	ldr	r2, [r2, #4]
    adda:	2180      	movs	r1, #128	; 0x80
    addc:	0249      	lsls	r1, r1, #9
    adde:	430a      	orrs	r2, r1
    ade0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    ade2:	4b07      	ldr	r3, [pc, #28]	; (ae00 <system_gclk_gen_enable+0x58>)
    ade4:	4798      	blx	r3
}
    ade6:	46c0      	nop			; (mov r8, r8)
    ade8:	46bd      	mov	sp, r7
    adea:	b002      	add	sp, #8
    adec:	bd80      	pop	{r7, pc}
    adee:	46c0      	nop			; (mov r8, r8)
    adf0:	0000ac35 	.word	0x0000ac35
    adf4:	0000ac0d 	.word	0x0000ac0d
    adf8:	40000c04 	.word	0x40000c04
    adfc:	40000c00 	.word	0x40000c00
    ae00:	0000ac21 	.word	0x0000ac21

0000ae04 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    ae04:	b580      	push	{r7, lr}
    ae06:	b086      	sub	sp, #24
    ae08:	af00      	add	r7, sp, #0
    ae0a:	0002      	movs	r2, r0
    ae0c:	1dfb      	adds	r3, r7, #7
    ae0e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    ae10:	46c0      	nop			; (mov r8, r8)
    ae12:	4b2a      	ldr	r3, [pc, #168]	; (aebc <system_gclk_gen_get_hz+0xb8>)
    ae14:	4798      	blx	r3
    ae16:	1e03      	subs	r3, r0, #0
    ae18:	d1fb      	bne.n	ae12 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ae1a:	4b29      	ldr	r3, [pc, #164]	; (aec0 <system_gclk_gen_get_hz+0xbc>)
    ae1c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ae1e:	4a29      	ldr	r2, [pc, #164]	; (aec4 <system_gclk_gen_get_hz+0xc0>)
    ae20:	1dfb      	adds	r3, r7, #7
    ae22:	781b      	ldrb	r3, [r3, #0]
    ae24:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ae26:	46c0      	nop			; (mov r8, r8)
    ae28:	4b24      	ldr	r3, [pc, #144]	; (aebc <system_gclk_gen_get_hz+0xb8>)
    ae2a:	4798      	blx	r3
    ae2c:	1e03      	subs	r3, r0, #0
    ae2e:	d1fb      	bne.n	ae28 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    ae30:	4b25      	ldr	r3, [pc, #148]	; (aec8 <system_gclk_gen_get_hz+0xc4>)
    ae32:	685b      	ldr	r3, [r3, #4]
    ae34:	04db      	lsls	r3, r3, #19
    ae36:	0edb      	lsrs	r3, r3, #27
    ae38:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    ae3a:	0018      	movs	r0, r3
    ae3c:	4b23      	ldr	r3, [pc, #140]	; (aecc <system_gclk_gen_get_hz+0xc8>)
    ae3e:	4798      	blx	r3
    ae40:	0003      	movs	r3, r0
    ae42:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ae44:	4a1f      	ldr	r2, [pc, #124]	; (aec4 <system_gclk_gen_get_hz+0xc0>)
    ae46:	1dfb      	adds	r3, r7, #7
    ae48:	781b      	ldrb	r3, [r3, #0]
    ae4a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    ae4c:	4b1e      	ldr	r3, [pc, #120]	; (aec8 <system_gclk_gen_get_hz+0xc4>)
    ae4e:	685b      	ldr	r3, [r3, #4]
    ae50:	02db      	lsls	r3, r3, #11
    ae52:	0fdb      	lsrs	r3, r3, #31
    ae54:	b2da      	uxtb	r2, r3
    ae56:	2313      	movs	r3, #19
    ae58:	18fb      	adds	r3, r7, r3
    ae5a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ae5c:	4a1c      	ldr	r2, [pc, #112]	; (aed0 <system_gclk_gen_get_hz+0xcc>)
    ae5e:	1dfb      	adds	r3, r7, #7
    ae60:	781b      	ldrb	r3, [r3, #0]
    ae62:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ae64:	46c0      	nop			; (mov r8, r8)
    ae66:	4b15      	ldr	r3, [pc, #84]	; (aebc <system_gclk_gen_get_hz+0xb8>)
    ae68:	4798      	blx	r3
    ae6a:	1e03      	subs	r3, r0, #0
    ae6c:	d1fb      	bne.n	ae66 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    ae6e:	4b16      	ldr	r3, [pc, #88]	; (aec8 <system_gclk_gen_get_hz+0xc4>)
    ae70:	689b      	ldr	r3, [r3, #8]
    ae72:	021b      	lsls	r3, r3, #8
    ae74:	0c1b      	lsrs	r3, r3, #16
    ae76:	b29b      	uxth	r3, r3
    ae78:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    ae7a:	4b16      	ldr	r3, [pc, #88]	; (aed4 <system_gclk_gen_get_hz+0xd0>)
    ae7c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    ae7e:	2313      	movs	r3, #19
    ae80:	18fb      	adds	r3, r7, r3
    ae82:	781b      	ldrb	r3, [r3, #0]
    ae84:	2b00      	cmp	r3, #0
    ae86:	d109      	bne.n	ae9c <system_gclk_gen_get_hz+0x98>
    ae88:	68fb      	ldr	r3, [r7, #12]
    ae8a:	2b01      	cmp	r3, #1
    ae8c:	d906      	bls.n	ae9c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    ae8e:	4b12      	ldr	r3, [pc, #72]	; (aed8 <system_gclk_gen_get_hz+0xd4>)
    ae90:	68f9      	ldr	r1, [r7, #12]
    ae92:	6978      	ldr	r0, [r7, #20]
    ae94:	4798      	blx	r3
    ae96:	0003      	movs	r3, r0
    ae98:	617b      	str	r3, [r7, #20]
    ae9a:	e00a      	b.n	aeb2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    ae9c:	2313      	movs	r3, #19
    ae9e:	18fb      	adds	r3, r7, r3
    aea0:	781b      	ldrb	r3, [r3, #0]
    aea2:	2b00      	cmp	r3, #0
    aea4:	d005      	beq.n	aeb2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    aea6:	68fb      	ldr	r3, [r7, #12]
    aea8:	3301      	adds	r3, #1
    aeaa:	697a      	ldr	r2, [r7, #20]
    aeac:	40da      	lsrs	r2, r3
    aeae:	0013      	movs	r3, r2
    aeb0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    aeb2:	697b      	ldr	r3, [r7, #20]
}
    aeb4:	0018      	movs	r0, r3
    aeb6:	46bd      	mov	sp, r7
    aeb8:	b006      	add	sp, #24
    aeba:	bd80      	pop	{r7, pc}
    aebc:	0000ac35 	.word	0x0000ac35
    aec0:	0000ac0d 	.word	0x0000ac0d
    aec4:	40000c04 	.word	0x40000c04
    aec8:	40000c00 	.word	0x40000c00
    aecc:	0000a4d5 	.word	0x0000a4d5
    aed0:	40000c08 	.word	0x40000c08
    aed4:	0000ac21 	.word	0x0000ac21
    aed8:	0000ffb1 	.word	0x0000ffb1

0000aedc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    aedc:	b580      	push	{r7, lr}
    aede:	b084      	sub	sp, #16
    aee0:	af00      	add	r7, sp, #0
    aee2:	0002      	movs	r2, r0
    aee4:	6039      	str	r1, [r7, #0]
    aee6:	1dfb      	adds	r3, r7, #7
    aee8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    aeea:	1dfb      	adds	r3, r7, #7
    aeec:	781b      	ldrb	r3, [r3, #0]
    aeee:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    aef0:	683b      	ldr	r3, [r7, #0]
    aef2:	781b      	ldrb	r3, [r3, #0]
    aef4:	021b      	lsls	r3, r3, #8
    aef6:	001a      	movs	r2, r3
    aef8:	68fb      	ldr	r3, [r7, #12]
    aefa:	4313      	orrs	r3, r2
    aefc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    aefe:	1dfb      	adds	r3, r7, #7
    af00:	781b      	ldrb	r3, [r3, #0]
    af02:	0018      	movs	r0, r3
    af04:	4b04      	ldr	r3, [pc, #16]	; (af18 <system_gclk_chan_set_config+0x3c>)
    af06:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    af08:	4b04      	ldr	r3, [pc, #16]	; (af1c <system_gclk_chan_set_config+0x40>)
    af0a:	68fa      	ldr	r2, [r7, #12]
    af0c:	b292      	uxth	r2, r2
    af0e:	805a      	strh	r2, [r3, #2]
}
    af10:	46c0      	nop			; (mov r8, r8)
    af12:	46bd      	mov	sp, r7
    af14:	b004      	add	sp, #16
    af16:	bd80      	pop	{r7, pc}
    af18:	0000af69 	.word	0x0000af69
    af1c:	40000c00 	.word	0x40000c00

0000af20 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    af20:	b580      	push	{r7, lr}
    af22:	b082      	sub	sp, #8
    af24:	af00      	add	r7, sp, #0
    af26:	0002      	movs	r2, r0
    af28:	1dfb      	adds	r3, r7, #7
    af2a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    af2c:	4b0a      	ldr	r3, [pc, #40]	; (af58 <system_gclk_chan_enable+0x38>)
    af2e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    af30:	4a0a      	ldr	r2, [pc, #40]	; (af5c <system_gclk_chan_enable+0x3c>)
    af32:	1dfb      	adds	r3, r7, #7
    af34:	781b      	ldrb	r3, [r3, #0]
    af36:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    af38:	4909      	ldr	r1, [pc, #36]	; (af60 <system_gclk_chan_enable+0x40>)
    af3a:	4b09      	ldr	r3, [pc, #36]	; (af60 <system_gclk_chan_enable+0x40>)
    af3c:	885b      	ldrh	r3, [r3, #2]
    af3e:	b29b      	uxth	r3, r3
    af40:	2280      	movs	r2, #128	; 0x80
    af42:	01d2      	lsls	r2, r2, #7
    af44:	4313      	orrs	r3, r2
    af46:	b29b      	uxth	r3, r3
    af48:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    af4a:	4b06      	ldr	r3, [pc, #24]	; (af64 <system_gclk_chan_enable+0x44>)
    af4c:	4798      	blx	r3
}
    af4e:	46c0      	nop			; (mov r8, r8)
    af50:	46bd      	mov	sp, r7
    af52:	b002      	add	sp, #8
    af54:	bd80      	pop	{r7, pc}
    af56:	46c0      	nop			; (mov r8, r8)
    af58:	0000ac0d 	.word	0x0000ac0d
    af5c:	40000c02 	.word	0x40000c02
    af60:	40000c00 	.word	0x40000c00
    af64:	0000ac21 	.word	0x0000ac21

0000af68 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    af68:	b580      	push	{r7, lr}
    af6a:	b084      	sub	sp, #16
    af6c:	af00      	add	r7, sp, #0
    af6e:	0002      	movs	r2, r0
    af70:	1dfb      	adds	r3, r7, #7
    af72:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    af74:	4b1c      	ldr	r3, [pc, #112]	; (afe8 <system_gclk_chan_disable+0x80>)
    af76:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    af78:	4a1c      	ldr	r2, [pc, #112]	; (afec <system_gclk_chan_disable+0x84>)
    af7a:	1dfb      	adds	r3, r7, #7
    af7c:	781b      	ldrb	r3, [r3, #0]
    af7e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    af80:	4b1b      	ldr	r3, [pc, #108]	; (aff0 <system_gclk_chan_disable+0x88>)
    af82:	885b      	ldrh	r3, [r3, #2]
    af84:	051b      	lsls	r3, r3, #20
    af86:	0f1b      	lsrs	r3, r3, #28
    af88:	b2db      	uxtb	r3, r3
    af8a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    af8c:	4a18      	ldr	r2, [pc, #96]	; (aff0 <system_gclk_chan_disable+0x88>)
    af8e:	8853      	ldrh	r3, [r2, #2]
    af90:	4918      	ldr	r1, [pc, #96]	; (aff4 <system_gclk_chan_disable+0x8c>)
    af92:	400b      	ands	r3, r1
    af94:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    af96:	4a16      	ldr	r2, [pc, #88]	; (aff0 <system_gclk_chan_disable+0x88>)
    af98:	4b15      	ldr	r3, [pc, #84]	; (aff0 <system_gclk_chan_disable+0x88>)
    af9a:	885b      	ldrh	r3, [r3, #2]
    af9c:	b29b      	uxth	r3, r3
    af9e:	4916      	ldr	r1, [pc, #88]	; (aff8 <system_gclk_chan_disable+0x90>)
    afa0:	400b      	ands	r3, r1
    afa2:	b29b      	uxth	r3, r3
    afa4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    afa6:	46c0      	nop			; (mov r8, r8)
    afa8:	4b11      	ldr	r3, [pc, #68]	; (aff0 <system_gclk_chan_disable+0x88>)
    afaa:	885b      	ldrh	r3, [r3, #2]
    afac:	b29b      	uxth	r3, r3
    afae:	001a      	movs	r2, r3
    afb0:	2380      	movs	r3, #128	; 0x80
    afb2:	01db      	lsls	r3, r3, #7
    afb4:	4013      	ands	r3, r2
    afb6:	d1f7      	bne.n	afa8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    afb8:	4a0d      	ldr	r2, [pc, #52]	; (aff0 <system_gclk_chan_disable+0x88>)
    afba:	68fb      	ldr	r3, [r7, #12]
    afbc:	b2db      	uxtb	r3, r3
    afbe:	1c19      	adds	r1, r3, #0
    afc0:	230f      	movs	r3, #15
    afc2:	400b      	ands	r3, r1
    afc4:	b2d9      	uxtb	r1, r3
    afc6:	8853      	ldrh	r3, [r2, #2]
    afc8:	1c08      	adds	r0, r1, #0
    afca:	210f      	movs	r1, #15
    afcc:	4001      	ands	r1, r0
    afce:	0208      	lsls	r0, r1, #8
    afd0:	4908      	ldr	r1, [pc, #32]	; (aff4 <system_gclk_chan_disable+0x8c>)
    afd2:	400b      	ands	r3, r1
    afd4:	1c19      	adds	r1, r3, #0
    afd6:	1c03      	adds	r3, r0, #0
    afd8:	430b      	orrs	r3, r1
    afda:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    afdc:	4b07      	ldr	r3, [pc, #28]	; (affc <system_gclk_chan_disable+0x94>)
    afde:	4798      	blx	r3
}
    afe0:	46c0      	nop			; (mov r8, r8)
    afe2:	46bd      	mov	sp, r7
    afe4:	b004      	add	sp, #16
    afe6:	bd80      	pop	{r7, pc}
    afe8:	0000ac0d 	.word	0x0000ac0d
    afec:	40000c02 	.word	0x40000c02
    aff0:	40000c00 	.word	0x40000c00
    aff4:	fffff0ff 	.word	0xfffff0ff
    aff8:	ffffbfff 	.word	0xffffbfff
    affc:	0000ac21 	.word	0x0000ac21

0000b000 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    b000:	b580      	push	{r7, lr}
    b002:	b084      	sub	sp, #16
    b004:	af00      	add	r7, sp, #0
    b006:	0002      	movs	r2, r0
    b008:	1dfb      	adds	r3, r7, #7
    b00a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    b00c:	4b0d      	ldr	r3, [pc, #52]	; (b044 <system_gclk_chan_get_hz+0x44>)
    b00e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    b010:	4a0d      	ldr	r2, [pc, #52]	; (b048 <system_gclk_chan_get_hz+0x48>)
    b012:	1dfb      	adds	r3, r7, #7
    b014:	781b      	ldrb	r3, [r3, #0]
    b016:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    b018:	4b0c      	ldr	r3, [pc, #48]	; (b04c <system_gclk_chan_get_hz+0x4c>)
    b01a:	885b      	ldrh	r3, [r3, #2]
    b01c:	051b      	lsls	r3, r3, #20
    b01e:	0f1b      	lsrs	r3, r3, #28
    b020:	b2da      	uxtb	r2, r3
    b022:	230f      	movs	r3, #15
    b024:	18fb      	adds	r3, r7, r3
    b026:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    b028:	4b09      	ldr	r3, [pc, #36]	; (b050 <system_gclk_chan_get_hz+0x50>)
    b02a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    b02c:	230f      	movs	r3, #15
    b02e:	18fb      	adds	r3, r7, r3
    b030:	781b      	ldrb	r3, [r3, #0]
    b032:	0018      	movs	r0, r3
    b034:	4b07      	ldr	r3, [pc, #28]	; (b054 <system_gclk_chan_get_hz+0x54>)
    b036:	4798      	blx	r3
    b038:	0003      	movs	r3, r0
}
    b03a:	0018      	movs	r0, r3
    b03c:	46bd      	mov	sp, r7
    b03e:	b004      	add	sp, #16
    b040:	bd80      	pop	{r7, pc}
    b042:	46c0      	nop			; (mov r8, r8)
    b044:	0000ac0d 	.word	0x0000ac0d
    b048:	40000c02 	.word	0x40000c02
    b04c:	40000c00 	.word	0x40000c00
    b050:	0000ac21 	.word	0x0000ac21
    b054:	0000ae05 	.word	0x0000ae05

0000b058 <system_pinmux_get_group_from_gpio_pin>:
{
    b058:	b580      	push	{r7, lr}
    b05a:	b084      	sub	sp, #16
    b05c:	af00      	add	r7, sp, #0
    b05e:	0002      	movs	r2, r0
    b060:	1dfb      	adds	r3, r7, #7
    b062:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b064:	230f      	movs	r3, #15
    b066:	18fb      	adds	r3, r7, r3
    b068:	1dfa      	adds	r2, r7, #7
    b06a:	7812      	ldrb	r2, [r2, #0]
    b06c:	09d2      	lsrs	r2, r2, #7
    b06e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b070:	230e      	movs	r3, #14
    b072:	18fb      	adds	r3, r7, r3
    b074:	1dfa      	adds	r2, r7, #7
    b076:	7812      	ldrb	r2, [r2, #0]
    b078:	0952      	lsrs	r2, r2, #5
    b07a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b07c:	4b0d      	ldr	r3, [pc, #52]	; (b0b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b07e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    b080:	230f      	movs	r3, #15
    b082:	18fb      	adds	r3, r7, r3
    b084:	781b      	ldrb	r3, [r3, #0]
    b086:	2b00      	cmp	r3, #0
    b088:	d10f      	bne.n	b0aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    b08a:	230f      	movs	r3, #15
    b08c:	18fb      	adds	r3, r7, r3
    b08e:	781b      	ldrb	r3, [r3, #0]
    b090:	009b      	lsls	r3, r3, #2
    b092:	2210      	movs	r2, #16
    b094:	4694      	mov	ip, r2
    b096:	44bc      	add	ip, r7
    b098:	4463      	add	r3, ip
    b09a:	3b08      	subs	r3, #8
    b09c:	681a      	ldr	r2, [r3, #0]
    b09e:	230e      	movs	r3, #14
    b0a0:	18fb      	adds	r3, r7, r3
    b0a2:	781b      	ldrb	r3, [r3, #0]
    b0a4:	01db      	lsls	r3, r3, #7
    b0a6:	18d3      	adds	r3, r2, r3
    b0a8:	e000      	b.n	b0ac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    b0aa:	2300      	movs	r3, #0
}
    b0ac:	0018      	movs	r0, r3
    b0ae:	46bd      	mov	sp, r7
    b0b0:	b004      	add	sp, #16
    b0b2:	bd80      	pop	{r7, pc}
    b0b4:	41004400 	.word	0x41004400

0000b0b8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    b0b8:	b580      	push	{r7, lr}
    b0ba:	b088      	sub	sp, #32
    b0bc:	af00      	add	r7, sp, #0
    b0be:	60f8      	str	r0, [r7, #12]
    b0c0:	60b9      	str	r1, [r7, #8]
    b0c2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    b0c4:	2300      	movs	r3, #0
    b0c6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    b0c8:	687b      	ldr	r3, [r7, #4]
    b0ca:	78db      	ldrb	r3, [r3, #3]
    b0cc:	2201      	movs	r2, #1
    b0ce:	4053      	eors	r3, r2
    b0d0:	b2db      	uxtb	r3, r3
    b0d2:	2b00      	cmp	r3, #0
    b0d4:	d035      	beq.n	b142 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    b0d6:	687b      	ldr	r3, [r7, #4]
    b0d8:	781b      	ldrb	r3, [r3, #0]
    b0da:	2b80      	cmp	r3, #128	; 0x80
    b0dc:	d00b      	beq.n	b0f6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    b0de:	69fb      	ldr	r3, [r7, #28]
    b0e0:	2280      	movs	r2, #128	; 0x80
    b0e2:	0252      	lsls	r2, r2, #9
    b0e4:	4313      	orrs	r3, r2
    b0e6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    b0e8:	687b      	ldr	r3, [r7, #4]
    b0ea:	781b      	ldrb	r3, [r3, #0]
    b0ec:	061b      	lsls	r3, r3, #24
    b0ee:	001a      	movs	r2, r3
    b0f0:	69fb      	ldr	r3, [r7, #28]
    b0f2:	4313      	orrs	r3, r2
    b0f4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    b0f6:	687b      	ldr	r3, [r7, #4]
    b0f8:	785b      	ldrb	r3, [r3, #1]
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d003      	beq.n	b106 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    b0fe:	687b      	ldr	r3, [r7, #4]
    b100:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    b102:	2b02      	cmp	r3, #2
    b104:	d110      	bne.n	b128 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    b106:	69fb      	ldr	r3, [r7, #28]
    b108:	2280      	movs	r2, #128	; 0x80
    b10a:	0292      	lsls	r2, r2, #10
    b10c:	4313      	orrs	r3, r2
    b10e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    b110:	687b      	ldr	r3, [r7, #4]
    b112:	789b      	ldrb	r3, [r3, #2]
    b114:	2b00      	cmp	r3, #0
    b116:	d004      	beq.n	b122 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    b118:	69fb      	ldr	r3, [r7, #28]
    b11a:	2280      	movs	r2, #128	; 0x80
    b11c:	02d2      	lsls	r2, r2, #11
    b11e:	4313      	orrs	r3, r2
    b120:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    b122:	68fb      	ldr	r3, [r7, #12]
    b124:	68ba      	ldr	r2, [r7, #8]
    b126:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b128:	687b      	ldr	r3, [r7, #4]
    b12a:	785b      	ldrb	r3, [r3, #1]
    b12c:	2b01      	cmp	r3, #1
    b12e:	d003      	beq.n	b138 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    b130:	687b      	ldr	r3, [r7, #4]
    b132:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b134:	2b02      	cmp	r3, #2
    b136:	d107      	bne.n	b148 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    b138:	69fb      	ldr	r3, [r7, #28]
    b13a:	4a22      	ldr	r2, [pc, #136]	; (b1c4 <_system_pinmux_config+0x10c>)
    b13c:	4013      	ands	r3, r2
    b13e:	61fb      	str	r3, [r7, #28]
    b140:	e002      	b.n	b148 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    b142:	68fb      	ldr	r3, [r7, #12]
    b144:	68ba      	ldr	r2, [r7, #8]
    b146:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    b148:	68bb      	ldr	r3, [r7, #8]
    b14a:	041b      	lsls	r3, r3, #16
    b14c:	0c1b      	lsrs	r3, r3, #16
    b14e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    b150:	68bb      	ldr	r3, [r7, #8]
    b152:	0c1b      	lsrs	r3, r3, #16
    b154:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b156:	69ba      	ldr	r2, [r7, #24]
    b158:	69fb      	ldr	r3, [r7, #28]
    b15a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    b15c:	22a0      	movs	r2, #160	; 0xa0
    b15e:	05d2      	lsls	r2, r2, #23
    b160:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b162:	68fb      	ldr	r3, [r7, #12]
    b164:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b166:	697a      	ldr	r2, [r7, #20]
    b168:	69fb      	ldr	r3, [r7, #28]
    b16a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    b16c:	22d0      	movs	r2, #208	; 0xd0
    b16e:	0612      	lsls	r2, r2, #24
    b170:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    b172:	68fb      	ldr	r3, [r7, #12]
    b174:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    b176:	687b      	ldr	r3, [r7, #4]
    b178:	78db      	ldrb	r3, [r3, #3]
    b17a:	2201      	movs	r2, #1
    b17c:	4053      	eors	r3, r2
    b17e:	b2db      	uxtb	r3, r3
    b180:	2b00      	cmp	r3, #0
    b182:	d01a      	beq.n	b1ba <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    b184:	69fa      	ldr	r2, [r7, #28]
    b186:	2380      	movs	r3, #128	; 0x80
    b188:	02db      	lsls	r3, r3, #11
    b18a:	4013      	ands	r3, r2
    b18c:	d00a      	beq.n	b1a4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    b18e:	687b      	ldr	r3, [r7, #4]
    b190:	789b      	ldrb	r3, [r3, #2]
    b192:	2b01      	cmp	r3, #1
    b194:	d103      	bne.n	b19e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    b196:	68fb      	ldr	r3, [r7, #12]
    b198:	68ba      	ldr	r2, [r7, #8]
    b19a:	619a      	str	r2, [r3, #24]
    b19c:	e002      	b.n	b1a4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    b19e:	68fb      	ldr	r3, [r7, #12]
    b1a0:	68ba      	ldr	r2, [r7, #8]
    b1a2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b1a4:	687b      	ldr	r3, [r7, #4]
    b1a6:	785b      	ldrb	r3, [r3, #1]
    b1a8:	2b01      	cmp	r3, #1
    b1aa:	d003      	beq.n	b1b4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    b1ac:	687b      	ldr	r3, [r7, #4]
    b1ae:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    b1b0:	2b02      	cmp	r3, #2
    b1b2:	d102      	bne.n	b1ba <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    b1b4:	68fb      	ldr	r3, [r7, #12]
    b1b6:	68ba      	ldr	r2, [r7, #8]
    b1b8:	609a      	str	r2, [r3, #8]
		}
	}
}
    b1ba:	46c0      	nop			; (mov r8, r8)
    b1bc:	46bd      	mov	sp, r7
    b1be:	b008      	add	sp, #32
    b1c0:	bd80      	pop	{r7, pc}
    b1c2:	46c0      	nop			; (mov r8, r8)
    b1c4:	fffbffff 	.word	0xfffbffff

0000b1c8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    b1c8:	b580      	push	{r7, lr}
    b1ca:	b084      	sub	sp, #16
    b1cc:	af00      	add	r7, sp, #0
    b1ce:	0002      	movs	r2, r0
    b1d0:	6039      	str	r1, [r7, #0]
    b1d2:	1dfb      	adds	r3, r7, #7
    b1d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b1d6:	1dfb      	adds	r3, r7, #7
    b1d8:	781b      	ldrb	r3, [r3, #0]
    b1da:	0018      	movs	r0, r3
    b1dc:	4b0a      	ldr	r3, [pc, #40]	; (b208 <system_pinmux_pin_set_config+0x40>)
    b1de:	4798      	blx	r3
    b1e0:	0003      	movs	r3, r0
    b1e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    b1e4:	1dfb      	adds	r3, r7, #7
    b1e6:	781b      	ldrb	r3, [r3, #0]
    b1e8:	221f      	movs	r2, #31
    b1ea:	4013      	ands	r3, r2
    b1ec:	2201      	movs	r2, #1
    b1ee:	409a      	lsls	r2, r3
    b1f0:	0013      	movs	r3, r2
    b1f2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    b1f4:	683a      	ldr	r2, [r7, #0]
    b1f6:	68b9      	ldr	r1, [r7, #8]
    b1f8:	68fb      	ldr	r3, [r7, #12]
    b1fa:	0018      	movs	r0, r3
    b1fc:	4b03      	ldr	r3, [pc, #12]	; (b20c <system_pinmux_pin_set_config+0x44>)
    b1fe:	4798      	blx	r3
}
    b200:	46c0      	nop			; (mov r8, r8)
    b202:	46bd      	mov	sp, r7
    b204:	b004      	add	sp, #16
    b206:	bd80      	pop	{r7, pc}
    b208:	0000b059 	.word	0x0000b059
    b20c:	0000b0b9 	.word	0x0000b0b9

0000b210 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    b210:	b580      	push	{r7, lr}
    b212:	af00      	add	r7, sp, #0
	return;
    b214:	46c0      	nop			; (mov r8, r8)
}
    b216:	46bd      	mov	sp, r7
    b218:	bd80      	pop	{r7, pc}
	...

0000b21c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    b21c:	b580      	push	{r7, lr}
    b21e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    b220:	4b06      	ldr	r3, [pc, #24]	; (b23c <system_init+0x20>)
    b222:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    b224:	4b06      	ldr	r3, [pc, #24]	; (b240 <system_init+0x24>)
    b226:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    b228:	4b06      	ldr	r3, [pc, #24]	; (b244 <system_init+0x28>)
    b22a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    b22c:	4b06      	ldr	r3, [pc, #24]	; (b248 <system_init+0x2c>)
    b22e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    b230:	4b06      	ldr	r3, [pc, #24]	; (b24c <system_init+0x30>)
    b232:	4798      	blx	r3
}
    b234:	46c0      	nop			; (mov r8, r8)
    b236:	46bd      	mov	sp, r7
    b238:	bd80      	pop	{r7, pc}
    b23a:	46c0      	nop			; (mov r8, r8)
    b23c:	0000a90d 	.word	0x0000a90d
    b240:	0000a241 	.word	0x0000a241
    b244:	0000b211 	.word	0x0000b211
    b248:	000078bd 	.word	0x000078bd
    b24c:	0000b211 	.word	0x0000b211

0000b250 <system_gclk_chan_get_config_defaults>:
{
    b250:	b580      	push	{r7, lr}
    b252:	b082      	sub	sp, #8
    b254:	af00      	add	r7, sp, #0
    b256:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    b258:	687b      	ldr	r3, [r7, #4]
    b25a:	2200      	movs	r2, #0
    b25c:	701a      	strb	r2, [r3, #0]
}
    b25e:	46c0      	nop			; (mov r8, r8)
    b260:	46bd      	mov	sp, r7
    b262:	b002      	add	sp, #8
    b264:	bd80      	pop	{r7, pc}
	...

0000b268 <system_apb_clock_set_mask>:
{
    b268:	b580      	push	{r7, lr}
    b26a:	b082      	sub	sp, #8
    b26c:	af00      	add	r7, sp, #0
    b26e:	0002      	movs	r2, r0
    b270:	6039      	str	r1, [r7, #0]
    b272:	1dfb      	adds	r3, r7, #7
    b274:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b276:	1dfb      	adds	r3, r7, #7
    b278:	781b      	ldrb	r3, [r3, #0]
    b27a:	2b01      	cmp	r3, #1
    b27c:	d00a      	beq.n	b294 <system_apb_clock_set_mask+0x2c>
    b27e:	2b02      	cmp	r3, #2
    b280:	d00f      	beq.n	b2a2 <system_apb_clock_set_mask+0x3a>
    b282:	2b00      	cmp	r3, #0
    b284:	d114      	bne.n	b2b0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    b286:	4b0e      	ldr	r3, [pc, #56]	; (b2c0 <system_apb_clock_set_mask+0x58>)
    b288:	4a0d      	ldr	r2, [pc, #52]	; (b2c0 <system_apb_clock_set_mask+0x58>)
    b28a:	6991      	ldr	r1, [r2, #24]
    b28c:	683a      	ldr	r2, [r7, #0]
    b28e:	430a      	orrs	r2, r1
    b290:	619a      	str	r2, [r3, #24]
			break;
    b292:	e00f      	b.n	b2b4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    b294:	4b0a      	ldr	r3, [pc, #40]	; (b2c0 <system_apb_clock_set_mask+0x58>)
    b296:	4a0a      	ldr	r2, [pc, #40]	; (b2c0 <system_apb_clock_set_mask+0x58>)
    b298:	69d1      	ldr	r1, [r2, #28]
    b29a:	683a      	ldr	r2, [r7, #0]
    b29c:	430a      	orrs	r2, r1
    b29e:	61da      	str	r2, [r3, #28]
			break;
    b2a0:	e008      	b.n	b2b4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    b2a2:	4b07      	ldr	r3, [pc, #28]	; (b2c0 <system_apb_clock_set_mask+0x58>)
    b2a4:	4a06      	ldr	r2, [pc, #24]	; (b2c0 <system_apb_clock_set_mask+0x58>)
    b2a6:	6a11      	ldr	r1, [r2, #32]
    b2a8:	683a      	ldr	r2, [r7, #0]
    b2aa:	430a      	orrs	r2, r1
    b2ac:	621a      	str	r2, [r3, #32]
			break;
    b2ae:	e001      	b.n	b2b4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    b2b0:	2317      	movs	r3, #23
    b2b2:	e000      	b.n	b2b6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    b2b4:	2300      	movs	r3, #0
}
    b2b6:	0018      	movs	r0, r3
    b2b8:	46bd      	mov	sp, r7
    b2ba:	b002      	add	sp, #8
    b2bc:	bd80      	pop	{r7, pc}
    b2be:	46c0      	nop			; (mov r8, r8)
    b2c0:	40000400 	.word	0x40000400

0000b2c4 <system_pinmux_get_config_defaults>:
{
    b2c4:	b580      	push	{r7, lr}
    b2c6:	b082      	sub	sp, #8
    b2c8:	af00      	add	r7, sp, #0
    b2ca:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b2cc:	687b      	ldr	r3, [r7, #4]
    b2ce:	2280      	movs	r2, #128	; 0x80
    b2d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b2d2:	687b      	ldr	r3, [r7, #4]
    b2d4:	2200      	movs	r2, #0
    b2d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b2d8:	687b      	ldr	r3, [r7, #4]
    b2da:	2201      	movs	r2, #1
    b2dc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    b2de:	687b      	ldr	r3, [r7, #4]
    b2e0:	2200      	movs	r2, #0
    b2e2:	70da      	strb	r2, [r3, #3]
}
    b2e4:	46c0      	nop			; (mov r8, r8)
    b2e6:	46bd      	mov	sp, r7
    b2e8:	b002      	add	sp, #8
    b2ea:	bd80      	pop	{r7, pc}

0000b2ec <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    b2ec:	b580      	push	{r7, lr}
    b2ee:	b084      	sub	sp, #16
    b2f0:	af00      	add	r7, sp, #0
    b2f2:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    b2f4:	2300      	movs	r3, #0
    b2f6:	60fb      	str	r3, [r7, #12]
    b2f8:	e00c      	b.n	b314 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    b2fa:	4b0a      	ldr	r3, [pc, #40]	; (b324 <_tcc_get_inst_index+0x38>)
    b2fc:	68fa      	ldr	r2, [r7, #12]
    b2fe:	0092      	lsls	r2, r2, #2
    b300:	58d2      	ldr	r2, [r2, r3]
    b302:	687b      	ldr	r3, [r7, #4]
    b304:	429a      	cmp	r2, r3
    b306:	d102      	bne.n	b30e <_tcc_get_inst_index+0x22>
			return i;
    b308:	68fb      	ldr	r3, [r7, #12]
    b30a:	b2db      	uxtb	r3, r3
    b30c:	e006      	b.n	b31c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    b30e:	68fb      	ldr	r3, [r7, #12]
    b310:	3301      	adds	r3, #1
    b312:	60fb      	str	r3, [r7, #12]
    b314:	68fb      	ldr	r3, [r7, #12]
    b316:	2b02      	cmp	r3, #2
    b318:	d9ef      	bls.n	b2fa <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    b31a:	2300      	movs	r3, #0
}
    b31c:	0018      	movs	r0, r3
    b31e:	46bd      	mov	sp, r7
    b320:	b004      	add	sp, #16
    b322:	bd80      	pop	{r7, pc}
    b324:	000148ac 	.word	0x000148ac

0000b328 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    b328:	b590      	push	{r4, r7, lr}
    b32a:	b085      	sub	sp, #20
    b32c:	af00      	add	r7, sp, #0
    b32e:	6078      	str	r0, [r7, #4]
    b330:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    b332:	230f      	movs	r3, #15
    b334:	18fc      	adds	r4, r7, r3
    b336:	683b      	ldr	r3, [r7, #0]
    b338:	0018      	movs	r0, r3
    b33a:	4bad      	ldr	r3, [pc, #692]	; (b5f0 <tcc_get_config_defaults+0x2c8>)
    b33c:	4798      	blx	r3
    b33e:	0003      	movs	r3, r0
    b340:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    b342:	687b      	ldr	r3, [r7, #4]
    b344:	2200      	movs	r2, #0
    b346:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    b348:	230f      	movs	r3, #15
    b34a:	18fb      	adds	r3, r7, r3
    b34c:	781a      	ldrb	r2, [r3, #0]
    b34e:	4ba9      	ldr	r3, [pc, #676]	; (b5f4 <tcc_get_config_defaults+0x2cc>)
    b350:	0092      	lsls	r2, r2, #2
    b352:	58d2      	ldr	r2, [r2, r3]
    b354:	687b      	ldr	r3, [r7, #4]
    b356:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    b358:	687b      	ldr	r3, [r7, #4]
    b35a:	2200      	movs	r2, #0
    b35c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    b35e:	687b      	ldr	r3, [r7, #4]
    b360:	2200      	movs	r2, #0
    b362:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    b364:	687b      	ldr	r3, [r7, #4]
    b366:	2200      	movs	r2, #0
    b368:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    b36a:	687b      	ldr	r3, [r7, #4]
    b36c:	2200      	movs	r2, #0
    b36e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	2200      	movs	r2, #0
    b374:	721a      	strb	r2, [r3, #8]

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    b376:	687b      	ldr	r3, [r7, #4]
    b378:	2200      	movs	r2, #0
    b37a:	61da      	str	r2, [r3, #28]
    b37c:	687b      	ldr	r3, [r7, #4]
    b37e:	2200      	movs	r2, #0
    b380:	621a      	str	r2, [r3, #32]
    b382:	687b      	ldr	r3, [r7, #4]
    b384:	2200      	movs	r2, #0
    b386:	625a      	str	r2, [r3, #36]	; 0x24
    b388:	687b      	ldr	r3, [r7, #4]
    b38a:	2200      	movs	r2, #0
    b38c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    b38e:	687b      	ldr	r3, [r7, #4]
    b390:	2200      	movs	r2, #0
    b392:	751a      	strb	r2, [r3, #20]
    b394:	687b      	ldr	r3, [r7, #4]
    b396:	2200      	movs	r2, #0
    b398:	755a      	strb	r2, [r3, #21]
    b39a:	687b      	ldr	r3, [r7, #4]
    b39c:	2200      	movs	r2, #0
    b39e:	759a      	strb	r2, [r3, #22]
    b3a0:	687b      	ldr	r3, [r7, #4]
    b3a2:	2200      	movs	r2, #0
    b3a4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    b3a6:	687b      	ldr	r3, [r7, #4]
    b3a8:	2200      	movs	r2, #0
    b3aa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    b3ac:	687b      	ldr	r3, [r7, #4]
    b3ae:	2200      	movs	r2, #0
    b3b0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    b3b2:	687b      	ldr	r3, [r7, #4]
    b3b4:	2200      	movs	r2, #0
    b3b6:	741a      	strb	r2, [r3, #16]
    b3b8:	687b      	ldr	r3, [r7, #4]
    b3ba:	2200      	movs	r2, #0
    b3bc:	745a      	strb	r2, [r3, #17]
    b3be:	687b      	ldr	r3, [r7, #4]
    b3c0:	2200      	movs	r2, #0
    b3c2:	749a      	strb	r2, [r3, #18]
    b3c4:	687b      	ldr	r3, [r7, #4]
    b3c6:	2200      	movs	r2, #0
    b3c8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    b3ca:	687b      	ldr	r3, [r7, #4]
    b3cc:	222c      	movs	r2, #44	; 0x2c
    b3ce:	2100      	movs	r1, #0
    b3d0:	5499      	strb	r1, [r3, r2]
    b3d2:	687b      	ldr	r3, [r7, #4]
    b3d4:	222d      	movs	r2, #45	; 0x2d
    b3d6:	2100      	movs	r1, #0
    b3d8:	5499      	strb	r1, [r3, r2]
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	222e      	movs	r2, #46	; 0x2e
    b3de:	2100      	movs	r1, #0
    b3e0:	5499      	strb	r1, [r3, r2]
    b3e2:	687b      	ldr	r3, [r7, #4]
    b3e4:	222f      	movs	r2, #47	; 0x2f
    b3e6:	2100      	movs	r1, #0
    b3e8:	5499      	strb	r1, [r3, r2]
    b3ea:	687b      	ldr	r3, [r7, #4]
    b3ec:	2230      	movs	r2, #48	; 0x30
    b3ee:	2100      	movs	r1, #0
    b3f0:	5499      	strb	r1, [r3, r2]
    b3f2:	687b      	ldr	r3, [r7, #4]
    b3f4:	2231      	movs	r2, #49	; 0x31
    b3f6:	2100      	movs	r1, #0
    b3f8:	5499      	strb	r1, [r3, r2]
    b3fa:	687b      	ldr	r3, [r7, #4]
    b3fc:	2232      	movs	r2, #50	; 0x32
    b3fe:	2100      	movs	r1, #0
    b400:	5499      	strb	r1, [r3, r2]
    b402:	687b      	ldr	r3, [r7, #4]
    b404:	2233      	movs	r2, #51	; 0x33
    b406:	2100      	movs	r1, #0
    b408:	5499      	strb	r1, [r3, r2]
    b40a:	687b      	ldr	r3, [r7, #4]
    b40c:	2234      	movs	r2, #52	; 0x34
    b40e:	2100      	movs	r1, #0
    b410:	5499      	strb	r1, [r3, r2]
    b412:	687b      	ldr	r3, [r7, #4]
    b414:	2235      	movs	r2, #53	; 0x35
    b416:	2100      	movs	r1, #0
    b418:	5499      	strb	r1, [r3, r2]
    b41a:	687b      	ldr	r3, [r7, #4]
    b41c:	2236      	movs	r2, #54	; 0x36
    b41e:	2100      	movs	r1, #0
    b420:	5499      	strb	r1, [r3, r2]
    b422:	687b      	ldr	r3, [r7, #4]
    b424:	2237      	movs	r2, #55	; 0x37
    b426:	2100      	movs	r1, #0
    b428:	5499      	strb	r1, [r3, r2]
    b42a:	687b      	ldr	r3, [r7, #4]
    b42c:	2238      	movs	r2, #56	; 0x38
    b42e:	2100      	movs	r1, #0
    b430:	5499      	strb	r1, [r3, r2]
    b432:	687b      	ldr	r3, [r7, #4]
    b434:	2239      	movs	r2, #57	; 0x39
    b436:	2100      	movs	r1, #0
    b438:	5499      	strb	r1, [r3, r2]
    b43a:	687b      	ldr	r3, [r7, #4]
    b43c:	223a      	movs	r2, #58	; 0x3a
    b43e:	2100      	movs	r1, #0
    b440:	5499      	strb	r1, [r3, r2]
    b442:	687b      	ldr	r3, [r7, #4]
    b444:	223b      	movs	r2, #59	; 0x3b
    b446:	2100      	movs	r1, #0
    b448:	5499      	strb	r1, [r3, r2]
    b44a:	687b      	ldr	r3, [r7, #4]
    b44c:	223c      	movs	r2, #60	; 0x3c
    b44e:	2100      	movs	r1, #0
    b450:	5499      	strb	r1, [r3, r2]
    b452:	687b      	ldr	r3, [r7, #4]
    b454:	223d      	movs	r2, #61	; 0x3d
    b456:	2100      	movs	r1, #0
    b458:	5499      	strb	r1, [r3, r2]
    b45a:	687b      	ldr	r3, [r7, #4]
    b45c:	223e      	movs	r2, #62	; 0x3e
    b45e:	2100      	movs	r1, #0
    b460:	5499      	strb	r1, [r3, r2]
    b462:	687b      	ldr	r3, [r7, #4]
    b464:	223f      	movs	r2, #63	; 0x3f
    b466:	2100      	movs	r1, #0
    b468:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    b46a:	687b      	ldr	r3, [r7, #4]
    b46c:	2240      	movs	r2, #64	; 0x40
    b46e:	2100      	movs	r1, #0
    b470:	5499      	strb	r1, [r3, r2]
    b472:	687b      	ldr	r3, [r7, #4]
    b474:	2241      	movs	r2, #65	; 0x41
    b476:	2100      	movs	r1, #0
    b478:	5499      	strb	r1, [r3, r2]
    b47a:	687b      	ldr	r3, [r7, #4]
    b47c:	2242      	movs	r2, #66	; 0x42
    b47e:	2100      	movs	r1, #0
    b480:	5499      	strb	r1, [r3, r2]
    b482:	687b      	ldr	r3, [r7, #4]
    b484:	2243      	movs	r2, #67	; 0x43
    b486:	2100      	movs	r1, #0
    b488:	5499      	strb	r1, [r3, r2]
    b48a:	687b      	ldr	r3, [r7, #4]
    b48c:	2244      	movs	r2, #68	; 0x44
    b48e:	2100      	movs	r1, #0
    b490:	5499      	strb	r1, [r3, r2]
    b492:	687b      	ldr	r3, [r7, #4]
    b494:	2245      	movs	r2, #69	; 0x45
    b496:	2100      	movs	r1, #0
    b498:	5499      	strb	r1, [r3, r2]
    b49a:	687b      	ldr	r3, [r7, #4]
    b49c:	2246      	movs	r2, #70	; 0x46
    b49e:	2100      	movs	r1, #0
    b4a0:	5499      	strb	r1, [r3, r2]
    b4a2:	687b      	ldr	r3, [r7, #4]
    b4a4:	2247      	movs	r2, #71	; 0x47
    b4a6:	2100      	movs	r1, #0
    b4a8:	5499      	strb	r1, [r3, r2]
    b4aa:	687b      	ldr	r3, [r7, #4]
    b4ac:	2248      	movs	r2, #72	; 0x48
    b4ae:	2100      	movs	r1, #0
    b4b0:	5499      	strb	r1, [r3, r2]
    b4b2:	687b      	ldr	r3, [r7, #4]
    b4b4:	2249      	movs	r2, #73	; 0x49
    b4b6:	2100      	movs	r1, #0
    b4b8:	5499      	strb	r1, [r3, r2]
    b4ba:	687b      	ldr	r3, [r7, #4]
    b4bc:	224a      	movs	r2, #74	; 0x4a
    b4be:	2100      	movs	r1, #0
    b4c0:	5499      	strb	r1, [r3, r2]
    b4c2:	687b      	ldr	r3, [r7, #4]
    b4c4:	224b      	movs	r2, #75	; 0x4b
    b4c6:	2100      	movs	r1, #0
    b4c8:	5499      	strb	r1, [r3, r2]
    b4ca:	687b      	ldr	r3, [r7, #4]
    b4cc:	224c      	movs	r2, #76	; 0x4c
    b4ce:	2100      	movs	r1, #0
    b4d0:	5499      	strb	r1, [r3, r2]
    b4d2:	687b      	ldr	r3, [r7, #4]
    b4d4:	224d      	movs	r2, #77	; 0x4d
    b4d6:	2100      	movs	r1, #0
    b4d8:	5499      	strb	r1, [r3, r2]
    b4da:	687b      	ldr	r3, [r7, #4]
    b4dc:	224e      	movs	r2, #78	; 0x4e
    b4de:	2100      	movs	r1, #0
    b4e0:	5499      	strb	r1, [r3, r2]
    b4e2:	687b      	ldr	r3, [r7, #4]
    b4e4:	224f      	movs	r2, #79	; 0x4f
    b4e6:	2100      	movs	r1, #0
    b4e8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    b4ea:	687b      	ldr	r3, [r7, #4]
    b4ec:	2250      	movs	r2, #80	; 0x50
    b4ee:	2100      	movs	r1, #0
    b4f0:	5499      	strb	r1, [r3, r2]
    b4f2:	687b      	ldr	r3, [r7, #4]
    b4f4:	2251      	movs	r2, #81	; 0x51
    b4f6:	2100      	movs	r1, #0
    b4f8:	5499      	strb	r1, [r3, r2]
    b4fa:	687b      	ldr	r3, [r7, #4]
    b4fc:	2252      	movs	r2, #82	; 0x52
    b4fe:	2100      	movs	r1, #0
    b500:	5499      	strb	r1, [r3, r2]
    b502:	687b      	ldr	r3, [r7, #4]
    b504:	2253      	movs	r2, #83	; 0x53
    b506:	2100      	movs	r1, #0
    b508:	5499      	strb	r1, [r3, r2]
    b50a:	687b      	ldr	r3, [r7, #4]
    b50c:	2254      	movs	r2, #84	; 0x54
    b50e:	2100      	movs	r1, #0
    b510:	5499      	strb	r1, [r3, r2]
    b512:	687b      	ldr	r3, [r7, #4]
    b514:	2255      	movs	r2, #85	; 0x55
    b516:	2100      	movs	r1, #0
    b518:	5499      	strb	r1, [r3, r2]
    b51a:	687b      	ldr	r3, [r7, #4]
    b51c:	2256      	movs	r2, #86	; 0x56
    b51e:	2100      	movs	r1, #0
    b520:	5499      	strb	r1, [r3, r2]
    b522:	687b      	ldr	r3, [r7, #4]
    b524:	2257      	movs	r2, #87	; 0x57
    b526:	2100      	movs	r1, #0
    b528:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    b52a:	687b      	ldr	r3, [r7, #4]
    b52c:	2298      	movs	r2, #152	; 0x98
    b52e:	2100      	movs	r1, #0
    b530:	5499      	strb	r1, [r3, r2]
    b532:	687b      	ldr	r3, [r7, #4]
    b534:	2200      	movs	r2, #0
    b536:	659a      	str	r2, [r3, #88]	; 0x58
    b538:	687b      	ldr	r3, [r7, #4]
    b53a:	2200      	movs	r2, #0
    b53c:	679a      	str	r2, [r3, #120]	; 0x78
    b53e:	687b      	ldr	r3, [r7, #4]
    b540:	2299      	movs	r2, #153	; 0x99
    b542:	2100      	movs	r1, #0
    b544:	5499      	strb	r1, [r3, r2]
    b546:	687b      	ldr	r3, [r7, #4]
    b548:	2200      	movs	r2, #0
    b54a:	65da      	str	r2, [r3, #92]	; 0x5c
    b54c:	687b      	ldr	r3, [r7, #4]
    b54e:	2200      	movs	r2, #0
    b550:	67da      	str	r2, [r3, #124]	; 0x7c
    b552:	687b      	ldr	r3, [r7, #4]
    b554:	229a      	movs	r2, #154	; 0x9a
    b556:	2100      	movs	r1, #0
    b558:	5499      	strb	r1, [r3, r2]
    b55a:	687b      	ldr	r3, [r7, #4]
    b55c:	2200      	movs	r2, #0
    b55e:	661a      	str	r2, [r3, #96]	; 0x60
    b560:	687b      	ldr	r3, [r7, #4]
    b562:	2280      	movs	r2, #128	; 0x80
    b564:	2100      	movs	r1, #0
    b566:	5099      	str	r1, [r3, r2]
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	229b      	movs	r2, #155	; 0x9b
    b56c:	2100      	movs	r1, #0
    b56e:	5499      	strb	r1, [r3, r2]
    b570:	687b      	ldr	r3, [r7, #4]
    b572:	2200      	movs	r2, #0
    b574:	665a      	str	r2, [r3, #100]	; 0x64
    b576:	687b      	ldr	r3, [r7, #4]
    b578:	2284      	movs	r2, #132	; 0x84
    b57a:	2100      	movs	r1, #0
    b57c:	5099      	str	r1, [r3, r2]
    b57e:	687b      	ldr	r3, [r7, #4]
    b580:	229c      	movs	r2, #156	; 0x9c
    b582:	2100      	movs	r1, #0
    b584:	5499      	strb	r1, [r3, r2]
    b586:	687b      	ldr	r3, [r7, #4]
    b588:	2200      	movs	r2, #0
    b58a:	669a      	str	r2, [r3, #104]	; 0x68
    b58c:	687b      	ldr	r3, [r7, #4]
    b58e:	2288      	movs	r2, #136	; 0x88
    b590:	2100      	movs	r1, #0
    b592:	5099      	str	r1, [r3, r2]
    b594:	687b      	ldr	r3, [r7, #4]
    b596:	229d      	movs	r2, #157	; 0x9d
    b598:	2100      	movs	r1, #0
    b59a:	5499      	strb	r1, [r3, r2]
    b59c:	687b      	ldr	r3, [r7, #4]
    b59e:	2200      	movs	r2, #0
    b5a0:	66da      	str	r2, [r3, #108]	; 0x6c
    b5a2:	687b      	ldr	r3, [r7, #4]
    b5a4:	228c      	movs	r2, #140	; 0x8c
    b5a6:	2100      	movs	r1, #0
    b5a8:	5099      	str	r1, [r3, r2]
    b5aa:	687b      	ldr	r3, [r7, #4]
    b5ac:	229e      	movs	r2, #158	; 0x9e
    b5ae:	2100      	movs	r1, #0
    b5b0:	5499      	strb	r1, [r3, r2]
    b5b2:	687b      	ldr	r3, [r7, #4]
    b5b4:	2200      	movs	r2, #0
    b5b6:	671a      	str	r2, [r3, #112]	; 0x70
    b5b8:	687b      	ldr	r3, [r7, #4]
    b5ba:	2290      	movs	r2, #144	; 0x90
    b5bc:	2100      	movs	r1, #0
    b5be:	5099      	str	r1, [r3, r2]
    b5c0:	687b      	ldr	r3, [r7, #4]
    b5c2:	229f      	movs	r2, #159	; 0x9f
    b5c4:	2100      	movs	r1, #0
    b5c6:	5499      	strb	r1, [r3, r2]
    b5c8:	687b      	ldr	r3, [r7, #4]
    b5ca:	2200      	movs	r2, #0
    b5cc:	675a      	str	r2, [r3, #116]	; 0x74
    b5ce:	687b      	ldr	r3, [r7, #4]
    b5d0:	2294      	movs	r2, #148	; 0x94
    b5d2:	2100      	movs	r1, #0
    b5d4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    b5d6:	687b      	ldr	r3, [r7, #4]
    b5d8:	22a0      	movs	r2, #160	; 0xa0
    b5da:	2101      	movs	r1, #1
    b5dc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    b5de:	687b      	ldr	r3, [r7, #4]
    b5e0:	22a1      	movs	r2, #161	; 0xa1
    b5e2:	2100      	movs	r1, #0
    b5e4:	5499      	strb	r1, [r3, r2]
}
    b5e6:	46c0      	nop			; (mov r8, r8)
    b5e8:	46bd      	mov	sp, r7
    b5ea:	b005      	add	sp, #20
    b5ec:	bd90      	pop	{r4, r7, pc}
    b5ee:	46c0      	nop			; (mov r8, r8)
    b5f0:	0000b2ed 	.word	0x0000b2ed
    b5f4:	000148c8 	.word	0x000148c8

0000b5f8 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    b5f8:	b580      	push	{r7, lr}
    b5fa:	b086      	sub	sp, #24
    b5fc:	af00      	add	r7, sp, #0
    b5fe:	60b9      	str	r1, [r7, #8]
    b600:	607a      	str	r2, [r7, #4]
    b602:	230f      	movs	r3, #15
    b604:	18fb      	adds	r3, r7, r3
    b606:	1c02      	adds	r2, r0, #0
    b608:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    b60a:	2300      	movs	r3, #0
    b60c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    b60e:	2300      	movs	r3, #0
    b610:	613b      	str	r3, [r7, #16]
    b612:	e01d      	b.n	b650 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    b614:	68ba      	ldr	r2, [r7, #8]
    b616:	693b      	ldr	r3, [r7, #16]
    b618:	18d3      	adds	r3, r2, r3
    b61a:	3310      	adds	r3, #16
    b61c:	781b      	ldrb	r3, [r3, #0]
    b61e:	2b01      	cmp	r3, #1
    b620:	d113      	bne.n	b64a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    b622:	230f      	movs	r3, #15
    b624:	18fb      	adds	r3, r7, r3
    b626:	781b      	ldrb	r3, [r3, #0]
    b628:	4a1b      	ldr	r2, [pc, #108]	; (b698 <_tcc_build_ctrla+0xa0>)
    b62a:	5cd3      	ldrb	r3, [r2, r3]
    b62c:	001a      	movs	r2, r3
    b62e:	693b      	ldr	r3, [r7, #16]
    b630:	429a      	cmp	r2, r3
    b632:	da01      	bge.n	b638 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    b634:	2317      	movs	r3, #23
    b636:	e02a      	b.n	b68e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    b638:	2380      	movs	r3, #128	; 0x80
    b63a:	045a      	lsls	r2, r3, #17
    b63c:	693b      	ldr	r3, [r7, #16]
    b63e:	409a      	lsls	r2, r3
    b640:	0013      	movs	r3, r2
    b642:	001a      	movs	r2, r3
    b644:	697b      	ldr	r3, [r7, #20]
    b646:	4313      	orrs	r3, r2
    b648:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    b64a:	693b      	ldr	r3, [r7, #16]
    b64c:	3301      	adds	r3, #1
    b64e:	613b      	str	r3, [r7, #16]
    b650:	693b      	ldr	r3, [r7, #16]
    b652:	2b03      	cmp	r3, #3
    b654:	ddde      	ble.n	b614 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    b656:	68bb      	ldr	r3, [r7, #8]
    b658:	22a1      	movs	r2, #161	; 0xa1
    b65a:	5c9b      	ldrb	r3, [r3, r2]
    b65c:	2b00      	cmp	r3, #0
    b65e:	d004      	beq.n	b66a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    b660:	697b      	ldr	r3, [r7, #20]
    b662:	2280      	movs	r2, #128	; 0x80
    b664:	0112      	lsls	r2, r2, #4
    b666:	4313      	orrs	r3, r2
    b668:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    b66a:	68bb      	ldr	r3, [r7, #8]
    b66c:	7b1b      	ldrb	r3, [r3, #12]
    b66e:	031b      	lsls	r3, r3, #12
    b670:	001a      	movs	r2, r3
    b672:	697b      	ldr	r3, [r7, #20]
    b674:	4313      	orrs	r3, r2
    b676:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    b678:	68bb      	ldr	r3, [r7, #8]
    b67a:	7adb      	ldrb	r3, [r3, #11]
    b67c:	021b      	lsls	r3, r3, #8
    b67e:	001a      	movs	r2, r3
    b680:	697b      	ldr	r3, [r7, #20]
    b682:	4313      	orrs	r3, r2
    b684:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    b686:	687b      	ldr	r3, [r7, #4]
    b688:	697a      	ldr	r2, [r7, #20]
    b68a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    b68c:	2300      	movs	r3, #0
}
    b68e:	0018      	movs	r0, r3
    b690:	46bd      	mov	sp, r7
    b692:	b006      	add	sp, #24
    b694:	bd80      	pop	{r7, pc}
    b696:	46c0      	nop			; (mov r8, r8)
    b698:	000148d4 	.word	0x000148d4

0000b69c <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    b69c:	b580      	push	{r7, lr}
    b69e:	b086      	sub	sp, #24
    b6a0:	af00      	add	r7, sp, #0
    b6a2:	60b9      	str	r1, [r7, #8]
    b6a4:	607a      	str	r2, [r7, #4]
    b6a6:	230f      	movs	r3, #15
    b6a8:	18fb      	adds	r3, r7, r3
    b6aa:	1c02      	adds	r2, r0, #0
    b6ac:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    b6ae:	2317      	movs	r3, #23
    b6b0:	18fb      	adds	r3, r7, r3
    b6b2:	2200      	movs	r2, #0
    b6b4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    b6b6:	68bb      	ldr	r3, [r7, #8]
    b6b8:	7a1b      	ldrb	r3, [r3, #8]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d007      	beq.n	b6ce <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    b6be:	2317      	movs	r3, #23
    b6c0:	18fb      	adds	r3, r7, r3
    b6c2:	2217      	movs	r2, #23
    b6c4:	18ba      	adds	r2, r7, r2
    b6c6:	7812      	ldrb	r2, [r2, #0]
    b6c8:	2104      	movs	r1, #4
    b6ca:	430a      	orrs	r2, r1
    b6cc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    b6ce:	68bb      	ldr	r3, [r7, #8]
    b6d0:	7a5b      	ldrb	r3, [r3, #9]
    b6d2:	2b01      	cmp	r3, #1
    b6d4:	d107      	bne.n	b6e6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    b6d6:	2317      	movs	r3, #23
    b6d8:	18fb      	adds	r3, r7, r3
    b6da:	2217      	movs	r2, #23
    b6dc:	18ba      	adds	r2, r7, r2
    b6de:	7812      	ldrb	r2, [r2, #0]
    b6e0:	2101      	movs	r1, #1
    b6e2:	430a      	orrs	r2, r1
    b6e4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    b6e6:	687b      	ldr	r3, [r7, #4]
    b6e8:	2217      	movs	r2, #23
    b6ea:	18ba      	adds	r2, r7, r2
    b6ec:	7812      	ldrb	r2, [r2, #0]
    b6ee:	701a      	strb	r2, [r3, #0]
}
    b6f0:	46c0      	nop			; (mov r8, r8)
    b6f2:	46bd      	mov	sp, r7
    b6f4:	b006      	add	sp, #24
    b6f6:	bd80      	pop	{r7, pc}

0000b6f8 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    b6f8:	b580      	push	{r7, lr}
    b6fa:	b088      	sub	sp, #32
    b6fc:	af00      	add	r7, sp, #0
    b6fe:	60b9      	str	r1, [r7, #8]
    b700:	607a      	str	r2, [r7, #4]
    b702:	230f      	movs	r3, #15
    b704:	18fb      	adds	r3, r7, r3
    b706:	1c02      	adds	r2, r0, #0
    b708:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    b70a:	230f      	movs	r3, #15
    b70c:	18fb      	adds	r3, r7, r3
    b70e:	781a      	ldrb	r2, [r3, #0]
    b710:	231b      	movs	r3, #27
    b712:	18fb      	adds	r3, r7, r3
    b714:	493e      	ldr	r1, [pc, #248]	; (b810 <_tcc_build_faults+0x118>)
    b716:	5c8a      	ldrb	r2, [r1, r2]
    b718:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    b71a:	2300      	movs	r3, #0
    b71c:	61fb      	str	r3, [r7, #28]
    b71e:	e06e      	b.n	b7fe <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    b720:	69fa      	ldr	r2, [r7, #28]
    b722:	0013      	movs	r3, r2
    b724:	009b      	lsls	r3, r3, #2
    b726:	189b      	adds	r3, r3, r2
    b728:	005b      	lsls	r3, r3, #1
    b72a:	3328      	adds	r3, #40	; 0x28
    b72c:	68ba      	ldr	r2, [r7, #8]
    b72e:	18d3      	adds	r3, r2, r3
    b730:	3304      	adds	r3, #4
    b732:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    b734:	697b      	ldr	r3, [r7, #20]
    b736:	7a5b      	ldrb	r3, [r3, #9]
    b738:	221b      	movs	r2, #27
    b73a:	18ba      	adds	r2, r7, r2
    b73c:	7812      	ldrb	r2, [r2, #0]
    b73e:	429a      	cmp	r2, r3
    b740:	d801      	bhi.n	b746 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    b742:	2317      	movs	r3, #23
    b744:	e05f      	b.n	b806 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    b746:	697b      	ldr	r3, [r7, #20]
    b748:	781b      	ldrb	r3, [r3, #0]
    b74a:	2b0f      	cmp	r3, #15
    b74c:	d901      	bls.n	b752 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    b74e:	2317      	movs	r3, #23
    b750:	e059      	b.n	b806 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b752:	697b      	ldr	r3, [r7, #20]
    b754:	781b      	ldrb	r3, [r3, #0]
    b756:	061b      	lsls	r3, r3, #24
    b758:	001a      	movs	r2, r3
    b75a:	23f0      	movs	r3, #240	; 0xf0
    b75c:	051b      	lsls	r3, r3, #20
    b75e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    b760:	697b      	ldr	r3, [r7, #20]
    b762:	785b      	ldrb	r3, [r3, #1]
    b764:	041b      	lsls	r3, r3, #16
    b766:	0019      	movs	r1, r3
    b768:	23ff      	movs	r3, #255	; 0xff
    b76a:	041b      	lsls	r3, r3, #16
    b76c:	400b      	ands	r3, r1
    b76e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    b770:	697b      	ldr	r3, [r7, #20]
    b772:	789b      	ldrb	r3, [r3, #2]
    b774:	2b00      	cmp	r3, #0
    b776:	d001      	beq.n	b77c <_tcc_build_faults+0x84>
    b778:	2380      	movs	r3, #128	; 0x80
    b77a:	e000      	b.n	b77e <_tcc_build_faults+0x86>
    b77c:	2300      	movs	r3, #0
    b77e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    b780:	697b      	ldr	r3, [r7, #20]
    b782:	78db      	ldrb	r3, [r3, #3]
    b784:	2b00      	cmp	r3, #0
    b786:	d001      	beq.n	b78c <_tcc_build_faults+0x94>
    b788:	2308      	movs	r3, #8
    b78a:	e000      	b.n	b78e <_tcc_build_faults+0x96>
    b78c:	2300      	movs	r3, #0
    b78e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    b790:	697b      	ldr	r3, [r7, #20]
    b792:	791b      	ldrb	r3, [r3, #4]
    b794:	2b00      	cmp	r3, #0
    b796:	d001      	beq.n	b79c <_tcc_build_faults+0xa4>
    b798:	2310      	movs	r3, #16
    b79a:	e000      	b.n	b79e <_tcc_build_faults+0xa6>
    b79c:	2300      	movs	r3, #0
    b79e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    b7a0:	697b      	ldr	r3, [r7, #20]
    b7a2:	795b      	ldrb	r3, [r3, #5]
    b7a4:	0019      	movs	r1, r3
    b7a6:	2303      	movs	r3, #3
    b7a8:	400b      	ands	r3, r1
    b7aa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    b7ac:	697b      	ldr	r3, [r7, #20]
    b7ae:	799b      	ldrb	r3, [r3, #6]
    b7b0:	015b      	lsls	r3, r3, #5
    b7b2:	0019      	movs	r1, r3
    b7b4:	2360      	movs	r3, #96	; 0x60
    b7b6:	400b      	ands	r3, r1
    b7b8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    b7ba:	697b      	ldr	r3, [r7, #20]
    b7bc:	79db      	ldrb	r3, [r3, #7]
    b7be:	021b      	lsls	r3, r3, #8
    b7c0:	0019      	movs	r1, r3
    b7c2:	23c0      	movs	r3, #192	; 0xc0
    b7c4:	009b      	lsls	r3, r3, #2
    b7c6:	400b      	ands	r3, r1
    b7c8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    b7ca:	697b      	ldr	r3, [r7, #20]
    b7cc:	7a1b      	ldrb	r3, [r3, #8]
    b7ce:	031b      	lsls	r3, r3, #12
    b7d0:	0019      	movs	r1, r3
    b7d2:	23e0      	movs	r3, #224	; 0xe0
    b7d4:	01db      	lsls	r3, r3, #7
    b7d6:	400b      	ands	r3, r1
    b7d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    b7da:	697b      	ldr	r3, [r7, #20]
    b7dc:	7a5b      	ldrb	r3, [r3, #9]
    b7de:	029b      	lsls	r3, r3, #10
    b7e0:	0019      	movs	r1, r3
    b7e2:	23c0      	movs	r3, #192	; 0xc0
    b7e4:	011b      	lsls	r3, r3, #4
    b7e6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b7e8:	4313      	orrs	r3, r2
    b7ea:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    b7ec:	69fb      	ldr	r3, [r7, #28]
    b7ee:	009b      	lsls	r3, r3, #2
    b7f0:	687a      	ldr	r2, [r7, #4]
    b7f2:	18d3      	adds	r3, r2, r3
    b7f4:	693a      	ldr	r2, [r7, #16]
    b7f6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    b7f8:	69fb      	ldr	r3, [r7, #28]
    b7fa:	3301      	adds	r3, #1
    b7fc:	61fb      	str	r3, [r7, #28]
    b7fe:	69fb      	ldr	r3, [r7, #28]
    b800:	2b01      	cmp	r3, #1
    b802:	dd8d      	ble.n	b720 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    b804:	2300      	movs	r3, #0
}
    b806:	0018      	movs	r0, r3
    b808:	46bd      	mov	sp, r7
    b80a:	b008      	add	sp, #32
    b80c:	bd80      	pop	{r7, pc}
    b80e:	46c0      	nop			; (mov r8, r8)
    b810:	000148d4 	.word	0x000148d4

0000b814 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    b814:	b580      	push	{r7, lr}
    b816:	b088      	sub	sp, #32
    b818:	af00      	add	r7, sp, #0
    b81a:	60b9      	str	r1, [r7, #8]
    b81c:	607a      	str	r2, [r7, #4]
    b81e:	230f      	movs	r3, #15
    b820:	18fb      	adds	r3, r7, r3
    b822:	1c02      	adds	r2, r0, #0
    b824:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    b826:	230f      	movs	r3, #15
    b828:	18fb      	adds	r3, r7, r3
    b82a:	781a      	ldrb	r2, [r3, #0]
    b82c:	2317      	movs	r3, #23
    b82e:	18fb      	adds	r3, r7, r3
    b830:	492d      	ldr	r1, [pc, #180]	; (b8e8 <_tcc_build_drvctrl+0xd4>)
    b832:	5c8a      	ldrb	r2, [r1, r2]
    b834:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    b836:	2300      	movs	r3, #0
    b838:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    b83a:	2300      	movs	r3, #0
    b83c:	61fb      	str	r3, [r7, #28]
    b83e:	e048      	b.n	b8d2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    b840:	68ba      	ldr	r2, [r7, #8]
    b842:	2150      	movs	r1, #80	; 0x50
    b844:	69fb      	ldr	r3, [r7, #28]
    b846:	18d3      	adds	r3, r2, r3
    b848:	185b      	adds	r3, r3, r1
    b84a:	781b      	ldrb	r3, [r3, #0]
    b84c:	2b00      	cmp	r3, #0
    b84e:	d010      	beq.n	b872 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    b850:	2317      	movs	r3, #23
    b852:	18fb      	adds	r3, r7, r3
    b854:	781a      	ldrb	r2, [r3, #0]
    b856:	69fb      	ldr	r3, [r7, #28]
    b858:	429a      	cmp	r2, r3
    b85a:	d801      	bhi.n	b860 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    b85c:	2317      	movs	r3, #23
    b85e:	e03f      	b.n	b8e0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    b860:	2380      	movs	r3, #128	; 0x80
    b862:	025a      	lsls	r2, r3, #9
    b864:	69fb      	ldr	r3, [r7, #28]
    b866:	409a      	lsls	r2, r3
    b868:	0013      	movs	r3, r2
    b86a:	001a      	movs	r2, r3
    b86c:	69bb      	ldr	r3, [r7, #24]
    b86e:	4313      	orrs	r3, r2
    b870:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    b872:	68ba      	ldr	r2, [r7, #8]
    b874:	69fb      	ldr	r3, [r7, #28]
    b876:	331c      	adds	r3, #28
    b878:	005b      	lsls	r3, r3, #1
    b87a:	18d3      	adds	r3, r2, r3
    b87c:	3309      	adds	r3, #9
    b87e:	781b      	ldrb	r3, [r3, #0]
    b880:	2b00      	cmp	r3, #0
    b882:	d023      	beq.n	b8cc <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    b884:	2317      	movs	r3, #23
    b886:	18fb      	adds	r3, r7, r3
    b888:	781a      	ldrb	r2, [r3, #0]
    b88a:	69fb      	ldr	r3, [r7, #28]
    b88c:	429a      	cmp	r2, r3
    b88e:	d801      	bhi.n	b894 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    b890:	2317      	movs	r3, #23
    b892:	e025      	b.n	b8e0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    b894:	68ba      	ldr	r2, [r7, #8]
    b896:	69fb      	ldr	r3, [r7, #28]
    b898:	331c      	adds	r3, #28
    b89a:	005b      	lsls	r3, r3, #1
    b89c:	18d3      	adds	r3, r2, r3
    b89e:	3309      	adds	r3, #9
    b8a0:	781b      	ldrb	r3, [r3, #0]
    b8a2:	2b02      	cmp	r3, #2
    b8a4:	d10a      	bne.n	b8bc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    b8a6:	2302      	movs	r3, #2
    b8a8:	33ff      	adds	r3, #255	; 0xff
    b8aa:	001a      	movs	r2, r3
    b8ac:	69fb      	ldr	r3, [r7, #28]
    b8ae:	409a      	lsls	r2, r3
    b8b0:	0013      	movs	r3, r2
    b8b2:	001a      	movs	r2, r3
    b8b4:	69bb      	ldr	r3, [r7, #24]
    b8b6:	4313      	orrs	r3, r2
    b8b8:	61bb      	str	r3, [r7, #24]
    b8ba:	e007      	b.n	b8cc <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    b8bc:	2201      	movs	r2, #1
    b8be:	69fb      	ldr	r3, [r7, #28]
    b8c0:	409a      	lsls	r2, r3
    b8c2:	0013      	movs	r3, r2
    b8c4:	001a      	movs	r2, r3
    b8c6:	69bb      	ldr	r3, [r7, #24]
    b8c8:	4313      	orrs	r3, r2
    b8ca:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    b8cc:	69fb      	ldr	r3, [r7, #28]
    b8ce:	3301      	adds	r3, #1
    b8d0:	61fb      	str	r3, [r7, #28]
    b8d2:	69fb      	ldr	r3, [r7, #28]
    b8d4:	2b07      	cmp	r3, #7
    b8d6:	d9b3      	bls.n	b840 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    b8d8:	687b      	ldr	r3, [r7, #4]
    b8da:	69ba      	ldr	r2, [r7, #24]
    b8dc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    b8de:	2300      	movs	r3, #0
}
    b8e0:	0018      	movs	r0, r3
    b8e2:	46bd      	mov	sp, r7
    b8e4:	b008      	add	sp, #32
    b8e6:	bd80      	pop	{r7, pc}
    b8e8:	000148d8 	.word	0x000148d8

0000b8ec <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    b8ec:	b580      	push	{r7, lr}
    b8ee:	b088      	sub	sp, #32
    b8f0:	af00      	add	r7, sp, #0
    b8f2:	60b9      	str	r1, [r7, #8]
    b8f4:	607a      	str	r2, [r7, #4]
    b8f6:	230f      	movs	r3, #15
    b8f8:	18fb      	adds	r3, r7, r3
    b8fa:	1c02      	adds	r2, r0, #0
    b8fc:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    b8fe:	230f      	movs	r3, #15
    b900:	18fb      	adds	r3, r7, r3
    b902:	781a      	ldrb	r2, [r3, #0]
    b904:	2317      	movs	r3, #23
    b906:	18fb      	adds	r3, r7, r3
    b908:	491d      	ldr	r1, [pc, #116]	; (b980 <_tcc_build_waves+0x94>)
    b90a:	5c8a      	ldrb	r2, [r1, r2]
    b90c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    b90e:	68bb      	ldr	r3, [r7, #8]
    b910:	3310      	adds	r3, #16
    b912:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    b914:	693b      	ldr	r3, [r7, #16]
    b916:	7a5b      	ldrb	r3, [r3, #9]
    b918:	011b      	lsls	r3, r3, #4
    b91a:	001a      	movs	r2, r3
    b91c:	2330      	movs	r3, #48	; 0x30
    b91e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    b920:	693b      	ldr	r3, [r7, #16]
    b922:	7a1b      	ldrb	r3, [r3, #8]
    b924:	0019      	movs	r1, r3
    b926:	2307      	movs	r3, #7
    b928:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    b92a:	4313      	orrs	r3, r2
    b92c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    b92e:	2300      	movs	r3, #0
    b930:	61fb      	str	r3, [r7, #28]
    b932:	e01a      	b.n	b96a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    b934:	693a      	ldr	r2, [r7, #16]
    b936:	69fb      	ldr	r3, [r7, #28]
    b938:	18d3      	adds	r3, r2, r3
    b93a:	3304      	adds	r3, #4
    b93c:	781b      	ldrb	r3, [r3, #0]
    b93e:	2b00      	cmp	r3, #0
    b940:	d010      	beq.n	b964 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    b942:	2317      	movs	r3, #23
    b944:	18fb      	adds	r3, r7, r3
    b946:	781a      	ldrb	r2, [r3, #0]
    b948:	69fb      	ldr	r3, [r7, #28]
    b94a:	429a      	cmp	r2, r3
    b94c:	dc01      	bgt.n	b952 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    b94e:	2317      	movs	r3, #23
    b950:	e012      	b.n	b978 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    b952:	2380      	movs	r3, #128	; 0x80
    b954:	025a      	lsls	r2, r3, #9
    b956:	69fb      	ldr	r3, [r7, #28]
    b958:	409a      	lsls	r2, r3
    b95a:	0013      	movs	r3, r2
    b95c:	001a      	movs	r2, r3
    b95e:	69bb      	ldr	r3, [r7, #24]
    b960:	4313      	orrs	r3, r2
    b962:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    b964:	69fb      	ldr	r3, [r7, #28]
    b966:	3301      	adds	r3, #1
    b968:	61fb      	str	r3, [r7, #28]
    b96a:	69fb      	ldr	r3, [r7, #28]
    b96c:	2b03      	cmp	r3, #3
    b96e:	dde1      	ble.n	b934 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    b970:	687b      	ldr	r3, [r7, #4]
    b972:	69ba      	ldr	r2, [r7, #24]
    b974:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    b976:	2300      	movs	r3, #0
}
    b978:	0018      	movs	r0, r3
    b97a:	46bd      	mov	sp, r7
    b97c:	b008      	add	sp, #32
    b97e:	bd80      	pop	{r7, pc}
    b980:	000148d4 	.word	0x000148d4

0000b984 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    b984:	b590      	push	{r4, r7, lr}
    b986:	b091      	sub	sp, #68	; 0x44
    b988:	af00      	add	r7, sp, #0
    b98a:	60f8      	str	r0, [r7, #12]
    b98c:	60b9      	str	r1, [r7, #8]
    b98e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    b990:	233b      	movs	r3, #59	; 0x3b
    b992:	18fc      	adds	r4, r7, r3
    b994:	68bb      	ldr	r3, [r7, #8]
    b996:	0018      	movs	r0, r3
    b998:	4bc4      	ldr	r3, [pc, #784]	; (bcac <tcc_init+0x328>)
    b99a:	4798      	blx	r3
    b99c:	0003      	movs	r3, r0
    b99e:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    b9a0:	233b      	movs	r3, #59	; 0x3b
    b9a2:	18fb      	adds	r3, r7, r3
    b9a4:	781a      	ldrb	r2, [r3, #0]
    b9a6:	4bc2      	ldr	r3, [pc, #776]	; (bcb0 <tcc_init+0x32c>)
    b9a8:	0092      	lsls	r2, r2, #2
    b9aa:	58d3      	ldr	r3, [r2, r3]
    b9ac:	0019      	movs	r1, r3
    b9ae:	2002      	movs	r0, #2
    b9b0:	4bc0      	ldr	r3, [pc, #768]	; (bcb4 <tcc_init+0x330>)
    b9b2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    b9b4:	68bb      	ldr	r3, [r7, #8]
    b9b6:	681b      	ldr	r3, [r3, #0]
    b9b8:	2202      	movs	r2, #2
    b9ba:	4013      	ands	r3, r2
    b9bc:	d001      	beq.n	b9c2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    b9be:	231c      	movs	r3, #28
    b9c0:	e1be      	b.n	bd40 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    b9c2:	68bb      	ldr	r3, [r7, #8]
    b9c4:	681b      	ldr	r3, [r3, #0]
    b9c6:	2201      	movs	r2, #1
    b9c8:	4013      	ands	r3, r2
    b9ca:	d001      	beq.n	b9d0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    b9cc:	231c      	movs	r3, #28
    b9ce:	e1b7      	b.n	bd40 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    b9d0:	233b      	movs	r3, #59	; 0x3b
    b9d2:	18fb      	adds	r3, r7, r3
    b9d4:	781a      	ldrb	r2, [r3, #0]
    b9d6:	4bb8      	ldr	r3, [pc, #736]	; (bcb8 <tcc_init+0x334>)
    b9d8:	0092      	lsls	r2, r2, #2
    b9da:	58d3      	ldr	r3, [r2, r3]
    b9dc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    b9de:	687b      	ldr	r3, [r7, #4]
    b9e0:	681a      	ldr	r2, [r3, #0]
    b9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b9e4:	429a      	cmp	r2, r3
    b9e6:	d804      	bhi.n	b9f2 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    b9e8:	687b      	ldr	r3, [r7, #4]
    b9ea:	685a      	ldr	r2, [r3, #4]
    b9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b9ee:	429a      	cmp	r2, r3
    b9f0:	d901      	bls.n	b9f6 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    b9f2:	2317      	movs	r3, #23
    b9f4:	e1a4      	b.n	bd40 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    b9f6:	2300      	movs	r3, #0
    b9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    b9fa:	e00e      	b.n	ba1a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    b9fc:	687a      	ldr	r2, [r7, #4]
    b9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba00:	3306      	adds	r3, #6
    ba02:	009b      	lsls	r3, r3, #2
    ba04:	18d3      	adds	r3, r2, r3
    ba06:	3304      	adds	r3, #4
    ba08:	681a      	ldr	r2, [r3, #0]
    ba0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ba0c:	429a      	cmp	r2, r3
    ba0e:	d901      	bls.n	ba14 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    ba10:	2317      	movs	r3, #23
    ba12:	e195      	b.n	bd40 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ba14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba16:	3301      	adds	r3, #1
    ba18:	63fb      	str	r3, [r7, #60]	; 0x3c
    ba1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba1c:	2b03      	cmp	r3, #3
    ba1e:	dded      	ble.n	b9fc <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ba20:	2300      	movs	r3, #0
    ba22:	63fb      	str	r3, [r7, #60]	; 0x3c
    ba24:	e019      	b.n	ba5a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    ba26:	687a      	ldr	r2, [r7, #4]
    ba28:	2198      	movs	r1, #152	; 0x98
    ba2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba2c:	18d3      	adds	r3, r2, r3
    ba2e:	185b      	adds	r3, r3, r1
    ba30:	781b      	ldrb	r3, [r3, #0]
    ba32:	2201      	movs	r2, #1
    ba34:	4053      	eors	r3, r2
    ba36:	b2db      	uxtb	r3, r3
    ba38:	2b00      	cmp	r3, #0
    ba3a:	d10a      	bne.n	ba52 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    ba3c:	233b      	movs	r3, #59	; 0x3b
    ba3e:	18fb      	adds	r3, r7, r3
    ba40:	781b      	ldrb	r3, [r3, #0]
    ba42:	4a9e      	ldr	r2, [pc, #632]	; (bcbc <tcc_init+0x338>)
    ba44:	5cd3      	ldrb	r3, [r2, r3]
    ba46:	001a      	movs	r2, r3
    ba48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba4a:	429a      	cmp	r2, r3
    ba4c:	dc02      	bgt.n	ba54 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    ba4e:	2317      	movs	r3, #23
    ba50:	e176      	b.n	bd40 <tcc_init+0x3bc>
			continue;
    ba52:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ba54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba56:	3301      	adds	r3, #1
    ba58:	63fb      	str	r3, [r7, #60]	; 0x3c
    ba5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba5c:	2b07      	cmp	r3, #7
    ba5e:	dde2      	ble.n	ba26 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    ba60:	2300      	movs	r3, #0
    ba62:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    ba64:	2333      	movs	r3, #51	; 0x33
    ba66:	18fc      	adds	r4, r7, r3
    ba68:	232c      	movs	r3, #44	; 0x2c
    ba6a:	18fa      	adds	r2, r7, r3
    ba6c:	6879      	ldr	r1, [r7, #4]
    ba6e:	233b      	movs	r3, #59	; 0x3b
    ba70:	18fb      	adds	r3, r7, r3
    ba72:	781b      	ldrb	r3, [r3, #0]
    ba74:	0018      	movs	r0, r3
    ba76:	4b92      	ldr	r3, [pc, #584]	; (bcc0 <tcc_init+0x33c>)
    ba78:	4798      	blx	r3
    ba7a:	0003      	movs	r3, r0
    ba7c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    ba7e:	2333      	movs	r3, #51	; 0x33
    ba80:	18fb      	adds	r3, r7, r3
    ba82:	781b      	ldrb	r3, [r3, #0]
    ba84:	2b00      	cmp	r3, #0
    ba86:	d003      	beq.n	ba90 <tcc_init+0x10c>
		return status;
    ba88:	2333      	movs	r3, #51	; 0x33
    ba8a:	18fb      	adds	r3, r7, r3
    ba8c:	781b      	ldrb	r3, [r3, #0]
    ba8e:	e157      	b.n	bd40 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    ba90:	232b      	movs	r3, #43	; 0x2b
    ba92:	18fa      	adds	r2, r7, r3
    ba94:	6879      	ldr	r1, [r7, #4]
    ba96:	233b      	movs	r3, #59	; 0x3b
    ba98:	18fb      	adds	r3, r7, r3
    ba9a:	781b      	ldrb	r3, [r3, #0]
    ba9c:	0018      	movs	r0, r3
    ba9e:	4b89      	ldr	r3, [pc, #548]	; (bcc4 <tcc_init+0x340>)
    baa0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    baa2:	2333      	movs	r3, #51	; 0x33
    baa4:	18fc      	adds	r4, r7, r3
    baa6:	2320      	movs	r3, #32
    baa8:	18fa      	adds	r2, r7, r3
    baaa:	6879      	ldr	r1, [r7, #4]
    baac:	233b      	movs	r3, #59	; 0x3b
    baae:	18fb      	adds	r3, r7, r3
    bab0:	781b      	ldrb	r3, [r3, #0]
    bab2:	0018      	movs	r0, r3
    bab4:	4b84      	ldr	r3, [pc, #528]	; (bcc8 <tcc_init+0x344>)
    bab6:	4798      	blx	r3
    bab8:	0003      	movs	r3, r0
    baba:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    babc:	2333      	movs	r3, #51	; 0x33
    babe:	18fb      	adds	r3, r7, r3
    bac0:	781b      	ldrb	r3, [r3, #0]
    bac2:	2b00      	cmp	r3, #0
    bac4:	d003      	beq.n	bace <tcc_init+0x14a>
		return status;
    bac6:	2333      	movs	r3, #51	; 0x33
    bac8:	18fb      	adds	r3, r7, r3
    baca:	781b      	ldrb	r3, [r3, #0]
    bacc:	e138      	b.n	bd40 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    bace:	2300      	movs	r3, #0
    bad0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    bad2:	2333      	movs	r3, #51	; 0x33
    bad4:	18fc      	adds	r4, r7, r3
    bad6:	231c      	movs	r3, #28
    bad8:	18fa      	adds	r2, r7, r3
    bada:	6879      	ldr	r1, [r7, #4]
    badc:	233b      	movs	r3, #59	; 0x3b
    bade:	18fb      	adds	r3, r7, r3
    bae0:	781b      	ldrb	r3, [r3, #0]
    bae2:	0018      	movs	r0, r3
    bae4:	4b79      	ldr	r3, [pc, #484]	; (bccc <tcc_init+0x348>)
    bae6:	4798      	blx	r3
    bae8:	0003      	movs	r3, r0
    baea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    baec:	2333      	movs	r3, #51	; 0x33
    baee:	18fb      	adds	r3, r7, r3
    baf0:	781b      	ldrb	r3, [r3, #0]
    baf2:	2b00      	cmp	r3, #0
    baf4:	d003      	beq.n	bafe <tcc_init+0x17a>
		return status;
    baf6:	2333      	movs	r3, #51	; 0x33
    baf8:	18fb      	adds	r3, r7, r3
    bafa:	781b      	ldrb	r3, [r3, #0]
    bafc:	e120      	b.n	bd40 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    bafe:	2333      	movs	r3, #51	; 0x33
    bb00:	18fc      	adds	r4, r7, r3
    bb02:	2318      	movs	r3, #24
    bb04:	18fa      	adds	r2, r7, r3
    bb06:	6879      	ldr	r1, [r7, #4]
    bb08:	233b      	movs	r3, #59	; 0x3b
    bb0a:	18fb      	adds	r3, r7, r3
    bb0c:	781b      	ldrb	r3, [r3, #0]
    bb0e:	0018      	movs	r0, r3
    bb10:	4b6f      	ldr	r3, [pc, #444]	; (bcd0 <tcc_init+0x34c>)
    bb12:	4798      	blx	r3
    bb14:	0003      	movs	r3, r0
    bb16:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    bb18:	2333      	movs	r3, #51	; 0x33
    bb1a:	18fb      	adds	r3, r7, r3
    bb1c:	781b      	ldrb	r3, [r3, #0]
    bb1e:	2b00      	cmp	r3, #0
    bb20:	d003      	beq.n	bb2a <tcc_init+0x1a6>
		return status;
    bb22:	2333      	movs	r3, #51	; 0x33
    bb24:	18fb      	adds	r3, r7, r3
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	e10a      	b.n	bd40 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    bb2a:	2300      	movs	r3, #0
    bb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    bb2e:	e009      	b.n	bb44 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    bb30:	68fa      	ldr	r2, [r7, #12]
    bb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb34:	009b      	lsls	r3, r3, #2
    bb36:	18d3      	adds	r3, r2, r3
    bb38:	3304      	adds	r3, #4
    bb3a:	2200      	movs	r2, #0
    bb3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    bb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb40:	3301      	adds	r3, #1
    bb42:	63fb      	str	r3, [r7, #60]	; 0x3c
    bb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bb46:	2b0b      	cmp	r3, #11
    bb48:	ddf2      	ble.n	bb30 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    bb4a:	68fb      	ldr	r3, [r7, #12]
    bb4c:	2200      	movs	r2, #0
    bb4e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    bb50:	68fb      	ldr	r3, [r7, #12]
    bb52:	2200      	movs	r2, #0
    bb54:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    bb56:	233b      	movs	r3, #59	; 0x3b
    bb58:	18fb      	adds	r3, r7, r3
    bb5a:	781a      	ldrb	r2, [r3, #0]
    bb5c:	4b5d      	ldr	r3, [pc, #372]	; (bcd4 <tcc_init+0x350>)
    bb5e:	0092      	lsls	r2, r2, #2
    bb60:	68f9      	ldr	r1, [r7, #12]
    bb62:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    bb64:	68fb      	ldr	r3, [r7, #12]
    bb66:	68ba      	ldr	r2, [r7, #8]
    bb68:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    bb6a:	687b      	ldr	r3, [r7, #4]
    bb6c:	22a0      	movs	r2, #160	; 0xa0
    bb6e:	5c99      	ldrb	r1, [r3, r2]
    bb70:	68fb      	ldr	r3, [r7, #12]
    bb72:	223c      	movs	r2, #60	; 0x3c
    bb74:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    bb76:	2314      	movs	r3, #20
    bb78:	18fb      	adds	r3, r7, r3
    bb7a:	0018      	movs	r0, r3
    bb7c:	4b56      	ldr	r3, [pc, #344]	; (bcd8 <tcc_init+0x354>)
    bb7e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    bb80:	687b      	ldr	r3, [r7, #4]
    bb82:	7a9a      	ldrb	r2, [r3, #10]
    bb84:	2314      	movs	r3, #20
    bb86:	18fb      	adds	r3, r7, r3
    bb88:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    bb8a:	233b      	movs	r3, #59	; 0x3b
    bb8c:	18fb      	adds	r3, r7, r3
    bb8e:	781b      	ldrb	r3, [r3, #0]
    bb90:	4a52      	ldr	r2, [pc, #328]	; (bcdc <tcc_init+0x358>)
    bb92:	5cd3      	ldrb	r3, [r2, r3]
    bb94:	2214      	movs	r2, #20
    bb96:	18ba      	adds	r2, r7, r2
    bb98:	0011      	movs	r1, r2
    bb9a:	0018      	movs	r0, r3
    bb9c:	4b50      	ldr	r3, [pc, #320]	; (bce0 <tcc_init+0x35c>)
    bb9e:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    bba0:	233b      	movs	r3, #59	; 0x3b
    bba2:	18fb      	adds	r3, r7, r3
    bba4:	781b      	ldrb	r3, [r3, #0]
    bba6:	4a4d      	ldr	r2, [pc, #308]	; (bcdc <tcc_init+0x358>)
    bba8:	5cd3      	ldrb	r3, [r2, r3]
    bbaa:	0018      	movs	r0, r3
    bbac:	4b4d      	ldr	r3, [pc, #308]	; (bce4 <tcc_init+0x360>)
    bbae:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    bbb0:	2300      	movs	r3, #0
    bbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    bbb4:	e02d      	b.n	bc12 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    bbb6:	687a      	ldr	r2, [r7, #4]
    bbb8:	2198      	movs	r1, #152	; 0x98
    bbba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bbbc:	18d3      	adds	r3, r2, r3
    bbbe:	185b      	adds	r3, r3, r1
    bbc0:	781b      	ldrb	r3, [r3, #0]
    bbc2:	2201      	movs	r2, #1
    bbc4:	4053      	eors	r3, r2
    bbc6:	b2db      	uxtb	r3, r3
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d11e      	bne.n	bc0a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    bbcc:	2310      	movs	r3, #16
    bbce:	18fb      	adds	r3, r7, r3
    bbd0:	0018      	movs	r0, r3
    bbd2:	4b45      	ldr	r3, [pc, #276]	; (bce8 <tcc_init+0x364>)
    bbd4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    bbd6:	687b      	ldr	r3, [r7, #4]
    bbd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    bbda:	321e      	adds	r2, #30
    bbdc:	0092      	lsls	r2, r2, #2
    bbde:	58d3      	ldr	r3, [r2, r3]
    bbe0:	b2da      	uxtb	r2, r3
    bbe2:	2310      	movs	r3, #16
    bbe4:	18fb      	adds	r3, r7, r3
    bbe6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    bbe8:	2310      	movs	r3, #16
    bbea:	18fb      	adds	r3, r7, r3
    bbec:	2201      	movs	r2, #1
    bbee:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    bbf0:	687b      	ldr	r3, [r7, #4]
    bbf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    bbf4:	3216      	adds	r2, #22
    bbf6:	0092      	lsls	r2, r2, #2
    bbf8:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    bbfa:	b2db      	uxtb	r3, r3
    bbfc:	2210      	movs	r2, #16
    bbfe:	18ba      	adds	r2, r7, r2
    bc00:	0011      	movs	r1, r2
    bc02:	0018      	movs	r0, r3
    bc04:	4b39      	ldr	r3, [pc, #228]	; (bcec <tcc_init+0x368>)
    bc06:	4798      	blx	r3
    bc08:	e000      	b.n	bc0c <tcc_init+0x288>
			continue;
    bc0a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    bc0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bc0e:	3301      	adds	r3, #1
    bc10:	63fb      	str	r3, [r7, #60]	; 0x3c
    bc12:	233b      	movs	r3, #59	; 0x3b
    bc14:	18fb      	adds	r3, r7, r3
    bc16:	781b      	ldrb	r3, [r3, #0]
    bc18:	4a28      	ldr	r2, [pc, #160]	; (bcbc <tcc_init+0x338>)
    bc1a:	5cd3      	ldrb	r3, [r2, r3]
    bc1c:	001a      	movs	r2, r3
    bc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bc20:	429a      	cmp	r2, r3
    bc22:	dcc8      	bgt.n	bbb6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    bc24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bc26:	68bb      	ldr	r3, [r7, #8]
    bc28:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    bc2a:	46c0      	nop			; (mov r8, r8)
    bc2c:	68bb      	ldr	r3, [r7, #8]
    bc2e:	689b      	ldr	r3, [r3, #8]
    bc30:	2204      	movs	r2, #4
    bc32:	4013      	ands	r3, r2
    bc34:	d1fa      	bne.n	bc2c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    bc36:	68bb      	ldr	r3, [r7, #8]
    bc38:	22ff      	movs	r2, #255	; 0xff
    bc3a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    bc3c:	46c0      	nop			; (mov r8, r8)
    bc3e:	68bb      	ldr	r3, [r7, #8]
    bc40:	689b      	ldr	r3, [r3, #8]
    bc42:	2204      	movs	r2, #4
    bc44:	4013      	ands	r3, r2
    bc46:	d1fa      	bne.n	bc3e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    bc48:	232b      	movs	r3, #43	; 0x2b
    bc4a:	18fb      	adds	r3, r7, r3
    bc4c:	781a      	ldrb	r2, [r3, #0]
    bc4e:	68bb      	ldr	r3, [r7, #8]
    bc50:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    bc52:	2320      	movs	r3, #32
    bc54:	18fb      	adds	r3, r7, r3
    bc56:	681a      	ldr	r2, [r3, #0]
    bc58:	68bb      	ldr	r3, [r7, #8]
    bc5a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    bc5c:	2320      	movs	r3, #32
    bc5e:	18fb      	adds	r3, r7, r3
    bc60:	685a      	ldr	r2, [r3, #4]
    bc62:	68bb      	ldr	r3, [r7, #8]
    bc64:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    bc66:	69fa      	ldr	r2, [r7, #28]
    bc68:	68bb      	ldr	r3, [r7, #8]
    bc6a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    bc6c:	46c0      	nop			; (mov r8, r8)
    bc6e:	68bb      	ldr	r3, [r7, #8]
    bc70:	689b      	ldr	r3, [r3, #8]
    bc72:	4a1f      	ldr	r2, [pc, #124]	; (bcf0 <tcc_init+0x36c>)
    bc74:	4013      	ands	r3, r2
    bc76:	d1fa      	bne.n	bc6e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    bc78:	69ba      	ldr	r2, [r7, #24]
    bc7a:	68bb      	ldr	r3, [r7, #8]
    bc7c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    bc7e:	46c0      	nop			; (mov r8, r8)
    bc80:	68bb      	ldr	r3, [r7, #8]
    bc82:	689b      	ldr	r3, [r3, #8]
    bc84:	2210      	movs	r2, #16
    bc86:	4013      	ands	r3, r2
    bc88:	d1fa      	bne.n	bc80 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    bc8a:	687b      	ldr	r3, [r7, #4]
    bc8c:	681a      	ldr	r2, [r3, #0]
    bc8e:	68bb      	ldr	r3, [r7, #8]
    bc90:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    bc92:	46c0      	nop			; (mov r8, r8)
    bc94:	68bb      	ldr	r3, [r7, #8]
    bc96:	689b      	ldr	r3, [r3, #8]
    bc98:	4a16      	ldr	r2, [pc, #88]	; (bcf4 <tcc_init+0x370>)
    bc9a:	4013      	ands	r3, r2
    bc9c:	d1fa      	bne.n	bc94 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    bc9e:	687b      	ldr	r3, [r7, #4]
    bca0:	685a      	ldr	r2, [r3, #4]
    bca2:	68bb      	ldr	r3, [r7, #8]
    bca4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    bca6:	2300      	movs	r3, #0
    bca8:	63fb      	str	r3, [r7, #60]	; 0x3c
    bcaa:	e03f      	b.n	bd2c <tcc_init+0x3a8>
    bcac:	0000b2ed 	.word	0x0000b2ed
    bcb0:	000148bc 	.word	0x000148bc
    bcb4:	0000b269 	.word	0x0000b269
    bcb8:	000148c8 	.word	0x000148c8
    bcbc:	000148d8 	.word	0x000148d8
    bcc0:	0000b5f9 	.word	0x0000b5f9
    bcc4:	0000b69d 	.word	0x0000b69d
    bcc8:	0000b6f9 	.word	0x0000b6f9
    bccc:	0000b815 	.word	0x0000b815
    bcd0:	0000b8ed 	.word	0x0000b8ed
    bcd4:	20000508 	.word	0x20000508
    bcd8:	0000b251 	.word	0x0000b251
    bcdc:	000148b8 	.word	0x000148b8
    bce0:	0000aedd 	.word	0x0000aedd
    bce4:	0000af21 	.word	0x0000af21
    bce8:	0000b2c5 	.word	0x0000b2c5
    bcec:	0000b1c9 	.word	0x0000b1c9
    bcf0:	00020040 	.word	0x00020040
    bcf4:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21)
		while (hw->SYNCBUSY.reg & (
    bcf8:	46c0      	nop			; (mov r8, r8)
    bcfa:	68bb      	ldr	r3, [r7, #8]
    bcfc:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    bcfe:	4912      	ldr	r1, [pc, #72]	; (bd48 <tcc_init+0x3c4>)
    bd00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    bd02:	4091      	lsls	r1, r2
    bd04:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    bd06:	4013      	ands	r3, r2
    bd08:	d1f7      	bne.n	bcfa <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    bd0a:	687a      	ldr	r2, [r7, #4]
    bd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bd0e:	3306      	adds	r3, #6
    bd10:	009b      	lsls	r3, r3, #2
    bd12:	18d3      	adds	r3, r2, r3
    bd14:	3304      	adds	r3, #4
    bd16:	681a      	ldr	r2, [r3, #0]
    bd18:	68b9      	ldr	r1, [r7, #8]
    bd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bd1c:	3310      	adds	r3, #16
    bd1e:	009b      	lsls	r3, r3, #2
    bd20:	18cb      	adds	r3, r1, r3
    bd22:	3304      	adds	r3, #4
    bd24:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    bd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bd28:	3301      	adds	r3, #1
    bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    bd2c:	233b      	movs	r3, #59	; 0x3b
    bd2e:	18fb      	adds	r3, r7, r3
    bd30:	781b      	ldrb	r3, [r3, #0]
    bd32:	4a06      	ldr	r2, [pc, #24]	; (bd4c <tcc_init+0x3c8>)
    bd34:	5cd3      	ldrb	r3, [r2, r3]
    bd36:	001a      	movs	r2, r3
    bd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    bd3a:	429a      	cmp	r2, r3
    bd3c:	dcdc      	bgt.n	bcf8 <tcc_init+0x374>
	}

	return STATUS_OK;
    bd3e:	2300      	movs	r3, #0
}
    bd40:	0018      	movs	r0, r3
    bd42:	46bd      	mov	sp, r7
    bd44:	b011      	add	sp, #68	; 0x44
    bd46:	bd90      	pop	{r4, r7, pc}
    bd48:	00080100 	.word	0x00080100
    bd4c:	000148d4 	.word	0x000148d4

0000bd50 <system_interrupt_enable>:
{
    bd50:	b580      	push	{r7, lr}
    bd52:	b082      	sub	sp, #8
    bd54:	af00      	add	r7, sp, #0
    bd56:	0002      	movs	r2, r0
    bd58:	1dfb      	adds	r3, r7, #7
    bd5a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bd5c:	4b06      	ldr	r3, [pc, #24]	; (bd78 <system_interrupt_enable+0x28>)
    bd5e:	1dfa      	adds	r2, r7, #7
    bd60:	7812      	ldrb	r2, [r2, #0]
    bd62:	0011      	movs	r1, r2
    bd64:	221f      	movs	r2, #31
    bd66:	400a      	ands	r2, r1
    bd68:	2101      	movs	r1, #1
    bd6a:	4091      	lsls	r1, r2
    bd6c:	000a      	movs	r2, r1
    bd6e:	601a      	str	r2, [r3, #0]
}
    bd70:	46c0      	nop			; (mov r8, r8)
    bd72:	46bd      	mov	sp, r7
    bd74:	b002      	add	sp, #8
    bd76:	bd80      	pop	{r7, pc}
    bd78:	e000e100 	.word	0xe000e100

0000bd7c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    bd7c:	b580      	push	{r7, lr}
    bd7e:	b082      	sub	sp, #8
    bd80:	af00      	add	r7, sp, #0
    bd82:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    bd84:	4a04      	ldr	r2, [pc, #16]	; (bd98 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    bd86:	687b      	ldr	r3, [r7, #4]
    bd88:	18d3      	adds	r3, r2, r3
    bd8a:	781b      	ldrb	r3, [r3, #0]
    bd8c:	b25b      	sxtb	r3, r3
}
    bd8e:	0018      	movs	r0, r3
    bd90:	46bd      	mov	sp, r7
    bd92:	b002      	add	sp, #8
    bd94:	bd80      	pop	{r7, pc}
    bd96:	46c0      	nop			; (mov r8, r8)
    bd98:	20000018 	.word	0x20000018

0000bd9c <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    bd9c:	b580      	push	{r7, lr}
    bd9e:	b084      	sub	sp, #16
    bda0:	af00      	add	r7, sp, #0
    bda2:	60f8      	str	r0, [r7, #12]
    bda4:	60b9      	str	r1, [r7, #8]
    bda6:	1dfb      	adds	r3, r7, #7
    bda8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    bdaa:	1dfb      	adds	r3, r7, #7
    bdac:	781b      	ldrb	r3, [r3, #0]
    bdae:	68fa      	ldr	r2, [r7, #12]
    bdb0:	009b      	lsls	r3, r3, #2
    bdb2:	18d3      	adds	r3, r2, r3
    bdb4:	3304      	adds	r3, #4
    bdb6:	68ba      	ldr	r2, [r7, #8]
    bdb8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    bdba:	68fb      	ldr	r3, [r7, #12]
    bdbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bdbe:	1dfb      	adds	r3, r7, #7
    bdc0:	7819      	ldrb	r1, [r3, #0]
    bdc2:	4b05      	ldr	r3, [pc, #20]	; (bdd8 <tcc_register_callback+0x3c>)
    bdc4:	0089      	lsls	r1, r1, #2
    bdc6:	58cb      	ldr	r3, [r1, r3]
    bdc8:	431a      	orrs	r2, r3
    bdca:	68fb      	ldr	r3, [r7, #12]
    bdcc:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    bdce:	2300      	movs	r3, #0
}
    bdd0:	0018      	movs	r0, r3
    bdd2:	46bd      	mov	sp, r7
    bdd4:	b004      	add	sp, #16
    bdd6:	bd80      	pop	{r7, pc}
    bdd8:	000148dc 	.word	0x000148dc

0000bddc <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    bddc:	b580      	push	{r7, lr}
    bdde:	b082      	sub	sp, #8
    bde0:	af00      	add	r7, sp, #0
    bde2:	6078      	str	r0, [r7, #4]
    bde4:	000a      	movs	r2, r1
    bde6:	1cfb      	adds	r3, r7, #3
    bde8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    bdea:	687b      	ldr	r3, [r7, #4]
    bdec:	681b      	ldr	r3, [r3, #0]
    bdee:	0018      	movs	r0, r3
    bdf0:	4b0f      	ldr	r3, [pc, #60]	; (be30 <tcc_enable_callback+0x54>)
    bdf2:	4798      	blx	r3
    bdf4:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    bdf6:	0018      	movs	r0, r3
    bdf8:	4b0e      	ldr	r3, [pc, #56]	; (be34 <tcc_enable_callback+0x58>)
    bdfa:	4798      	blx	r3
    bdfc:	0003      	movs	r3, r0
    bdfe:	0018      	movs	r0, r3
    be00:	4b0d      	ldr	r3, [pc, #52]	; (be38 <tcc_enable_callback+0x5c>)
    be02:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    be04:	687b      	ldr	r3, [r7, #4]
    be06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    be08:	1cfb      	adds	r3, r7, #3
    be0a:	7819      	ldrb	r1, [r3, #0]
    be0c:	4b0b      	ldr	r3, [pc, #44]	; (be3c <tcc_enable_callback+0x60>)
    be0e:	0089      	lsls	r1, r1, #2
    be10:	58cb      	ldr	r3, [r1, r3]
    be12:	431a      	orrs	r2, r3
    be14:	687b      	ldr	r3, [r7, #4]
    be16:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    be18:	687b      	ldr	r3, [r7, #4]
    be1a:	681b      	ldr	r3, [r3, #0]
    be1c:	1cfa      	adds	r2, r7, #3
    be1e:	7811      	ldrb	r1, [r2, #0]
    be20:	4a06      	ldr	r2, [pc, #24]	; (be3c <tcc_enable_callback+0x60>)
    be22:	0089      	lsls	r1, r1, #2
    be24:	588a      	ldr	r2, [r1, r2]
    be26:	629a      	str	r2, [r3, #40]	; 0x28
}
    be28:	46c0      	nop			; (mov r8, r8)
    be2a:	46bd      	mov	sp, r7
    be2c:	b002      	add	sp, #8
    be2e:	bd80      	pop	{r7, pc}
    be30:	0000b2ed 	.word	0x0000b2ed
    be34:	0000bd7d 	.word	0x0000bd7d
    be38:	0000bd51 	.word	0x0000bd51
    be3c:	000148dc 	.word	0x000148dc

0000be40 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    be40:	b580      	push	{r7, lr}
    be42:	af00      	add	r7, sp, #0
    be44:	2000      	movs	r0, #0
    be46:	4b02      	ldr	r3, [pc, #8]	; (be50 <TCC0_Handler+0x10>)
    be48:	4798      	blx	r3
    be4a:	46c0      	nop			; (mov r8, r8)
    be4c:	46bd      	mov	sp, r7
    be4e:	bd80      	pop	{r7, pc}
    be50:	0000be7d 	.word	0x0000be7d

0000be54 <TCC1_Handler>:
    be54:	b580      	push	{r7, lr}
    be56:	af00      	add	r7, sp, #0
    be58:	2001      	movs	r0, #1
    be5a:	4b02      	ldr	r3, [pc, #8]	; (be64 <TCC1_Handler+0x10>)
    be5c:	4798      	blx	r3
    be5e:	46c0      	nop			; (mov r8, r8)
    be60:	46bd      	mov	sp, r7
    be62:	bd80      	pop	{r7, pc}
    be64:	0000be7d 	.word	0x0000be7d

0000be68 <TCC2_Handler>:
    be68:	b580      	push	{r7, lr}
    be6a:	af00      	add	r7, sp, #0
    be6c:	2002      	movs	r0, #2
    be6e:	4b02      	ldr	r3, [pc, #8]	; (be78 <TCC2_Handler+0x10>)
    be70:	4798      	blx	r3
    be72:	46c0      	nop			; (mov r8, r8)
    be74:	46bd      	mov	sp, r7
    be76:	bd80      	pop	{r7, pc}
    be78:	0000be7d 	.word	0x0000be7d

0000be7c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    be7c:	b580      	push	{r7, lr}
    be7e:	b086      	sub	sp, #24
    be80:	af00      	add	r7, sp, #0
    be82:	0002      	movs	r2, r0
    be84:	1dfb      	adds	r3, r7, #7
    be86:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    be88:	1dfb      	adds	r3, r7, #7
    be8a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    be8c:	4b18      	ldr	r3, [pc, #96]	; (bef0 <_tcc_interrupt_handler+0x74>)
    be8e:	0092      	lsls	r2, r2, #2
    be90:	58d3      	ldr	r3, [r2, r3]
    be92:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    be94:	693b      	ldr	r3, [r7, #16]
    be96:	681b      	ldr	r3, [r3, #0]
    be98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    be9a:	693b      	ldr	r3, [r7, #16]
    be9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    be9e:	401a      	ands	r2, r3
			module->enable_callback_mask);
    bea0:	693b      	ldr	r3, [r7, #16]
    bea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    bea4:	4013      	ands	r3, r2
    bea6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    bea8:	2300      	movs	r3, #0
    beaa:	617b      	str	r3, [r7, #20]
    beac:	e019      	b.n	bee2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    beae:	4b11      	ldr	r3, [pc, #68]	; (bef4 <_tcc_interrupt_handler+0x78>)
    beb0:	697a      	ldr	r2, [r7, #20]
    beb2:	0092      	lsls	r2, r2, #2
    beb4:	58d3      	ldr	r3, [r2, r3]
    beb6:	68fa      	ldr	r2, [r7, #12]
    beb8:	4013      	ands	r3, r2
    beba:	d00f      	beq.n	bedc <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    bebc:	693a      	ldr	r2, [r7, #16]
    bebe:	697b      	ldr	r3, [r7, #20]
    bec0:	009b      	lsls	r3, r3, #2
    bec2:	18d3      	adds	r3, r2, r3
    bec4:	3304      	adds	r3, #4
    bec6:	681b      	ldr	r3, [r3, #0]
    bec8:	693a      	ldr	r2, [r7, #16]
    beca:	0010      	movs	r0, r2
    becc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    bece:	693b      	ldr	r3, [r7, #16]
    bed0:	681b      	ldr	r3, [r3, #0]
    bed2:	4a08      	ldr	r2, [pc, #32]	; (bef4 <_tcc_interrupt_handler+0x78>)
    bed4:	6979      	ldr	r1, [r7, #20]
    bed6:	0089      	lsls	r1, r1, #2
    bed8:	588a      	ldr	r2, [r1, r2]
    beda:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    bedc:	697b      	ldr	r3, [r7, #20]
    bede:	3301      	adds	r3, #1
    bee0:	617b      	str	r3, [r7, #20]
    bee2:	697b      	ldr	r3, [r7, #20]
    bee4:	2b0b      	cmp	r3, #11
    bee6:	dde2      	ble.n	beae <_tcc_interrupt_handler+0x32>
		}
	}
}
    bee8:	46c0      	nop			; (mov r8, r8)
    beea:	46bd      	mov	sp, r7
    beec:	b006      	add	sp, #24
    beee:	bd80      	pop	{r7, pc}
    bef0:	20000508 	.word	0x20000508
    bef4:	000148dc 	.word	0x000148dc

0000bef8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    bef8:	b580      	push	{r7, lr}
    befa:	b082      	sub	sp, #8
    befc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    befe:	4b2f      	ldr	r3, [pc, #188]	; (bfbc <Reset_Handler+0xc4>)
    bf00:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    bf02:	4b2f      	ldr	r3, [pc, #188]	; (bfc0 <Reset_Handler+0xc8>)
    bf04:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    bf06:	687a      	ldr	r2, [r7, #4]
    bf08:	683b      	ldr	r3, [r7, #0]
    bf0a:	429a      	cmp	r2, r3
    bf0c:	d00c      	beq.n	bf28 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    bf0e:	e007      	b.n	bf20 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    bf10:	683b      	ldr	r3, [r7, #0]
    bf12:	1d1a      	adds	r2, r3, #4
    bf14:	603a      	str	r2, [r7, #0]
    bf16:	687a      	ldr	r2, [r7, #4]
    bf18:	1d11      	adds	r1, r2, #4
    bf1a:	6079      	str	r1, [r7, #4]
    bf1c:	6812      	ldr	r2, [r2, #0]
    bf1e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    bf20:	683a      	ldr	r2, [r7, #0]
    bf22:	4b28      	ldr	r3, [pc, #160]	; (bfc4 <Reset_Handler+0xcc>)
    bf24:	429a      	cmp	r2, r3
    bf26:	d3f3      	bcc.n	bf10 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    bf28:	4b27      	ldr	r3, [pc, #156]	; (bfc8 <Reset_Handler+0xd0>)
    bf2a:	603b      	str	r3, [r7, #0]
    bf2c:	e004      	b.n	bf38 <Reset_Handler+0x40>
                *pDest++ = 0;
    bf2e:	683b      	ldr	r3, [r7, #0]
    bf30:	1d1a      	adds	r2, r3, #4
    bf32:	603a      	str	r2, [r7, #0]
    bf34:	2200      	movs	r2, #0
    bf36:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    bf38:	683a      	ldr	r2, [r7, #0]
    bf3a:	4b24      	ldr	r3, [pc, #144]	; (bfcc <Reset_Handler+0xd4>)
    bf3c:	429a      	cmp	r2, r3
    bf3e:	d3f6      	bcc.n	bf2e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    bf40:	4b23      	ldr	r3, [pc, #140]	; (bfd0 <Reset_Handler+0xd8>)
    bf42:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    bf44:	4b23      	ldr	r3, [pc, #140]	; (bfd4 <Reset_Handler+0xdc>)
    bf46:	687a      	ldr	r2, [r7, #4]
    bf48:	21ff      	movs	r1, #255	; 0xff
    bf4a:	438a      	bics	r2, r1
    bf4c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    bf4e:	4a22      	ldr	r2, [pc, #136]	; (bfd8 <Reset_Handler+0xe0>)
    bf50:	2390      	movs	r3, #144	; 0x90
    bf52:	005b      	lsls	r3, r3, #1
    bf54:	2102      	movs	r1, #2
    bf56:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    bf58:	4a20      	ldr	r2, [pc, #128]	; (bfdc <Reset_Handler+0xe4>)
    bf5a:	78d3      	ldrb	r3, [r2, #3]
    bf5c:	2103      	movs	r1, #3
    bf5e:	438b      	bics	r3, r1
    bf60:	1c19      	adds	r1, r3, #0
    bf62:	2302      	movs	r3, #2
    bf64:	430b      	orrs	r3, r1
    bf66:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    bf68:	4a1c      	ldr	r2, [pc, #112]	; (bfdc <Reset_Handler+0xe4>)
    bf6a:	78d3      	ldrb	r3, [r2, #3]
    bf6c:	210c      	movs	r1, #12
    bf6e:	438b      	bics	r3, r1
    bf70:	1c19      	adds	r1, r3, #0
    bf72:	2308      	movs	r3, #8
    bf74:	430b      	orrs	r3, r1
    bf76:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    bf78:	4a19      	ldr	r2, [pc, #100]	; (bfe0 <Reset_Handler+0xe8>)
    bf7a:	7b93      	ldrb	r3, [r2, #14]
    bf7c:	2130      	movs	r1, #48	; 0x30
    bf7e:	438b      	bics	r3, r1
    bf80:	1c19      	adds	r1, r3, #0
    bf82:	2320      	movs	r3, #32
    bf84:	430b      	orrs	r3, r1
    bf86:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    bf88:	4a15      	ldr	r2, [pc, #84]	; (bfe0 <Reset_Handler+0xe8>)
    bf8a:	7b93      	ldrb	r3, [r2, #14]
    bf8c:	210c      	movs	r1, #12
    bf8e:	438b      	bics	r3, r1
    bf90:	1c19      	adds	r1, r3, #0
    bf92:	2308      	movs	r3, #8
    bf94:	430b      	orrs	r3, r1
    bf96:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    bf98:	4a11      	ldr	r2, [pc, #68]	; (bfe0 <Reset_Handler+0xe8>)
    bf9a:	7b93      	ldrb	r3, [r2, #14]
    bf9c:	2103      	movs	r1, #3
    bf9e:	438b      	bics	r3, r1
    bfa0:	1c19      	adds	r1, r3, #0
    bfa2:	2302      	movs	r3, #2
    bfa4:	430b      	orrs	r3, r1
    bfa6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    bfa8:	4a0e      	ldr	r2, [pc, #56]	; (bfe4 <Reset_Handler+0xec>)
    bfaa:	6853      	ldr	r3, [r2, #4]
    bfac:	2180      	movs	r1, #128	; 0x80
    bfae:	430b      	orrs	r3, r1
    bfb0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    bfb2:	4b0d      	ldr	r3, [pc, #52]	; (bfe8 <Reset_Handler+0xf0>)
    bfb4:	4798      	blx	r3

        /* Branch to main function */
        main();
    bfb6:	4b0d      	ldr	r3, [pc, #52]	; (bfec <Reset_Handler+0xf4>)
    bfb8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    bfba:	e7fe      	b.n	bfba <Reset_Handler+0xc2>
    bfbc:	000154bc 	.word	0x000154bc
    bfc0:	20000000 	.word	0x20000000
    bfc4:	20000238 	.word	0x20000238
    bfc8:	20000238 	.word	0x20000238
    bfcc:	20000a84 	.word	0x20000a84
    bfd0:	00000000 	.word	0x00000000
    bfd4:	e000ed00 	.word	0xe000ed00
    bfd8:	41007000 	.word	0x41007000
    bfdc:	41005000 	.word	0x41005000
    bfe0:	41004800 	.word	0x41004800
    bfe4:	41004000 	.word	0x41004000
    bfe8:	00011edd 	.word	0x00011edd
    bfec:	0000de75 	.word	0x0000de75

0000bff0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    bff0:	b580      	push	{r7, lr}
    bff2:	af00      	add	r7, sp, #0
        while (1) {
    bff4:	e7fe      	b.n	bff4 <Dummy_Handler+0x4>
	...

0000bff8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    bff8:	b580      	push	{r7, lr}
    bffa:	b086      	sub	sp, #24
    bffc:	af00      	add	r7, sp, #0
    bffe:	60f8      	str	r0, [r7, #12]
    c000:	60b9      	str	r1, [r7, #8]
    c002:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    c004:	2300      	movs	r3, #0
    c006:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    c008:	68fb      	ldr	r3, [r7, #12]
    c00a:	2b00      	cmp	r3, #0
    c00c:	d012      	beq.n	c034 <_read+0x3c>
		return -1;
    c00e:	2301      	movs	r3, #1
    c010:	425b      	negs	r3, r3
    c012:	e013      	b.n	c03c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    c014:	4b0b      	ldr	r3, [pc, #44]	; (c044 <_read+0x4c>)
    c016:	681a      	ldr	r2, [r3, #0]
    c018:	4b0b      	ldr	r3, [pc, #44]	; (c048 <_read+0x50>)
    c01a:	681b      	ldr	r3, [r3, #0]
    c01c:	68b9      	ldr	r1, [r7, #8]
    c01e:	0018      	movs	r0, r3
    c020:	4790      	blx	r2
		ptr++;
    c022:	68bb      	ldr	r3, [r7, #8]
    c024:	3301      	adds	r3, #1
    c026:	60bb      	str	r3, [r7, #8]
		nChars++;
    c028:	697b      	ldr	r3, [r7, #20]
    c02a:	3301      	adds	r3, #1
    c02c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    c02e:	687b      	ldr	r3, [r7, #4]
    c030:	3b01      	subs	r3, #1
    c032:	607b      	str	r3, [r7, #4]
    c034:	687b      	ldr	r3, [r7, #4]
    c036:	2b00      	cmp	r3, #0
    c038:	dcec      	bgt.n	c014 <_read+0x1c>
	}
	return nChars;
    c03a:	697b      	ldr	r3, [r7, #20]
}
    c03c:	0018      	movs	r0, r3
    c03e:	46bd      	mov	sp, r7
    c040:	b006      	add	sp, #24
    c042:	bd80      	pop	{r7, pc}
    c044:	20000514 	.word	0x20000514
    c048:	2000051c 	.word	0x2000051c

0000c04c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    c04c:	b580      	push	{r7, lr}
    c04e:	b086      	sub	sp, #24
    c050:	af00      	add	r7, sp, #0
    c052:	60f8      	str	r0, [r7, #12]
    c054:	60b9      	str	r1, [r7, #8]
    c056:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    c058:	2300      	movs	r3, #0
    c05a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    c05c:	68fb      	ldr	r3, [r7, #12]
    c05e:	2b01      	cmp	r3, #1
    c060:	d01d      	beq.n	c09e <_write+0x52>
    c062:	68fb      	ldr	r3, [r7, #12]
    c064:	2b02      	cmp	r3, #2
    c066:	d01a      	beq.n	c09e <_write+0x52>
    c068:	68fb      	ldr	r3, [r7, #12]
    c06a:	2b03      	cmp	r3, #3
    c06c:	d017      	beq.n	c09e <_write+0x52>
		return -1;
    c06e:	2301      	movs	r3, #1
    c070:	425b      	negs	r3, r3
    c072:	e018      	b.n	c0a6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    c074:	4b0e      	ldr	r3, [pc, #56]	; (c0b0 <_write+0x64>)
    c076:	681a      	ldr	r2, [r3, #0]
    c078:	4b0e      	ldr	r3, [pc, #56]	; (c0b4 <_write+0x68>)
    c07a:	6818      	ldr	r0, [r3, #0]
    c07c:	68bb      	ldr	r3, [r7, #8]
    c07e:	1c59      	adds	r1, r3, #1
    c080:	60b9      	str	r1, [r7, #8]
    c082:	781b      	ldrb	r3, [r3, #0]
    c084:	0019      	movs	r1, r3
    c086:	4790      	blx	r2
    c088:	1e03      	subs	r3, r0, #0
    c08a:	da02      	bge.n	c092 <_write+0x46>
			return -1;
    c08c:	2301      	movs	r3, #1
    c08e:	425b      	negs	r3, r3
    c090:	e009      	b.n	c0a6 <_write+0x5a>
		}
		++nChars;
    c092:	697b      	ldr	r3, [r7, #20]
    c094:	3301      	adds	r3, #1
    c096:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    c098:	687b      	ldr	r3, [r7, #4]
    c09a:	3b01      	subs	r3, #1
    c09c:	607b      	str	r3, [r7, #4]
    c09e:	687b      	ldr	r3, [r7, #4]
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	d1e7      	bne.n	c074 <_write+0x28>
	}
	return nChars;
    c0a4:	697b      	ldr	r3, [r7, #20]
}
    c0a6:	0018      	movs	r0, r3
    c0a8:	46bd      	mov	sp, r7
    c0aa:	b006      	add	sp, #24
    c0ac:	bd80      	pop	{r7, pc}
    c0ae:	46c0      	nop			; (mov r8, r8)
    c0b0:	20000518 	.word	0x20000518
    c0b4:	2000051c 	.word	0x2000051c

0000c0b8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    c0b8:	b580      	push	{r7, lr}
    c0ba:	b084      	sub	sp, #16
    c0bc:	af00      	add	r7, sp, #0
    c0be:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    c0c0:	4b0a      	ldr	r3, [pc, #40]	; (c0ec <_sbrk+0x34>)
    c0c2:	681b      	ldr	r3, [r3, #0]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d102      	bne.n	c0ce <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    c0c8:	4b08      	ldr	r3, [pc, #32]	; (c0ec <_sbrk+0x34>)
    c0ca:	4a09      	ldr	r2, [pc, #36]	; (c0f0 <_sbrk+0x38>)
    c0cc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    c0ce:	4b07      	ldr	r3, [pc, #28]	; (c0ec <_sbrk+0x34>)
    c0d0:	681b      	ldr	r3, [r3, #0]
    c0d2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    c0d4:	4b05      	ldr	r3, [pc, #20]	; (c0ec <_sbrk+0x34>)
    c0d6:	681a      	ldr	r2, [r3, #0]
    c0d8:	687b      	ldr	r3, [r7, #4]
    c0da:	18d2      	adds	r2, r2, r3
    c0dc:	4b03      	ldr	r3, [pc, #12]	; (c0ec <_sbrk+0x34>)
    c0de:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    c0e0:	68fb      	ldr	r3, [r7, #12]
}
    c0e2:	0018      	movs	r0, r3
    c0e4:	46bd      	mov	sp, r7
    c0e6:	b004      	add	sp, #16
    c0e8:	bd80      	pop	{r7, pc}
    c0ea:	46c0      	nop			; (mov r8, r8)
    c0ec:	200002e4 	.word	0x200002e4
    c0f0:	20002a88 	.word	0x20002a88

0000c0f4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    c0f4:	b580      	push	{r7, lr}
    c0f6:	b082      	sub	sp, #8
    c0f8:	af00      	add	r7, sp, #0
    c0fa:	6078      	str	r0, [r7, #4]
	return -1;
    c0fc:	2301      	movs	r3, #1
    c0fe:	425b      	negs	r3, r3
}
    c100:	0018      	movs	r0, r3
    c102:	46bd      	mov	sp, r7
    c104:	b002      	add	sp, #8
    c106:	bd80      	pop	{r7, pc}

0000c108 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    c108:	b580      	push	{r7, lr}
    c10a:	b082      	sub	sp, #8
    c10c:	af00      	add	r7, sp, #0
    c10e:	6078      	str	r0, [r7, #4]
    c110:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    c112:	683b      	ldr	r3, [r7, #0]
    c114:	2280      	movs	r2, #128	; 0x80
    c116:	0192      	lsls	r2, r2, #6
    c118:	605a      	str	r2, [r3, #4]

	return 0;
    c11a:	2300      	movs	r3, #0
}
    c11c:	0018      	movs	r0, r3
    c11e:	46bd      	mov	sp, r7
    c120:	b002      	add	sp, #8
    c122:	bd80      	pop	{r7, pc}

0000c124 <_isatty>:

extern int _isatty(int file)
{
    c124:	b580      	push	{r7, lr}
    c126:	b082      	sub	sp, #8
    c128:	af00      	add	r7, sp, #0
    c12a:	6078      	str	r0, [r7, #4]
	return 1;
    c12c:	2301      	movs	r3, #1
}
    c12e:	0018      	movs	r0, r3
    c130:	46bd      	mov	sp, r7
    c132:	b002      	add	sp, #8
    c134:	bd80      	pop	{r7, pc}

0000c136 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    c136:	b580      	push	{r7, lr}
    c138:	b084      	sub	sp, #16
    c13a:	af00      	add	r7, sp, #0
    c13c:	60f8      	str	r0, [r7, #12]
    c13e:	60b9      	str	r1, [r7, #8]
    c140:	607a      	str	r2, [r7, #4]
	return 0;
    c142:	2300      	movs	r3, #0
}
    c144:	0018      	movs	r0, r3
    c146:	46bd      	mov	sp, r7
    c148:	b004      	add	sp, #16
    c14a:	bd80      	pop	{r7, pc}

0000c14c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    c14c:	b580      	push	{r7, lr}
    c14e:	b084      	sub	sp, #16
    c150:	af00      	add	r7, sp, #0
    c152:	0002      	movs	r2, r0
    c154:	1dfb      	adds	r3, r7, #7
    c156:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c158:	230f      	movs	r3, #15
    c15a:	18fb      	adds	r3, r7, r3
    c15c:	1dfa      	adds	r2, r7, #7
    c15e:	7812      	ldrb	r2, [r2, #0]
    c160:	09d2      	lsrs	r2, r2, #7
    c162:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c164:	230e      	movs	r3, #14
    c166:	18fb      	adds	r3, r7, r3
    c168:	1dfa      	adds	r2, r7, #7
    c16a:	7812      	ldrb	r2, [r2, #0]
    c16c:	0952      	lsrs	r2, r2, #5
    c16e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c170:	4b0d      	ldr	r3, [pc, #52]	; (c1a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c172:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    c174:	230f      	movs	r3, #15
    c176:	18fb      	adds	r3, r7, r3
    c178:	781b      	ldrb	r3, [r3, #0]
    c17a:	2b00      	cmp	r3, #0
    c17c:	d10f      	bne.n	c19e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c17e:	230f      	movs	r3, #15
    c180:	18fb      	adds	r3, r7, r3
    c182:	781b      	ldrb	r3, [r3, #0]
    c184:	009b      	lsls	r3, r3, #2
    c186:	2210      	movs	r2, #16
    c188:	4694      	mov	ip, r2
    c18a:	44bc      	add	ip, r7
    c18c:	4463      	add	r3, ip
    c18e:	3b08      	subs	r3, #8
    c190:	681a      	ldr	r2, [r3, #0]
    c192:	230e      	movs	r3, #14
    c194:	18fb      	adds	r3, r7, r3
    c196:	781b      	ldrb	r3, [r3, #0]
    c198:	01db      	lsls	r3, r3, #7
    c19a:	18d3      	adds	r3, r2, r3
    c19c:	e000      	b.n	c1a0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    c19e:	2300      	movs	r3, #0
	}
}
    c1a0:	0018      	movs	r0, r3
    c1a2:	46bd      	mov	sp, r7
    c1a4:	b004      	add	sp, #16
    c1a6:	bd80      	pop	{r7, pc}
    c1a8:	41004400 	.word	0x41004400

0000c1ac <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    c1ac:	b580      	push	{r7, lr}
    c1ae:	b084      	sub	sp, #16
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    c1b4:	687b      	ldr	r3, [r7, #4]
    c1b6:	681b      	ldr	r3, [r3, #0]
    c1b8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    c1ba:	68fb      	ldr	r3, [r7, #12]
    c1bc:	7e5b      	ldrb	r3, [r3, #25]
    c1be:	b2db      	uxtb	r3, r3
    c1c0:	b25b      	sxtb	r3, r3
    c1c2:	2b00      	cmp	r3, #0
    c1c4:	da01      	bge.n	c1ca <adc_is_syncing+0x1e>
		return true;
    c1c6:	2301      	movs	r3, #1
    c1c8:	e000      	b.n	c1cc <adc_is_syncing+0x20>
	}

	return false;
    c1ca:	2300      	movs	r3, #0
}
    c1cc:	0018      	movs	r0, r3
    c1ce:	46bd      	mov	sp, r7
    c1d0:	b004      	add	sp, #16
    c1d2:	bd80      	pop	{r7, pc}

0000c1d4 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    c1d4:	b580      	push	{r7, lr}
    c1d6:	b086      	sub	sp, #24
    c1d8:	af00      	add	r7, sp, #0
    c1da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c1dc:	687b      	ldr	r3, [r7, #4]
    c1de:	681b      	ldr	r3, [r3, #0]
    c1e0:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    c1e2:	693b      	ldr	r3, [r7, #16]
    c1e4:	7e1b      	ldrb	r3, [r3, #24]
    c1e6:	b2db      	uxtb	r3, r3
    c1e8:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    c1ea:	2300      	movs	r3, #0
    c1ec:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    c1ee:	68fb      	ldr	r3, [r7, #12]
    c1f0:	2201      	movs	r2, #1
    c1f2:	4013      	ands	r3, r2
    c1f4:	d003      	beq.n	c1fe <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    c1f6:	697b      	ldr	r3, [r7, #20]
    c1f8:	2201      	movs	r2, #1
    c1fa:	4313      	orrs	r3, r2
    c1fc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    c1fe:	68fb      	ldr	r3, [r7, #12]
    c200:	2204      	movs	r2, #4
    c202:	4013      	ands	r3, r2
    c204:	d003      	beq.n	c20e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    c206:	697b      	ldr	r3, [r7, #20]
    c208:	2202      	movs	r2, #2
    c20a:	4313      	orrs	r3, r2
    c20c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    c20e:	68fb      	ldr	r3, [r7, #12]
    c210:	2202      	movs	r2, #2
    c212:	4013      	ands	r3, r2
    c214:	d003      	beq.n	c21e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    c216:	697b      	ldr	r3, [r7, #20]
    c218:	2204      	movs	r2, #4
    c21a:	4313      	orrs	r3, r2
    c21c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    c21e:	697b      	ldr	r3, [r7, #20]
}
    c220:	0018      	movs	r0, r3
    c222:	46bd      	mov	sp, r7
    c224:	b006      	add	sp, #24
    c226:	bd80      	pop	{r7, pc}

0000c228 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    c228:	b580      	push	{r7, lr}
    c22a:	b084      	sub	sp, #16
    c22c:	af00      	add	r7, sp, #0
    c22e:	6078      	str	r0, [r7, #4]
    c230:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c232:	687b      	ldr	r3, [r7, #4]
    c234:	681b      	ldr	r3, [r3, #0]
    c236:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    c238:	2300      	movs	r3, #0
    c23a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    c23c:	683b      	ldr	r3, [r7, #0]
    c23e:	2201      	movs	r2, #1
    c240:	4013      	ands	r3, r2
    c242:	d003      	beq.n	c24c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    c244:	68fb      	ldr	r3, [r7, #12]
    c246:	2201      	movs	r2, #1
    c248:	4313      	orrs	r3, r2
    c24a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    c24c:	683b      	ldr	r3, [r7, #0]
    c24e:	2202      	movs	r2, #2
    c250:	4013      	ands	r3, r2
    c252:	d003      	beq.n	c25c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    c254:	68fb      	ldr	r3, [r7, #12]
    c256:	2204      	movs	r2, #4
    c258:	4313      	orrs	r3, r2
    c25a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    c25c:	683b      	ldr	r3, [r7, #0]
    c25e:	2204      	movs	r2, #4
    c260:	4013      	ands	r3, r2
    c262:	d003      	beq.n	c26c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    c264:	68fb      	ldr	r3, [r7, #12]
    c266:	2202      	movs	r2, #2
    c268:	4313      	orrs	r3, r2
    c26a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    c26c:	68fb      	ldr	r3, [r7, #12]
    c26e:	b2da      	uxtb	r2, r3
    c270:	68bb      	ldr	r3, [r7, #8]
    c272:	761a      	strb	r2, [r3, #24]
}
    c274:	46c0      	nop			; (mov r8, r8)
    c276:	46bd      	mov	sp, r7
    c278:	b004      	add	sp, #16
    c27a:	bd80      	pop	{r7, pc}

0000c27c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    c27c:	b580      	push	{r7, lr}
    c27e:	b084      	sub	sp, #16
    c280:	af00      	add	r7, sp, #0
    c282:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c284:	687b      	ldr	r3, [r7, #4]
    c286:	681b      	ldr	r3, [r3, #0]
    c288:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    c28a:	46c0      	nop			; (mov r8, r8)
    c28c:	687b      	ldr	r3, [r7, #4]
    c28e:	0018      	movs	r0, r3
    c290:	4b0b      	ldr	r3, [pc, #44]	; (c2c0 <adc_enable+0x44>)
    c292:	4798      	blx	r3
    c294:	1e03      	subs	r3, r0, #0
    c296:	d1f9      	bne.n	c28c <adc_enable+0x10>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    c298:	68fb      	ldr	r3, [r7, #12]
    c29a:	781b      	ldrb	r3, [r3, #0]
    c29c:	b2db      	uxtb	r3, r3
    c29e:	2202      	movs	r2, #2
    c2a0:	4313      	orrs	r3, r2
    c2a2:	b2da      	uxtb	r2, r3
    c2a4:	68fb      	ldr	r3, [r7, #12]
    c2a6:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    c2a8:	46c0      	nop			; (mov r8, r8)
    c2aa:	687b      	ldr	r3, [r7, #4]
    c2ac:	0018      	movs	r0, r3
    c2ae:	4b04      	ldr	r3, [pc, #16]	; (c2c0 <adc_enable+0x44>)
    c2b0:	4798      	blx	r3
    c2b2:	1e03      	subs	r3, r0, #0
    c2b4:	d1f9      	bne.n	c2aa <adc_enable+0x2e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    c2b6:	2300      	movs	r3, #0
}
    c2b8:	0018      	movs	r0, r3
    c2ba:	46bd      	mov	sp, r7
    c2bc:	b004      	add	sp, #16
    c2be:	bd80      	pop	{r7, pc}
    c2c0:	0000c1ad 	.word	0x0000c1ad

0000c2c4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b084      	sub	sp, #16
    c2c8:	af00      	add	r7, sp, #0
    c2ca:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c2cc:	687b      	ldr	r3, [r7, #4]
    c2ce:	681b      	ldr	r3, [r3, #0]
    c2d0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    c2d2:	46c0      	nop			; (mov r8, r8)
    c2d4:	687b      	ldr	r3, [r7, #4]
    c2d6:	0018      	movs	r0, r3
    c2d8:	4b0b      	ldr	r3, [pc, #44]	; (c308 <adc_start_conversion+0x44>)
    c2da:	4798      	blx	r3
    c2dc:	1e03      	subs	r3, r0, #0
    c2de:	d1f9      	bne.n	c2d4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    c2e0:	68fb      	ldr	r3, [r7, #12]
    c2e2:	7b1b      	ldrb	r3, [r3, #12]
    c2e4:	b2db      	uxtb	r3, r3
    c2e6:	2202      	movs	r2, #2
    c2e8:	4313      	orrs	r3, r2
    c2ea:	b2da      	uxtb	r2, r3
    c2ec:	68fb      	ldr	r3, [r7, #12]
    c2ee:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    c2f0:	46c0      	nop			; (mov r8, r8)
    c2f2:	687b      	ldr	r3, [r7, #4]
    c2f4:	0018      	movs	r0, r3
    c2f6:	4b04      	ldr	r3, [pc, #16]	; (c308 <adc_start_conversion+0x44>)
    c2f8:	4798      	blx	r3
    c2fa:	1e03      	subs	r3, r0, #0
    c2fc:	d1f9      	bne.n	c2f2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    c2fe:	46c0      	nop			; (mov r8, r8)
    c300:	46bd      	mov	sp, r7
    c302:	b004      	add	sp, #16
    c304:	bd80      	pop	{r7, pc}
    c306:	46c0      	nop			; (mov r8, r8)
    c308:	0000c1ad 	.word	0x0000c1ad

0000c30c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    c30c:	b580      	push	{r7, lr}
    c30e:	b084      	sub	sp, #16
    c310:	af00      	add	r7, sp, #0
    c312:	6078      	str	r0, [r7, #4]
    c314:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    c316:	687b      	ldr	r3, [r7, #4]
    c318:	0018      	movs	r0, r3
    c31a:	4b18      	ldr	r3, [pc, #96]	; (c37c <adc_read+0x70>)
    c31c:	4798      	blx	r3
    c31e:	0002      	movs	r2, r0
    c320:	2301      	movs	r3, #1
    c322:	4013      	ands	r3, r2
    c324:	d101      	bne.n	c32a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    c326:	2305      	movs	r3, #5
    c328:	e023      	b.n	c372 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    c32a:	687b      	ldr	r3, [r7, #4]
    c32c:	681b      	ldr	r3, [r3, #0]
    c32e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    c330:	46c0      	nop			; (mov r8, r8)
    c332:	687b      	ldr	r3, [r7, #4]
    c334:	0018      	movs	r0, r3
    c336:	4b12      	ldr	r3, [pc, #72]	; (c380 <adc_read+0x74>)
    c338:	4798      	blx	r3
    c33a:	1e03      	subs	r3, r0, #0
    c33c:	d1f9      	bne.n	c332 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    c33e:	68fb      	ldr	r3, [r7, #12]
    c340:	8b5b      	ldrh	r3, [r3, #26]
    c342:	b29a      	uxth	r2, r3
    c344:	683b      	ldr	r3, [r7, #0]
    c346:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    c348:	687b      	ldr	r3, [r7, #4]
    c34a:	2101      	movs	r1, #1
    c34c:	0018      	movs	r0, r3
    c34e:	4b0d      	ldr	r3, [pc, #52]	; (c384 <adc_read+0x78>)
    c350:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    c352:	687b      	ldr	r3, [r7, #4]
    c354:	0018      	movs	r0, r3
    c356:	4b09      	ldr	r3, [pc, #36]	; (c37c <adc_read+0x70>)
    c358:	4798      	blx	r3
    c35a:	0002      	movs	r2, r0
    c35c:	2304      	movs	r3, #4
    c35e:	4013      	ands	r3, r2
    c360:	d006      	beq.n	c370 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    c362:	687b      	ldr	r3, [r7, #4]
    c364:	2104      	movs	r1, #4
    c366:	0018      	movs	r0, r3
    c368:	4b06      	ldr	r3, [pc, #24]	; (c384 <adc_read+0x78>)
    c36a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    c36c:	231e      	movs	r3, #30
    c36e:	e000      	b.n	c372 <adc_read+0x66>
	}

	return STATUS_OK;
    c370:	2300      	movs	r3, #0
}
    c372:	0018      	movs	r0, r3
    c374:	46bd      	mov	sp, r7
    c376:	b004      	add	sp, #16
    c378:	bd80      	pop	{r7, pc}
    c37a:	46c0      	nop			; (mov r8, r8)
    c37c:	0000c1d5 	.word	0x0000c1d5
    c380:	0000c1ad 	.word	0x0000c1ad
    c384:	0000c229 	.word	0x0000c229

0000c388 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    c388:	b580      	push	{r7, lr}
    c38a:	b082      	sub	sp, #8
    c38c:	af00      	add	r7, sp, #0
    c38e:	0002      	movs	r2, r0
    c390:	1dfb      	adds	r3, r7, #7
    c392:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c394:	1dfb      	adds	r3, r7, #7
    c396:	781b      	ldrb	r3, [r3, #0]
    c398:	0018      	movs	r0, r3
    c39a:	4b03      	ldr	r3, [pc, #12]	; (c3a8 <port_get_group_from_gpio_pin+0x20>)
    c39c:	4798      	blx	r3
    c39e:	0003      	movs	r3, r0
}
    c3a0:	0018      	movs	r0, r3
    c3a2:	46bd      	mov	sp, r7
    c3a4:	b002      	add	sp, #8
    c3a6:	bd80      	pop	{r7, pc}
    c3a8:	0000c14d 	.word	0x0000c14d

0000c3ac <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    c3ac:	b580      	push	{r7, lr}
    c3ae:	b082      	sub	sp, #8
    c3b0:	af00      	add	r7, sp, #0
    c3b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    c3b4:	687b      	ldr	r3, [r7, #4]
    c3b6:	2200      	movs	r2, #0
    c3b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c3ba:	687b      	ldr	r3, [r7, #4]
    c3bc:	2201      	movs	r2, #1
    c3be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    c3c0:	687b      	ldr	r3, [r7, #4]
    c3c2:	2200      	movs	r2, #0
    c3c4:	709a      	strb	r2, [r3, #2]
}
    c3c6:	46c0      	nop			; (mov r8, r8)
    c3c8:	46bd      	mov	sp, r7
    c3ca:	b002      	add	sp, #8
    c3cc:	bd80      	pop	{r7, pc}
	...

0000c3d0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    c3d0:	b580      	push	{r7, lr}
    c3d2:	b084      	sub	sp, #16
    c3d4:	af00      	add	r7, sp, #0
    c3d6:	0002      	movs	r2, r0
    c3d8:	1dfb      	adds	r3, r7, #7
    c3da:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c3dc:	1dfb      	adds	r3, r7, #7
    c3de:	781b      	ldrb	r3, [r3, #0]
    c3e0:	0018      	movs	r0, r3
    c3e2:	4b0b      	ldr	r3, [pc, #44]	; (c410 <port_pin_get_input_level+0x40>)
    c3e4:	4798      	blx	r3
    c3e6:	0003      	movs	r3, r0
    c3e8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c3ea:	1dfb      	adds	r3, r7, #7
    c3ec:	781b      	ldrb	r3, [r3, #0]
    c3ee:	221f      	movs	r2, #31
    c3f0:	4013      	ands	r3, r2
    c3f2:	2201      	movs	r2, #1
    c3f4:	409a      	lsls	r2, r3
    c3f6:	0013      	movs	r3, r2
    c3f8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    c3fa:	68fb      	ldr	r3, [r7, #12]
    c3fc:	6a1b      	ldr	r3, [r3, #32]
    c3fe:	68ba      	ldr	r2, [r7, #8]
    c400:	4013      	ands	r3, r2
    c402:	1e5a      	subs	r2, r3, #1
    c404:	4193      	sbcs	r3, r2
    c406:	b2db      	uxtb	r3, r3
}
    c408:	0018      	movs	r0, r3
    c40a:	46bd      	mov	sp, r7
    c40c:	b004      	add	sp, #16
    c40e:	bd80      	pop	{r7, pc}
    c410:	0000c389 	.word	0x0000c389

0000c414 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    c414:	b580      	push	{r7, lr}
    c416:	b084      	sub	sp, #16
    c418:	af00      	add	r7, sp, #0
    c41a:	0002      	movs	r2, r0
    c41c:	1dfb      	adds	r3, r7, #7
    c41e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c420:	1dfb      	adds	r3, r7, #7
    c422:	781b      	ldrb	r3, [r3, #0]
    c424:	0018      	movs	r0, r3
    c426:	4b0b      	ldr	r3, [pc, #44]	; (c454 <port_pin_get_output_level+0x40>)
    c428:	4798      	blx	r3
    c42a:	0003      	movs	r3, r0
    c42c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c42e:	1dfb      	adds	r3, r7, #7
    c430:	781b      	ldrb	r3, [r3, #0]
    c432:	221f      	movs	r2, #31
    c434:	4013      	ands	r3, r2
    c436:	2201      	movs	r2, #1
    c438:	409a      	lsls	r2, r3
    c43a:	0013      	movs	r3, r2
    c43c:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    c43e:	68fb      	ldr	r3, [r7, #12]
    c440:	691b      	ldr	r3, [r3, #16]
    c442:	68ba      	ldr	r2, [r7, #8]
    c444:	4013      	ands	r3, r2
    c446:	1e5a      	subs	r2, r3, #1
    c448:	4193      	sbcs	r3, r2
    c44a:	b2db      	uxtb	r3, r3
}
    c44c:	0018      	movs	r0, r3
    c44e:	46bd      	mov	sp, r7
    c450:	b004      	add	sp, #16
    c452:	bd80      	pop	{r7, pc}
    c454:	0000c389 	.word	0x0000c389

0000c458 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    c458:	b580      	push	{r7, lr}
    c45a:	b084      	sub	sp, #16
    c45c:	af00      	add	r7, sp, #0
    c45e:	0002      	movs	r2, r0
    c460:	1dfb      	adds	r3, r7, #7
    c462:	701a      	strb	r2, [r3, #0]
    c464:	1dbb      	adds	r3, r7, #6
    c466:	1c0a      	adds	r2, r1, #0
    c468:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c46a:	1dfb      	adds	r3, r7, #7
    c46c:	781b      	ldrb	r3, [r3, #0]
    c46e:	0018      	movs	r0, r3
    c470:	4b0d      	ldr	r3, [pc, #52]	; (c4a8 <port_pin_set_output_level+0x50>)
    c472:	4798      	blx	r3
    c474:	0003      	movs	r3, r0
    c476:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c478:	1dfb      	adds	r3, r7, #7
    c47a:	781b      	ldrb	r3, [r3, #0]
    c47c:	221f      	movs	r2, #31
    c47e:	4013      	ands	r3, r2
    c480:	2201      	movs	r2, #1
    c482:	409a      	lsls	r2, r3
    c484:	0013      	movs	r3, r2
    c486:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    c488:	1dbb      	adds	r3, r7, #6
    c48a:	781b      	ldrb	r3, [r3, #0]
    c48c:	2b00      	cmp	r3, #0
    c48e:	d003      	beq.n	c498 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    c490:	68fb      	ldr	r3, [r7, #12]
    c492:	68ba      	ldr	r2, [r7, #8]
    c494:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    c496:	e002      	b.n	c49e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    c498:	68fb      	ldr	r3, [r7, #12]
    c49a:	68ba      	ldr	r2, [r7, #8]
    c49c:	615a      	str	r2, [r3, #20]
}
    c49e:	46c0      	nop			; (mov r8, r8)
    c4a0:	46bd      	mov	sp, r7
    c4a2:	b004      	add	sp, #16
    c4a4:	bd80      	pop	{r7, pc}
    c4a6:	46c0      	nop			; (mov r8, r8)
    c4a8:	0000c389 	.word	0x0000c389

0000c4ac <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    c4ac:	b580      	push	{r7, lr}
    c4ae:	b084      	sub	sp, #16
    c4b0:	af00      	add	r7, sp, #0
    c4b2:	0002      	movs	r2, r0
    c4b4:	1dfb      	adds	r3, r7, #7
    c4b6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c4b8:	1dfb      	adds	r3, r7, #7
    c4ba:	781b      	ldrb	r3, [r3, #0]
    c4bc:	0018      	movs	r0, r3
    c4be:	4b09      	ldr	r3, [pc, #36]	; (c4e4 <port_pin_toggle_output_level+0x38>)
    c4c0:	4798      	blx	r3
    c4c2:	0003      	movs	r3, r0
    c4c4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c4c6:	1dfb      	adds	r3, r7, #7
    c4c8:	781b      	ldrb	r3, [r3, #0]
    c4ca:	221f      	movs	r2, #31
    c4cc:	4013      	ands	r3, r2
    c4ce:	2201      	movs	r2, #1
    c4d0:	409a      	lsls	r2, r3
    c4d2:	0013      	movs	r3, r2
    c4d4:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    c4d6:	68fb      	ldr	r3, [r7, #12]
    c4d8:	68ba      	ldr	r2, [r7, #8]
    c4da:	61da      	str	r2, [r3, #28]
}
    c4dc:	46c0      	nop			; (mov r8, r8)
    c4de:	46bd      	mov	sp, r7
    c4e0:	b004      	add	sp, #16
    c4e2:	bd80      	pop	{r7, pc}
    c4e4:	0000c389 	.word	0x0000c389

0000c4e8 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    c4e8:	b580      	push	{r7, lr}
    c4ea:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    c4ec:	4b04      	ldr	r3, [pc, #16]	; (c500 <system_interrupt_enable_global+0x18>)
    c4ee:	2201      	movs	r2, #1
    c4f0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    c4f2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    c4f6:	b662      	cpsie	i
}
    c4f8:	46c0      	nop			; (mov r8, r8)
    c4fa:	46bd      	mov	sp, r7
    c4fc:	bd80      	pop	{r7, pc}
    c4fe:	46c0      	nop			; (mov r8, r8)
    c500:	20000014 	.word	0x20000014

0000c504 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    c504:	b580      	push	{r7, lr}
    c506:	b082      	sub	sp, #8
    c508:	af00      	add	r7, sp, #0
    c50a:	0002      	movs	r2, r0
    c50c:	1dfb      	adds	r3, r7, #7
    c50e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c510:	4b06      	ldr	r3, [pc, #24]	; (c52c <system_interrupt_enable+0x28>)
    c512:	1dfa      	adds	r2, r7, #7
    c514:	7812      	ldrb	r2, [r2, #0]
    c516:	0011      	movs	r1, r2
    c518:	221f      	movs	r2, #31
    c51a:	400a      	ands	r2, r1
    c51c:	2101      	movs	r1, #1
    c51e:	4091      	lsls	r1, r2
    c520:	000a      	movs	r2, r1
    c522:	601a      	str	r2, [r3, #0]
}
    c524:	46c0      	nop			; (mov r8, r8)
    c526:	46bd      	mov	sp, r7
    c528:	b002      	add	sp, #8
    c52a:	bd80      	pop	{r7, pc}
    c52c:	e000e100 	.word	0xe000e100

0000c530 <spi_master_vec_get_config_defaults>:
 *
 * \param[out] config Configuration struct to initialize.
 */
static inline void spi_master_vec_get_config_defaults(
		struct spi_master_vec_config *const config)
{
    c530:	b580      	push	{r7, lr}
    c532:	b082      	sub	sp, #8
    c534:	af00      	add	r7, sp, #0
    c536:	6078      	str	r0, [r7, #4]
	config->baudrate = 100000;
    c538:	687b      	ldr	r3, [r7, #4]
    c53a:	4a11      	ldr	r2, [pc, #68]	; (c580 <spi_master_vec_get_config_defaults+0x50>)
    c53c:	601a      	str	r2, [r3, #0]
	config->gclk_generator = GCLK_GENERATOR_0;
    c53e:	687b      	ldr	r3, [r7, #4]
    c540:	2200      	movs	r2, #0
    c542:	711a      	strb	r2, [r3, #4]
	config->run_in_standby = false;
    c544:	687b      	ldr	r3, [r7, #4]
    c546:	2200      	movs	r2, #0
    c548:	715a      	strb	r2, [r3, #5]
	config->mux_setting = SPI_SIGNAL_MUX_SETTING_D;
    c54a:	687b      	ldr	r3, [r7, #4]
    c54c:	22c0      	movs	r2, #192	; 0xc0
    c54e:	0392      	lsls	r2, r2, #14
    c550:	609a      	str	r2, [r3, #8]
	config->transfer_mode = SPI_TRANSFER_MODE_0;
    c552:	687b      	ldr	r3, [r7, #4]
    c554:	2200      	movs	r2, #0
    c556:	60da      	str	r2, [r3, #12]
	config->data_order = SPI_DATA_ORDER_MSB;
    c558:	687b      	ldr	r3, [r7, #4]
    c55a:	2200      	movs	r2, #0
    c55c:	611a      	str	r2, [r3, #16]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    c55e:	687b      	ldr	r3, [r7, #4]
    c560:	2200      	movs	r2, #0
    c562:	615a      	str	r2, [r3, #20]
	config->pinmux_pad1 = PINMUX_DEFAULT;
    c564:	687b      	ldr	r3, [r7, #4]
    c566:	2200      	movs	r2, #0
    c568:	619a      	str	r2, [r3, #24]
	config->pinmux_pad2 = PINMUX_DEFAULT;
    c56a:	687b      	ldr	r3, [r7, #4]
    c56c:	2200      	movs	r2, #0
    c56e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad3 = PINMUX_DEFAULT;
    c570:	687b      	ldr	r3, [r7, #4]
    c572:	2200      	movs	r2, #0
    c574:	621a      	str	r2, [r3, #32]
}
    c576:	46c0      	nop			; (mov r8, r8)
    c578:	46bd      	mov	sp, r7
    c57a:	b002      	add	sp, #8
    c57c:	bd80      	pop	{r7, pc}
    c57e:	46c0      	nop			; (mov r8, r8)
    c580:	000186a0 	.word	0x000186a0

0000c584 <at25dfx_spi_master_vec_get_config_defaults>:
 *
 * \param[out] config Address of config struct to initialize.
 */
static inline void at25dfx_spi_master_vec_get_config_defaults(
		struct spi_master_vec_config *const config)
{
    c584:	b580      	push	{r7, lr}
    c586:	b082      	sub	sp, #8
    c588:	af00      	add	r7, sp, #0
    c58a:	6078      	str	r0, [r7, #4]
	spi_master_vec_get_config_defaults(config);
    c58c:	687b      	ldr	r3, [r7, #4]
    c58e:	0018      	movs	r0, r3
    c590:	4b02      	ldr	r3, [pc, #8]	; (c59c <at25dfx_spi_master_vec_get_config_defaults+0x18>)
    c592:	4798      	blx	r3
}
    c594:	46c0      	nop			; (mov r8, r8)
    c596:	46bd      	mov	sp, r7
    c598:	b002      	add	sp, #8
    c59a:	bd80      	pop	{r7, pc}
    c59c:	0000c531 	.word	0x0000c531

0000c5a0 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    c5a0:	b580      	push	{r7, lr}
    c5a2:	b086      	sub	sp, #24
    c5a4:	af00      	add	r7, sp, #0
    c5a6:	60f8      	str	r0, [r7, #12]
    c5a8:	60b9      	str	r1, [r7, #8]
    c5aa:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    c5ac:	687b      	ldr	r3, [r7, #4]
    c5ae:	781a      	ldrb	r2, [r3, #0]
    c5b0:	68fb      	ldr	r3, [r7, #12]
    c5b2:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    c5b4:	687b      	ldr	r3, [r7, #4]
    c5b6:	785a      	ldrb	r2, [r3, #1]
    c5b8:	68fb      	ldr	r3, [r7, #12]
    c5ba:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    c5bc:	68fb      	ldr	r3, [r7, #12]
    c5be:	68ba      	ldr	r2, [r7, #8]
    c5c0:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    c5c2:	2314      	movs	r3, #20
    c5c4:	18fb      	adds	r3, r7, r3
    c5c6:	0018      	movs	r0, r3
    c5c8:	4b0c      	ldr	r3, [pc, #48]	; (c5fc <at25dfx_chip_init+0x5c>)
    c5ca:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    c5cc:	2314      	movs	r3, #20
    c5ce:	18fb      	adds	r3, r7, r3
    c5d0:	2201      	movs	r2, #1
    c5d2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    c5d4:	68fb      	ldr	r3, [r7, #12]
    c5d6:	795b      	ldrb	r3, [r3, #5]
    c5d8:	2214      	movs	r2, #20
    c5da:	18ba      	adds	r2, r7, r2
    c5dc:	0011      	movs	r1, r2
    c5de:	0018      	movs	r0, r3
    c5e0:	4b07      	ldr	r3, [pc, #28]	; (c600 <at25dfx_chip_init+0x60>)
    c5e2:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    c5e4:	68fb      	ldr	r3, [r7, #12]
    c5e6:	795b      	ldrb	r3, [r3, #5]
    c5e8:	2101      	movs	r1, #1
    c5ea:	0018      	movs	r0, r3
    c5ec:	4b05      	ldr	r3, [pc, #20]	; (c604 <at25dfx_chip_init+0x64>)
    c5ee:	4798      	blx	r3

	return STATUS_OK;
    c5f0:	2300      	movs	r3, #0
}
    c5f2:	0018      	movs	r0, r3
    c5f4:	46bd      	mov	sp, r7
    c5f6:	b006      	add	sp, #24
    c5f8:	bd80      	pop	{r7, pc}
    c5fa:	46c0      	nop			; (mov r8, r8)
    c5fc:	0000c3ad 	.word	0x0000c3ad
    c600:	00008735 	.word	0x00008735
    c604:	0000c459 	.word	0x0000c459

0000c608 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    c608:	b580      	push	{r7, lr}
    c60a:	b082      	sub	sp, #8
    c60c:	af00      	add	r7, sp, #0
    c60e:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    c610:	687b      	ldr	r3, [r7, #4]
    c612:	2200      	movs	r2, #0
    c614:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    c616:	687b      	ldr	r3, [r7, #4]
    c618:	2201      	movs	r2, #1
    c61a:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    c61c:	4b08      	ldr	r3, [pc, #32]	; (c640 <nvm_get_config_defaults+0x38>)
    c61e:	685b      	ldr	r3, [r3, #4]
    c620:	06db      	lsls	r3, r3, #27
    c622:	0f1b      	lsrs	r3, r3, #28
    c624:	b2db      	uxtb	r3, r3
    c626:	001a      	movs	r2, r3
    c628:	687b      	ldr	r3, [r7, #4]
    c62a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    c62c:	687b      	ldr	r3, [r7, #4]
    c62e:	2200      	movs	r2, #0
    c630:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    c632:	687b      	ldr	r3, [r7, #4]
    c634:	2200      	movs	r2, #0
    c636:	711a      	strb	r2, [r3, #4]
}
    c638:	46c0      	nop			; (mov r8, r8)
    c63a:	46bd      	mov	sp, r7
    c63c:	b002      	add	sp, #8
    c63e:	bd80      	pop	{r7, pc}
    c640:	41004000 	.word	0x41004000

0000c644 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    c644:	b580      	push	{r7, lr}
    c646:	b084      	sub	sp, #16
    c648:	af00      	add	r7, sp, #0
    c64a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    c64c:	687b      	ldr	r3, [r7, #4]
    c64e:	681b      	ldr	r3, [r3, #0]
    c650:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    c652:	68fb      	ldr	r3, [r7, #12]
    c654:	69db      	ldr	r3, [r3, #28]
    c656:	1e5a      	subs	r2, r3, #1
    c658:	4193      	sbcs	r3, r2
    c65a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    c65c:	0018      	movs	r0, r3
    c65e:	46bd      	mov	sp, r7
    c660:	b004      	add	sp, #16
    c662:	bd80      	pop	{r7, pc}

0000c664 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    c664:	b580      	push	{r7, lr}
    c666:	b082      	sub	sp, #8
    c668:	af00      	add	r7, sp, #0
    c66a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    c66c:	46c0      	nop			; (mov r8, r8)
    c66e:	687b      	ldr	r3, [r7, #4]
    c670:	0018      	movs	r0, r3
    c672:	4b04      	ldr	r3, [pc, #16]	; (c684 <_usart_wait_for_sync+0x20>)
    c674:	4798      	blx	r3
    c676:	1e03      	subs	r3, r0, #0
    c678:	d1f9      	bne.n	c66e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    c67a:	46c0      	nop			; (mov r8, r8)
    c67c:	46bd      	mov	sp, r7
    c67e:	b002      	add	sp, #8
    c680:	bd80      	pop	{r7, pc}
    c682:	46c0      	nop			; (mov r8, r8)
    c684:	0000c645 	.word	0x0000c645

0000c688 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    c688:	b580      	push	{r7, lr}
    c68a:	b082      	sub	sp, #8
    c68c:	af00      	add	r7, sp, #0
    c68e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    c690:	687b      	ldr	r3, [r7, #4]
    c692:	2280      	movs	r2, #128	; 0x80
    c694:	05d2      	lsls	r2, r2, #23
    c696:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    c698:	687b      	ldr	r3, [r7, #4]
    c69a:	2200      	movs	r2, #0
    c69c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    c69e:	687b      	ldr	r3, [r7, #4]
    c6a0:	22ff      	movs	r2, #255	; 0xff
    c6a2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    c6a4:	687b      	ldr	r3, [r7, #4]
    c6a6:	2200      	movs	r2, #0
    c6a8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    c6aa:	687b      	ldr	r3, [r7, #4]
    c6ac:	2200      	movs	r2, #0
    c6ae:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    c6b0:	687b      	ldr	r3, [r7, #4]
    c6b2:	2296      	movs	r2, #150	; 0x96
    c6b4:	0192      	lsls	r2, r2, #6
    c6b6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    c6b8:	687b      	ldr	r3, [r7, #4]
    c6ba:	2224      	movs	r2, #36	; 0x24
    c6bc:	2101      	movs	r1, #1
    c6be:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    c6c0:	687b      	ldr	r3, [r7, #4]
    c6c2:	2225      	movs	r2, #37	; 0x25
    c6c4:	2101      	movs	r1, #1
    c6c6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    c6c8:	687b      	ldr	r3, [r7, #4]
    c6ca:	2226      	movs	r2, #38	; 0x26
    c6cc:	2100      	movs	r1, #0
    c6ce:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    c6d0:	687b      	ldr	r3, [r7, #4]
    c6d2:	2227      	movs	r2, #39	; 0x27
    c6d4:	2100      	movs	r1, #0
    c6d6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    c6d8:	687b      	ldr	r3, [r7, #4]
    c6da:	2200      	movs	r2, #0
    c6dc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    c6de:	687b      	ldr	r3, [r7, #4]
    c6e0:	2288      	movs	r2, #136	; 0x88
    c6e2:	0352      	lsls	r2, r2, #13
    c6e4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    c6e6:	687b      	ldr	r3, [r7, #4]
    c6e8:	222c      	movs	r2, #44	; 0x2c
    c6ea:	2100      	movs	r1, #0
    c6ec:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    c6ee:	687b      	ldr	r3, [r7, #4]
    c6f0:	222d      	movs	r2, #45	; 0x2d
    c6f2:	2100      	movs	r1, #0
    c6f4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    c6f6:	687b      	ldr	r3, [r7, #4]
    c6f8:	2200      	movs	r2, #0
    c6fa:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    c6fc:	687b      	ldr	r3, [r7, #4]
    c6fe:	2200      	movs	r2, #0
    c700:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    c702:	687b      	ldr	r3, [r7, #4]
    c704:	2200      	movs	r2, #0
    c706:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    c708:	687b      	ldr	r3, [r7, #4]
    c70a:	2200      	movs	r2, #0
    c70c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    c70e:	687b      	ldr	r3, [r7, #4]
    c710:	2200      	movs	r2, #0
    c712:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    c714:	687b      	ldr	r3, [r7, #4]
    c716:	2200      	movs	r2, #0
    c718:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	2200      	movs	r2, #0
    c71e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    c720:	687b      	ldr	r3, [r7, #4]
    c722:	2200      	movs	r2, #0
    c724:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    c726:	687b      	ldr	r3, [r7, #4]
    c728:	2200      	movs	r2, #0
    c72a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    c72c:	687b      	ldr	r3, [r7, #4]
    c72e:	2200      	movs	r2, #0
    c730:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    c732:	687b      	ldr	r3, [r7, #4]
    c734:	2213      	movs	r2, #19
    c736:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    c738:	687b      	ldr	r3, [r7, #4]
    c73a:	2200      	movs	r2, #0
    c73c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    c73e:	46c0      	nop			; (mov r8, r8)
    c740:	46bd      	mov	sp, r7
    c742:	b002      	add	sp, #8
    c744:	bd80      	pop	{r7, pc}
	...

0000c748 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    c748:	b580      	push	{r7, lr}
    c74a:	b084      	sub	sp, #16
    c74c:	af00      	add	r7, sp, #0
    c74e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c750:	687b      	ldr	r3, [r7, #4]
    c752:	681b      	ldr	r3, [r3, #0]
    c754:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c756:	687b      	ldr	r3, [r7, #4]
    c758:	681b      	ldr	r3, [r3, #0]
    c75a:	0018      	movs	r0, r3
    c75c:	4b09      	ldr	r3, [pc, #36]	; (c784 <usart_enable+0x3c>)
    c75e:	4798      	blx	r3
    c760:	0003      	movs	r3, r0
    c762:	0018      	movs	r0, r3
    c764:	4b08      	ldr	r3, [pc, #32]	; (c788 <usart_enable+0x40>)
    c766:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    c768:	687b      	ldr	r3, [r7, #4]
    c76a:	0018      	movs	r0, r3
    c76c:	4b07      	ldr	r3, [pc, #28]	; (c78c <usart_enable+0x44>)
    c76e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c770:	68fb      	ldr	r3, [r7, #12]
    c772:	681b      	ldr	r3, [r3, #0]
    c774:	2202      	movs	r2, #2
    c776:	431a      	orrs	r2, r3
    c778:	68fb      	ldr	r3, [r7, #12]
    c77a:	601a      	str	r2, [r3, #0]
}
    c77c:	46c0      	nop			; (mov r8, r8)
    c77e:	46bd      	mov	sp, r7
    c780:	b004      	add	sp, #16
    c782:	bd80      	pop	{r7, pc}
    c784:	0000a16d 	.word	0x0000a16d
    c788:	0000c505 	.word	0x0000c505
    c78c:	0000c665 	.word	0x0000c665

0000c790 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    c790:	b580      	push	{r7, lr}
    c792:	b082      	sub	sp, #8
    c794:	af00      	add	r7, sp, #0
    c796:	6078      	str	r0, [r7, #4]
    c798:	000a      	movs	r2, r1
    c79a:	1cfb      	adds	r3, r7, #3
    c79c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    c79e:	687b      	ldr	r3, [r7, #4]
    c7a0:	2231      	movs	r2, #49	; 0x31
    c7a2:	5c9b      	ldrb	r3, [r3, r2]
    c7a4:	b25a      	sxtb	r2, r3
    c7a6:	1cfb      	adds	r3, r7, #3
    c7a8:	781b      	ldrb	r3, [r3, #0]
    c7aa:	2101      	movs	r1, #1
    c7ac:	4099      	lsls	r1, r3
    c7ae:	000b      	movs	r3, r1
    c7b0:	b25b      	sxtb	r3, r3
    c7b2:	4313      	orrs	r3, r2
    c7b4:	b25b      	sxtb	r3, r3
    c7b6:	b2d9      	uxtb	r1, r3
    c7b8:	687b      	ldr	r3, [r7, #4]
    c7ba:	2231      	movs	r2, #49	; 0x31
    c7bc:	5499      	strb	r1, [r3, r2]

}
    c7be:	46c0      	nop			; (mov r8, r8)
    c7c0:	46bd      	mov	sp, r7
    c7c2:	b002      	add	sp, #8
    c7c4:	bd80      	pop	{r7, pc}
	...

0000c7c8 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    c7c8:	b580      	push	{r7, lr}
    c7ca:	b084      	sub	sp, #16
    c7cc:	af00      	add	r7, sp, #0
    c7ce:	60f8      	str	r0, [r7, #12]
    c7d0:	60b9      	str	r1, [r7, #8]
    c7d2:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    c7d4:	687a      	ldr	r2, [r7, #4]
    c7d6:	68b9      	ldr	r1, [r7, #8]
    c7d8:	68fb      	ldr	r3, [r7, #12]
    c7da:	0018      	movs	r0, r3
    c7dc:	4b05      	ldr	r3, [pc, #20]	; (c7f4 <usart_serial_init+0x2c>)
    c7de:	4798      	blx	r3
    c7e0:	1e03      	subs	r3, r0, #0
    c7e2:	d101      	bne.n	c7e8 <usart_serial_init+0x20>
		return true;
    c7e4:	2301      	movs	r3, #1
    c7e6:	e000      	b.n	c7ea <usart_serial_init+0x22>
	}
	else {
		return false;
    c7e8:	2300      	movs	r3, #0
	}
}
    c7ea:	0018      	movs	r0, r3
    c7ec:	46bd      	mov	sp, r7
    c7ee:	b004      	add	sp, #16
    c7f0:	bd80      	pop	{r7, pc}
    c7f2:	46c0      	nop			; (mov r8, r8)
    c7f4:	00009749 	.word	0x00009749

0000c7f8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    c7f8:	b580      	push	{r7, lr}
    c7fa:	b082      	sub	sp, #8
    c7fc:	af00      	add	r7, sp, #0
    c7fe:	6078      	str	r0, [r7, #4]
    c800:	000a      	movs	r2, r1
    c802:	1cfb      	adds	r3, r7, #3
    c804:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    c806:	46c0      	nop			; (mov r8, r8)
    c808:	1cfb      	adds	r3, r7, #3
    c80a:	781b      	ldrb	r3, [r3, #0]
    c80c:	b29a      	uxth	r2, r3
    c80e:	687b      	ldr	r3, [r7, #4]
    c810:	0011      	movs	r1, r2
    c812:	0018      	movs	r0, r3
    c814:	4b04      	ldr	r3, [pc, #16]	; (c828 <usart_serial_putchar+0x30>)
    c816:	4798      	blx	r3
    c818:	1e03      	subs	r3, r0, #0
    c81a:	d1f5      	bne.n	c808 <usart_serial_putchar+0x10>

	return STATUS_OK;
    c81c:	2300      	movs	r3, #0
}
    c81e:	0018      	movs	r0, r3
    c820:	46bd      	mov	sp, r7
    c822:	b002      	add	sp, #8
    c824:	bd80      	pop	{r7, pc}
    c826:	46c0      	nop			; (mov r8, r8)
    c828:	000099bd 	.word	0x000099bd

0000c82c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    c82c:	b580      	push	{r7, lr}
    c82e:	b084      	sub	sp, #16
    c830:	af00      	add	r7, sp, #0
    c832:	6078      	str	r0, [r7, #4]
    c834:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    c836:	230e      	movs	r3, #14
    c838:	18fb      	adds	r3, r7, r3
    c83a:	2200      	movs	r2, #0
    c83c:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    c83e:	46c0      	nop			; (mov r8, r8)
    c840:	230e      	movs	r3, #14
    c842:	18fa      	adds	r2, r7, r3
    c844:	687b      	ldr	r3, [r7, #4]
    c846:	0011      	movs	r1, r2
    c848:	0018      	movs	r0, r3
    c84a:	4b07      	ldr	r3, [pc, #28]	; (c868 <usart_serial_getchar+0x3c>)
    c84c:	4798      	blx	r3
    c84e:	1e03      	subs	r3, r0, #0
    c850:	d1f6      	bne.n	c840 <usart_serial_getchar+0x14>

	*c = temp;
    c852:	230e      	movs	r3, #14
    c854:	18fb      	adds	r3, r7, r3
    c856:	881b      	ldrh	r3, [r3, #0]
    c858:	b2da      	uxtb	r2, r3
    c85a:	683b      	ldr	r3, [r7, #0]
    c85c:	701a      	strb	r2, [r3, #0]
}
    c85e:	46c0      	nop			; (mov r8, r8)
    c860:	46bd      	mov	sp, r7
    c862:	b004      	add	sp, #16
    c864:	bd80      	pop	{r7, pc}
    c866:	46c0      	nop			; (mov r8, r8)
    c868:	00009a21 	.word	0x00009a21

0000c86c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    c86c:	b580      	push	{r7, lr}
    c86e:	b084      	sub	sp, #16
    c870:	af00      	add	r7, sp, #0
    c872:	60f8      	str	r0, [r7, #12]
    c874:	60b9      	str	r1, [r7, #8]
    c876:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    c878:	4b10      	ldr	r3, [pc, #64]	; (c8bc <stdio_serial_init+0x50>)
    c87a:	68fa      	ldr	r2, [r7, #12]
    c87c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    c87e:	4b10      	ldr	r3, [pc, #64]	; (c8c0 <stdio_serial_init+0x54>)
    c880:	4a10      	ldr	r2, [pc, #64]	; (c8c4 <stdio_serial_init+0x58>)
    c882:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    c884:	4b10      	ldr	r3, [pc, #64]	; (c8c8 <stdio_serial_init+0x5c>)
    c886:	4a11      	ldr	r2, [pc, #68]	; (c8cc <stdio_serial_init+0x60>)
    c888:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    c88a:	687a      	ldr	r2, [r7, #4]
    c88c:	68b9      	ldr	r1, [r7, #8]
    c88e:	68fb      	ldr	r3, [r7, #12]
    c890:	0018      	movs	r0, r3
    c892:	4b0f      	ldr	r3, [pc, #60]	; (c8d0 <stdio_serial_init+0x64>)
    c894:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    c896:	4b0f      	ldr	r3, [pc, #60]	; (c8d4 <stdio_serial_init+0x68>)
    c898:	681b      	ldr	r3, [r3, #0]
    c89a:	689b      	ldr	r3, [r3, #8]
    c89c:	2100      	movs	r1, #0
    c89e:	0018      	movs	r0, r3
    c8a0:	4b0d      	ldr	r3, [pc, #52]	; (c8d8 <stdio_serial_init+0x6c>)
    c8a2:	4798      	blx	r3
	setbuf(stdin, NULL);
    c8a4:	4b0b      	ldr	r3, [pc, #44]	; (c8d4 <stdio_serial_init+0x68>)
    c8a6:	681b      	ldr	r3, [r3, #0]
    c8a8:	685b      	ldr	r3, [r3, #4]
    c8aa:	2100      	movs	r1, #0
    c8ac:	0018      	movs	r0, r3
    c8ae:	4b0a      	ldr	r3, [pc, #40]	; (c8d8 <stdio_serial_init+0x6c>)
    c8b0:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    c8b2:	46c0      	nop			; (mov r8, r8)
    c8b4:	46bd      	mov	sp, r7
    c8b6:	b004      	add	sp, #16
    c8b8:	bd80      	pop	{r7, pc}
    c8ba:	46c0      	nop			; (mov r8, r8)
    c8bc:	2000051c 	.word	0x2000051c
    c8c0:	20000518 	.word	0x20000518
    c8c4:	0000c7f9 	.word	0x0000c7f9
    c8c8:	20000514 	.word	0x20000514
    c8cc:	0000c82d 	.word	0x0000c82d
    c8d0:	0000c7c9 	.word	0x0000c7c9
    c8d4:	20000068 	.word	0x20000068
    c8d8:	00012281 	.word	0x00012281

0000c8dc <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    c8dc:	b580      	push	{r7, lr}
    c8de:	b084      	sub	sp, #16
    c8e0:	af00      	add	r7, sp, #0
    c8e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    c8e4:	687b      	ldr	r3, [r7, #4]
    c8e6:	681b      	ldr	r3, [r3, #0]
    c8e8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    c8ea:	46c0      	nop			; (mov r8, r8)
    c8ec:	68fb      	ldr	r3, [r7, #12]
    c8ee:	689b      	ldr	r3, [r3, #8]
    c8f0:	2202      	movs	r2, #2
    c8f2:	4013      	ands	r3, r2
    c8f4:	d1fa      	bne.n	c8ec <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    c8f6:	68fb      	ldr	r3, [r7, #12]
    c8f8:	681b      	ldr	r3, [r3, #0]
    c8fa:	2202      	movs	r2, #2
    c8fc:	431a      	orrs	r2, r3
    c8fe:	68fb      	ldr	r3, [r7, #12]
    c900:	601a      	str	r2, [r3, #0]
}
    c902:	46c0      	nop			; (mov r8, r8)
    c904:	46bd      	mov	sp, r7
    c906:	b004      	add	sp, #16
    c908:	bd80      	pop	{r7, pc}
	...

0000c90c <processUserInput>:
_update();
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max);

//_________________PROCESS USER INPUT______________
bool processUserInput(void)
{
    c90c:	b580      	push	{r7, lr}
    c90e:	b082      	sub	sp, #8
    c910:	af00      	add	r7, sp, #0
	switch (singleInput)
    c912:	4b48      	ldr	r3, [pc, #288]	; (ca34 <processUserInput+0x128>)
    c914:	781b      	ldrb	r3, [r3, #0]
    c916:	b2db      	uxtb	r3, r3
    c918:	2b0a      	cmp	r3, #10
    c91a:	d004      	beq.n	c926 <processUserInput+0x1a>
    c91c:	2b0d      	cmp	r3, #13
    c91e:	d002      	beq.n	c926 <processUserInput+0x1a>
    c920:	2b08      	cmp	r3, #8
    c922:	d04f      	beq.n	c9c4 <processUserInput+0xb8>
    c924:	e05d      	b.n	c9e2 <processUserInput+0xd6>
	{
		case CR:
		case LF:
		processFlag = true; //flag to start processing the command
    c926:	4b44      	ldr	r3, [pc, #272]	; (ca38 <processUserInput+0x12c>)
    c928:	2201      	movs	r2, #1
    c92a:	701a      	strb	r2, [r3, #0]
		charCounter = 0; //reset counter
    c92c:	4b43      	ldr	r3, [pc, #268]	; (ca3c <processUserInput+0x130>)
    c92e:	2200      	movs	r2, #0
    c930:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<strlen(rx_buffer); i++){
    c932:	2300      	movs	r3, #0
    c934:	607b      	str	r3, [r7, #4]
    c936:	e025      	b.n	c984 <processUserInput+0x78>
			rx_buffer[i] = tolower(rx_buffer[i]);
    c938:	4a41      	ldr	r2, [pc, #260]	; (ca40 <processUserInput+0x134>)
    c93a:	687b      	ldr	r3, [r7, #4]
    c93c:	18d3      	adds	r3, r2, r3
    c93e:	781b      	ldrb	r3, [r3, #0]
    c940:	b2da      	uxtb	r2, r3
    c942:	1cfb      	adds	r3, r7, #3
    c944:	701a      	strb	r2, [r3, #0]
    c946:	4b3f      	ldr	r3, [pc, #252]	; (ca44 <processUserInput+0x138>)
    c948:	4798      	blx	r3
    c94a:	0002      	movs	r2, r0
    c94c:	1cfb      	adds	r3, r7, #3
    c94e:	781b      	ldrb	r3, [r3, #0]
    c950:	b2db      	uxtb	r3, r3
    c952:	3301      	adds	r3, #1
    c954:	18d3      	adds	r3, r2, r3
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	001a      	movs	r2, r3
    c95a:	2303      	movs	r3, #3
    c95c:	4013      	ands	r3, r2
    c95e:	2b01      	cmp	r3, #1
    c960:	d104      	bne.n	c96c <processUserInput+0x60>
    c962:	1cfb      	adds	r3, r7, #3
    c964:	781b      	ldrb	r3, [r3, #0]
    c966:	b2db      	uxtb	r3, r3
    c968:	3320      	adds	r3, #32
    c96a:	e002      	b.n	c972 <processUserInput+0x66>
    c96c:	1cfb      	adds	r3, r7, #3
    c96e:	781b      	ldrb	r3, [r3, #0]
    c970:	b2db      	uxtb	r3, r3
    c972:	b2d9      	uxtb	r1, r3
    c974:	4a32      	ldr	r2, [pc, #200]	; (ca40 <processUserInput+0x134>)
    c976:	687b      	ldr	r3, [r7, #4]
    c978:	18d3      	adds	r3, r2, r3
    c97a:	1c0a      	adds	r2, r1, #0
    c97c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<strlen(rx_buffer); i++){
    c97e:	687b      	ldr	r3, [r7, #4]
    c980:	3301      	adds	r3, #1
    c982:	607b      	str	r3, [r7, #4]
    c984:	4b2e      	ldr	r3, [pc, #184]	; (ca40 <processUserInput+0x134>)
    c986:	0018      	movs	r0, r3
    c988:	4b2f      	ldr	r3, [pc, #188]	; (ca48 <processUserInput+0x13c>)
    c98a:	4798      	blx	r3
    c98c:	0002      	movs	r2, r0
    c98e:	687b      	ldr	r3, [r7, #4]
    c990:	429a      	cmp	r2, r3
    c992:	d8d1      	bhi.n	c938 <processUserInput+0x2c>
		}
		original_rx_buffer = malloc(sizeof(char) * strlen(rx_buffer));
    c994:	4b2a      	ldr	r3, [pc, #168]	; (ca40 <processUserInput+0x134>)
    c996:	0018      	movs	r0, r3
    c998:	4b2b      	ldr	r3, [pc, #172]	; (ca48 <processUserInput+0x13c>)
    c99a:	4798      	blx	r3
    c99c:	0003      	movs	r3, r0
    c99e:	0018      	movs	r0, r3
    c9a0:	4b2a      	ldr	r3, [pc, #168]	; (ca4c <processUserInput+0x140>)
    c9a2:	4798      	blx	r3
    c9a4:	0003      	movs	r3, r0
    c9a6:	001a      	movs	r2, r3
    c9a8:	4b29      	ldr	r3, [pc, #164]	; (ca50 <processUserInput+0x144>)
    c9aa:	601a      	str	r2, [r3, #0]
		strcpy(original_rx_buffer,rx_buffer);
    c9ac:	4b28      	ldr	r3, [pc, #160]	; (ca50 <processUserInput+0x144>)
    c9ae:	681b      	ldr	r3, [r3, #0]
    c9b0:	4a23      	ldr	r2, [pc, #140]	; (ca40 <processUserInput+0x134>)
    c9b2:	0011      	movs	r1, r2
    c9b4:	0018      	movs	r0, r3
    c9b6:	4b27      	ldr	r3, [pc, #156]	; (ca54 <processUserInput+0x148>)
    c9b8:	4798      	blx	r3
		printf("\r\n");
    c9ba:	4b27      	ldr	r3, [pc, #156]	; (ca58 <processUserInput+0x14c>)
    c9bc:	0018      	movs	r0, r3
    c9be:	4b27      	ldr	r3, [pc, #156]	; (ca5c <processUserInput+0x150>)
    c9c0:	4798      	blx	r3
		break;
    c9c2:	e031      	b.n	ca28 <processUserInput+0x11c>
		
		case BS:
		charCounter--;
    c9c4:	4b1d      	ldr	r3, [pc, #116]	; (ca3c <processUserInput+0x130>)
    c9c6:	781b      	ldrb	r3, [r3, #0]
    c9c8:	b2db      	uxtb	r3, r3
    c9ca:	3b01      	subs	r3, #1
    c9cc:	b2da      	uxtb	r2, r3
    c9ce:	4b1b      	ldr	r3, [pc, #108]	; (ca3c <processUserInput+0x130>)
    c9d0:	701a      	strb	r2, [r3, #0]
		rx_buffer[charCounter] = NULLCHAR;
    c9d2:	4b1a      	ldr	r3, [pc, #104]	; (ca3c <processUserInput+0x130>)
    c9d4:	781b      	ldrb	r3, [r3, #0]
    c9d6:	b2db      	uxtb	r3, r3
    c9d8:	001a      	movs	r2, r3
    c9da:	4b19      	ldr	r3, [pc, #100]	; (ca40 <processUserInput+0x134>)
    c9dc:	2100      	movs	r1, #0
    c9de:	5499      	strb	r1, [r3, r2]
		break;
    c9e0:	e022      	b.n	ca28 <processUserInput+0x11c>
		
		default:
		if (charCounter < MAX_RX_BUFFER_LENGTH)
    c9e2:	4b16      	ldr	r3, [pc, #88]	; (ca3c <processUserInput+0x130>)
    c9e4:	781b      	ldrb	r3, [r3, #0]
    c9e6:	b2db      	uxtb	r3, r3
    c9e8:	2b63      	cmp	r3, #99	; 0x63
    c9ea:	d81c      	bhi.n	ca26 <processUserInput+0x11a>
		{
			rx_buffer[charCounter] = singleInput; //save single input to rx buffer
    c9ec:	4b13      	ldr	r3, [pc, #76]	; (ca3c <processUserInput+0x130>)
    c9ee:	781b      	ldrb	r3, [r3, #0]
    c9f0:	b2db      	uxtb	r3, r3
    c9f2:	001a      	movs	r2, r3
    c9f4:	4b0f      	ldr	r3, [pc, #60]	; (ca34 <processUserInput+0x128>)
    c9f6:	781b      	ldrb	r3, [r3, #0]
    c9f8:	b2d9      	uxtb	r1, r3
    c9fa:	4b11      	ldr	r3, [pc, #68]	; (ca40 <processUserInput+0x134>)
    c9fc:	5499      	strb	r1, [r3, r2]
			rx_buffer[charCounter+1] = NULLCHAR; //Input nullchar in the next position
    c9fe:	4b0f      	ldr	r3, [pc, #60]	; (ca3c <processUserInput+0x130>)
    ca00:	781b      	ldrb	r3, [r3, #0]
    ca02:	b2db      	uxtb	r3, r3
    ca04:	3301      	adds	r3, #1
    ca06:	4a0e      	ldr	r2, [pc, #56]	; (ca40 <processUserInput+0x134>)
    ca08:	2100      	movs	r1, #0
    ca0a:	54d1      	strb	r1, [r2, r3]
			charCounter++;
    ca0c:	4b0b      	ldr	r3, [pc, #44]	; (ca3c <processUserInput+0x130>)
    ca0e:	781b      	ldrb	r3, [r3, #0]
    ca10:	b2db      	uxtb	r3, r3
    ca12:	3301      	adds	r3, #1
    ca14:	b2da      	uxtb	r2, r3
    ca16:	4b09      	ldr	r3, [pc, #36]	; (ca3c <processUserInput+0x130>)
    ca18:	701a      	strb	r2, [r3, #0]
			usart_write_buffer_wait(&usart_instance, &singleInput, 1); //write to terminal
    ca1a:	4906      	ldr	r1, [pc, #24]	; (ca34 <processUserInput+0x128>)
    ca1c:	4b10      	ldr	r3, [pc, #64]	; (ca60 <processUserInput+0x154>)
    ca1e:	2201      	movs	r2, #1
    ca20:	0018      	movs	r0, r3
    ca22:	4b10      	ldr	r3, [pc, #64]	; (ca64 <processUserInput+0x158>)
    ca24:	4798      	blx	r3
		}
		break;
    ca26:	46c0      	nop			; (mov r8, r8)
	}
}
    ca28:	46c0      	nop			; (mov r8, r8)
    ca2a:	0018      	movs	r0, r3
    ca2c:	46bd      	mov	sp, r7
    ca2e:	b002      	add	sp, #8
    ca30:	bd80      	pop	{r7, pc}
    ca32:	46c0      	nop			; (mov r8, r8)
    ca34:	20000a7c 	.word	0x20000a7c
    ca38:	200007e0 	.word	0x200007e0
    ca3c:	200002e8 	.word	0x200002e8
    ca40:	20000680 	.word	0x20000680
    ca44:	00011f2d 	.word	0x00011f2d
    ca48:	000124ab 	.word	0x000124ab
    ca4c:	00011f49 	.word	0x00011f49
    ca50:	20000540 	.word	0x20000540
    ca54:	00012461 	.word	0x00012461
    ca58:	00014ac4 	.word	0x00014ac4
    ca5c:	00012249 	.word	0x00012249
    ca60:	20000544 	.word	0x20000544
    ca64:	00009b0d 	.word	0x00009b0d

0000ca68 <processCommand>:

void processCommand()
{
    ca68:	b580      	push	{r7, lr}
    ca6a:	b086      	sub	sp, #24
    ca6c:	af00      	add	r7, sp, #0
	#define DELIMITER " "
	int16_t nargs = 0;
    ca6e:	2316      	movs	r3, #22
    ca70:	18fb      	adds	r3, r7, r3
    ca72:	2200      	movs	r2, #0
    ca74:	801a      	strh	r2, [r3, #0]
	char *midStringPtr;
	arguments[nargs++] = rx_buffer;
    ca76:	2316      	movs	r3, #22
    ca78:	18fb      	adds	r3, r7, r3
    ca7a:	2200      	movs	r2, #0
    ca7c:	5e9a      	ldrsh	r2, [r3, r2]
    ca7e:	b293      	uxth	r3, r2
    ca80:	3301      	adds	r3, #1
    ca82:	b299      	uxth	r1, r3
    ca84:	2316      	movs	r3, #22
    ca86:	18fb      	adds	r3, r7, r3
    ca88:	8019      	strh	r1, [r3, #0]
    ca8a:	4b57      	ldr	r3, [pc, #348]	; (cbe8 <processCommand+0x180>)
    ca8c:	0092      	lsls	r2, r2, #2
    ca8e:	4957      	ldr	r1, [pc, #348]	; (cbec <processCommand+0x184>)
    ca90:	50d1      	str	r1, [r2, r3]
	midStringPtr = strpbrk(rx_buffer, DELIMITER);
    ca92:	4b56      	ldr	r3, [pc, #344]	; (cbec <processCommand+0x184>)
    ca94:	2120      	movs	r1, #32
    ca96:	0018      	movs	r0, r3
    ca98:	4b55      	ldr	r3, [pc, #340]	; (cbf0 <processCommand+0x188>)
    ca9a:	4798      	blx	r3
    ca9c:	0003      	movs	r3, r0
    ca9e:	613b      	str	r3, [r7, #16]
	while (midStringPtr != NULL) {
    caa0:	e022      	b.n	cae8 <processCommand+0x80>
		arguments[nargs] = midStringPtr+1;
    caa2:	2316      	movs	r3, #22
    caa4:	18fb      	adds	r3, r7, r3
    caa6:	2200      	movs	r2, #0
    caa8:	5e9a      	ldrsh	r2, [r3, r2]
    caaa:	693b      	ldr	r3, [r7, #16]
    caac:	1c59      	adds	r1, r3, #1
    caae:	4b4e      	ldr	r3, [pc, #312]	; (cbe8 <processCommand+0x180>)
    cab0:	0092      	lsls	r2, r2, #2
    cab2:	50d1      	str	r1, [r2, r3]
		*midStringPtr = '\0';
    cab4:	693b      	ldr	r3, [r7, #16]
    cab6:	2200      	movs	r2, #0
    cab8:	701a      	strb	r2, [r3, #0]
		midStringPtr = strpbrk(arguments[nargs], DELIMITER);
    caba:	2316      	movs	r3, #22
    cabc:	18fb      	adds	r3, r7, r3
    cabe:	2200      	movs	r2, #0
    cac0:	5e9a      	ldrsh	r2, [r3, r2]
    cac2:	4b49      	ldr	r3, [pc, #292]	; (cbe8 <processCommand+0x180>)
    cac4:	0092      	lsls	r2, r2, #2
    cac6:	58d3      	ldr	r3, [r2, r3]
    cac8:	2120      	movs	r1, #32
    caca:	0018      	movs	r0, r3
    cacc:	4b48      	ldr	r3, [pc, #288]	; (cbf0 <processCommand+0x188>)
    cace:	4798      	blx	r3
    cad0:	0003      	movs	r3, r0
    cad2:	613b      	str	r3, [r7, #16]
		nargs++;
    cad4:	2316      	movs	r3, #22
    cad6:	18fb      	adds	r3, r7, r3
    cad8:	2200      	movs	r2, #0
    cada:	5e9b      	ldrsh	r3, [r3, r2]
    cadc:	b29b      	uxth	r3, r3
    cade:	3301      	adds	r3, #1
    cae0:	b29a      	uxth	r2, r3
    cae2:	2316      	movs	r3, #22
    cae4:	18fb      	adds	r3, r7, r3
    cae6:	801a      	strh	r2, [r3, #0]
	while (midStringPtr != NULL) {
    cae8:	693b      	ldr	r3, [r7, #16]
    caea:	2b00      	cmp	r3, #0
    caec:	d1d9      	bne.n	caa2 <processCommand+0x3a>
	}
	
	uint8_t indexCommand = 10;
    caee:	230f      	movs	r3, #15
    caf0:	18fb      	adds	r3, r7, r3
    caf2:	220a      	movs	r2, #10
    caf4:	701a      	strb	r2, [r3, #0]
	
	for (int i=0; i<9; i++)
    caf6:	2300      	movs	r3, #0
    caf8:	60bb      	str	r3, [r7, #8]
    cafa:	e012      	b.n	cb22 <processCommand+0xba>
	{
		if(0==strcmp(rx_buffer, commands[i]))
    cafc:	4b3d      	ldr	r3, [pc, #244]	; (cbf4 <processCommand+0x18c>)
    cafe:	68ba      	ldr	r2, [r7, #8]
    cb00:	0092      	lsls	r2, r2, #2
    cb02:	58d2      	ldr	r2, [r2, r3]
    cb04:	4b39      	ldr	r3, [pc, #228]	; (cbec <processCommand+0x184>)
    cb06:	0011      	movs	r1, r2
    cb08:	0018      	movs	r0, r3
    cb0a:	4b3b      	ldr	r3, [pc, #236]	; (cbf8 <processCommand+0x190>)
    cb0c:	4798      	blx	r3
    cb0e:	1e03      	subs	r3, r0, #0
    cb10:	d104      	bne.n	cb1c <processCommand+0xb4>
		{
			indexCommand=i;
    cb12:	230f      	movs	r3, #15
    cb14:	18fb      	adds	r3, r7, r3
    cb16:	68ba      	ldr	r2, [r7, #8]
    cb18:	701a      	strb	r2, [r3, #0]
			break;
    cb1a:	e005      	b.n	cb28 <processCommand+0xc0>
	for (int i=0; i<9; i++)
    cb1c:	68bb      	ldr	r3, [r7, #8]
    cb1e:	3301      	adds	r3, #1
    cb20:	60bb      	str	r3, [r7, #8]
    cb22:	68bb      	ldr	r3, [r7, #8]
    cb24:	2b08      	cmp	r3, #8
    cb26:	dde9      	ble.n	cafc <processCommand+0x94>
		}
	}
	
	switch(indexCommand)
    cb28:	230f      	movs	r3, #15
    cb2a:	18fb      	adds	r3, r7, r3
    cb2c:	781b      	ldrb	r3, [r3, #0]
    cb2e:	2b08      	cmp	r3, #8
    cb30:	d84a      	bhi.n	cbc8 <processCommand+0x160>
    cb32:	009a      	lsls	r2, r3, #2
    cb34:	4b31      	ldr	r3, [pc, #196]	; (cbfc <processCommand+0x194>)
    cb36:	18d3      	adds	r3, r2, r3
    cb38:	681b      	ldr	r3, [r3, #0]
    cb3a:	469f      	mov	pc, r3
	{
		case 0:
		for (int i=1; i<8; i++)
    cb3c:	2301      	movs	r3, #1
    cb3e:	607b      	str	r3, [r7, #4]
    cb40:	e019      	b.n	cb76 <processCommand+0x10e>
		{
			printf(commands[i]);
    cb42:	4b2c      	ldr	r3, [pc, #176]	; (cbf4 <processCommand+0x18c>)
    cb44:	687a      	ldr	r2, [r7, #4]
    cb46:	0092      	lsls	r2, r2, #2
    cb48:	58d3      	ldr	r3, [r2, r3]
    cb4a:	0018      	movs	r0, r3
    cb4c:	4b2c      	ldr	r3, [pc, #176]	; (cc00 <processCommand+0x198>)
    cb4e:	4798      	blx	r3
			printf("\r\n");
    cb50:	4b2c      	ldr	r3, [pc, #176]	; (cc04 <processCommand+0x19c>)
    cb52:	0018      	movs	r0, r3
    cb54:	4b2c      	ldr	r3, [pc, #176]	; (cc08 <processCommand+0x1a0>)
    cb56:	4798      	blx	r3
			printf(desc[i-1]);
    cb58:	687b      	ldr	r3, [r7, #4]
    cb5a:	1e5a      	subs	r2, r3, #1
    cb5c:	4b2b      	ldr	r3, [pc, #172]	; (cc0c <processCommand+0x1a4>)
    cb5e:	0092      	lsls	r2, r2, #2
    cb60:	58d3      	ldr	r3, [r2, r3]
    cb62:	0018      	movs	r0, r3
    cb64:	4b26      	ldr	r3, [pc, #152]	; (cc00 <processCommand+0x198>)
    cb66:	4798      	blx	r3
			printf("\r\n");
    cb68:	4b26      	ldr	r3, [pc, #152]	; (cc04 <processCommand+0x19c>)
    cb6a:	0018      	movs	r0, r3
    cb6c:	4b26      	ldr	r3, [pc, #152]	; (cc08 <processCommand+0x1a0>)
    cb6e:	4798      	blx	r3
		for (int i=1; i<8; i++)
    cb70:	687b      	ldr	r3, [r7, #4]
    cb72:	3301      	adds	r3, #1
    cb74:	607b      	str	r3, [r7, #4]
    cb76:	687b      	ldr	r3, [r7, #4]
    cb78:	2b07      	cmp	r3, #7
    cb7a:	dde2      	ble.n	cb42 <processCommand+0xda>
		}
		break;
    cb7c:	e02c      	b.n	cbd8 <processCommand+0x170>
		
		case 1:
		printf("Bootloader version 1.0.0\r\n");
    cb7e:	4b24      	ldr	r3, [pc, #144]	; (cc10 <processCommand+0x1a8>)
    cb80:	0018      	movs	r0, r3
    cb82:	4b21      	ldr	r3, [pc, #132]	; (cc08 <processCommand+0x1a0>)
    cb84:	4798      	blx	r3
		break;
    cb86:	e027      	b.n	cbd8 <processCommand+0x170>
		
		case 2:
		printf("Application firmware version 1.0.0\r\n");
    cb88:	4b22      	ldr	r3, [pc, #136]	; (cc14 <processCommand+0x1ac>)
    cb8a:	0018      	movs	r0, r3
    cb8c:	4b1e      	ldr	r3, [pc, #120]	; (cc08 <processCommand+0x1a0>)
    cb8e:	4798      	blx	r3
		break;
    cb90:	e022      	b.n	cbd8 <processCommand+0x170>
		
		case 3:
		gpio_set();
    cb92:	4b21      	ldr	r3, [pc, #132]	; (cc18 <processCommand+0x1b0>)
    cb94:	4798      	blx	r3
		break;
    cb96:	e01f      	b.n	cbd8 <processCommand+0x170>
		
		case 4:
		gpio_clear();
    cb98:	4b20      	ldr	r3, [pc, #128]	; (cc1c <processCommand+0x1b4>)
    cb9a:	4798      	blx	r3
		break;
    cb9c:	e01c      	b.n	cbd8 <processCommand+0x170>
		case 5:
		gpio_get();
    cb9e:	4b20      	ldr	r3, [pc, #128]	; (cc20 <processCommand+0x1b8>)
    cba0:	4798      	blx	r3
		break;
    cba2:	e019      	b.n	cbd8 <processCommand+0x170>
		
		case 6:
		printf("MAC: ff.ff.ff.ff.ff.ff\r\n");
    cba4:	4b1f      	ldr	r3, [pc, #124]	; (cc24 <processCommand+0x1bc>)
    cba6:	0018      	movs	r0, r3
    cba8:	4b17      	ldr	r3, [pc, #92]	; (cc08 <processCommand+0x1a0>)
    cbaa:	4798      	blx	r3
		//m2m_wifi_set_mac_address((uint8_t *)main_user_define_mac_address);
		//}
		//
		///* Get MAC Address. */
		//m2m_wifi_get_mac_address(mac_addr);
		break;
    cbac:	e014      	b.n	cbd8 <processCommand+0x170>
		
		case 7:
		printf("IP: 255.255.255.255\r\n");
    cbae:	4b1e      	ldr	r3, [pc, #120]	; (cc28 <processCommand+0x1c0>)
    cbb0:	0018      	movs	r0, r3
    cbb2:	4b15      	ldr	r3, [pc, #84]	; (cc08 <processCommand+0x1a0>)
    cbb4:	4798      	blx	r3
		break;
    cbb6:	e00f      	b.n	cbd8 <processCommand+0x170>
		
		case 8:
		prox_read_flag = true;
    cbb8:	4b1c      	ldr	r3, [pc, #112]	; (cc2c <processCommand+0x1c4>)
    cbba:	2201      	movs	r2, #1
    cbbc:	701a      	strb	r2, [r3, #0]
		printf("Taking proximity sensor readings");
    cbbe:	4b1c      	ldr	r3, [pc, #112]	; (cc30 <processCommand+0x1c8>)
    cbc0:	0018      	movs	r0, r3
    cbc2:	4b0f      	ldr	r3, [pc, #60]	; (cc00 <processCommand+0x198>)
    cbc4:	4798      	blx	r3
		break;
    cbc6:	e007      	b.n	cbd8 <processCommand+0x170>
		
		default:
		printf("ERROR, no such command available: %s\r\n", original_rx_buffer);
    cbc8:	4b1a      	ldr	r3, [pc, #104]	; (cc34 <processCommand+0x1cc>)
    cbca:	681a      	ldr	r2, [r3, #0]
    cbcc:	4b1a      	ldr	r3, [pc, #104]	; (cc38 <processCommand+0x1d0>)
    cbce:	0011      	movs	r1, r2
    cbd0:	0018      	movs	r0, r3
    cbd2:	4b0b      	ldr	r3, [pc, #44]	; (cc00 <processCommand+0x198>)
    cbd4:	4798      	blx	r3
		//printf(" %s", original_rx_buffer);
		break;
    cbd6:	46c0      	nop			; (mov r8, r8)
	}
	processFlag = false;
    cbd8:	4b18      	ldr	r3, [pc, #96]	; (cc3c <processCommand+0x1d4>)
    cbda:	2200      	movs	r2, #0
    cbdc:	701a      	strb	r2, [r3, #0]
}
    cbde:	46c0      	nop			; (mov r8, r8)
    cbe0:	46bd      	mov	sp, r7
    cbe2:	b006      	add	sp, #24
    cbe4:	bd80      	pop	{r7, pc}
    cbe6:	46c0      	nop			; (mov r8, r8)
    cbe8:	20000770 	.word	0x20000770
    cbec:	20000680 	.word	0x20000680
    cbf0:	00012431 	.word	0x00012431
    cbf4:	20000020 	.word	0x20000020
    cbf8:	0001244d 	.word	0x0001244d
    cbfc:	00015230 	.word	0x00015230
    cc00:	0001212d 	.word	0x0001212d
    cc04:	00014ac4 	.word	0x00014ac4
    cc08:	00012249 	.word	0x00012249
    cc0c:	20000044 	.word	0x20000044
    cc10:	00014ac8 	.word	0x00014ac8
    cc14:	00014ae4 	.word	0x00014ae4
    cc18:	0000cc41 	.word	0x0000cc41
    cc1c:	0000cce5 	.word	0x0000cce5
    cc20:	0000cd89 	.word	0x0000cd89
    cc24:	00014b08 	.word	0x00014b08
    cc28:	00014b20 	.word	0x00014b20
    cc2c:	20000790 	.word	0x20000790
    cc30:	00014b38 	.word	0x00014b38
    cc34:	20000540 	.word	0x20000540
    cc38:	00014b5c 	.word	0x00014b5c
    cc3c:	200007e0 	.word	0x200007e0

0000cc40 <gpio_set>:

void gpio_set()
{
    cc40:	b580      	push	{r7, lr}
    cc42:	af00      	add	r7, sp, #0
	if ((strcmp(arguments[1], "b") && strcmp(arguments[2], "10")) == 0)
    cc44:	4b1e      	ldr	r3, [pc, #120]	; (ccc0 <gpio_set+0x80>)
    cc46:	685b      	ldr	r3, [r3, #4]
    cc48:	4a1e      	ldr	r2, [pc, #120]	; (ccc4 <gpio_set+0x84>)
    cc4a:	0011      	movs	r1, r2
    cc4c:	0018      	movs	r0, r3
    cc4e:	4b1e      	ldr	r3, [pc, #120]	; (ccc8 <gpio_set+0x88>)
    cc50:	4798      	blx	r3
    cc52:	1e03      	subs	r3, r0, #0
    cc54:	d00a      	beq.n	cc6c <gpio_set+0x2c>
    cc56:	4b1a      	ldr	r3, [pc, #104]	; (ccc0 <gpio_set+0x80>)
    cc58:	689b      	ldr	r3, [r3, #8]
    cc5a:	4a1c      	ldr	r2, [pc, #112]	; (cccc <gpio_set+0x8c>)
    cc5c:	0011      	movs	r1, r2
    cc5e:	0018      	movs	r0, r3
    cc60:	4b19      	ldr	r3, [pc, #100]	; (ccc8 <gpio_set+0x88>)
    cc62:	4798      	blx	r3
    cc64:	1e03      	subs	r3, r0, #0
    cc66:	d001      	beq.n	cc6c <gpio_set+0x2c>
    cc68:	2301      	movs	r3, #1
    cc6a:	e000      	b.n	cc6e <gpio_set+0x2e>
    cc6c:	2300      	movs	r3, #0
    cc6e:	2b00      	cmp	r3, #0
    cc70:	d103      	bne.n	cc7a <gpio_set+0x3a>
	{
		set_pin(0);
    cc72:	2000      	movs	r0, #0
    cc74:	4b16      	ldr	r3, [pc, #88]	; (ccd0 <gpio_set+0x90>)
    cc76:	4798      	blx	r3
	}
	else
	{
		printf("There is no such pin available. Try B 10, or A 19\r\n");
	}
}
    cc78:	e01e      	b.n	ccb8 <gpio_set+0x78>
	else if ((strcmp(arguments[1], "a") && strcmp(arguments[2], "19")) == 0)
    cc7a:	4b11      	ldr	r3, [pc, #68]	; (ccc0 <gpio_set+0x80>)
    cc7c:	685b      	ldr	r3, [r3, #4]
    cc7e:	4a15      	ldr	r2, [pc, #84]	; (ccd4 <gpio_set+0x94>)
    cc80:	0011      	movs	r1, r2
    cc82:	0018      	movs	r0, r3
    cc84:	4b10      	ldr	r3, [pc, #64]	; (ccc8 <gpio_set+0x88>)
    cc86:	4798      	blx	r3
    cc88:	1e03      	subs	r3, r0, #0
    cc8a:	d00a      	beq.n	cca2 <gpio_set+0x62>
    cc8c:	4b0c      	ldr	r3, [pc, #48]	; (ccc0 <gpio_set+0x80>)
    cc8e:	689b      	ldr	r3, [r3, #8]
    cc90:	4a11      	ldr	r2, [pc, #68]	; (ccd8 <gpio_set+0x98>)
    cc92:	0011      	movs	r1, r2
    cc94:	0018      	movs	r0, r3
    cc96:	4b0c      	ldr	r3, [pc, #48]	; (ccc8 <gpio_set+0x88>)
    cc98:	4798      	blx	r3
    cc9a:	1e03      	subs	r3, r0, #0
    cc9c:	d001      	beq.n	cca2 <gpio_set+0x62>
    cc9e:	2301      	movs	r3, #1
    cca0:	e000      	b.n	cca4 <gpio_set+0x64>
    cca2:	2300      	movs	r3, #0
    cca4:	2b00      	cmp	r3, #0
    cca6:	d103      	bne.n	ccb0 <gpio_set+0x70>
		set_pin(1);
    cca8:	2001      	movs	r0, #1
    ccaa:	4b09      	ldr	r3, [pc, #36]	; (ccd0 <gpio_set+0x90>)
    ccac:	4798      	blx	r3
}
    ccae:	e003      	b.n	ccb8 <gpio_set+0x78>
		printf("There is no such pin available. Try B 10, or A 19\r\n");
    ccb0:	4b0a      	ldr	r3, [pc, #40]	; (ccdc <gpio_set+0x9c>)
    ccb2:	0018      	movs	r0, r3
    ccb4:	4b0a      	ldr	r3, [pc, #40]	; (cce0 <gpio_set+0xa0>)
    ccb6:	4798      	blx	r3
}
    ccb8:	46c0      	nop			; (mov r8, r8)
    ccba:	46bd      	mov	sp, r7
    ccbc:	bd80      	pop	{r7, pc}
    ccbe:	46c0      	nop			; (mov r8, r8)
    ccc0:	20000770 	.word	0x20000770
    ccc4:	00014b84 	.word	0x00014b84
    ccc8:	0001244d 	.word	0x0001244d
    cccc:	00014b88 	.word	0x00014b88
    ccd0:	0000ce2d 	.word	0x0000ce2d
    ccd4:	00014b8c 	.word	0x00014b8c
    ccd8:	00014b90 	.word	0x00014b90
    ccdc:	00014b94 	.word	0x00014b94
    cce0:	00012249 	.word	0x00012249

0000cce4 <gpio_clear>:

void gpio_clear()
{
    cce4:	b580      	push	{r7, lr}
    cce6:	af00      	add	r7, sp, #0
	if ((strcmp(arguments[1], "b") && strcmp(arguments[2], "10")) == 0)
    cce8:	4b1e      	ldr	r3, [pc, #120]	; (cd64 <gpio_clear+0x80>)
    ccea:	685b      	ldr	r3, [r3, #4]
    ccec:	4a1e      	ldr	r2, [pc, #120]	; (cd68 <gpio_clear+0x84>)
    ccee:	0011      	movs	r1, r2
    ccf0:	0018      	movs	r0, r3
    ccf2:	4b1e      	ldr	r3, [pc, #120]	; (cd6c <gpio_clear+0x88>)
    ccf4:	4798      	blx	r3
    ccf6:	1e03      	subs	r3, r0, #0
    ccf8:	d00a      	beq.n	cd10 <gpio_clear+0x2c>
    ccfa:	4b1a      	ldr	r3, [pc, #104]	; (cd64 <gpio_clear+0x80>)
    ccfc:	689b      	ldr	r3, [r3, #8]
    ccfe:	4a1c      	ldr	r2, [pc, #112]	; (cd70 <gpio_clear+0x8c>)
    cd00:	0011      	movs	r1, r2
    cd02:	0018      	movs	r0, r3
    cd04:	4b19      	ldr	r3, [pc, #100]	; (cd6c <gpio_clear+0x88>)
    cd06:	4798      	blx	r3
    cd08:	1e03      	subs	r3, r0, #0
    cd0a:	d001      	beq.n	cd10 <gpio_clear+0x2c>
    cd0c:	2301      	movs	r3, #1
    cd0e:	e000      	b.n	cd12 <gpio_clear+0x2e>
    cd10:	2300      	movs	r3, #0
    cd12:	2b00      	cmp	r3, #0
    cd14:	d103      	bne.n	cd1e <gpio_clear+0x3a>
	{
		set_pin(2);
    cd16:	2002      	movs	r0, #2
    cd18:	4b16      	ldr	r3, [pc, #88]	; (cd74 <gpio_clear+0x90>)
    cd1a:	4798      	blx	r3
	}
	else
	{
		printf("There is no such pin available. Try B 10, or A 19\r\n");
	}
}
    cd1c:	e01e      	b.n	cd5c <gpio_clear+0x78>
	else if ((strcmp(arguments[1], "a") && strcmp(arguments[2], "19")) == 0)
    cd1e:	4b11      	ldr	r3, [pc, #68]	; (cd64 <gpio_clear+0x80>)
    cd20:	685b      	ldr	r3, [r3, #4]
    cd22:	4a15      	ldr	r2, [pc, #84]	; (cd78 <gpio_clear+0x94>)
    cd24:	0011      	movs	r1, r2
    cd26:	0018      	movs	r0, r3
    cd28:	4b10      	ldr	r3, [pc, #64]	; (cd6c <gpio_clear+0x88>)
    cd2a:	4798      	blx	r3
    cd2c:	1e03      	subs	r3, r0, #0
    cd2e:	d00a      	beq.n	cd46 <gpio_clear+0x62>
    cd30:	4b0c      	ldr	r3, [pc, #48]	; (cd64 <gpio_clear+0x80>)
    cd32:	689b      	ldr	r3, [r3, #8]
    cd34:	4a11      	ldr	r2, [pc, #68]	; (cd7c <gpio_clear+0x98>)
    cd36:	0011      	movs	r1, r2
    cd38:	0018      	movs	r0, r3
    cd3a:	4b0c      	ldr	r3, [pc, #48]	; (cd6c <gpio_clear+0x88>)
    cd3c:	4798      	blx	r3
    cd3e:	1e03      	subs	r3, r0, #0
    cd40:	d001      	beq.n	cd46 <gpio_clear+0x62>
    cd42:	2301      	movs	r3, #1
    cd44:	e000      	b.n	cd48 <gpio_clear+0x64>
    cd46:	2300      	movs	r3, #0
    cd48:	2b00      	cmp	r3, #0
    cd4a:	d103      	bne.n	cd54 <gpio_clear+0x70>
		set_pin(3);
    cd4c:	2003      	movs	r0, #3
    cd4e:	4b09      	ldr	r3, [pc, #36]	; (cd74 <gpio_clear+0x90>)
    cd50:	4798      	blx	r3
}
    cd52:	e003      	b.n	cd5c <gpio_clear+0x78>
		printf("There is no such pin available. Try B 10, or A 19\r\n");
    cd54:	4b0a      	ldr	r3, [pc, #40]	; (cd80 <gpio_clear+0x9c>)
    cd56:	0018      	movs	r0, r3
    cd58:	4b0a      	ldr	r3, [pc, #40]	; (cd84 <gpio_clear+0xa0>)
    cd5a:	4798      	blx	r3
}
    cd5c:	46c0      	nop			; (mov r8, r8)
    cd5e:	46bd      	mov	sp, r7
    cd60:	bd80      	pop	{r7, pc}
    cd62:	46c0      	nop			; (mov r8, r8)
    cd64:	20000770 	.word	0x20000770
    cd68:	00014b84 	.word	0x00014b84
    cd6c:	0001244d 	.word	0x0001244d
    cd70:	00014b88 	.word	0x00014b88
    cd74:	0000ce2d 	.word	0x0000ce2d
    cd78:	00014b8c 	.word	0x00014b8c
    cd7c:	00014b90 	.word	0x00014b90
    cd80:	00014b94 	.word	0x00014b94
    cd84:	00012249 	.word	0x00012249

0000cd88 <gpio_get>:

void gpio_get()
{
    cd88:	b580      	push	{r7, lr}
    cd8a:	af00      	add	r7, sp, #0
	if ((strcmp(arguments[1], "b") && strcmp(arguments[2], "10")) == 0)
    cd8c:	4b1e      	ldr	r3, [pc, #120]	; (ce08 <gpio_get+0x80>)
    cd8e:	685b      	ldr	r3, [r3, #4]
    cd90:	4a1e      	ldr	r2, [pc, #120]	; (ce0c <gpio_get+0x84>)
    cd92:	0011      	movs	r1, r2
    cd94:	0018      	movs	r0, r3
    cd96:	4b1e      	ldr	r3, [pc, #120]	; (ce10 <gpio_get+0x88>)
    cd98:	4798      	blx	r3
    cd9a:	1e03      	subs	r3, r0, #0
    cd9c:	d00a      	beq.n	cdb4 <gpio_get+0x2c>
    cd9e:	4b1a      	ldr	r3, [pc, #104]	; (ce08 <gpio_get+0x80>)
    cda0:	689b      	ldr	r3, [r3, #8]
    cda2:	4a1c      	ldr	r2, [pc, #112]	; (ce14 <gpio_get+0x8c>)
    cda4:	0011      	movs	r1, r2
    cda6:	0018      	movs	r0, r3
    cda8:	4b19      	ldr	r3, [pc, #100]	; (ce10 <gpio_get+0x88>)
    cdaa:	4798      	blx	r3
    cdac:	1e03      	subs	r3, r0, #0
    cdae:	d001      	beq.n	cdb4 <gpio_get+0x2c>
    cdb0:	2301      	movs	r3, #1
    cdb2:	e000      	b.n	cdb6 <gpio_get+0x2e>
    cdb4:	2300      	movs	r3, #0
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	d103      	bne.n	cdc2 <gpio_get+0x3a>
	{
		check_pin(0);
    cdba:	2000      	movs	r0, #0
    cdbc:	4b16      	ldr	r3, [pc, #88]	; (ce18 <gpio_get+0x90>)
    cdbe:	4798      	blx	r3
	}
	else
	{
		printf("There is no such pin available. Try B 10, or A 19\r\n");
	}
}
    cdc0:	e01e      	b.n	ce00 <gpio_get+0x78>
	else if ((strcmp(arguments[1], "a") && strcmp(arguments[2], "19")) == 0)
    cdc2:	4b11      	ldr	r3, [pc, #68]	; (ce08 <gpio_get+0x80>)
    cdc4:	685b      	ldr	r3, [r3, #4]
    cdc6:	4a15      	ldr	r2, [pc, #84]	; (ce1c <gpio_get+0x94>)
    cdc8:	0011      	movs	r1, r2
    cdca:	0018      	movs	r0, r3
    cdcc:	4b10      	ldr	r3, [pc, #64]	; (ce10 <gpio_get+0x88>)
    cdce:	4798      	blx	r3
    cdd0:	1e03      	subs	r3, r0, #0
    cdd2:	d00a      	beq.n	cdea <gpio_get+0x62>
    cdd4:	4b0c      	ldr	r3, [pc, #48]	; (ce08 <gpio_get+0x80>)
    cdd6:	689b      	ldr	r3, [r3, #8]
    cdd8:	4a11      	ldr	r2, [pc, #68]	; (ce20 <gpio_get+0x98>)
    cdda:	0011      	movs	r1, r2
    cddc:	0018      	movs	r0, r3
    cdde:	4b0c      	ldr	r3, [pc, #48]	; (ce10 <gpio_get+0x88>)
    cde0:	4798      	blx	r3
    cde2:	1e03      	subs	r3, r0, #0
    cde4:	d001      	beq.n	cdea <gpio_get+0x62>
    cde6:	2301      	movs	r3, #1
    cde8:	e000      	b.n	cdec <gpio_get+0x64>
    cdea:	2300      	movs	r3, #0
    cdec:	2b00      	cmp	r3, #0
    cdee:	d103      	bne.n	cdf8 <gpio_get+0x70>
		check_pin(1);
    cdf0:	2001      	movs	r0, #1
    cdf2:	4b09      	ldr	r3, [pc, #36]	; (ce18 <gpio_get+0x90>)
    cdf4:	4798      	blx	r3
}
    cdf6:	e003      	b.n	ce00 <gpio_get+0x78>
		printf("There is no such pin available. Try B 10, or A 19\r\n");
    cdf8:	4b0a      	ldr	r3, [pc, #40]	; (ce24 <gpio_get+0x9c>)
    cdfa:	0018      	movs	r0, r3
    cdfc:	4b0a      	ldr	r3, [pc, #40]	; (ce28 <gpio_get+0xa0>)
    cdfe:	4798      	blx	r3
}
    ce00:	46c0      	nop			; (mov r8, r8)
    ce02:	46bd      	mov	sp, r7
    ce04:	bd80      	pop	{r7, pc}
    ce06:	46c0      	nop			; (mov r8, r8)
    ce08:	20000770 	.word	0x20000770
    ce0c:	00014b84 	.word	0x00014b84
    ce10:	0001244d 	.word	0x0001244d
    ce14:	00014b88 	.word	0x00014b88
    ce18:	0000cf1d 	.word	0x0000cf1d
    ce1c:	00014b8c 	.word	0x00014b8c
    ce20:	00014b90 	.word	0x00014b90
    ce24:	00014b94 	.word	0x00014b94
    ce28:	00012249 	.word	0x00012249

0000ce2c <set_pin>:

//_________________PIN OPERATIONS ______________

void set_pin(uint8_t PIN) //configure the port pin
{
    ce2c:	b580      	push	{r7, lr}
    ce2e:	b084      	sub	sp, #16
    ce30:	af00      	add	r7, sp, #0
    ce32:	0002      	movs	r2, r0
    ce34:	1dfb      	adds	r3, r7, #7
    ce36:	701a      	strb	r2, [r3, #0]
	uint8_t pin_state;
	struct port_config configure_port_pin;
	port_get_config_defaults(&configure_port_pin);
    ce38:	230c      	movs	r3, #12
    ce3a:	18fb      	adds	r3, r7, r3
    ce3c:	0018      	movs	r0, r3
    ce3e:	4b2d      	ldr	r3, [pc, #180]	; (cef4 <set_pin+0xc8>)
    ce40:	4798      	blx	r3
	configure_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    ce42:	230c      	movs	r3, #12
    ce44:	18fb      	adds	r3, r7, r3
    ce46:	2201      	movs	r2, #1
    ce48:	701a      	strb	r2, [r3, #0]
	
	if (PIN==0)
    ce4a:	1dfb      	adds	r3, r7, #7
    ce4c:	781b      	ldrb	r3, [r3, #0]
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d10e      	bne.n	ce70 <set_pin+0x44>
	{
		port_pin_set_config(PIN_2, &configure_port_pin);
    ce52:	230c      	movs	r3, #12
    ce54:	18fb      	adds	r3, r7, r3
    ce56:	0019      	movs	r1, r3
    ce58:	2015      	movs	r0, #21
    ce5a:	4b27      	ldr	r3, [pc, #156]	; (cef8 <set_pin+0xcc>)
    ce5c:	4798      	blx	r3
		port_pin_set_output_level(PIN_2, true);
    ce5e:	2101      	movs	r1, #1
    ce60:	2015      	movs	r0, #21
    ce62:	4b26      	ldr	r3, [pc, #152]	; (cefc <set_pin+0xd0>)
    ce64:	4798      	blx	r3
		printf("Pin PB10 is set high\r\n");
    ce66:	4b26      	ldr	r3, [pc, #152]	; (cf00 <set_pin+0xd4>)
    ce68:	0018      	movs	r0, r3
    ce6a:	4b26      	ldr	r3, [pc, #152]	; (cf04 <set_pin+0xd8>)
    ce6c:	4798      	blx	r3
	}
	else
	{
		printf("PIN passed, undefined");
	}
}
    ce6e:	e03c      	b.n	ceea <set_pin+0xbe>
	else if (PIN == 1)
    ce70:	1dfb      	adds	r3, r7, #7
    ce72:	781b      	ldrb	r3, [r3, #0]
    ce74:	2b01      	cmp	r3, #1
    ce76:	d10e      	bne.n	ce96 <set_pin+0x6a>
		port_pin_set_config(PIN_1, &configure_port_pin);
    ce78:	230c      	movs	r3, #12
    ce7a:	18fb      	adds	r3, r7, r3
    ce7c:	0019      	movs	r1, r3
    ce7e:	2011      	movs	r0, #17
    ce80:	4b1d      	ldr	r3, [pc, #116]	; (cef8 <set_pin+0xcc>)
    ce82:	4798      	blx	r3
		port_pin_set_output_level(PIN_1, true);
    ce84:	2101      	movs	r1, #1
    ce86:	2011      	movs	r0, #17
    ce88:	4b1c      	ldr	r3, [pc, #112]	; (cefc <set_pin+0xd0>)
    ce8a:	4798      	blx	r3
		printf("Pin PA19 is set high\r\n");
    ce8c:	4b1e      	ldr	r3, [pc, #120]	; (cf08 <set_pin+0xdc>)
    ce8e:	0018      	movs	r0, r3
    ce90:	4b1c      	ldr	r3, [pc, #112]	; (cf04 <set_pin+0xd8>)
    ce92:	4798      	blx	r3
}
    ce94:	e029      	b.n	ceea <set_pin+0xbe>
	else if (PIN == 2)
    ce96:	1dfb      	adds	r3, r7, #7
    ce98:	781b      	ldrb	r3, [r3, #0]
    ce9a:	2b02      	cmp	r3, #2
    ce9c:	d10e      	bne.n	cebc <set_pin+0x90>
		port_pin_set_config(PIN_2, &configure_port_pin);
    ce9e:	230c      	movs	r3, #12
    cea0:	18fb      	adds	r3, r7, r3
    cea2:	0019      	movs	r1, r3
    cea4:	2015      	movs	r0, #21
    cea6:	4b14      	ldr	r3, [pc, #80]	; (cef8 <set_pin+0xcc>)
    cea8:	4798      	blx	r3
		port_pin_set_output_level(PIN_2, false);
    ceaa:	2100      	movs	r1, #0
    ceac:	2015      	movs	r0, #21
    ceae:	4b13      	ldr	r3, [pc, #76]	; (cefc <set_pin+0xd0>)
    ceb0:	4798      	blx	r3
		printf("Pin PB10 is set low\r\n");
    ceb2:	4b16      	ldr	r3, [pc, #88]	; (cf0c <set_pin+0xe0>)
    ceb4:	0018      	movs	r0, r3
    ceb6:	4b13      	ldr	r3, [pc, #76]	; (cf04 <set_pin+0xd8>)
    ceb8:	4798      	blx	r3
}
    ceba:	e016      	b.n	ceea <set_pin+0xbe>
	else if (PIN == 3)
    cebc:	1dfb      	adds	r3, r7, #7
    cebe:	781b      	ldrb	r3, [r3, #0]
    cec0:	2b03      	cmp	r3, #3
    cec2:	d10e      	bne.n	cee2 <set_pin+0xb6>
		port_pin_set_config(PIN_1, &configure_port_pin);
    cec4:	230c      	movs	r3, #12
    cec6:	18fb      	adds	r3, r7, r3
    cec8:	0019      	movs	r1, r3
    ceca:	2011      	movs	r0, #17
    cecc:	4b0a      	ldr	r3, [pc, #40]	; (cef8 <set_pin+0xcc>)
    cece:	4798      	blx	r3
		port_pin_set_output_level(PIN_1, false);
    ced0:	2100      	movs	r1, #0
    ced2:	2011      	movs	r0, #17
    ced4:	4b09      	ldr	r3, [pc, #36]	; (cefc <set_pin+0xd0>)
    ced6:	4798      	blx	r3
		printf("Pin PA19 is set low\r\n");
    ced8:	4b0d      	ldr	r3, [pc, #52]	; (cf10 <set_pin+0xe4>)
    ceda:	0018      	movs	r0, r3
    cedc:	4b09      	ldr	r3, [pc, #36]	; (cf04 <set_pin+0xd8>)
    cede:	4798      	blx	r3
}
    cee0:	e003      	b.n	ceea <set_pin+0xbe>
		printf("PIN passed, undefined");
    cee2:	4b0c      	ldr	r3, [pc, #48]	; (cf14 <set_pin+0xe8>)
    cee4:	0018      	movs	r0, r3
    cee6:	4b0c      	ldr	r3, [pc, #48]	; (cf18 <set_pin+0xec>)
    cee8:	4798      	blx	r3
}
    ceea:	46c0      	nop			; (mov r8, r8)
    ceec:	46bd      	mov	sp, r7
    ceee:	b004      	add	sp, #16
    cef0:	bd80      	pop	{r7, pc}
    cef2:	46c0      	nop			; (mov r8, r8)
    cef4:	0000c3ad 	.word	0x0000c3ad
    cef8:	00008735 	.word	0x00008735
    cefc:	0000c459 	.word	0x0000c459
    cf00:	00014bc8 	.word	0x00014bc8
    cf04:	00012249 	.word	0x00012249
    cf08:	00014be0 	.word	0x00014be0
    cf0c:	00014bf8 	.word	0x00014bf8
    cf10:	00014c10 	.word	0x00014c10
    cf14:	00014c28 	.word	0x00014c28
    cf18:	0001212d 	.word	0x0001212d

0000cf1c <check_pin>:

void check_pin(uint8_t PIN2)
{
    cf1c:	b590      	push	{r4, r7, lr}
    cf1e:	b085      	sub	sp, #20
    cf20:	af00      	add	r7, sp, #0
    cf22:	0002      	movs	r2, r0
    cf24:	1dfb      	adds	r3, r7, #7
    cf26:	701a      	strb	r2, [r3, #0]
	bool pin_state;
	if (PIN2 == 0)
    cf28:	1dfb      	adds	r3, r7, #7
    cf2a:	781b      	ldrb	r3, [r3, #0]
    cf2c:	2b00      	cmp	r3, #0
    cf2e:	d115      	bne.n	cf5c <check_pin+0x40>
	{
		pin_state = port_pin_get_output_level(PIN_2);
    cf30:	230f      	movs	r3, #15
    cf32:	18fc      	adds	r4, r7, r3
    cf34:	2015      	movs	r0, #21
    cf36:	4b1a      	ldr	r3, [pc, #104]	; (cfa0 <check_pin+0x84>)
    cf38:	4798      	blx	r3
    cf3a:	0003      	movs	r3, r0
    cf3c:	7023      	strb	r3, [r4, #0]
		if (pin_state)
    cf3e:	230f      	movs	r3, #15
    cf40:	18fb      	adds	r3, r7, r3
    cf42:	781b      	ldrb	r3, [r3, #0]
    cf44:	2b00      	cmp	r3, #0
    cf46:	d004      	beq.n	cf52 <check_pin+0x36>
		{
			printf("Pin PB10 is set high\r\n");
    cf48:	4b16      	ldr	r3, [pc, #88]	; (cfa4 <check_pin+0x88>)
    cf4a:	0018      	movs	r0, r3
    cf4c:	4b16      	ldr	r3, [pc, #88]	; (cfa8 <check_pin+0x8c>)
    cf4e:	4798      	blx	r3
	}
	else
	{
		printf("PIN passed, undefined");
	}
}
    cf50:	e022      	b.n	cf98 <check_pin+0x7c>
			printf("Pin PB10 is set low\r\n");
    cf52:	4b16      	ldr	r3, [pc, #88]	; (cfac <check_pin+0x90>)
    cf54:	0018      	movs	r0, r3
    cf56:	4b14      	ldr	r3, [pc, #80]	; (cfa8 <check_pin+0x8c>)
    cf58:	4798      	blx	r3
}
    cf5a:	e01d      	b.n	cf98 <check_pin+0x7c>
	else if (PIN2 == 1)
    cf5c:	1dfb      	adds	r3, r7, #7
    cf5e:	781b      	ldrb	r3, [r3, #0]
    cf60:	2b01      	cmp	r3, #1
    cf62:	d115      	bne.n	cf90 <check_pin+0x74>
		pin_state = port_pin_get_output_level(PIN_1);
    cf64:	230f      	movs	r3, #15
    cf66:	18fc      	adds	r4, r7, r3
    cf68:	2011      	movs	r0, #17
    cf6a:	4b0d      	ldr	r3, [pc, #52]	; (cfa0 <check_pin+0x84>)
    cf6c:	4798      	blx	r3
    cf6e:	0003      	movs	r3, r0
    cf70:	7023      	strb	r3, [r4, #0]
		if (pin_state)
    cf72:	230f      	movs	r3, #15
    cf74:	18fb      	adds	r3, r7, r3
    cf76:	781b      	ldrb	r3, [r3, #0]
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d004      	beq.n	cf86 <check_pin+0x6a>
			printf("Pin PA19 is set high\r\n");
    cf7c:	4b0c      	ldr	r3, [pc, #48]	; (cfb0 <check_pin+0x94>)
    cf7e:	0018      	movs	r0, r3
    cf80:	4b09      	ldr	r3, [pc, #36]	; (cfa8 <check_pin+0x8c>)
    cf82:	4798      	blx	r3
}
    cf84:	e008      	b.n	cf98 <check_pin+0x7c>
			printf("Pin PA19 is set low\r\n");
    cf86:	4b0b      	ldr	r3, [pc, #44]	; (cfb4 <check_pin+0x98>)
    cf88:	0018      	movs	r0, r3
    cf8a:	4b07      	ldr	r3, [pc, #28]	; (cfa8 <check_pin+0x8c>)
    cf8c:	4798      	blx	r3
}
    cf8e:	e003      	b.n	cf98 <check_pin+0x7c>
		printf("PIN passed, undefined");
    cf90:	4b09      	ldr	r3, [pc, #36]	; (cfb8 <check_pin+0x9c>)
    cf92:	0018      	movs	r0, r3
    cf94:	4b09      	ldr	r3, [pc, #36]	; (cfbc <check_pin+0xa0>)
    cf96:	4798      	blx	r3
}
    cf98:	46c0      	nop			; (mov r8, r8)
    cf9a:	46bd      	mov	sp, r7
    cf9c:	b005      	add	sp, #20
    cf9e:	bd90      	pop	{r4, r7, pc}
    cfa0:	0000c415 	.word	0x0000c415
    cfa4:	00014bc8 	.word	0x00014bc8
    cfa8:	00012249 	.word	0x00012249
    cfac:	00014bf8 	.word	0x00014bf8
    cfb0:	00014be0 	.word	0x00014be0
    cfb4:	00014c10 	.word	0x00014c10
    cfb8:	00014c28 	.word	0x00014c28
    cfbc:	0001212d 	.word	0x0001212d

0000cfc0 <configure_usart>:

//_________________USART______________

void configure_usart(void)
{
    cfc0:	b580      	push	{r7, lr}
    cfc2:	b090      	sub	sp, #64	; 0x40
    cfc4:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    cfc6:	003b      	movs	r3, r7
    cfc8:	0018      	movs	r0, r3
    cfca:	4b13      	ldr	r3, [pc, #76]	; (d018 <configure_usart+0x58>)
    cfcc:	4798      	blx	r3
	config_usart.baudrate    = UART_BAUDRATE;
    cfce:	003b      	movs	r3, r7
    cfd0:	22e1      	movs	r2, #225	; 0xe1
    cfd2:	0252      	lsls	r2, r2, #9
    cfd4:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    cfd6:	003b      	movs	r3, r7
    cfd8:	22c4      	movs	r2, #196	; 0xc4
    cfda:	0392      	lsls	r2, r2, #14
    cfdc:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    cfde:	003b      	movs	r3, r7
    cfe0:	2201      	movs	r2, #1
    cfe2:	4252      	negs	r2, r2
    cfe4:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    cfe6:	003b      	movs	r3, r7
    cfe8:	2201      	movs	r2, #1
    cfea:	4252      	negs	r2, r2
    cfec:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
    cfee:	003b      	movs	r3, r7
    cff0:	4a0a      	ldr	r2, [pc, #40]	; (d01c <configure_usart+0x5c>)
    cff2:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
    cff4:	003b      	movs	r3, r7
    cff6:	4a0a      	ldr	r2, [pc, #40]	; (d020 <configure_usart+0x60>)
    cff8:	63da      	str	r2, [r3, #60]	; 0x3c
	
	stdio_serial_init(&usart_instance, SERCOM4, &config_usart);
    cffa:	003a      	movs	r2, r7
    cffc:	4909      	ldr	r1, [pc, #36]	; (d024 <configure_usart+0x64>)
    cffe:	4b0a      	ldr	r3, [pc, #40]	; (d028 <configure_usart+0x68>)
    d000:	0018      	movs	r0, r3
    d002:	4b0a      	ldr	r3, [pc, #40]	; (d02c <configure_usart+0x6c>)
    d004:	4798      	blx	r3
	usart_enable(&usart_instance);
    d006:	4b08      	ldr	r3, [pc, #32]	; (d028 <configure_usart+0x68>)
    d008:	0018      	movs	r0, r3
    d00a:	4b09      	ldr	r3, [pc, #36]	; (d030 <configure_usart+0x70>)
    d00c:	4798      	blx	r3
}
    d00e:	46c0      	nop			; (mov r8, r8)
    d010:	46bd      	mov	sp, r7
    d012:	b010      	add	sp, #64	; 0x40
    d014:	bd80      	pop	{r7, pc}
    d016:	46c0      	nop			; (mov r8, r8)
    d018:	0000c689 	.word	0x0000c689
    d01c:	002a0003 	.word	0x002a0003
    d020:	002b0003 	.word	0x002b0003
    d024:	42001800 	.word	0x42001800
    d028:	20000544 	.word	0x20000544
    d02c:	0000c86d 	.word	0x0000c86d
    d030:	0000c749 	.word	0x0000c749

0000d034 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    d034:	b580      	push	{r7, lr}
    d036:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
    d038:	490c      	ldr	r1, [pc, #48]	; (d06c <configure_usart_callbacks+0x38>)
    d03a:	4b0d      	ldr	r3, [pc, #52]	; (d070 <configure_usart_callbacks+0x3c>)
    d03c:	2200      	movs	r2, #0
    d03e:	0018      	movs	r0, r3
    d040:	4b0c      	ldr	r3, [pc, #48]	; (d074 <configure_usart_callbacks+0x40>)
    d042:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    d044:	490c      	ldr	r1, [pc, #48]	; (d078 <configure_usart_callbacks+0x44>)
    d046:	4b0a      	ldr	r3, [pc, #40]	; (d070 <configure_usart_callbacks+0x3c>)
    d048:	2201      	movs	r2, #1
    d04a:	0018      	movs	r0, r3
    d04c:	4b09      	ldr	r3, [pc, #36]	; (d074 <configure_usart_callbacks+0x40>)
    d04e:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    d050:	4b07      	ldr	r3, [pc, #28]	; (d070 <configure_usart_callbacks+0x3c>)
    d052:	2100      	movs	r1, #0
    d054:	0018      	movs	r0, r3
    d056:	4b09      	ldr	r3, [pc, #36]	; (d07c <configure_usart_callbacks+0x48>)
    d058:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    d05a:	4b05      	ldr	r3, [pc, #20]	; (d070 <configure_usart_callbacks+0x3c>)
    d05c:	2101      	movs	r1, #1
    d05e:	0018      	movs	r0, r3
    d060:	4b06      	ldr	r3, [pc, #24]	; (d07c <configure_usart_callbacks+0x48>)
    d062:	4798      	blx	r3
}
    d064:	46c0      	nop			; (mov r8, r8)
    d066:	46bd      	mov	sp, r7
    d068:	bd80      	pop	{r7, pc}
    d06a:	46c0      	nop			; (mov r8, r8)
    d06c:	0000d099 	.word	0x0000d099
    d070:	20000544 	.word	0x20000544
    d074:	00009d1d 	.word	0x00009d1d
    d078:	0000d081 	.word	0x0000d081
    d07c:	0000c791 	.word	0x0000c791

0000d080 <usart_read_callback>:

void usart_read_callback(struct usart_module *const usart_module)
{
    d080:	b580      	push	{r7, lr}
    d082:	b082      	sub	sp, #8
    d084:	af00      	add	r7, sp, #0
    d086:	6078      	str	r0, [r7, #4]
	processUserInput();
    d088:	4b02      	ldr	r3, [pc, #8]	; (d094 <usart_read_callback+0x14>)
    d08a:	4798      	blx	r3
}
    d08c:	46c0      	nop			; (mov r8, r8)
    d08e:	46bd      	mov	sp, r7
    d090:	b002      	add	sp, #8
    d092:	bd80      	pop	{r7, pc}
    d094:	0000c90d 	.word	0x0000c90d

0000d098 <usart_write_callback>:

void usart_write_callback(struct usart_module *const usart_module)
{
    d098:	b580      	push	{r7, lr}
    d09a:	b082      	sub	sp, #8
    d09c:	af00      	add	r7, sp, #0
    d09e:	6078      	str	r0, [r7, #4]
	port_pin_toggle_output_level(LED_0_PIN);
    d0a0:	2016      	movs	r0, #22
    d0a2:	4b03      	ldr	r3, [pc, #12]	; (d0b0 <usart_write_callback+0x18>)
    d0a4:	4798      	blx	r3
}
    d0a6:	46c0      	nop			; (mov r8, r8)
    d0a8:	46bd      	mov	sp, r7
    d0aa:	b002      	add	sp, #8
    d0ac:	bd80      	pop	{r7, pc}
    d0ae:	46c0      	nop			; (mov r8, r8)
    d0b0:	0000c4ad 	.word	0x0000c4ad

0000d0b4 <configure_tcc>:

//_________________TIMER______________

static void configure_tcc(void)
{
    d0b4:	b580      	push	{r7, lr}
    d0b6:	af00      	add	r7, sp, #0
	tcc_get_config_defaults(&config_tcc, TCC1);
    d0b8:	4a13      	ldr	r2, [pc, #76]	; (d108 <configure_tcc+0x54>)
    d0ba:	4b14      	ldr	r3, [pc, #80]	; (d10c <configure_tcc+0x58>)
    d0bc:	0011      	movs	r1, r2
    d0be:	0018      	movs	r0, r3
    d0c0:	4b13      	ldr	r3, [pc, #76]	; (d110 <configure_tcc+0x5c>)
    d0c2:	4798      	blx	r3
	config_tcc.counter.clock_source = GCLK_GENERATOR_3; // 8 Mhz
    d0c4:	4b11      	ldr	r3, [pc, #68]	; (d10c <configure_tcc+0x58>)
    d0c6:	2203      	movs	r2, #3
    d0c8:	729a      	strb	r2, [r3, #10]
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64; // 8 Mhz/64 = 125000
    d0ca:	4b10      	ldr	r3, [pc, #64]	; (d10c <configure_tcc+0x58>)
    d0cc:	2205      	movs	r2, #5
    d0ce:	72da      	strb	r2, [r3, #11]
	config_tcc.counter.period =  PERIOD; //100ms 12500
    d0d0:	4b0e      	ldr	r3, [pc, #56]	; (d10c <configure_tcc+0x58>)
    d0d2:	4a10      	ldr	r2, [pc, #64]	; (d114 <configure_tcc+0x60>)
    d0d4:	605a      	str	r2, [r3, #4]
	tcc_init(&tcc_instance, TCC1, &config_tcc);
    d0d6:	4a0d      	ldr	r2, [pc, #52]	; (d10c <configure_tcc+0x58>)
    d0d8:	490b      	ldr	r1, [pc, #44]	; (d108 <configure_tcc+0x54>)
    d0da:	4b0f      	ldr	r3, [pc, #60]	; (d118 <configure_tcc+0x64>)
    d0dc:	0018      	movs	r0, r3
    d0de:	4b0f      	ldr	r3, [pc, #60]	; (d11c <configure_tcc+0x68>)
    d0e0:	4798      	blx	r3
	
	tcc_register_callback(&tcc_instance, tcc_interval_wait, TCC_CALLBACK_OVERFLOW);
    d0e2:	490f      	ldr	r1, [pc, #60]	; (d120 <configure_tcc+0x6c>)
    d0e4:	4b0c      	ldr	r3, [pc, #48]	; (d118 <configure_tcc+0x64>)
    d0e6:	2200      	movs	r2, #0
    d0e8:	0018      	movs	r0, r3
    d0ea:	4b0e      	ldr	r3, [pc, #56]	; (d124 <configure_tcc+0x70>)
    d0ec:	4798      	blx	r3
	tcc_enable_callback(&tcc_instance, TCC_CALLBACK_OVERFLOW);
    d0ee:	4b0a      	ldr	r3, [pc, #40]	; (d118 <configure_tcc+0x64>)
    d0f0:	2100      	movs	r1, #0
    d0f2:	0018      	movs	r0, r3
    d0f4:	4b0c      	ldr	r3, [pc, #48]	; (d128 <configure_tcc+0x74>)
    d0f6:	4798      	blx	r3
	tcc_enable(&tcc_instance);
    d0f8:	4b07      	ldr	r3, [pc, #28]	; (d118 <configure_tcc+0x64>)
    d0fa:	0018      	movs	r0, r3
    d0fc:	4b0b      	ldr	r3, [pc, #44]	; (d12c <configure_tcc+0x78>)
    d0fe:	4798      	blx	r3
}
    d100:	46c0      	nop			; (mov r8, r8)
    d102:	46bd      	mov	sp, r7
    d104:	bd80      	pop	{r7, pc}
    d106:	46c0      	nop			; (mov r8, r8)
    d108:	42002400 	.word	0x42002400
    d10c:	200009d8 	.word	0x200009d8
    d110:	0000b329 	.word	0x0000b329
    d114:	000124f8 	.word	0x000124f8
    d118:	20000724 	.word	0x20000724
    d11c:	0000b985 	.word	0x0000b985
    d120:	0000d131 	.word	0x0000d131
    d124:	0000bd9d 	.word	0x0000bd9d
    d128:	0000bddd 	.word	0x0000bddd
    d12c:	0000c8dd 	.word	0x0000c8dd

0000d130 <tcc_interval_wait>:

static void tcc_interval_wait(struct tcc_module *const module_inst)
{
    d130:	b580      	push	{r7, lr}
    d132:	b082      	sub	sp, #8
    d134:	af00      	add	r7, sp, #0
    d136:	6078      	str	r0, [r7, #4]
	timer_counter++; //overflow trigger
    d138:	4b04      	ldr	r3, [pc, #16]	; (d14c <tcc_interval_wait+0x1c>)
    d13a:	681b      	ldr	r3, [r3, #0]
    d13c:	1c5a      	adds	r2, r3, #1
    d13e:	4b03      	ldr	r3, [pc, #12]	; (d14c <tcc_interval_wait+0x1c>)
    d140:	601a      	str	r2, [r3, #0]
	//tcc_flag = true;
}
    d142:	46c0      	nop			; (mov r8, r8)
    d144:	46bd      	mov	sp, r7
    d146:	b002      	add	sp, #8
    d148:	bd80      	pop	{r7, pc}
    d14a:	46c0      	nop			; (mov r8, r8)
    d14c:	2000061c 	.word	0x2000061c

0000d150 <configure_nvm>:
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);
	at25dfx_chip_sleep(&at25dfx_chip);
}

void configure_nvm(void)
{
    d150:	b580      	push	{r7, lr}
    d152:	b082      	sub	sp, #8
    d154:	af00      	add	r7, sp, #0
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
    d156:	003b      	movs	r3, r7
    d158:	0018      	movs	r0, r3
    d15a:	4b05      	ldr	r3, [pc, #20]	; (d170 <configure_nvm+0x20>)
    d15c:	4798      	blx	r3
	nvm_set_config(&config_nvm);
    d15e:	003b      	movs	r3, r7
    d160:	0018      	movs	r0, r3
    d162:	4b04      	ldr	r3, [pc, #16]	; (d174 <configure_nvm+0x24>)
    d164:	4798      	blx	r3
}
    d166:	46c0      	nop			; (mov r8, r8)
    d168:	46bd      	mov	sp, r7
    d16a:	b002      	add	sp, #8
    d16c:	bd80      	pop	{r7, pc}
    d16e:	46c0      	nop			; (mov r8, r8)
    d170:	0000c609 	.word	0x0000c609
    d174:	00007bb5 	.word	0x00007bb5

0000d178 <configure_pins>:

void configure_pins(void)
{
    d178:	b580      	push	{r7, lr}
    d17a:	b082      	sub	sp, #8
    d17c:	af00      	add	r7, sp, #0
	// LED
	struct port_config configure_port_pin;
	port_get_config_defaults(&configure_port_pin);
    d17e:	1d3b      	adds	r3, r7, #4
    d180:	0018      	movs	r0, r3
    d182:	4b0b      	ldr	r3, [pc, #44]	; (d1b0 <configure_pins+0x38>)
    d184:	4798      	blx	r3
	configure_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    d186:	1d3b      	adds	r3, r7, #4
    d188:	2201      	movs	r2, #1
    d18a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &configure_port_pin);
    d18c:	1d3b      	adds	r3, r7, #4
    d18e:	0019      	movs	r1, r3
    d190:	2016      	movs	r0, #22
    d192:	4b08      	ldr	r3, [pc, #32]	; (d1b4 <configure_pins+0x3c>)
    d194:	4798      	blx	r3
	
	// Button
	configure_port_pin.direction = PORT_PIN_DIR_INPUT;
    d196:	1d3b      	adds	r3, r7, #4
    d198:	2200      	movs	r2, #0
    d19a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BUTTON_DEBUG, &configure_port_pin);
    d19c:	1d3b      	adds	r3, r7, #4
    d19e:	0019      	movs	r1, r3
    d1a0:	2018      	movs	r0, #24
    d1a2:	4b04      	ldr	r3, [pc, #16]	; (d1b4 <configure_pins+0x3c>)
    d1a4:	4798      	blx	r3
}
    d1a6:	46c0      	nop			; (mov r8, r8)
    d1a8:	46bd      	mov	sp, r7
    d1aa:	b002      	add	sp, #8
    d1ac:	bd80      	pop	{r7, pc}
    d1ae:	46c0      	nop			; (mov r8, r8)
    d1b0:	0000c3ad 	.word	0x0000c3ad
    d1b4:	00008735 	.word	0x00008735

0000d1b8 <init_state>:

static void init_state(void)
{
    d1b8:	b580      	push	{r7, lr}
    d1ba:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
    d1bc:	4b02      	ldr	r3, [pc, #8]	; (d1c8 <init_state+0x10>)
    d1be:	2200      	movs	r2, #0
    d1c0:	701a      	strb	r2, [r3, #0]
}
    d1c2:	46c0      	nop			; (mov r8, r8)
    d1c4:	46bd      	mov	sp, r7
    d1c6:	bd80      	pop	{r7, pc}
    d1c8:	200002ea 	.word	0x200002ea

0000d1cc <clear_state>:


static void clear_state(download_state mask)
{
    d1cc:	b580      	push	{r7, lr}
    d1ce:	b082      	sub	sp, #8
    d1d0:	af00      	add	r7, sp, #0
    d1d2:	0002      	movs	r2, r0
    d1d4:	1dfb      	adds	r3, r7, #7
    d1d6:	701a      	strb	r2, [r3, #0]
	down_state &= ~mask;
    d1d8:	1dfb      	adds	r3, r7, #7
    d1da:	781b      	ldrb	r3, [r3, #0]
    d1dc:	b25b      	sxtb	r3, r3
    d1de:	43db      	mvns	r3, r3
    d1e0:	b25b      	sxtb	r3, r3
    d1e2:	4a06      	ldr	r2, [pc, #24]	; (d1fc <clear_state+0x30>)
    d1e4:	7812      	ldrb	r2, [r2, #0]
    d1e6:	b252      	sxtb	r2, r2
    d1e8:	4013      	ands	r3, r2
    d1ea:	b25b      	sxtb	r3, r3
    d1ec:	b2da      	uxtb	r2, r3
    d1ee:	4b03      	ldr	r3, [pc, #12]	; (d1fc <clear_state+0x30>)
    d1f0:	701a      	strb	r2, [r3, #0]
}
    d1f2:	46c0      	nop			; (mov r8, r8)
    d1f4:	46bd      	mov	sp, r7
    d1f6:	b002      	add	sp, #8
    d1f8:	bd80      	pop	{r7, pc}
    d1fa:	46c0      	nop			; (mov r8, r8)
    d1fc:	200002ea 	.word	0x200002ea

0000d200 <add_state>:

static void add_state(download_state mask)
{
    d200:	b580      	push	{r7, lr}
    d202:	b082      	sub	sp, #8
    d204:	af00      	add	r7, sp, #0
    d206:	0002      	movs	r2, r0
    d208:	1dfb      	adds	r3, r7, #7
    d20a:	701a      	strb	r2, [r3, #0]
	down_state |= mask;
    d20c:	4b05      	ldr	r3, [pc, #20]	; (d224 <add_state+0x24>)
    d20e:	781a      	ldrb	r2, [r3, #0]
    d210:	1dfb      	adds	r3, r7, #7
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	4313      	orrs	r3, r2
    d216:	b2da      	uxtb	r2, r3
    d218:	4b02      	ldr	r3, [pc, #8]	; (d224 <add_state+0x24>)
    d21a:	701a      	strb	r2, [r3, #0]
}
    d21c:	46c0      	nop			; (mov r8, r8)
    d21e:	46bd      	mov	sp, r7
    d220:	b002      	add	sp, #8
    d222:	bd80      	pop	{r7, pc}
    d224:	200002ea 	.word	0x200002ea

0000d228 <is_state_set>:


static inline bool is_state_set(download_state mask)
{
    d228:	b580      	push	{r7, lr}
    d22a:	b082      	sub	sp, #8
    d22c:	af00      	add	r7, sp, #0
    d22e:	0002      	movs	r2, r0
    d230:	1dfb      	adds	r3, r7, #7
    d232:	701a      	strb	r2, [r3, #0]
	return ((down_state & mask) != 0);
    d234:	4b06      	ldr	r3, [pc, #24]	; (d250 <is_state_set+0x28>)
    d236:	781b      	ldrb	r3, [r3, #0]
    d238:	1dfa      	adds	r2, r7, #7
    d23a:	7812      	ldrb	r2, [r2, #0]
    d23c:	4013      	ands	r3, r2
    d23e:	b2db      	uxtb	r3, r3
    d240:	1e5a      	subs	r2, r3, #1
    d242:	4193      	sbcs	r3, r2
    d244:	b2db      	uxtb	r3, r3
}
    d246:	0018      	movs	r0, r3
    d248:	46bd      	mov	sp, r7
    d24a:	b002      	add	sp, #8
    d24c:	bd80      	pop	{r7, pc}
    d24e:	46c0      	nop			; (mov r8, r8)
    d250:	200002ea 	.word	0x200002ea

0000d254 <start_download>:


static void start_download(void)
{
    d254:	b590      	push	{r4, r7, lr}
    d256:	b083      	sub	sp, #12
    d258:	af02      	add	r7, sp, #8
	if (!is_state_set(WIFI_CONNECTED)) {
    d25a:	2002      	movs	r0, #2
    d25c:	4b18      	ldr	r3, [pc, #96]	; (d2c0 <start_download+0x6c>)
    d25e:	4798      	blx	r3
    d260:	0003      	movs	r3, r0
    d262:	001a      	movs	r2, r3
    d264:	2301      	movs	r3, #1
    d266:	4053      	eors	r3, r2
    d268:	b2db      	uxtb	r3, r3
    d26a:	2b00      	cmp	r3, #0
    d26c:	d004      	beq.n	d278 <start_download+0x24>
		printf("start_download: Wi-Fi is not connected.\r\n");
    d26e:	4b15      	ldr	r3, [pc, #84]	; (d2c4 <start_download+0x70>)
    d270:	0018      	movs	r0, r3
    d272:	4b15      	ldr	r3, [pc, #84]	; (d2c8 <start_download+0x74>)
    d274:	4798      	blx	r3
		return;
    d276:	e01f      	b.n	d2b8 <start_download+0x64>
	}

	if (is_state_set(GET_REQUESTED)) {
    d278:	2004      	movs	r0, #4
    d27a:	4b11      	ldr	r3, [pc, #68]	; (d2c0 <start_download+0x6c>)
    d27c:	4798      	blx	r3
    d27e:	1e03      	subs	r3, r0, #0
    d280:	d004      	beq.n	d28c <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
    d282:	4b12      	ldr	r3, [pc, #72]	; (d2cc <start_download+0x78>)
    d284:	0018      	movs	r0, r3
    d286:	4b10      	ldr	r3, [pc, #64]	; (d2c8 <start_download+0x74>)
    d288:	4798      	blx	r3
		return;
    d28a:	e015      	b.n	d2b8 <start_download+0x64>
	}

	if (is_state_set(DOWNLOADING)) {
    d28c:	2008      	movs	r0, #8
    d28e:	4b0c      	ldr	r3, [pc, #48]	; (d2c0 <start_download+0x6c>)
    d290:	4798      	blx	r3
    d292:	1e03      	subs	r3, r0, #0
    d294:	d004      	beq.n	d2a0 <start_download+0x4c>
		printf("start_download: running download already.\r\n");
    d296:	4b0e      	ldr	r3, [pc, #56]	; (d2d0 <start_download+0x7c>)
    d298:	0018      	movs	r0, r3
    d29a:	4b0b      	ldr	r3, [pc, #44]	; (d2c8 <start_download+0x74>)
    d29c:	4798      	blx	r3
		return;
    d29e:	e00b      	b.n	d2b8 <start_download+0x64>
	}

	/* Send the HTTP request. */
	printf("start_download: sending HTTP request...\r\n");
    d2a0:	4b0c      	ldr	r3, [pc, #48]	; (d2d4 <start_download+0x80>)
    d2a2:	0018      	movs	r0, r3
    d2a4:	4b08      	ldr	r3, [pc, #32]	; (d2c8 <start_download+0x74>)
    d2a6:	4798      	blx	r3
	
	//if (meta_flag)
	//{
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    d2a8:	490b      	ldr	r1, [pc, #44]	; (d2d8 <start_download+0x84>)
    d2aa:	480c      	ldr	r0, [pc, #48]	; (d2dc <start_download+0x88>)
    d2ac:	2300      	movs	r3, #0
    d2ae:	9300      	str	r3, [sp, #0]
    d2b0:	2300      	movs	r3, #0
    d2b2:	2201      	movs	r2, #1
    d2b4:	4c0a      	ldr	r4, [pc, #40]	; (d2e0 <start_download+0x8c>)
    d2b6:	47a0      	blx	r4
	//}
	//else
	//{
		//http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
		//}
}
    d2b8:	46bd      	mov	sp, r7
    d2ba:	b001      	add	sp, #4
    d2bc:	bd90      	pop	{r4, r7, pc}
    d2be:	46c0      	nop			; (mov r8, r8)
    d2c0:	0000d229 	.word	0x0000d229
    d2c4:	00014c50 	.word	0x00014c50
    d2c8:	00012249 	.word	0x00012249
    d2cc:	00014c7c 	.word	0x00014c7c
    d2d0:	00014ca8 	.word	0x00014ca8
    d2d4:	00014cd4 	.word	0x00014cd4
    d2d8:	00014d00 	.word	0x00014d00
    d2dc:	20000870 	.word	0x20000870
    d2e0:	00000cbd 	.word	0x00000cbd

0000d2e4 <socket_cb>:
		break;
	}
}

static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    d2e4:	b580      	push	{r7, lr}
    d2e6:	b082      	sub	sp, #8
    d2e8:	af00      	add	r7, sp, #0
    d2ea:	603a      	str	r2, [r7, #0]
    d2ec:	1dfb      	adds	r3, r7, #7
    d2ee:	1c02      	adds	r2, r0, #0
    d2f0:	701a      	strb	r2, [r3, #0]
    d2f2:	1dbb      	adds	r3, r7, #6
    d2f4:	1c0a      	adds	r2, r1, #0
    d2f6:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    d2f8:	683a      	ldr	r2, [r7, #0]
    d2fa:	1dbb      	adds	r3, r7, #6
    d2fc:	7819      	ldrb	r1, [r3, #0]
    d2fe:	1dfb      	adds	r3, r7, #7
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	b25b      	sxtb	r3, r3
    d304:	0018      	movs	r0, r3
    d306:	4b07      	ldr	r3, [pc, #28]	; (d324 <socket_cb+0x40>)
    d308:	4798      	blx	r3
	mqtt_socket_event_handler(sock, u8Msg, pvMsg);
    d30a:	683a      	ldr	r2, [r7, #0]
    d30c:	1dbb      	adds	r3, r7, #6
    d30e:	7819      	ldrb	r1, [r3, #0]
    d310:	1dfb      	adds	r3, r7, #7
    d312:	781b      	ldrb	r3, [r3, #0]
    d314:	b25b      	sxtb	r3, r3
    d316:	0018      	movs	r0, r3
    d318:	4b03      	ldr	r3, [pc, #12]	; (d328 <socket_cb+0x44>)
    d31a:	4798      	blx	r3
}
    d31c:	46c0      	nop			; (mov r8, r8)
    d31e:	46bd      	mov	sp, r7
    d320:	b002      	add	sp, #8
    d322:	bd80      	pop	{r7, pc}
    d324:	000009cd 	.word	0x000009cd
    d328:	0000fe9d 	.word	0x0000fe9d

0000d32c <resolve_cb>:

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    d32c:	b5b0      	push	{r4, r5, r7, lr}
    d32e:	b084      	sub	sp, #16
    d330:	af02      	add	r7, sp, #8
    d332:	6078      	str	r0, [r7, #4]
    d334:	6039      	str	r1, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    d336:	683b      	ldr	r3, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    d338:	22ff      	movs	r2, #255	; 0xff
    d33a:	4013      	ands	r3, r2
    d33c:	001c      	movs	r4, r3
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    d33e:	683b      	ldr	r3, [r7, #0]
    d340:	0a1b      	lsrs	r3, r3, #8
    d342:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    d344:	23ff      	movs	r3, #255	; 0xff
    d346:	401a      	ands	r2, r3
    d348:	0015      	movs	r5, r2
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    d34a:	683b      	ldr	r3, [r7, #0]
    d34c:	0c1b      	lsrs	r3, r3, #16
    d34e:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    d350:	23ff      	movs	r3, #255	; 0xff
    d352:	4013      	ands	r3, r2
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    d354:	683a      	ldr	r2, [r7, #0]
    d356:	0e12      	lsrs	r2, r2, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    d358:	6879      	ldr	r1, [r7, #4]
    d35a:	480b      	ldr	r0, [pc, #44]	; (d388 <resolve_cb+0x5c>)
    d35c:	9201      	str	r2, [sp, #4]
    d35e:	9300      	str	r3, [sp, #0]
    d360:	002b      	movs	r3, r5
    d362:	0022      	movs	r2, r4
    d364:	4c09      	ldr	r4, [pc, #36]	; (d38c <resolve_cb+0x60>)
    d366:	47a0      	blx	r4
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    d368:	683a      	ldr	r2, [r7, #0]
    d36a:	687b      	ldr	r3, [r7, #4]
    d36c:	0011      	movs	r1, r2
    d36e:	0018      	movs	r0, r3
    d370:	4b07      	ldr	r3, [pc, #28]	; (d390 <resolve_cb+0x64>)
    d372:	4798      	blx	r3
	mqtt_socket_resolve_handler(pu8DomainName, u32ServerIP);
    d374:	683a      	ldr	r2, [r7, #0]
    d376:	687b      	ldr	r3, [r7, #4]
    d378:	0011      	movs	r1, r2
    d37a:	0018      	movs	r0, r3
    d37c:	4b05      	ldr	r3, [pc, #20]	; (d394 <resolve_cb+0x68>)
    d37e:	4798      	blx	r3
}
    d380:	46c0      	nop			; (mov r8, r8)
    d382:	46bd      	mov	sp, r7
    d384:	b002      	add	sp, #8
    d386:	bdb0      	pop	{r4, r5, r7, pc}
    d388:	00014e08 	.word	0x00014e08
    d38c:	0001212d 	.word	0x0001212d
    d390:	00000b31 	.word	0x00000b31
    d394:	0000f2fd 	.word	0x0000f2fd

0000d398 <mqtt_callback>:

static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    d398:	b590      	push	{r4, r7, lr}
    d39a:	b08d      	sub	sp, #52	; 0x34
    d39c:	af06      	add	r7, sp, #24
    d39e:	60f8      	str	r0, [r7, #12]
    d3a0:	60b9      	str	r1, [r7, #8]
    d3a2:	607a      	str	r2, [r7, #4]
	switch (type) {
    d3a4:	68bb      	ldr	r3, [r7, #8]
    d3a6:	2b01      	cmp	r3, #1
    d3a8:	d02e      	beq.n	d408 <mqtt_callback+0x70>
    d3aa:	dc02      	bgt.n	d3b2 <mqtt_callback+0x1a>
    d3ac:	2b00      	cmp	r3, #0
    d3ae:	d006      	beq.n	d3be <mqtt_callback+0x26>
	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
		break;
	}
}
    d3b0:	e088      	b.n	d4c4 <mqtt_callback+0x12c>
	switch (type) {
    d3b2:	2b05      	cmp	r3, #5
    d3b4:	d100      	bne.n	d3b8 <mqtt_callback+0x20>
    d3b6:	e07f      	b.n	d4b8 <mqtt_callback+0x120>
    d3b8:	2b06      	cmp	r3, #6
    d3ba:	d039      	beq.n	d430 <mqtt_callback+0x98>
}
    d3bc:	e082      	b.n	d4c4 <mqtt_callback+0x12c>
		if (data->sock_connected.result >= 0) {
    d3be:	687b      	ldr	r3, [r7, #4]
    d3c0:	681b      	ldr	r3, [r3, #0]
    d3c2:	2b00      	cmp	r3, #0
    d3c4:	db13      	blt.n	d3ee <mqtt_callback+0x56>
			mqtt_connect_broker(module_inst, 1, MQTT_ID, MQTT_PASSWORD, MQTT_CLIENT_ID, NULL, NULL, 0, 0, 0);
    d3c6:	4941      	ldr	r1, [pc, #260]	; (d4cc <mqtt_callback+0x134>)
    d3c8:	4a41      	ldr	r2, [pc, #260]	; (d4d0 <mqtt_callback+0x138>)
    d3ca:	68f8      	ldr	r0, [r7, #12]
    d3cc:	2300      	movs	r3, #0
    d3ce:	9305      	str	r3, [sp, #20]
    d3d0:	2300      	movs	r3, #0
    d3d2:	9304      	str	r3, [sp, #16]
    d3d4:	2300      	movs	r3, #0
    d3d6:	9303      	str	r3, [sp, #12]
    d3d8:	2300      	movs	r3, #0
    d3da:	9302      	str	r3, [sp, #8]
    d3dc:	2300      	movs	r3, #0
    d3de:	9301      	str	r3, [sp, #4]
    d3e0:	4b3b      	ldr	r3, [pc, #236]	; (d4d0 <mqtt_callback+0x138>)
    d3e2:	9300      	str	r3, [sp, #0]
    d3e4:	000b      	movs	r3, r1
    d3e6:	2101      	movs	r1, #1
    d3e8:	4c3a      	ldr	r4, [pc, #232]	; (d4d4 <mqtt_callback+0x13c>)
    d3ea:	47a0      	blx	r4
	break;
    d3ec:	e06a      	b.n	d4c4 <mqtt_callback+0x12c>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    d3ee:	4a3a      	ldr	r2, [pc, #232]	; (d4d8 <mqtt_callback+0x140>)
    d3f0:	4b3a      	ldr	r3, [pc, #232]	; (d4dc <mqtt_callback+0x144>)
    d3f2:	0011      	movs	r1, r2
    d3f4:	0018      	movs	r0, r3
    d3f6:	4b3a      	ldr	r3, [pc, #232]	; (d4e0 <mqtt_callback+0x148>)
    d3f8:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    d3fa:	4a37      	ldr	r2, [pc, #220]	; (d4d8 <mqtt_callback+0x140>)
    d3fc:	68fb      	ldr	r3, [r7, #12]
    d3fe:	0011      	movs	r1, r2
    d400:	0018      	movs	r0, r3
    d402:	4b38      	ldr	r3, [pc, #224]	; (d4e4 <mqtt_callback+0x14c>)
    d404:	4798      	blx	r3
	break;
    d406:	e05d      	b.n	d4c4 <mqtt_callback+0x12c>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    d408:	687b      	ldr	r3, [r7, #4]
    d40a:	781b      	ldrb	r3, [r3, #0]
    d40c:	2b00      	cmp	r3, #0
    d40e:	d106      	bne.n	d41e <mqtt_callback+0x86>
			mqtt_subscribe(module_inst, MAIN_MQTT_TOPIC, 1);					/* Subscribe chat topic. */
    d410:	4935      	ldr	r1, [pc, #212]	; (d4e8 <mqtt_callback+0x150>)
    d412:	68fb      	ldr	r3, [r7, #12]
    d414:	2201      	movs	r2, #1
    d416:	0018      	movs	r0, r3
    d418:	4b34      	ldr	r3, [pc, #208]	; (d4ec <mqtt_callback+0x154>)
    d41a:	4798      	blx	r3
		break;
    d41c:	e052      	b.n	d4c4 <mqtt_callback+0x12c>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    d41e:	687b      	ldr	r3, [r7, #4]
    d420:	781b      	ldrb	r3, [r3, #0]
    d422:	001a      	movs	r2, r3
    d424:	4b32      	ldr	r3, [pc, #200]	; (d4f0 <mqtt_callback+0x158>)
    d426:	0011      	movs	r1, r2
    d428:	0018      	movs	r0, r3
    d42a:	4b2d      	ldr	r3, [pc, #180]	; (d4e0 <mqtt_callback+0x148>)
    d42c:	4798      	blx	r3
		break;
    d42e:	e049      	b.n	d4c4 <mqtt_callback+0x12c>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    d430:	687b      	ldr	r3, [r7, #4]
    d432:	681b      	ldr	r3, [r3, #0]
    d434:	2b00      	cmp	r3, #0
    d436:	d044      	beq.n	d4c2 <mqtt_callback+0x12a>
    d438:	687b      	ldr	r3, [r7, #4]
    d43a:	689b      	ldr	r3, [r3, #8]
    d43c:	2b00      	cmp	r3, #0
    d43e:	d040      	beq.n	d4c2 <mqtt_callback+0x12a>
				for (int i = strlen(MAIN_MQTT_TOPIC)-1; i < data->recv_publish.topic_size; i++) {
    d440:	230a      	movs	r3, #10
    d442:	617b      	str	r3, [r7, #20]
    d444:	e00a      	b.n	d45c <mqtt_callback+0xc4>
					printf("%c", data->recv_publish.topic[i]);
    d446:	687b      	ldr	r3, [r7, #4]
    d448:	681a      	ldr	r2, [r3, #0]
    d44a:	697b      	ldr	r3, [r7, #20]
    d44c:	18d3      	adds	r3, r2, r3
    d44e:	781b      	ldrb	r3, [r3, #0]
    d450:	0018      	movs	r0, r3
    d452:	4b28      	ldr	r3, [pc, #160]	; (d4f4 <mqtt_callback+0x15c>)
    d454:	4798      	blx	r3
				for (int i = strlen(MAIN_MQTT_TOPIC)-1; i < data->recv_publish.topic_size; i++) {
    d456:	697b      	ldr	r3, [r7, #20]
    d458:	3301      	adds	r3, #1
    d45a:	617b      	str	r3, [r7, #20]
    d45c:	687b      	ldr	r3, [r7, #4]
    d45e:	685a      	ldr	r2, [r3, #4]
    d460:	697b      	ldr	r3, [r7, #20]
    d462:	429a      	cmp	r2, r3
    d464:	dcef      	bgt.n	d446 <mqtt_callback+0xae>
				printf(" >> ");
    d466:	4b24      	ldr	r3, [pc, #144]	; (d4f8 <mqtt_callback+0x160>)
    d468:	0018      	movs	r0, r3
    d46a:	4b1d      	ldr	r3, [pc, #116]	; (d4e0 <mqtt_callback+0x148>)
    d46c:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    d46e:	2300      	movs	r3, #0
    d470:	613b      	str	r3, [r7, #16]
    d472:	e00a      	b.n	d48a <mqtt_callback+0xf2>
					printf("%c", data->recv_publish.msg[i]);
    d474:	687b      	ldr	r3, [r7, #4]
    d476:	689a      	ldr	r2, [r3, #8]
    d478:	693b      	ldr	r3, [r7, #16]
    d47a:	18d3      	adds	r3, r2, r3
    d47c:	781b      	ldrb	r3, [r3, #0]
    d47e:	0018      	movs	r0, r3
    d480:	4b1c      	ldr	r3, [pc, #112]	; (d4f4 <mqtt_callback+0x15c>)
    d482:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    d484:	693b      	ldr	r3, [r7, #16]
    d486:	3301      	adds	r3, #1
    d488:	613b      	str	r3, [r7, #16]
    d48a:	687b      	ldr	r3, [r7, #4]
    d48c:	68da      	ldr	r2, [r3, #12]
    d48e:	693b      	ldr	r3, [r7, #16]
    d490:	429a      	cmp	r2, r3
    d492:	dcef      	bgt.n	d474 <mqtt_callback+0xdc>
				printf("\r\n");
    d494:	4b19      	ldr	r3, [pc, #100]	; (d4fc <mqtt_callback+0x164>)
    d496:	0018      	movs	r0, r3
    d498:	4b19      	ldr	r3, [pc, #100]	; (d500 <mqtt_callback+0x168>)
    d49a:	4798      	blx	r3
				if (data->recv_publish.topic[11] == 'u')
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	681b      	ldr	r3, [r3, #0]
    d4a0:	330b      	adds	r3, #11
    d4a2:	781b      	ldrb	r3, [r3, #0]
    d4a4:	2b75      	cmp	r3, #117	; 0x75
    d4a6:	d10c      	bne.n	d4c2 <mqtt_callback+0x12a>
					printf("inside if\r\n");
    d4a8:	4b16      	ldr	r3, [pc, #88]	; (d504 <mqtt_callback+0x16c>)
    d4aa:	0018      	movs	r0, r3
    d4ac:	4b14      	ldr	r3, [pc, #80]	; (d500 <mqtt_callback+0x168>)
    d4ae:	4798      	blx	r3
					prox_read_flag=true;
    d4b0:	4b15      	ldr	r3, [pc, #84]	; (d508 <mqtt_callback+0x170>)
    d4b2:	2201      	movs	r2, #1
    d4b4:	701a      	strb	r2, [r3, #0]
		break;
    d4b6:	e004      	b.n	d4c2 <mqtt_callback+0x12a>
		printf("MQTT disconnected\r\n");
    d4b8:	4b14      	ldr	r3, [pc, #80]	; (d50c <mqtt_callback+0x174>)
    d4ba:	0018      	movs	r0, r3
    d4bc:	4b10      	ldr	r3, [pc, #64]	; (d500 <mqtt_callback+0x168>)
    d4be:	4798      	blx	r3
		break;
    d4c0:	e000      	b.n	d4c4 <mqtt_callback+0x12c>
		break;
    d4c2:	46c0      	nop			; (mov r8, r8)
}
    d4c4:	46c0      	nop			; (mov r8, r8)
    d4c6:	46bd      	mov	sp, r7
    d4c8:	b007      	add	sp, #28
    d4ca:	bd90      	pop	{r4, r7, pc}
    d4cc:	00014e38 	.word	0x00014e38
    d4d0:	00014e48 	.word	0x00014e48
    d4d4:	0000f465 	.word	0x0000f465
    d4d8:	0001490c 	.word	0x0001490c
    d4dc:	00014e54 	.word	0x00014e54
    d4e0:	0001212d 	.word	0x0001212d
    d4e4:	0000f351 	.word	0x0000f351
    d4e8:	00014e8c 	.word	0x00014e8c
    d4ec:	0000f8bd 	.word	0x0000f8bd
    d4f0:	00014e98 	.word	0x00014e98
    d4f4:	00012161 	.word	0x00012161
    d4f8:	00014ecc 	.word	0x00014ecc
    d4fc:	00014ac4 	.word	0x00014ac4
    d500:	00012249 	.word	0x00012249
    d504:	00014ed4 	.word	0x00014ed4
    d508:	20000790 	.word	0x20000790
    d50c:	00014ee0 	.word	0x00014ee0

0000d510 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    d510:	b590      	push	{r4, r7, lr}
    d512:	b087      	sub	sp, #28
    d514:	af02      	add	r7, sp, #8
    d516:	0002      	movs	r2, r0
    d518:	6039      	str	r1, [r7, #0]
    d51a:	1dfb      	adds	r3, r7, #7
    d51c:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    d51e:	1dfb      	adds	r3, r7, #7
    d520:	781b      	ldrb	r3, [r3, #0]
    d522:	2b2c      	cmp	r3, #44	; 0x2c
    d524:	d002      	beq.n	d52c <wifi_cb+0x1c>
    d526:	2b32      	cmp	r3, #50	; 0x32
    d528:	d037      	beq.n	d59a <wifi_cb+0x8a>
			mqtt_connect(&mqtt_inst, main_mqtt_broker);
			break;
		}

		default:
		break;
    d52a:	e058      	b.n	d5de <wifi_cb+0xce>
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    d52c:	683b      	ldr	r3, [r7, #0]
    d52e:	60fb      	str	r3, [r7, #12]
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    d530:	68fb      	ldr	r3, [r7, #12]
    d532:	781b      	ldrb	r3, [r3, #0]
    d534:	2b01      	cmp	r3, #1
    d536:	d106      	bne.n	d546 <wifi_cb+0x36>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    d538:	4b2b      	ldr	r3, [pc, #172]	; (d5e8 <wifi_cb+0xd8>)
    d53a:	0018      	movs	r0, r3
    d53c:	4b2b      	ldr	r3, [pc, #172]	; (d5ec <wifi_cb+0xdc>)
    d53e:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    d540:	4b2b      	ldr	r3, [pc, #172]	; (d5f0 <wifi_cb+0xe0>)
    d542:	4798      	blx	r3
			break;
    d544:	e04a      	b.n	d5dc <wifi_cb+0xcc>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    d546:	68fb      	ldr	r3, [r7, #12]
    d548:	781b      	ldrb	r3, [r3, #0]
    d54a:	2b00      	cmp	r3, #0
    d54c:	d146      	bne.n	d5dc <wifi_cb+0xcc>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    d54e:	4b29      	ldr	r3, [pc, #164]	; (d5f4 <wifi_cb+0xe4>)
    d550:	0018      	movs	r0, r3
    d552:	4b26      	ldr	r3, [pc, #152]	; (d5ec <wifi_cb+0xdc>)
    d554:	4798      	blx	r3
				clear_state(WIFI_CONNECTED);
    d556:	2002      	movs	r0, #2
    d558:	4b27      	ldr	r3, [pc, #156]	; (d5f8 <wifi_cb+0xe8>)
    d55a:	4798      	blx	r3
				if (is_state_set(DOWNLOADING)) {
    d55c:	2008      	movs	r0, #8
    d55e:	4b27      	ldr	r3, [pc, #156]	; (d5fc <wifi_cb+0xec>)
    d560:	4798      	blx	r3
    d562:	1e03      	subs	r3, r0, #0
    d564:	d002      	beq.n	d56c <wifi_cb+0x5c>
					clear_state(DOWNLOADING);
    d566:	2008      	movs	r0, #8
    d568:	4b23      	ldr	r3, [pc, #140]	; (d5f8 <wifi_cb+0xe8>)
    d56a:	4798      	blx	r3
				if (is_state_set(GET_REQUESTED)) {
    d56c:	2004      	movs	r0, #4
    d56e:	4b23      	ldr	r3, [pc, #140]	; (d5fc <wifi_cb+0xec>)
    d570:	4798      	blx	r3
    d572:	1e03      	subs	r3, r0, #0
    d574:	d002      	beq.n	d57c <wifi_cb+0x6c>
					clear_state(GET_REQUESTED);
    d576:	2004      	movs	r0, #4
    d578:	4b1f      	ldr	r3, [pc, #124]	; (d5f8 <wifi_cb+0xe8>)
    d57a:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    d57c:	4a20      	ldr	r2, [pc, #128]	; (d600 <wifi_cb+0xf0>)
    d57e:	4821      	ldr	r0, [pc, #132]	; (d604 <wifi_cb+0xf4>)
    d580:	23ff      	movs	r3, #255	; 0xff
    d582:	9300      	str	r3, [sp, #0]
    d584:	0013      	movs	r3, r2
    d586:	2202      	movs	r2, #2
    d588:	2112      	movs	r1, #18
    d58a:	4c1f      	ldr	r4, [pc, #124]	; (d608 <wifi_cb+0xf8>)
    d58c:	47a0      	blx	r4
				mqtt_disconnect(&mqtt_inst, 1);
    d58e:	4b1f      	ldr	r3, [pc, #124]	; (d60c <wifi_cb+0xfc>)
    d590:	2101      	movs	r1, #1
    d592:	0018      	movs	r0, r3
    d594:	4b1e      	ldr	r3, [pc, #120]	; (d610 <wifi_cb+0x100>)
    d596:	4798      	blx	r3
			break;
    d598:	e020      	b.n	d5dc <wifi_cb+0xcc>
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    d59a:	683b      	ldr	r3, [r7, #0]
    d59c:	60bb      	str	r3, [r7, #8]
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d59e:	68bb      	ldr	r3, [r7, #8]
    d5a0:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    d5a2:	0019      	movs	r1, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d5a4:	68bb      	ldr	r3, [r7, #8]
    d5a6:	3301      	adds	r3, #1
    d5a8:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    d5aa:	001a      	movs	r2, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d5ac:	68bb      	ldr	r3, [r7, #8]
    d5ae:	3302      	adds	r3, #2
    d5b0:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    d5b2:	001c      	movs	r4, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d5b4:	68bb      	ldr	r3, [r7, #8]
    d5b6:	3303      	adds	r3, #3
    d5b8:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    d5ba:	4816      	ldr	r0, [pc, #88]	; (d614 <wifi_cb+0x104>)
    d5bc:	9300      	str	r3, [sp, #0]
    d5be:	0023      	movs	r3, r4
    d5c0:	4c15      	ldr	r4, [pc, #84]	; (d618 <wifi_cb+0x108>)
    d5c2:	47a0      	blx	r4
			add_state(WIFI_CONNECTED);
    d5c4:	2002      	movs	r0, #2
    d5c6:	4b15      	ldr	r3, [pc, #84]	; (d61c <wifi_cb+0x10c>)
    d5c8:	4798      	blx	r3
			start_download();
    d5ca:	4b15      	ldr	r3, [pc, #84]	; (d620 <wifi_cb+0x110>)
    d5cc:	4798      	blx	r3
			mqtt_connect(&mqtt_inst, main_mqtt_broker);
    d5ce:	4a15      	ldr	r2, [pc, #84]	; (d624 <wifi_cb+0x114>)
    d5d0:	4b0e      	ldr	r3, [pc, #56]	; (d60c <wifi_cb+0xfc>)
    d5d2:	0011      	movs	r1, r2
    d5d4:	0018      	movs	r0, r3
    d5d6:	4b14      	ldr	r3, [pc, #80]	; (d628 <wifi_cb+0x118>)
    d5d8:	4798      	blx	r3
			break;
    d5da:	e000      	b.n	d5de <wifi_cb+0xce>
			break;
    d5dc:	46c0      	nop			; (mov r8, r8)
	}
}
    d5de:	46c0      	nop			; (mov r8, r8)
    d5e0:	46bd      	mov	sp, r7
    d5e2:	b005      	add	sp, #20
    d5e4:	bd90      	pop	{r4, r7, pc}
    d5e6:	46c0      	nop			; (mov r8, r8)
    d5e8:	00014ef4 	.word	0x00014ef4
    d5ec:	00012249 	.word	0x00012249
    d5f0:	00003dcd 	.word	0x00003dcd
    d5f4:	00014f14 	.word	0x00014f14
    d5f8:	0000d1cd 	.word	0x0000d1cd
    d5fc:	0000d229 	.word	0x0000d229
    d600:	00014f34 	.word	0x00014f34
    d604:	00014f44 	.word	0x00014f44
    d608:	00003a11 	.word	0x00003a11
    d60c:	200002ec 	.word	0x200002ec
    d610:	0000fb5d 	.word	0x0000fb5d
    d614:	00014f58 	.word	0x00014f58
    d618:	0001212d 	.word	0x0001212d
    d61c:	0000d201 	.word	0x0000d201
    d620:	0000d255 	.word	0x0000d255
    d624:	0001490c 	.word	0x0001490c
    d628:	0000f351 	.word	0x0000f351

0000d62c <configure_http_client>:

static void configure_http_client(void)
{
    d62c:	b580      	push	{r7, lr}
    d62e:	b088      	sub	sp, #32
    d630:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
    d632:	003b      	movs	r3, r7
    d634:	0018      	movs	r0, r3
    d636:	4b0f      	ldr	r3, [pc, #60]	; (d674 <configure_http_client+0x48>)
    d638:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    d63a:	003b      	movs	r3, r7
    d63c:	4a0e      	ldr	r2, [pc, #56]	; (d678 <configure_http_client+0x4c>)
    d63e:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
    d640:	003b      	movs	r3, r7
    d642:	4a0e      	ldr	r2, [pc, #56]	; (d67c <configure_http_client+0x50>)
    d644:	605a      	str	r2, [r3, #4]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    d646:	003a      	movs	r2, r7
    d648:	4b0d      	ldr	r3, [pc, #52]	; (d680 <configure_http_client+0x54>)
    d64a:	0011      	movs	r1, r2
    d64c:	0018      	movs	r0, r3
    d64e:	4b0d      	ldr	r3, [pc, #52]	; (d684 <configure_http_client+0x58>)
    d650:	4798      	blx	r3
    d652:	0003      	movs	r3, r0
    d654:	61fb      	str	r3, [r7, #28]
	if (ret < 0)
    d656:	69fb      	ldr	r3, [r7, #28]
    d658:	2b00      	cmp	r3, #0
    d65a:	da06      	bge.n	d66a <configure_http_client+0x3e>
	{
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    d65c:	69fa      	ldr	r2, [r7, #28]
    d65e:	4b0a      	ldr	r3, [pc, #40]	; (d688 <configure_http_client+0x5c>)
    d660:	0011      	movs	r1, r2
    d662:	0018      	movs	r0, r3
    d664:	4b09      	ldr	r3, [pc, #36]	; (d68c <configure_http_client+0x60>)
    d666:	4798      	blx	r3
		while (1)
    d668:	e7fe      	b.n	d668 <configure_http_client+0x3c>
		{
			/* Loop forever. */
		}
	}
	//http_client_register_callback(&http_client_module_inst, http_client_callback); //this is to start downloading files
}
    d66a:	46c0      	nop			; (mov r8, r8)
    d66c:	46bd      	mov	sp, r7
    d66e:	b008      	add	sp, #32
    d670:	bd80      	pop	{r7, pc}
    d672:	46c0      	nop			; (mov r8, r8)
    d674:	0000081d 	.word	0x0000081d
    d678:	000005a6 	.word	0x000005a6
    d67c:	200007e4 	.word	0x200007e4
    d680:	20000870 	.word	0x20000870
    d684:	00000869 	.word	0x00000869
    d688:	00014f80 	.word	0x00014f80
    d68c:	0001212d 	.word	0x0001212d

0000d690 <configure_timer>:

static void configure_timer(void)
{
    d690:	b580      	push	{r7, lr}
    d692:	b082      	sub	sp, #8
    d694:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    d696:	1d3b      	adds	r3, r7, #4
    d698:	0018      	movs	r0, r3
    d69a:	4b0d      	ldr	r3, [pc, #52]	; (d6d0 <configure_timer+0x40>)
    d69c:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    d69e:	1d3a      	adds	r2, r7, #4
    d6a0:	4b0c      	ldr	r3, [pc, #48]	; (d6d4 <configure_timer+0x44>)
    d6a2:	0011      	movs	r1, r2
    d6a4:	0018      	movs	r0, r3
    d6a6:	4b0c      	ldr	r3, [pc, #48]	; (d6d8 <configure_timer+0x48>)
    d6a8:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    d6aa:	4b0a      	ldr	r3, [pc, #40]	; (d6d4 <configure_timer+0x44>)
    d6ac:	0018      	movs	r0, r3
    d6ae:	4b0b      	ldr	r3, [pc, #44]	; (d6dc <configure_timer+0x4c>)
    d6b0:	4798      	blx	r3
	
	sw_timer_init(&swt_module_inst_mqtt, &swt_conf);
    d6b2:	1d3a      	adds	r2, r7, #4
    d6b4:	4b0a      	ldr	r3, [pc, #40]	; (d6e0 <configure_timer+0x50>)
    d6b6:	0011      	movs	r1, r2
    d6b8:	0018      	movs	r0, r3
    d6ba:	4b07      	ldr	r3, [pc, #28]	; (d6d8 <configure_timer+0x48>)
    d6bc:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst_mqtt);
    d6be:	4b08      	ldr	r3, [pc, #32]	; (d6e0 <configure_timer+0x50>)
    d6c0:	0018      	movs	r0, r3
    d6c2:	4b06      	ldr	r3, [pc, #24]	; (d6dc <configure_timer+0x4c>)
    d6c4:	4798      	blx	r3
}
    d6c6:	46c0      	nop			; (mov r8, r8)
    d6c8:	46bd      	mov	sp, r7
    d6ca:	b002      	add	sp, #8
    d6cc:	bd80      	pop	{r7, pc}
    d6ce:	46c0      	nop			; (mov r8, r8)
    d6d0:	000021a1 	.word	0x000021a1
    d6d4:	200007e4 	.word	0x200007e4
    d6d8:	000021c5 	.word	0x000021c5
    d6dc:	000022b1 	.word	0x000022b1
    d6e0:	20000620 	.word	0x20000620

0000d6e4 <configure_mqtt>:

static void configure_mqtt(void)
{
    d6e4:	b580      	push	{r7, lr}
    d6e6:	b088      	sub	sp, #32
    d6e8:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    d6ea:	003b      	movs	r3, r7
    d6ec:	0018      	movs	r0, r3
    d6ee:	4b1b      	ldr	r3, [pc, #108]	; (d75c <configure_mqtt+0x78>)
    d6f0:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.port = 16615; //8000;
    d6f2:	003b      	movs	r3, r7
    d6f4:	4a1a      	ldr	r2, [pc, #104]	; (d760 <configure_mqtt+0x7c>)
    d6f6:	801a      	strh	r2, [r3, #0]
	mqtt_conf.timer_inst = &swt_module_inst_mqtt;
    d6f8:	003b      	movs	r3, r7
    d6fa:	4a1a      	ldr	r2, [pc, #104]	; (d764 <configure_mqtt+0x80>)
    d6fc:	605a      	str	r2, [r3, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    d6fe:	003b      	movs	r3, r7
    d700:	4a19      	ldr	r2, [pc, #100]	; (d768 <configure_mqtt+0x84>)
    d702:	60da      	str	r2, [r3, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    d704:	003b      	movs	r3, r7
    d706:	2280      	movs	r2, #128	; 0x80
    d708:	611a      	str	r2, [r3, #16]

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    d70a:	003a      	movs	r2, r7
    d70c:	4b17      	ldr	r3, [pc, #92]	; (d76c <configure_mqtt+0x88>)
    d70e:	0011      	movs	r1, r2
    d710:	0018      	movs	r0, r3
    d712:	4b17      	ldr	r3, [pc, #92]	; (d770 <configure_mqtt+0x8c>)
    d714:	4798      	blx	r3
    d716:	0003      	movs	r3, r0
    d718:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    d71a:	69fb      	ldr	r3, [r7, #28]
    d71c:	2b00      	cmp	r3, #0
    d71e:	da06      	bge.n	d72e <configure_mqtt+0x4a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    d720:	69fa      	ldr	r2, [r7, #28]
    d722:	4b14      	ldr	r3, [pc, #80]	; (d774 <configure_mqtt+0x90>)
    d724:	0011      	movs	r1, r2
    d726:	0018      	movs	r0, r3
    d728:	4b13      	ldr	r3, [pc, #76]	; (d778 <configure_mqtt+0x94>)
    d72a:	4798      	blx	r3
		while (1) {
    d72c:	e7fe      	b.n	d72c <configure_mqtt+0x48>
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    d72e:	4a13      	ldr	r2, [pc, #76]	; (d77c <configure_mqtt+0x98>)
    d730:	4b0e      	ldr	r3, [pc, #56]	; (d76c <configure_mqtt+0x88>)
    d732:	0011      	movs	r1, r2
    d734:	0018      	movs	r0, r3
    d736:	4b12      	ldr	r3, [pc, #72]	; (d780 <configure_mqtt+0x9c>)
    d738:	4798      	blx	r3
    d73a:	0003      	movs	r3, r0
    d73c:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    d73e:	69fb      	ldr	r3, [r7, #28]
    d740:	2b00      	cmp	r3, #0
    d742:	da06      	bge.n	d752 <configure_mqtt+0x6e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    d744:	69fa      	ldr	r2, [r7, #28]
    d746:	4b0f      	ldr	r3, [pc, #60]	; (d784 <configure_mqtt+0xa0>)
    d748:	0011      	movs	r1, r2
    d74a:	0018      	movs	r0, r3
    d74c:	4b0a      	ldr	r3, [pc, #40]	; (d778 <configure_mqtt+0x94>)
    d74e:	4798      	blx	r3
		while (1) {
    d750:	e7fe      	b.n	d750 <configure_mqtt+0x6c>
		}
	}
}
    d752:	46c0      	nop			; (mov r8, r8)
    d754:	46bd      	mov	sp, r7
    d756:	b008      	add	sp, #32
    d758:	bd80      	pop	{r7, pc}
    d75a:	46c0      	nop			; (mov r8, r8)
    d75c:	0000f23d 	.word	0x0000f23d
    d760:	000040e7 	.word	0x000040e7
    d764:	20000620 	.word	0x20000620
    d768:	20000360 	.word	0x20000360
    d76c:	200002ec 	.word	0x200002ec
    d770:	0000f261 	.word	0x0000f261
    d774:	00014fc8 	.word	0x00014fc8
    d778:	0001212d 	.word	0x0001212d
    d77c:	0000d399 	.word	0x0000d399
    d780:	0000f2ed 	.word	0x0000f2ed
    d784:	00014ffc 	.word	0x00014ffc

0000d788 <at25dfx_init>:

static void at25dfx_init(void)
{
    d788:	b580      	push	{r7, lr}
    d78a:	b08a      	sub	sp, #40	; 0x28
    d78c:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at25dfx_config;
	struct spi_master_vec_config at25dfx_spi_config;
	at25dfx_spi_master_vec_get_config_defaults(&at25dfx_spi_config);
    d78e:	003b      	movs	r3, r7
    d790:	0018      	movs	r0, r3
    d792:	4b19      	ldr	r3, [pc, #100]	; (d7f8 <at25dfx_init+0x70>)
    d794:	4798      	blx	r3
	at25dfx_spi_config.baudrate    = 125000;
    d796:	003b      	movs	r3, r7
    d798:	4a18      	ldr	r2, [pc, #96]	; (d7fc <at25dfx_init+0x74>)
    d79a:	601a      	str	r2, [r3, #0]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    d79c:	003b      	movs	r3, r7
    d79e:	2280      	movs	r2, #128	; 0x80
    d7a0:	0252      	lsls	r2, r2, #9
    d7a2:	609a      	str	r2, [r3, #8]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    d7a4:	003b      	movs	r3, r7
    d7a6:	4a16      	ldr	r2, [pc, #88]	; (d800 <at25dfx_init+0x78>)
    d7a8:	615a      	str	r2, [r3, #20]
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED;
    d7aa:	003b      	movs	r3, r7
    d7ac:	2201      	movs	r2, #1
    d7ae:	4252      	negs	r2, r2
    d7b0:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    d7b2:	003b      	movs	r3, r7
    d7b4:	4a13      	ldr	r2, [pc, #76]	; (d804 <at25dfx_init+0x7c>)
    d7b6:	61da      	str	r2, [r3, #28]
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    d7b8:	003b      	movs	r3, r7
    d7ba:	4a13      	ldr	r2, [pc, #76]	; (d808 <at25dfx_init+0x80>)
    d7bc:	621a      	str	r2, [r3, #32]
	spi_master_vec_init(&at25dfx_spi, SERCOM1, &at25dfx_spi_config);
    d7be:	003a      	movs	r2, r7
    d7c0:	4912      	ldr	r1, [pc, #72]	; (d80c <at25dfx_init+0x84>)
    d7c2:	4b13      	ldr	r3, [pc, #76]	; (d810 <at25dfx_init+0x88>)
    d7c4:	0018      	movs	r0, r3
    d7c6:	4b13      	ldr	r3, [pc, #76]	; (d814 <at25dfx_init+0x8c>)
    d7c8:	4798      	blx	r3
	spi_master_vec_enable(&at25dfx_spi);
    d7ca:	4b11      	ldr	r3, [pc, #68]	; (d810 <at25dfx_init+0x88>)
    d7cc:	0018      	movs	r0, r3
    d7ce:	4b12      	ldr	r3, [pc, #72]	; (d818 <at25dfx_init+0x90>)
    d7d0:	4798      	blx	r3
		
	at25dfx_config.type = AT25DFX_081A;
    d7d2:	2324      	movs	r3, #36	; 0x24
    d7d4:	18fb      	adds	r3, r7, r3
    d7d6:	2204      	movs	r2, #4
    d7d8:	701a      	strb	r2, [r3, #0]
	at25dfx_config.cs_pin = PIN_PA07;
    d7da:	2324      	movs	r3, #36	; 0x24
    d7dc:	18fb      	adds	r3, r7, r3
    d7de:	2207      	movs	r2, #7
    d7e0:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_config);
    d7e2:	2324      	movs	r3, #36	; 0x24
    d7e4:	18fa      	adds	r2, r7, r3
    d7e6:	490a      	ldr	r1, [pc, #40]	; (d810 <at25dfx_init+0x88>)
    d7e8:	4b0c      	ldr	r3, [pc, #48]	; (d81c <at25dfx_init+0x94>)
    d7ea:	0018      	movs	r0, r3
    d7ec:	4b0c      	ldr	r3, [pc, #48]	; (d820 <at25dfx_init+0x98>)
    d7ee:	4798      	blx	r3
}
    d7f0:	46c0      	nop			; (mov r8, r8)
    d7f2:	46bd      	mov	sp, r7
    d7f4:	b00a      	add	sp, #40	; 0x28
    d7f6:	bd80      	pop	{r7, pc}
    d7f8:	0000c585 	.word	0x0000c585
    d7fc:	0001e848 	.word	0x0001e848
    d800:	00100002 	.word	0x00100002
    d804:	00120002 	.word	0x00120002
    d808:	00130002 	.word	0x00130002
    d80c:	42000c00 	.word	0x42000c00
    d810:	20000998 	.word	0x20000998
    d814:	00008ef9 	.word	0x00008ef9
    d818:	000090ad 	.word	0x000090ad
    d81c:	20000768 	.word	0x20000768
    d820:	0000c5a1 	.word	0x0000c5a1

0000d824 <wifi_init>:

	at25dfx_chip_sleep(&at25dfx_chip);
}

void wifi_init()
{
    d824:	b590      	push	{r4, r7, lr}
    d826:	b083      	sub	sp, #12
    d828:	af02      	add	r7, sp, #8
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));	/* Initialize Wi-Fi parameters structure. */
    d82a:	4b1d      	ldr	r3, [pc, #116]	; (d8a0 <wifi_init+0x7c>)
    d82c:	2218      	movs	r2, #24
    d82e:	2100      	movs	r1, #0
    d830:	0018      	movs	r0, r3
    d832:	4b1c      	ldr	r3, [pc, #112]	; (d8a4 <wifi_init+0x80>)
    d834:	4798      	blx	r3

	param.pfAppWifiCb = wifi_cb;	/* Initialize Wi-Fi driver with data and status callbacks. */
    d836:	4b1a      	ldr	r3, [pc, #104]	; (d8a0 <wifi_init+0x7c>)
    d838:	4a1b      	ldr	r2, [pc, #108]	; (d8a8 <wifi_init+0x84>)
    d83a:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
    d83c:	4b18      	ldr	r3, [pc, #96]	; (d8a0 <wifi_init+0x7c>)
    d83e:	0018      	movs	r0, r3
    d840:	4b1a      	ldr	r3, [pc, #104]	; (d8ac <wifi_init+0x88>)
    d842:	4798      	blx	r3
    d844:	0003      	movs	r3, r0
    d846:	001a      	movs	r2, r3
    d848:	4b19      	ldr	r3, [pc, #100]	; (d8b0 <wifi_init+0x8c>)
    d84a:	701a      	strb	r2, [r3, #0]
	if (M2M_SUCCESS != ret) {
    d84c:	4b18      	ldr	r3, [pc, #96]	; (d8b0 <wifi_init+0x8c>)
    d84e:	781b      	ldrb	r3, [r3, #0]
    d850:	b25b      	sxtb	r3, r3
    d852:	2b00      	cmp	r3, #0
    d854:	d009      	beq.n	d86a <wifi_init+0x46>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    d856:	4b16      	ldr	r3, [pc, #88]	; (d8b0 <wifi_init+0x8c>)
    d858:	781b      	ldrb	r3, [r3, #0]
    d85a:	b25b      	sxtb	r3, r3
    d85c:	001a      	movs	r2, r3
    d85e:	4b15      	ldr	r3, [pc, #84]	; (d8b4 <wifi_init+0x90>)
    d860:	0011      	movs	r1, r2
    d862:	0018      	movs	r0, r3
    d864:	4b14      	ldr	r3, [pc, #80]	; (d8b8 <wifi_init+0x94>)
    d866:	4798      	blx	r3
		while (1) {
    d868:	e7fe      	b.n	d868 <wifi_init+0x44>
		}
	}

	socketInit();		/* Initialize socket module. */
    d86a:	4b14      	ldr	r3, [pc, #80]	; (d8bc <wifi_init+0x98>)
    d86c:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);	/* Register socket callback function. */
    d86e:	4a14      	ldr	r2, [pc, #80]	; (d8c0 <wifi_init+0x9c>)
    d870:	4b14      	ldr	r3, [pc, #80]	; (d8c4 <wifi_init+0xa0>)
    d872:	0011      	movs	r1, r2
    d874:	0018      	movs	r0, r3
    d876:	4b14      	ldr	r3, [pc, #80]	; (d8c8 <wifi_init+0xa4>)
    d878:	4798      	blx	r3
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);	/* Connect to router. */
    d87a:	4a14      	ldr	r2, [pc, #80]	; (d8cc <wifi_init+0xa8>)
    d87c:	4b14      	ldr	r3, [pc, #80]	; (d8d0 <wifi_init+0xac>)
    d87e:	0011      	movs	r1, r2
    d880:	0018      	movs	r0, r3
    d882:	4b0d      	ldr	r3, [pc, #52]	; (d8b8 <wifi_init+0x94>)
    d884:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    d886:	4a13      	ldr	r2, [pc, #76]	; (d8d4 <wifi_init+0xb0>)
    d888:	4810      	ldr	r0, [pc, #64]	; (d8cc <wifi_init+0xa8>)
    d88a:	23ff      	movs	r3, #255	; 0xff
    d88c:	9300      	str	r3, [sp, #0]
    d88e:	0013      	movs	r3, r2
    d890:	2202      	movs	r2, #2
    d892:	2112      	movs	r1, #18
    d894:	4c10      	ldr	r4, [pc, #64]	; (d8d8 <wifi_init+0xb4>)
    d896:	47a0      	blx	r4
}
    d898:	46c0      	nop			; (mov r8, r8)
    d89a:	46bd      	mov	sp, r7
    d89c:	b001      	add	sp, #4
    d89e:	bd90      	pop	{r4, r7, pc}
    d8a0:	20000528 	.word	0x20000528
    d8a4:	00011fcb 	.word	0x00011fcb
    d8a8:	0000d511 	.word	0x0000d511
    d8ac:	0000394d 	.word	0x0000394d
    d8b0:	20000a7d 	.word	0x20000a7d
    d8b4:	00015030 	.word	0x00015030
    d8b8:	0001212d 	.word	0x0001212d
    d8bc:	00006449 	.word	0x00006449
    d8c0:	0000d32d 	.word	0x0000d32d
    d8c4:	0000d2e5 	.word	0x0000d2e5
    d8c8:	00006499 	.word	0x00006499
    d8cc:	00014f44 	.word	0x00014f44
    d8d0:	0001505c 	.word	0x0001505c
    d8d4:	00014f34 	.word	0x00014f34
    d8d8:	00003a11 	.word	0x00003a11

0000d8dc <button_debug>:

void button_debug()
{
    d8dc:	b5b0      	push	{r4, r5, r7, lr}
    d8de:	b086      	sub	sp, #24
    d8e0:	af00      	add	r7, sp, #0
	if (port_pin_get_input_level(BUTTON_DEBUG) == false){
    d8e2:	2018      	movs	r0, #24
    d8e4:	4b1c      	ldr	r3, [pc, #112]	; (d958 <button_debug+0x7c>)
    d8e6:	4798      	blx	r3
    d8e8:	0003      	movs	r3, r0
    d8ea:	001a      	movs	r2, r3
    d8ec:	2301      	movs	r3, #1
    d8ee:	4053      	eors	r3, r2
    d8f0:	b2db      	uxtb	r3, r3
    d8f2:	2b00      	cmp	r3, #0
    d8f4:	d028      	beq.n	d948 <button_debug+0x6c>
		
		if (button_change == false){
    d8f6:	4b19      	ldr	r3, [pc, #100]	; (d95c <button_debug+0x80>)
    d8f8:	781b      	ldrb	r3, [r3, #0]
    d8fa:	2201      	movs	r2, #1
    d8fc:	4053      	eors	r3, r2
    d8fe:	b2db      	uxtb	r3, r3
    d900:	2b00      	cmp	r3, #0
    d902:	d024      	beq.n	d94e <button_debug+0x72>
			prox_read_flag = true,
    d904:	4b16      	ldr	r3, [pc, #88]	; (d960 <button_debug+0x84>)
    d906:	2201      	movs	r2, #1
    d908:	701a      	strb	r2, [r3, #0]
			button_change = true;
    d90a:	4b14      	ldr	r3, [pc, #80]	; (d95c <button_debug+0x80>)
    d90c:	2201      	movs	r2, #1
    d90e:	701a      	strb	r2, [r3, #0]
			printf("button");
    d910:	4b14      	ldr	r3, [pc, #80]	; (d964 <button_debug+0x88>)
    d912:	0018      	movs	r0, r3
    d914:	4b14      	ldr	r3, [pc, #80]	; (d968 <button_debug+0x8c>)
    d916:	4798      	blx	r3
			char topic[19] = "ese516/g2/prox";
    d918:	1d39      	adds	r1, r7, #4
    d91a:	4a14      	ldr	r2, [pc, #80]	; (d96c <button_debug+0x90>)
    d91c:	000b      	movs	r3, r1
    d91e:	ca31      	ldmia	r2!, {r0, r4, r5}
    d920:	c331      	stmia	r3!, {r0, r4, r5}
    d922:	8810      	ldrh	r0, [r2, #0]
    d924:	8018      	strh	r0, [r3, #0]
    d926:	7892      	ldrb	r2, [r2, #2]
    d928:	709a      	strb	r2, [r3, #2]
    d92a:	230f      	movs	r3, #15
    d92c:	18cb      	adds	r3, r1, r3
    d92e:	2204      	movs	r2, #4
    d930:	2100      	movs	r1, #0
    d932:	0018      	movs	r0, r3
    d934:	4b0e      	ldr	r3, [pc, #56]	; (d970 <button_debug+0x94>)
    d936:	4798      	blx	r3
			char msg[2];
			//sprintf(topic, "%s%s", MAIN_MQTT_ROOT, MQTT_PROX);
			sprintf(msg, "%d", distance);
    d938:	4b0e      	ldr	r3, [pc, #56]	; (d974 <button_debug+0x98>)
    d93a:	681a      	ldr	r2, [r3, #0]
    d93c:	490e      	ldr	r1, [pc, #56]	; (d978 <button_debug+0x9c>)
    d93e:	003b      	movs	r3, r7
    d940:	0018      	movs	r0, r3
    d942:	4b0e      	ldr	r3, [pc, #56]	; (d97c <button_debug+0xa0>)
    d944:	4798      	blx	r3
	}
	else
	{
		button_change = false;
	}
}
    d946:	e002      	b.n	d94e <button_debug+0x72>
		button_change = false;
    d948:	4b04      	ldr	r3, [pc, #16]	; (d95c <button_debug+0x80>)
    d94a:	2200      	movs	r2, #0
    d94c:	701a      	strb	r2, [r3, #0]
}
    d94e:	46c0      	nop			; (mov r8, r8)
    d950:	46bd      	mov	sp, r7
    d952:	b006      	add	sp, #24
    d954:	bdb0      	pop	{r4, r5, r7, pc}
    d956:	46c0      	nop			; (mov r8, r8)
    d958:	0000c3d1 	.word	0x0000c3d1
    d95c:	200002e9 	.word	0x200002e9
    d960:	20000790 	.word	0x20000790
    d964:	00015080 	.word	0x00015080
    d968:	0001212d 	.word	0x0001212d
    d96c:	0001508c 	.word	0x0001508c
    d970:	00011fcb 	.word	0x00011fcb
    d974:	20000678 	.word	0x20000678
    d978:	00015088 	.word	0x00015088
    d97c:	000123ed 	.word	0x000123ed

0000d980 <prox_init>:

//----------------PROXIMITY SENSOR-------------

void prox_init()
{
    d980:	b580      	push	{r7, lr}
    d982:	af00      	add	r7, sp, #0
	// configure proximity sensor ADC
	adc_get_config_defaults(&config_adc_prox);
    d984:	4b0f      	ldr	r3, [pc, #60]	; (d9c4 <prox_init+0x44>)
    d986:	0018      	movs	r0, r3
    d988:	4b0f      	ldr	r3, [pc, #60]	; (d9c8 <prox_init+0x48>)
    d98a:	4798      	blx	r3
	config_adc_prox.reference = ADC_REFERENCE_AREFA;
    d98c:	4b0d      	ldr	r3, [pc, #52]	; (d9c4 <prox_init+0x44>)
    d98e:	2203      	movs	r2, #3
    d990:	705a      	strb	r2, [r3, #1]
	config_adc_prox.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    d992:	4b0c      	ldr	r3, [pc, #48]	; (d9c4 <prox_init+0x44>)
    d994:	2280      	movs	r2, #128	; 0x80
    d996:	0092      	lsls	r2, r2, #2
    d998:	805a      	strh	r2, [r3, #2]
	config_adc_prox.positive_input = ADC_POSITIVE_INPUT_PIN10;	// corresponds to PIN_PB02
    d99a:	4b0a      	ldr	r3, [pc, #40]	; (d9c4 <prox_init+0x44>)
    d99c:	220a      	movs	r2, #10
    d99e:	731a      	strb	r2, [r3, #12]
	adc_init(&adc_prox_instance, ADC, &config_adc_prox);
    d9a0:	4a08      	ldr	r2, [pc, #32]	; (d9c4 <prox_init+0x44>)
    d9a2:	490a      	ldr	r1, [pc, #40]	; (d9cc <prox_init+0x4c>)
    d9a4:	4b0a      	ldr	r3, [pc, #40]	; (d9d0 <prox_init+0x50>)
    d9a6:	0018      	movs	r0, r3
    d9a8:	4b0a      	ldr	r3, [pc, #40]	; (d9d4 <prox_init+0x54>)
    d9aa:	4798      	blx	r3
	adc_enable(&adc_prox_instance);
    d9ac:	4b08      	ldr	r3, [pc, #32]	; (d9d0 <prox_init+0x50>)
    d9ae:	0018      	movs	r0, r3
    d9b0:	4b09      	ldr	r3, [pc, #36]	; (d9d8 <prox_init+0x58>)
    d9b2:	4798      	blx	r3
	tcc_enable(&tcc_instance);
    d9b4:	4b09      	ldr	r3, [pc, #36]	; (d9dc <prox_init+0x5c>)
    d9b6:	0018      	movs	r0, r3
    d9b8:	4b09      	ldr	r3, [pc, #36]	; (d9e0 <prox_init+0x60>)
    d9ba:	4798      	blx	r3
}
    d9bc:	46c0      	nop			; (mov r8, r8)
    d9be:	46bd      	mov	sp, r7
    d9c0:	bd80      	pop	{r7, pc}
    d9c2:	46c0      	nop			; (mov r8, r8)
    d9c4:	20000840 	.word	0x20000840
    d9c8:	00006e69 	.word	0x00006e69
    d9cc:	42004000 	.word	0x42004000
    d9d0:	200009cc 	.word	0x200009cc
    d9d4:	000074b9 	.word	0x000074b9
    d9d8:	0000c27d 	.word	0x0000c27d
    d9dc:	20000724 	.word	0x20000724
    d9e0:	0000c8dd 	.word	0x0000c8dd

0000d9e4 <average>:

void average()
{
    d9e4:	b580      	push	{r7, lr}
    d9e6:	b082      	sub	sp, #8
    d9e8:	af00      	add	r7, sp, #0
	uint16_t temp;
	for (int i = 2; i<PROX_BUFFER_SIZE-2; i++){
    d9ea:	2302      	movs	r3, #2
    d9ec:	603b      	str	r3, [r7, #0]
    d9ee:	e00b      	b.n	da08 <average+0x24>
		temp += prox_buffer[i];
    d9f0:	4b0e      	ldr	r3, [pc, #56]	; (da2c <average+0x48>)
    d9f2:	683a      	ldr	r2, [r7, #0]
    d9f4:	0052      	lsls	r2, r2, #1
    d9f6:	5ad1      	ldrh	r1, [r2, r3]
    d9f8:	1dbb      	adds	r3, r7, #6
    d9fa:	1dba      	adds	r2, r7, #6
    d9fc:	8812      	ldrh	r2, [r2, #0]
    d9fe:	188a      	adds	r2, r1, r2
    da00:	801a      	strh	r2, [r3, #0]
	for (int i = 2; i<PROX_BUFFER_SIZE-2; i++){
    da02:	683b      	ldr	r3, [r7, #0]
    da04:	3301      	adds	r3, #1
    da06:	603b      	str	r3, [r7, #0]
    da08:	683b      	ldr	r3, [r7, #0]
    da0a:	2b07      	cmp	r3, #7
    da0c:	ddf0      	ble.n	d9f0 <average+0xc>
		//printf("proxBuffer: %d\r\n", temp);
	}
	calc_distance(temp/6);
    da0e:	1dbb      	adds	r3, r7, #6
    da10:	881a      	ldrh	r2, [r3, #0]
    da12:	4b07      	ldr	r3, [pc, #28]	; (da30 <average+0x4c>)
    da14:	2106      	movs	r1, #6
    da16:	0010      	movs	r0, r2
    da18:	4798      	blx	r3
    da1a:	0003      	movs	r3, r0
    da1c:	b29b      	uxth	r3, r3
    da1e:	0018      	movs	r0, r3
    da20:	4b04      	ldr	r3, [pc, #16]	; (da34 <average+0x50>)
    da22:	4798      	blx	r3
}
    da24:	46c0      	nop			; (mov r8, r8)
    da26:	46bd      	mov	sp, r7
    da28:	b002      	add	sp, #8
    da2a:	bd80      	pop	{r7, pc}
    da2c:	200009b8 	.word	0x200009b8
    da30:	0000ffb1 	.word	0x0000ffb1
    da34:	0000da39 	.word	0x0000da39

0000da38 <calc_distance>:

void calc_distance(uint16_t number)
{
    da38:	b590      	push	{r4, r7, lr}
    da3a:	b087      	sub	sp, #28
    da3c:	af02      	add	r7, sp, #8
    da3e:	0002      	movs	r2, r0
    da40:	1dbb      	adds	r3, r7, #6
    da42:	801a      	strh	r2, [r3, #0]
	double dist;
	dist = 27.86 * pow(((number*3.3)/4096),- 1.15);
    da44:	1dbb      	adds	r3, r7, #6
    da46:	881a      	ldrh	r2, [r3, #0]
    da48:	4b37      	ldr	r3, [pc, #220]	; (db28 <calc_distance+0xf0>)
    da4a:	0010      	movs	r0, r2
    da4c:	4798      	blx	r3
    da4e:	4c37      	ldr	r4, [pc, #220]	; (db2c <calc_distance+0xf4>)
    da50:	4a37      	ldr	r2, [pc, #220]	; (db30 <calc_distance+0xf8>)
    da52:	4b38      	ldr	r3, [pc, #224]	; (db34 <calc_distance+0xfc>)
    da54:	47a0      	blx	r4
    da56:	0003      	movs	r3, r0
    da58:	000c      	movs	r4, r1
    da5a:	0018      	movs	r0, r3
    da5c:	0021      	movs	r1, r4
    da5e:	4c36      	ldr	r4, [pc, #216]	; (db38 <calc_distance+0x100>)
    da60:	2200      	movs	r2, #0
    da62:	4b36      	ldr	r3, [pc, #216]	; (db3c <calc_distance+0x104>)
    da64:	47a0      	blx	r4
    da66:	0003      	movs	r3, r0
    da68:	000c      	movs	r4, r1
    da6a:	0018      	movs	r0, r3
    da6c:	0021      	movs	r1, r4
    da6e:	4b30      	ldr	r3, [pc, #192]	; (db30 <calc_distance+0xf8>)
    da70:	4c33      	ldr	r4, [pc, #204]	; (db40 <calc_distance+0x108>)
    da72:	001a      	movs	r2, r3
    da74:	0023      	movs	r3, r4
    da76:	4c33      	ldr	r4, [pc, #204]	; (db44 <calc_distance+0x10c>)
    da78:	47a0      	blx	r4
    da7a:	4c2c      	ldr	r4, [pc, #176]	; (db2c <calc_distance+0xf4>)
    da7c:	4a32      	ldr	r2, [pc, #200]	; (db48 <calc_distance+0x110>)
    da7e:	4b33      	ldr	r3, [pc, #204]	; (db4c <calc_distance+0x114>)
    da80:	47a0      	blx	r4
    da82:	0003      	movs	r3, r0
    da84:	000c      	movs	r4, r1
    da86:	60bb      	str	r3, [r7, #8]
    da88:	60fc      	str	r4, [r7, #12]
	//uint16_t temp = 20;
		if (dist > 10 && dist < 80)
    da8a:	4c31      	ldr	r4, [pc, #196]	; (db50 <calc_distance+0x118>)
    da8c:	2200      	movs	r2, #0
    da8e:	4b31      	ldr	r3, [pc, #196]	; (db54 <calc_distance+0x11c>)
    da90:	68b8      	ldr	r0, [r7, #8]
    da92:	68f9      	ldr	r1, [r7, #12]
    da94:	47a0      	blx	r4
    da96:	1e03      	subs	r3, r0, #0
    da98:	d013      	beq.n	dac2 <calc_distance+0x8a>
    da9a:	4c2f      	ldr	r4, [pc, #188]	; (db58 <calc_distance+0x120>)
    da9c:	2200      	movs	r2, #0
    da9e:	4b2f      	ldr	r3, [pc, #188]	; (db5c <calc_distance+0x124>)
    daa0:	68b8      	ldr	r0, [r7, #8]
    daa2:	68f9      	ldr	r1, [r7, #12]
    daa4:	47a0      	blx	r4
    daa6:	1e03      	subs	r3, r0, #0
    daa8:	d00b      	beq.n	dac2 <calc_distance+0x8a>
		{
			printf("The distance is %d cm and the read is %d \r\n", (int)dist, number);
    daaa:	4b2d      	ldr	r3, [pc, #180]	; (db60 <calc_distance+0x128>)
    daac:	68b8      	ldr	r0, [r7, #8]
    daae:	68f9      	ldr	r1, [r7, #12]
    dab0:	4798      	blx	r3
    dab2:	0001      	movs	r1, r0
    dab4:	1dbb      	adds	r3, r7, #6
    dab6:	881a      	ldrh	r2, [r3, #0]
    dab8:	4b2a      	ldr	r3, [pc, #168]	; (db64 <calc_distance+0x12c>)
    daba:	0018      	movs	r0, r3
    dabc:	4b2a      	ldr	r3, [pc, #168]	; (db68 <calc_distance+0x130>)
    dabe:	4798      	blx	r3
    dac0:	e003      	b.n	daca <calc_distance+0x92>
		}
		else
		{
			printf("Point at something between 10-80 cm\r\n");
    dac2:	4b2a      	ldr	r3, [pc, #168]	; (db6c <calc_distance+0x134>)
    dac4:	0018      	movs	r0, r3
    dac6:	4b2a      	ldr	r3, [pc, #168]	; (db70 <calc_distance+0x138>)
    dac8:	4798      	blx	r3
		}
	trash_bracket = map((uint16_t)dist, 0, 80, 4, 0);
    daca:	4b2a      	ldr	r3, [pc, #168]	; (db74 <calc_distance+0x13c>)
    dacc:	68b8      	ldr	r0, [r7, #8]
    dace:	68f9      	ldr	r1, [r7, #12]
    dad0:	4798      	blx	r3
    dad2:	0003      	movs	r3, r0
    dad4:	b298      	uxth	r0, r3
    dad6:	2300      	movs	r3, #0
    dad8:	9300      	str	r3, [sp, #0]
    dada:	2304      	movs	r3, #4
    dadc:	2250      	movs	r2, #80	; 0x50
    dade:	2100      	movs	r1, #0
    dae0:	4c25      	ldr	r4, [pc, #148]	; (db78 <calc_distance+0x140>)
    dae2:	47a0      	blx	r4
    dae4:	0003      	movs	r3, r0
    dae6:	b2da      	uxtb	r2, r3
    dae8:	4b24      	ldr	r3, [pc, #144]	; (db7c <calc_distance+0x144>)
    daea:	701a      	strb	r2, [r3, #0]
	trash_level = map((uint16_t)dist, 0, 80, 100, 0);
    daec:	4b21      	ldr	r3, [pc, #132]	; (db74 <calc_distance+0x13c>)
    daee:	68b8      	ldr	r0, [r7, #8]
    daf0:	68f9      	ldr	r1, [r7, #12]
    daf2:	4798      	blx	r3
    daf4:	0003      	movs	r3, r0
    daf6:	b298      	uxth	r0, r3
    daf8:	2300      	movs	r3, #0
    dafa:	9300      	str	r3, [sp, #0]
    dafc:	2364      	movs	r3, #100	; 0x64
    dafe:	2250      	movs	r2, #80	; 0x50
    db00:	2100      	movs	r1, #0
    db02:	4c1d      	ldr	r4, [pc, #116]	; (db78 <calc_distance+0x140>)
    db04:	47a0      	blx	r4
    db06:	0003      	movs	r3, r0
    db08:	b2da      	uxtb	r2, r3
    db0a:	4b1d      	ldr	r3, [pc, #116]	; (db80 <calc_distance+0x148>)
    db0c:	701a      	strb	r2, [r3, #0]
	printf("%d \r\n" , (int)trash_bracket);
    db0e:	4b1b      	ldr	r3, [pc, #108]	; (db7c <calc_distance+0x144>)
    db10:	781b      	ldrb	r3, [r3, #0]
    db12:	001a      	movs	r2, r3
    db14:	4b1b      	ldr	r3, [pc, #108]	; (db84 <calc_distance+0x14c>)
    db16:	0011      	movs	r1, r2
    db18:	0018      	movs	r0, r3
    db1a:	4b13      	ldr	r3, [pc, #76]	; (db68 <calc_distance+0x130>)
    db1c:	4798      	blx	r3
	 //

}
    db1e:	46c0      	nop			; (mov r8, r8)
    db20:	46bd      	mov	sp, r7
    db22:	b005      	add	sp, #20
    db24:	bd90      	pop	{r4, r7, pc}
    db26:	46c0      	nop			; (mov r8, r8)
    db28:	00011e05 	.word	0x00011e05
    db2c:	00011231 	.word	0x00011231
    db30:	66666666 	.word	0x66666666
    db34:	400a6666 	.word	0x400a6666
    db38:	000109c9 	.word	0x000109c9
    db3c:	40b00000 	.word	0x40b00000
    db40:	bff26666 	.word	0xbff26666
    db44:	0000dfb9 	.word	0x0000dfb9
    db48:	f5c28f5c 	.word	0xf5c28f5c
    db4c:	403bdc28 	.word	0x403bdc28
    db50:	000102f1 	.word	0x000102f1
    db54:	40240000 	.word	0x40240000
    db58:	000102c9 	.word	0x000102c9
    db5c:	40540000 	.word	0x40540000
    db60:	00011d9d 	.word	0x00011d9d
    db64:	000150a0 	.word	0x000150a0
    db68:	0001212d 	.word	0x0001212d
    db6c:	000150cc 	.word	0x000150cc
    db70:	00012249 	.word	0x00012249
    db74:	0001036d 	.word	0x0001036d
    db78:	0000db89 	.word	0x0000db89
    db7c:	2000001b 	.word	0x2000001b
    db80:	2000001c 	.word	0x2000001c
    db84:	000150f4 	.word	0x000150f4

0000db88 <map>:

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
    db88:	b5b0      	push	{r4, r5, r7, lr}
    db8a:	b082      	sub	sp, #8
    db8c:	af00      	add	r7, sp, #0
    db8e:	0005      	movs	r5, r0
    db90:	000c      	movs	r4, r1
    db92:	0010      	movs	r0, r2
    db94:	0019      	movs	r1, r3
    db96:	1dbb      	adds	r3, r7, #6
    db98:	1c2a      	adds	r2, r5, #0
    db9a:	801a      	strh	r2, [r3, #0]
    db9c:	1d3b      	adds	r3, r7, #4
    db9e:	1c22      	adds	r2, r4, #0
    dba0:	801a      	strh	r2, [r3, #0]
    dba2:	1cbb      	adds	r3, r7, #2
    dba4:	1c02      	adds	r2, r0, #0
    dba6:	801a      	strh	r2, [r3, #0]
    dba8:	003b      	movs	r3, r7
    dbaa:	1c0a      	adds	r2, r1, #0
    dbac:	801a      	strh	r2, [r3, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    dbae:	1dbb      	adds	r3, r7, #6
    dbb0:	881a      	ldrh	r2, [r3, #0]
    dbb2:	1d3b      	adds	r3, r7, #4
    dbb4:	881b      	ldrh	r3, [r3, #0]
    dbb6:	1ad3      	subs	r3, r2, r3
    dbb8:	2218      	movs	r2, #24
    dbba:	18ba      	adds	r2, r7, r2
    dbbc:	8811      	ldrh	r1, [r2, #0]
    dbbe:	003a      	movs	r2, r7
    dbc0:	8812      	ldrh	r2, [r2, #0]
    dbc2:	1a8a      	subs	r2, r1, r2
    dbc4:	435a      	muls	r2, r3
    dbc6:	0010      	movs	r0, r2
    dbc8:	1cbb      	adds	r3, r7, #2
    dbca:	881a      	ldrh	r2, [r3, #0]
    dbcc:	1d3b      	adds	r3, r7, #4
    dbce:	881b      	ldrh	r3, [r3, #0]
    dbd0:	1ad2      	subs	r2, r2, r3
    dbd2:	4b06      	ldr	r3, [pc, #24]	; (dbec <map+0x64>)
    dbd4:	0011      	movs	r1, r2
    dbd6:	4798      	blx	r3
    dbd8:	0003      	movs	r3, r0
    dbda:	b29a      	uxth	r2, r3
    dbdc:	003b      	movs	r3, r7
    dbde:	881b      	ldrh	r3, [r3, #0]
    dbe0:	18d3      	adds	r3, r2, r3
    dbe2:	b29b      	uxth	r3, r3
}
    dbe4:	0018      	movs	r0, r3
    dbe6:	46bd      	mov	sp, r7
    dbe8:	b002      	add	sp, #8
    dbea:	bdb0      	pop	{r4, r5, r7, pc}
    dbec:	000100c5 	.word	0x000100c5

0000dbf0 <swap>:

void swap(uint16_t *xp, uint16_t *yp)
{
    dbf0:	b580      	push	{r7, lr}
    dbf2:	b084      	sub	sp, #16
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	6078      	str	r0, [r7, #4]
    dbf8:	6039      	str	r1, [r7, #0]
	uint16_t temp = *xp;
    dbfa:	230e      	movs	r3, #14
    dbfc:	18fb      	adds	r3, r7, r3
    dbfe:	687a      	ldr	r2, [r7, #4]
    dc00:	8812      	ldrh	r2, [r2, #0]
    dc02:	801a      	strh	r2, [r3, #0]
	*xp = *yp;
    dc04:	683b      	ldr	r3, [r7, #0]
    dc06:	881a      	ldrh	r2, [r3, #0]
    dc08:	687b      	ldr	r3, [r7, #4]
    dc0a:	801a      	strh	r2, [r3, #0]
	*yp = temp;
    dc0c:	683b      	ldr	r3, [r7, #0]
    dc0e:	220e      	movs	r2, #14
    dc10:	18ba      	adds	r2, r7, r2
    dc12:	8812      	ldrh	r2, [r2, #0]
    dc14:	801a      	strh	r2, [r3, #0]
}
    dc16:	46c0      	nop			; (mov r8, r8)
    dc18:	46bd      	mov	sp, r7
    dc1a:	b004      	add	sp, #16
    dc1c:	bd80      	pop	{r7, pc}
	...

0000dc20 <bubbleSort>:

// A function to implement bubble sort
void bubbleSort(uint16_t arr[], int n)
{
    dc20:	b580      	push	{r7, lr}
    dc22:	b084      	sub	sp, #16
    dc24:	af00      	add	r7, sp, #0
    dc26:	6078      	str	r0, [r7, #4]
    dc28:	6039      	str	r1, [r7, #0]
	int i, j;
	for (i = 0; i < n-1; i++)
    dc2a:	2300      	movs	r3, #0
    dc2c:	60fb      	str	r3, [r7, #12]
    dc2e:	e028      	b.n	dc82 <bubbleSort+0x62>
	
	// Last i elements are already in place
	for (j = 0; j < n-i-1; j++)
    dc30:	2300      	movs	r3, #0
    dc32:	60bb      	str	r3, [r7, #8]
    dc34:	e01b      	b.n	dc6e <bubbleSort+0x4e>
	if (arr[j] > arr[j+1])
    dc36:	68bb      	ldr	r3, [r7, #8]
    dc38:	005b      	lsls	r3, r3, #1
    dc3a:	687a      	ldr	r2, [r7, #4]
    dc3c:	18d3      	adds	r3, r2, r3
    dc3e:	881a      	ldrh	r2, [r3, #0]
    dc40:	68bb      	ldr	r3, [r7, #8]
    dc42:	3301      	adds	r3, #1
    dc44:	005b      	lsls	r3, r3, #1
    dc46:	6879      	ldr	r1, [r7, #4]
    dc48:	18cb      	adds	r3, r1, r3
    dc4a:	881b      	ldrh	r3, [r3, #0]
    dc4c:	429a      	cmp	r2, r3
    dc4e:	d90b      	bls.n	dc68 <bubbleSort+0x48>
	swap(&arr[j], &arr[j+1]);
    dc50:	68bb      	ldr	r3, [r7, #8]
    dc52:	005b      	lsls	r3, r3, #1
    dc54:	687a      	ldr	r2, [r7, #4]
    dc56:	18d0      	adds	r0, r2, r3
    dc58:	68bb      	ldr	r3, [r7, #8]
    dc5a:	3301      	adds	r3, #1
    dc5c:	005b      	lsls	r3, r3, #1
    dc5e:	687a      	ldr	r2, [r7, #4]
    dc60:	18d3      	adds	r3, r2, r3
    dc62:	0019      	movs	r1, r3
    dc64:	4b0b      	ldr	r3, [pc, #44]	; (dc94 <bubbleSort+0x74>)
    dc66:	4798      	blx	r3
	for (j = 0; j < n-i-1; j++)
    dc68:	68bb      	ldr	r3, [r7, #8]
    dc6a:	3301      	adds	r3, #1
    dc6c:	60bb      	str	r3, [r7, #8]
    dc6e:	683a      	ldr	r2, [r7, #0]
    dc70:	68fb      	ldr	r3, [r7, #12]
    dc72:	1ad3      	subs	r3, r2, r3
    dc74:	1e5a      	subs	r2, r3, #1
    dc76:	68bb      	ldr	r3, [r7, #8]
    dc78:	429a      	cmp	r2, r3
    dc7a:	dcdc      	bgt.n	dc36 <bubbleSort+0x16>
	for (i = 0; i < n-1; i++)
    dc7c:	68fb      	ldr	r3, [r7, #12]
    dc7e:	3301      	adds	r3, #1
    dc80:	60fb      	str	r3, [r7, #12]
    dc82:	683b      	ldr	r3, [r7, #0]
    dc84:	1e5a      	subs	r2, r3, #1
    dc86:	68fb      	ldr	r3, [r7, #12]
    dc88:	429a      	cmp	r2, r3
    dc8a:	dcd1      	bgt.n	dc30 <bubbleSort+0x10>
}
    dc8c:	46c0      	nop			; (mov r8, r8)
    dc8e:	46bd      	mov	sp, r7
    dc90:	b004      	add	sp, #16
    dc92:	bd80      	pop	{r7, pc}
    dc94:	0000dbf1 	.word	0x0000dbf1

0000dc98 <prox_read_handler>:

void prox_read_handler()
{
    dc98:	b580      	push	{r7, lr}
    dc9a:	af00      	add	r7, sp, #0
	//printf("prox read handler");
	if (prox_read_flag && timer_counter >= DELAY)		// 1 second has gone by 
    dc9c:	4b17      	ldr	r3, [pc, #92]	; (dcfc <prox_read_handler+0x64>)
    dc9e:	781b      	ldrb	r3, [r3, #0]
    dca0:	b2db      	uxtb	r3, r3
    dca2:	2b00      	cmp	r3, #0
    dca4:	d027      	beq.n	dcf6 <prox_read_handler+0x5e>
    dca6:	4b16      	ldr	r3, [pc, #88]	; (dd00 <prox_read_handler+0x68>)
    dca8:	681b      	ldr	r3, [r3, #0]
    dcaa:	2b04      	cmp	r3, #4
    dcac:	dd23      	ble.n	dcf6 <prox_read_handler+0x5e>
	{
		//if (!prox_read_count) {
			//config_tcc.counter.count = 0;
		//}
		prox_read();
    dcae:	4b15      	ldr	r3, [pc, #84]	; (dd04 <prox_read_handler+0x6c>)
    dcb0:	4798      	blx	r3
		prox_read_count++;
    dcb2:	4b15      	ldr	r3, [pc, #84]	; (dd08 <prox_read_handler+0x70>)
    dcb4:	681b      	ldr	r3, [r3, #0]
    dcb6:	1c5a      	adds	r2, r3, #1
    dcb8:	4b13      	ldr	r3, [pc, #76]	; (dd08 <prox_read_handler+0x70>)
    dcba:	601a      	str	r2, [r3, #0]
		//printf("Prox Counter = %d\r\n", prox_read_count);
		timer_counter = 0;
    dcbc:	4b10      	ldr	r3, [pc, #64]	; (dd00 <prox_read_handler+0x68>)
    dcbe:	2200      	movs	r2, #0
    dcc0:	601a      	str	r2, [r3, #0]
		
		printf(".");
    dcc2:	202e      	movs	r0, #46	; 0x2e
    dcc4:	4b11      	ldr	r3, [pc, #68]	; (dd0c <prox_read_handler+0x74>)
    dcc6:	4798      	blx	r3
		
		
		if (prox_read_count == PROX_BUFFER_SIZE) {
    dcc8:	4b0f      	ldr	r3, [pc, #60]	; (dd08 <prox_read_handler+0x70>)
    dcca:	681b      	ldr	r3, [r3, #0]
    dccc:	2b0a      	cmp	r3, #10
    dcce:	d112      	bne.n	dcf6 <prox_read_handler+0x5e>
			printf("Prox Readings Complete\r\n");
    dcd0:	4b0f      	ldr	r3, [pc, #60]	; (dd10 <prox_read_handler+0x78>)
    dcd2:	0018      	movs	r0, r3
    dcd4:	4b0f      	ldr	r3, [pc, #60]	; (dd14 <prox_read_handler+0x7c>)
    dcd6:	4798      	blx	r3
			prox_read_count = 0;
    dcd8:	4b0b      	ldr	r3, [pc, #44]	; (dd08 <prox_read_handler+0x70>)
    dcda:	2200      	movs	r2, #0
    dcdc:	601a      	str	r2, [r3, #0]
			prox_read_flag = false;
    dcde:	4b07      	ldr	r3, [pc, #28]	; (dcfc <prox_read_handler+0x64>)
    dce0:	2200      	movs	r2, #0
    dce2:	701a      	strb	r2, [r3, #0]
			bubbleSort(prox_buffer, PROX_BUFFER_SIZE);
    dce4:	4b0c      	ldr	r3, [pc, #48]	; (dd18 <prox_read_handler+0x80>)
    dce6:	210a      	movs	r1, #10
    dce8:	0018      	movs	r0, r3
    dcea:	4b0c      	ldr	r3, [pc, #48]	; (dd1c <prox_read_handler+0x84>)
    dcec:	4798      	blx	r3
			average();
    dcee:	4b0c      	ldr	r3, [pc, #48]	; (dd20 <prox_read_handler+0x88>)
    dcf0:	4798      	blx	r3
			mqtt_update();
    dcf2:	4b0c      	ldr	r3, [pc, #48]	; (dd24 <prox_read_handler+0x8c>)
    dcf4:	4798      	blx	r3
		}
	}
}
    dcf6:	46c0      	nop			; (mov r8, r8)
    dcf8:	46bd      	mov	sp, r7
    dcfa:	bd80      	pop	{r7, pc}
    dcfc:	20000790 	.word	0x20000790
    dd00:	2000061c 	.word	0x2000061c
    dd04:	0000dd29 	.word	0x0000dd29
    dd08:	20000764 	.word	0x20000764
    dd0c:	00012161 	.word	0x00012161
    dd10:	000150fc 	.word	0x000150fc
    dd14:	00012249 	.word	0x00012249
    dd18:	200009b8 	.word	0x200009b8
    dd1c:	0000dc21 	.word	0x0000dc21
    dd20:	0000d9e5 	.word	0x0000d9e5
    dd24:	0000dd75 	.word	0x0000dd75

0000dd28 <prox_read>:

void prox_read(void)
{
    dd28:	b580      	push	{r7, lr}
    dd2a:	b082      	sub	sp, #8
    dd2c:	af00      	add	r7, sp, #0
	//start conversion
	uint16_t result;
	adc_start_conversion(&adc_prox_instance);
    dd2e:	4b0c      	ldr	r3, [pc, #48]	; (dd60 <prox_read+0x38>)
    dd30:	0018      	movs	r0, r3
    dd32:	4b0c      	ldr	r3, [pc, #48]	; (dd64 <prox_read+0x3c>)
    dd34:	4798      	blx	r3

	while (adc_read(&adc_prox_instance, &result) == STATUS_BUSY);
    dd36:	46c0      	nop			; (mov r8, r8)
    dd38:	1dba      	adds	r2, r7, #6
    dd3a:	4b09      	ldr	r3, [pc, #36]	; (dd60 <prox_read+0x38>)
    dd3c:	0011      	movs	r1, r2
    dd3e:	0018      	movs	r0, r3
    dd40:	4b09      	ldr	r3, [pc, #36]	; (dd68 <prox_read+0x40>)
    dd42:	4798      	blx	r3
    dd44:	0003      	movs	r3, r0
    dd46:	2b05      	cmp	r3, #5
    dd48:	d0f6      	beq.n	dd38 <prox_read+0x10>
	prox_buffer[prox_read_count] = result;
    dd4a:	4b08      	ldr	r3, [pc, #32]	; (dd6c <prox_read+0x44>)
    dd4c:	681a      	ldr	r2, [r3, #0]
    dd4e:	1dbb      	adds	r3, r7, #6
    dd50:	8819      	ldrh	r1, [r3, #0]
    dd52:	4b07      	ldr	r3, [pc, #28]	; (dd70 <prox_read+0x48>)
    dd54:	0052      	lsls	r2, r2, #1
    dd56:	52d1      	strh	r1, [r2, r3]
	//printf("%d\r\n", result); //
}
    dd58:	46c0      	nop			; (mov r8, r8)
    dd5a:	46bd      	mov	sp, r7
    dd5c:	b002      	add	sp, #8
    dd5e:	bd80      	pop	{r7, pc}
    dd60:	200009cc 	.word	0x200009cc
    dd64:	0000c2c5 	.word	0x0000c2c5
    dd68:	0000c30d 	.word	0x0000c30d
    dd6c:	20000764 	.word	0x20000764
    dd70:	200009b8 	.word	0x200009b8

0000dd74 <mqtt_update>:

void mqtt_update(void)
{
    dd74:	b590      	push	{r4, r7, lr}
    dd76:	b089      	sub	sp, #36	; 0x24
    dd78:	af02      	add	r7, sp, #8
	// UPDATING THE BLUEPRINT PHOTO
	char *topic1 = "ese516/g2/blueprint";
    dd7a:	4b2d      	ldr	r3, [pc, #180]	; (de30 <mqtt_update+0xbc>)
    dd7c:	617b      	str	r3, [r7, #20]
	char *msg1 = malloc(44);
    dd7e:	202c      	movs	r0, #44	; 0x2c
    dd80:	4b2c      	ldr	r3, [pc, #176]	; (de34 <mqtt_update+0xc0>)
    dd82:	4798      	blx	r3
    dd84:	0003      	movs	r3, r0
    dd86:	613b      	str	r3, [r7, #16]
	sprintf(msg1, "%s%d%s", TRASH_PIC_ROOT, trash_bracket, FILE_EXTENSION);
    dd88:	4b2b      	ldr	r3, [pc, #172]	; (de38 <mqtt_update+0xc4>)
    dd8a:	781b      	ldrb	r3, [r3, #0]
    dd8c:	001c      	movs	r4, r3
    dd8e:	4a2b      	ldr	r2, [pc, #172]	; (de3c <mqtt_update+0xc8>)
    dd90:	492b      	ldr	r1, [pc, #172]	; (de40 <mqtt_update+0xcc>)
    dd92:	6938      	ldr	r0, [r7, #16]
    dd94:	4b2b      	ldr	r3, [pc, #172]	; (de44 <mqtt_update+0xd0>)
    dd96:	9300      	str	r3, [sp, #0]
    dd98:	0023      	movs	r3, r4
    dd9a:	4c2b      	ldr	r4, [pc, #172]	; (de48 <mqtt_update+0xd4>)
    dd9c:	47a0      	blx	r4
	printf("MQTT UPDATE\r\n");
    dd9e:	4b2b      	ldr	r3, [pc, #172]	; (de4c <mqtt_update+0xd8>)
    dda0:	0018      	movs	r0, r3
    dda2:	4b2b      	ldr	r3, [pc, #172]	; (de50 <mqtt_update+0xdc>)
    dda4:	4798      	blx	r3
	//printf("%s", msg);
	mqtt_publish(&mqtt_inst, topic1, msg1, 45, 1, 0);
    dda6:	693a      	ldr	r2, [r7, #16]
    dda8:	6979      	ldr	r1, [r7, #20]
    ddaa:	482a      	ldr	r0, [pc, #168]	; (de54 <mqtt_update+0xe0>)
    ddac:	2300      	movs	r3, #0
    ddae:	9301      	str	r3, [sp, #4]
    ddb0:	2301      	movs	r3, #1
    ddb2:	9300      	str	r3, [sp, #0]
    ddb4:	232d      	movs	r3, #45	; 0x2d
    ddb6:	4c28      	ldr	r4, [pc, #160]	; (de58 <mqtt_update+0xe4>)
    ddb8:	47a0      	blx	r4
	
	// UPDATING TRASH LEVEL
	char *topic2 = "ese516/g2/prox";
    ddba:	4b28      	ldr	r3, [pc, #160]	; (de5c <mqtt_update+0xe8>)
    ddbc:	60fb      	str	r3, [r7, #12]
	char *msg2 = malloc(3);
    ddbe:	2003      	movs	r0, #3
    ddc0:	4b1c      	ldr	r3, [pc, #112]	; (de34 <mqtt_update+0xc0>)
    ddc2:	4798      	blx	r3
    ddc4:	0003      	movs	r3, r0
    ddc6:	60bb      	str	r3, [r7, #8]
	sprintf(msg2, "%d", trash_level);
    ddc8:	4b25      	ldr	r3, [pc, #148]	; (de60 <mqtt_update+0xec>)
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	001a      	movs	r2, r3
    ddce:	4925      	ldr	r1, [pc, #148]	; (de64 <mqtt_update+0xf0>)
    ddd0:	68bb      	ldr	r3, [r7, #8]
    ddd2:	0018      	movs	r0, r3
    ddd4:	4b1c      	ldr	r3, [pc, #112]	; (de48 <mqtt_update+0xd4>)
    ddd6:	4798      	blx	r3
	mqtt_publish(&mqtt_inst, topic2, msg2, 3, 1, 1);
    ddd8:	68ba      	ldr	r2, [r7, #8]
    ddda:	68f9      	ldr	r1, [r7, #12]
    dddc:	481d      	ldr	r0, [pc, #116]	; (de54 <mqtt_update+0xe0>)
    ddde:	2301      	movs	r3, #1
    dde0:	9301      	str	r3, [sp, #4]
    dde2:	2301      	movs	r3, #1
    dde4:	9300      	str	r3, [sp, #0]
    dde6:	2303      	movs	r3, #3
    dde8:	4c1b      	ldr	r4, [pc, #108]	; (de58 <mqtt_update+0xe4>)
    ddea:	47a0      	blx	r4
	
	// TWILIO
	if (trash_bracket == 4)
    ddec:	4b12      	ldr	r3, [pc, #72]	; (de38 <mqtt_update+0xc4>)
    ddee:	781b      	ldrb	r3, [r3, #0]
    ddf0:	2b04      	cmp	r3, #4
    ddf2:	d118      	bne.n	de26 <mqtt_update+0xb2>
	{
		char *topic3 = "ese516/g2/alert";
    ddf4:	4b1c      	ldr	r3, [pc, #112]	; (de68 <mqtt_update+0xf4>)
    ddf6:	607b      	str	r3, [r7, #4]
		char *msg3 = malloc(122);
    ddf8:	207a      	movs	r0, #122	; 0x7a
    ddfa:	4b0e      	ldr	r3, [pc, #56]	; (de34 <mqtt_update+0xc0>)
    ddfc:	4798      	blx	r3
    ddfe:	0003      	movs	r3, r0
    de00:	603b      	str	r3, [r7, #0]
		sprintf(msg3, "%s", ALERT_NOTIFICATION);
    de02:	683a      	ldr	r2, [r7, #0]
    de04:	4b19      	ldr	r3, [pc, #100]	; (de6c <mqtt_update+0xf8>)
    de06:	0010      	movs	r0, r2
    de08:	0019      	movs	r1, r3
    de0a:	236b      	movs	r3, #107	; 0x6b
    de0c:	001a      	movs	r2, r3
    de0e:	4b18      	ldr	r3, [pc, #96]	; (de70 <mqtt_update+0xfc>)
    de10:	4798      	blx	r3
		//printf("%s", msg3);
		mqtt_publish(&mqtt_inst, topic3, msg3, 106, 1, 0);
    de12:	683a      	ldr	r2, [r7, #0]
    de14:	6879      	ldr	r1, [r7, #4]
    de16:	480f      	ldr	r0, [pc, #60]	; (de54 <mqtt_update+0xe0>)
    de18:	2300      	movs	r3, #0
    de1a:	9301      	str	r3, [sp, #4]
    de1c:	2301      	movs	r3, #1
    de1e:	9300      	str	r3, [sp, #0]
    de20:	236a      	movs	r3, #106	; 0x6a
    de22:	4c0d      	ldr	r4, [pc, #52]	; (de58 <mqtt_update+0xe4>)
    de24:	47a0      	blx	r4
	}
}
    de26:	46c0      	nop			; (mov r8, r8)
    de28:	46bd      	mov	sp, r7
    de2a:	b007      	add	sp, #28
    de2c:	bd90      	pop	{r4, r7, pc}
    de2e:	46c0      	nop			; (mov r8, r8)
    de30:	00015114 	.word	0x00015114
    de34:	00011f49 	.word	0x00011f49
    de38:	2000001b 	.word	0x2000001b
    de3c:	00015128 	.word	0x00015128
    de40:	00015154 	.word	0x00015154
    de44:	0001515c 	.word	0x0001515c
    de48:	000123ed 	.word	0x000123ed
    de4c:	00015164 	.word	0x00015164
    de50:	00012249 	.word	0x00012249
    de54:	200002ec 	.word	0x200002ec
    de58:	0000f715 	.word	0x0000f715
    de5c:	0001508c 	.word	0x0001508c
    de60:	2000001c 	.word	0x2000001c
    de64:	00015088 	.word	0x00015088
    de68:	00015174 	.word	0x00015174
    de6c:	00015184 	.word	0x00015184
    de70:	00011f95 	.word	0x00011f95

0000de74 <main>:

int main (void)
{	
    de74:	b590      	push	{r4, r7, lr}
    de76:	b08b      	sub	sp, #44	; 0x2c
    de78:	af00      	add	r7, sp, #0
	//Initializing
	system_init();
    de7a:	4b30      	ldr	r3, [pc, #192]	; (df3c <main+0xc8>)
    de7c:	4798      	blx	r3
	board_init();
    de7e:	4b30      	ldr	r3, [pc, #192]	; (df40 <main+0xcc>)
    de80:	4798      	blx	r3
	init_state();
    de82:	4b30      	ldr	r3, [pc, #192]	; (df44 <main+0xd0>)
    de84:	4798      	blx	r3
	configure_usart();
    de86:	4b30      	ldr	r3, [pc, #192]	; (df48 <main+0xd4>)
    de88:	4798      	blx	r3
	configure_usart_callbacks();
    de8a:	4b30      	ldr	r3, [pc, #192]	; (df4c <main+0xd8>)
    de8c:	4798      	blx	r3
	configure_tcc();
    de8e:	4b30      	ldr	r3, [pc, #192]	; (df50 <main+0xdc>)
    de90:	4798      	blx	r3
	configure_timer();					/* Initialize the Timer. */
    de92:	4b30      	ldr	r3, [pc, #192]	; (df54 <main+0xe0>)
    de94:	4798      	blx	r3
	configure_http_client();			/* Initialize the HTTP client service. */
    de96:	4b30      	ldr	r3, [pc, #192]	; (df58 <main+0xe4>)
    de98:	4798      	blx	r3
	configure_mqtt();					//Configure MQTT
    de9a:	4b30      	ldr	r3, [pc, #192]	; (df5c <main+0xe8>)
    de9c:	4798      	blx	r3
	nm_bsp_init();						/* Initialize the BSP. */
    de9e:	4b30      	ldr	r3, [pc, #192]	; (df60 <main+0xec>)
    dea0:	4798      	blx	r3
	system_interrupt_enable_global();
    dea2:	4b30      	ldr	r3, [pc, #192]	; (df64 <main+0xf0>)
    dea4:	4798      	blx	r3
	at25dfx_init();
    dea6:	4b30      	ldr	r3, [pc, #192]	; (df68 <main+0xf4>)
    dea8:	4798      	blx	r3
	prox_init();
    deaa:	4b30      	ldr	r3, [pc, #192]	; (df6c <main+0xf8>)
    deac:	4798      	blx	r3
	//configure_tcc();
	//configure_tcc_callbacks();
	configure_nvm();
    deae:	4b30      	ldr	r3, [pc, #192]	; (df70 <main+0xfc>)
    deb0:	4798      	blx	r3
	configure_pins();
    deb2:	4b30      	ldr	r3, [pc, #192]	; (df74 <main+0x100>)
    deb4:	4798      	blx	r3
	
	printf("Configuration Complete");
    deb6:	4b30      	ldr	r3, [pc, #192]	; (df78 <main+0x104>)
    deb8:	0018      	movs	r0, r3
    deba:	4b30      	ldr	r3, [pc, #192]	; (df7c <main+0x108>)
    debc:	4798      	blx	r3
		
	wifi_init();
    debe:	4b30      	ldr	r3, [pc, #192]	; (df80 <main+0x10c>)
    dec0:	4798      	blx	r3
	
	uint8_t string[] = "Write 'help' to see all the functions\r\n";
    dec2:	003b      	movs	r3, r7
    dec4:	4a2f      	ldr	r2, [pc, #188]	; (df84 <main+0x110>)
    dec6:	ca13      	ldmia	r2!, {r0, r1, r4}
    dec8:	c313      	stmia	r3!, {r0, r1, r4}
    deca:	ca13      	ldmia	r2!, {r0, r1, r4}
    decc:	c313      	stmia	r3!, {r0, r1, r4}
    dece:	ca13      	ldmia	r2!, {r0, r1, r4}
    ded0:	c313      	stmia	r3!, {r0, r1, r4}
    ded2:	6812      	ldr	r2, [r2, #0]
    ded4:	601a      	str	r2, [r3, #0]
	usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    ded6:	0039      	movs	r1, r7
    ded8:	4b2b      	ldr	r3, [pc, #172]	; (df88 <main+0x114>)
    deda:	2228      	movs	r2, #40	; 0x28
    dedc:	0018      	movs	r0, r3
    dede:	4b2b      	ldr	r3, [pc, #172]	; (df8c <main+0x118>)
    dee0:	4798      	blx	r3
	while (true)
	{
		//port_pin_toggle_output_level(LED_0_PIN);;
		if (!(is_state_set(COMPLETED) || is_state_set(CANCELED)))
    dee2:	2010      	movs	r0, #16
    dee4:	4b2a      	ldr	r3, [pc, #168]	; (df90 <main+0x11c>)
    dee6:	4798      	blx	r3
    dee8:	0003      	movs	r3, r0
    deea:	001a      	movs	r2, r3
    deec:	2301      	movs	r3, #1
    deee:	4053      	eors	r3, r2
    def0:	b2db      	uxtb	r3, r3
    def2:	2b00      	cmp	r3, #0
    def4:	d010      	beq.n	df18 <main+0xa4>
    def6:	2020      	movs	r0, #32
    def8:	4b25      	ldr	r3, [pc, #148]	; (df90 <main+0x11c>)
    defa:	4798      	blx	r3
    defc:	0003      	movs	r3, r0
    defe:	001a      	movs	r2, r3
    df00:	2301      	movs	r3, #1
    df02:	4053      	eors	r3, r2
    df04:	b2db      	uxtb	r3, r3
    df06:	2b00      	cmp	r3, #0
    df08:	d006      	beq.n	df18 <main+0xa4>
		{
			m2m_wifi_handle_events(NULL);				/* Handle pending events from network controller. */
    df0a:	2000      	movs	r0, #0
    df0c:	4b21      	ldr	r3, [pc, #132]	; (df94 <main+0x120>)
    df0e:	4798      	blx	r3
			sw_timer_task(&swt_module_inst);			/* Checks the timer timeout. */
    df10:	4b21      	ldr	r3, [pc, #132]	; (df98 <main+0x124>)
    df12:	0018      	movs	r0, r3
    df14:	4b21      	ldr	r3, [pc, #132]	; (df9c <main+0x128>)
    df16:	4798      	blx	r3
		}
		
		button_debug();
    df18:	4b21      	ldr	r3, [pc, #132]	; (dfa0 <main+0x12c>)
    df1a:	4798      	blx	r3
		prox_read_handler();
    df1c:	4b21      	ldr	r3, [pc, #132]	; (dfa4 <main+0x130>)
    df1e:	4798      	blx	r3
		//if(tcc_flag == true)
		//{
			//printf("%d\r\n", timer_counter);
			//tcc_flag = false;
		//}
		usart_read_buffer_job(&usart_instance, &singleInput, 1); //write to single buffer
    df20:	4921      	ldr	r1, [pc, #132]	; (dfa8 <main+0x134>)
    df22:	4b19      	ldr	r3, [pc, #100]	; (df88 <main+0x114>)
    df24:	2201      	movs	r2, #1
    df26:	0018      	movs	r0, r3
    df28:	4b20      	ldr	r3, [pc, #128]	; (dfac <main+0x138>)
    df2a:	4798      	blx	r3
		if (processFlag)
    df2c:	4b20      	ldr	r3, [pc, #128]	; (dfb0 <main+0x13c>)
    df2e:	781b      	ldrb	r3, [r3, #0]
    df30:	b2db      	uxtb	r3, r3
    df32:	2b00      	cmp	r3, #0
    df34:	d0d5      	beq.n	dee2 <main+0x6e>
		{
			processCommand();
    df36:	4b1f      	ldr	r3, [pc, #124]	; (dfb4 <main+0x140>)
    df38:	4798      	blx	r3
		if (!(is_state_set(COMPLETED) || is_state_set(CANCELED)))
    df3a:	e7d2      	b.n	dee2 <main+0x6e>
    df3c:	0000b21d 	.word	0x0000b21d
    df40:	0000a241 	.word	0x0000a241
    df44:	0000d1b9 	.word	0x0000d1b9
    df48:	0000cfc1 	.word	0x0000cfc1
    df4c:	0000d035 	.word	0x0000d035
    df50:	0000d0b5 	.word	0x0000d0b5
    df54:	0000d691 	.word	0x0000d691
    df58:	0000d62d 	.word	0x0000d62d
    df5c:	0000d6e5 	.word	0x0000d6e5
    df60:	000026dd 	.word	0x000026dd
    df64:	0000c4e9 	.word	0x0000c4e9
    df68:	0000d789 	.word	0x0000d789
    df6c:	0000d981 	.word	0x0000d981
    df70:	0000d151 	.word	0x0000d151
    df74:	0000d179 	.word	0x0000d179
    df78:	000151f0 	.word	0x000151f0
    df7c:	0001212d 	.word	0x0001212d
    df80:	0000d825 	.word	0x0000d825
    df84:	00015208 	.word	0x00015208
    df88:	20000544 	.word	0x20000544
    df8c:	00009b0d 	.word	0x00009b0d
    df90:	0000d229 	.word	0x0000d229
    df94:	000039f5 	.word	0x000039f5
    df98:	200007e4 	.word	0x200007e4
    df9c:	000023e1 	.word	0x000023e1
    dfa0:	0000d8dd 	.word	0x0000d8dd
    dfa4:	0000dc99 	.word	0x0000dc99
    dfa8:	20000a7c 	.word	0x20000a7c
    dfac:	00009d65 	.word	0x00009d65
    dfb0:	200007e0 	.word	0x200007e0
    dfb4:	0000ca69 	.word	0x0000ca69

0000dfb8 <pow>:
    dfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfba:	4657      	mov	r7, sl
    dfbc:	464e      	mov	r6, r9
    dfbe:	46de      	mov	lr, fp
    dfc0:	4645      	mov	r5, r8
    dfc2:	b5e0      	push	{r5, r6, r7, lr}
    dfc4:	b08f      	sub	sp, #60	; 0x3c
    dfc6:	001d      	movs	r5, r3
    dfc8:	0006      	movs	r6, r0
    dfca:	000f      	movs	r7, r1
    dfcc:	0014      	movs	r4, r2
    dfce:	f000 f99f 	bl	e310 <__ieee754_pow>
    dfd2:	4bc7      	ldr	r3, [pc, #796]	; (e2f0 <pow+0x338>)
    dfd4:	9000      	str	r0, [sp, #0]
    dfd6:	9101      	str	r1, [sp, #4]
    dfd8:	469a      	mov	sl, r3
    dfda:	781b      	ldrb	r3, [r3, #0]
    dfdc:	b25b      	sxtb	r3, r3
    dfde:	4699      	mov	r9, r3
    dfe0:	3301      	adds	r3, #1
    dfe2:	d03e      	beq.n	e062 <pow+0xaa>
    dfe4:	0022      	movs	r2, r4
    dfe6:	002b      	movs	r3, r5
    dfe8:	0020      	movs	r0, r4
    dfea:	0029      	movs	r1, r5
    dfec:	f003 feb6 	bl	11d5c <__aeabi_dcmpun>
    dff0:	4683      	mov	fp, r0
    dff2:	2800      	cmp	r0, #0
    dff4:	d135      	bne.n	e062 <pow+0xaa>
    dff6:	0032      	movs	r2, r6
    dff8:	003b      	movs	r3, r7
    dffa:	0030      	movs	r0, r6
    dffc:	0039      	movs	r1, r7
    dffe:	f003 fead 	bl	11d5c <__aeabi_dcmpun>
    e002:	2200      	movs	r2, #0
    e004:	9003      	str	r0, [sp, #12]
    e006:	2800      	cmp	r0, #0
    e008:	d000      	beq.n	e00c <pow+0x54>
    e00a:	e0b6      	b.n	e17a <pow+0x1c2>
    e00c:	2300      	movs	r3, #0
    e00e:	0030      	movs	r0, r6
    e010:	0039      	movs	r1, r7
    e012:	f002 f953 	bl	102bc <__aeabi_dcmpeq>
    e016:	2800      	cmp	r0, #0
    e018:	d02c      	beq.n	e074 <pow+0xbc>
    e01a:	2200      	movs	r2, #0
    e01c:	2300      	movs	r3, #0
    e01e:	0020      	movs	r0, r4
    e020:	0029      	movs	r1, r5
    e022:	f002 f94b 	bl	102bc <__aeabi_dcmpeq>
    e026:	4683      	mov	fp, r0
    e028:	2800      	cmp	r0, #0
    e02a:	d100      	bne.n	e02e <pow+0x76>
    e02c:	e077      	b.n	e11e <pow+0x166>
    e02e:	ab04      	add	r3, sp, #16
    e030:	4698      	mov	r8, r3
    e032:	2301      	movs	r3, #1
    e034:	4642      	mov	r2, r8
    e036:	9304      	str	r3, [sp, #16]
    e038:	4bae      	ldr	r3, [pc, #696]	; (e2f4 <pow+0x33c>)
    e03a:	6053      	str	r3, [r2, #4]
    e03c:	4643      	mov	r3, r8
    e03e:	9a03      	ldr	r2, [sp, #12]
    e040:	611c      	str	r4, [r3, #16]
    e042:	615d      	str	r5, [r3, #20]
    e044:	621a      	str	r2, [r3, #32]
    e046:	609e      	str	r6, [r3, #8]
    e048:	60df      	str	r7, [r3, #12]
    e04a:	4642      	mov	r2, r8
    e04c:	2300      	movs	r3, #0
    e04e:	2400      	movs	r4, #0
    e050:	6193      	str	r3, [r2, #24]
    e052:	61d4      	str	r4, [r2, #28]
    e054:	464b      	mov	r3, r9
    e056:	2b00      	cmp	r3, #0
    e058:	d04d      	beq.n	e0f6 <pow+0x13e>
    e05a:	2300      	movs	r3, #0
    e05c:	4ca6      	ldr	r4, [pc, #664]	; (e2f8 <pow+0x340>)
    e05e:	9300      	str	r3, [sp, #0]
    e060:	9401      	str	r4, [sp, #4]
    e062:	9800      	ldr	r0, [sp, #0]
    e064:	9901      	ldr	r1, [sp, #4]
    e066:	b00f      	add	sp, #60	; 0x3c
    e068:	bc3c      	pop	{r2, r3, r4, r5}
    e06a:	4690      	mov	r8, r2
    e06c:	4699      	mov	r9, r3
    e06e:	46a2      	mov	sl, r4
    e070:	46ab      	mov	fp, r5
    e072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e074:	9800      	ldr	r0, [sp, #0]
    e076:	9901      	ldr	r1, [sp, #4]
    e078:	f000 ff64 	bl	ef44 <finite>
    e07c:	4681      	mov	r9, r0
    e07e:	2800      	cmp	r0, #0
    e080:	d100      	bne.n	e084 <pow+0xcc>
    e082:	e09b      	b.n	e1bc <pow+0x204>
    e084:	9800      	ldr	r0, [sp, #0]
    e086:	9901      	ldr	r1, [sp, #4]
    e088:	2200      	movs	r2, #0
    e08a:	2300      	movs	r3, #0
    e08c:	f002 f916 	bl	102bc <__aeabi_dcmpeq>
    e090:	2800      	cmp	r0, #0
    e092:	d0e6      	beq.n	e062 <pow+0xaa>
    e094:	0030      	movs	r0, r6
    e096:	0039      	movs	r1, r7
    e098:	f000 ff54 	bl	ef44 <finite>
    e09c:	2800      	cmp	r0, #0
    e09e:	d0e0      	beq.n	e062 <pow+0xaa>
    e0a0:	0020      	movs	r0, r4
    e0a2:	0029      	movs	r1, r5
    e0a4:	f000 ff4e 	bl	ef44 <finite>
    e0a8:	2800      	cmp	r0, #0
    e0aa:	d0da      	beq.n	e062 <pow+0xaa>
    e0ac:	ab04      	add	r3, sp, #16
    e0ae:	4698      	mov	r8, r3
    e0b0:	2304      	movs	r3, #4
    e0b2:	4642      	mov	r2, r8
    e0b4:	9304      	str	r3, [sp, #16]
    e0b6:	4b8f      	ldr	r3, [pc, #572]	; (e2f4 <pow+0x33c>)
    e0b8:	6114      	str	r4, [r2, #16]
    e0ba:	6155      	str	r5, [r2, #20]
    e0bc:	6053      	str	r3, [r2, #4]
    e0be:	2300      	movs	r3, #0
    e0c0:	2400      	movs	r4, #0
    e0c2:	6213      	str	r3, [r2, #32]
    e0c4:	2300      	movs	r3, #0
    e0c6:	6193      	str	r3, [r2, #24]
    e0c8:	61d4      	str	r4, [r2, #28]
    e0ca:	4653      	mov	r3, sl
    e0cc:	781b      	ldrb	r3, [r3, #0]
    e0ce:	6096      	str	r6, [r2, #8]
    e0d0:	60d7      	str	r7, [r2, #12]
    e0d2:	b25b      	sxtb	r3, r3
    e0d4:	2b02      	cmp	r3, #2
    e0d6:	d004      	beq.n	e0e2 <pow+0x12a>
    e0d8:	4640      	mov	r0, r8
    e0da:	f000 ff3d 	bl	ef58 <matherr>
    e0de:	2800      	cmp	r0, #0
    e0e0:	d10e      	bne.n	e100 <pow+0x148>
    e0e2:	f003 fef5 	bl	11ed0 <__errno>
    e0e6:	2322      	movs	r3, #34	; 0x22
    e0e8:	6003      	str	r3, [r0, #0]
    e0ea:	e009      	b.n	e100 <pow+0x148>
    e0ec:	4642      	mov	r2, r8
    e0ee:	2300      	movs	r3, #0
    e0f0:	2400      	movs	r4, #0
    e0f2:	6193      	str	r3, [r2, #24]
    e0f4:	61d4      	str	r4, [r2, #28]
    e0f6:	4640      	mov	r0, r8
    e0f8:	f000 ff2e 	bl	ef58 <matherr>
    e0fc:	2800      	cmp	r0, #0
    e0fe:	d037      	beq.n	e170 <pow+0x1b8>
    e100:	4643      	mov	r3, r8
    e102:	6a1b      	ldr	r3, [r3, #32]
    e104:	2b00      	cmp	r3, #0
    e106:	d004      	beq.n	e112 <pow+0x15a>
    e108:	f003 fee2 	bl	11ed0 <__errno>
    e10c:	4643      	mov	r3, r8
    e10e:	6a1b      	ldr	r3, [r3, #32]
    e110:	6003      	str	r3, [r0, #0]
    e112:	4643      	mov	r3, r8
    e114:	69dc      	ldr	r4, [r3, #28]
    e116:	699b      	ldr	r3, [r3, #24]
    e118:	9300      	str	r3, [sp, #0]
    e11a:	9401      	str	r4, [sp, #4]
    e11c:	e7a1      	b.n	e062 <pow+0xaa>
    e11e:	0020      	movs	r0, r4
    e120:	0029      	movs	r1, r5
    e122:	f000 ff0f 	bl	ef44 <finite>
    e126:	2800      	cmp	r0, #0
    e128:	d09b      	beq.n	e062 <pow+0xaa>
    e12a:	2200      	movs	r2, #0
    e12c:	2300      	movs	r3, #0
    e12e:	0020      	movs	r0, r4
    e130:	0029      	movs	r1, r5
    e132:	f002 f8c9 	bl	102c8 <__aeabi_dcmplt>
    e136:	2800      	cmp	r0, #0
    e138:	d100      	bne.n	e13c <pow+0x184>
    e13a:	e792      	b.n	e062 <pow+0xaa>
    e13c:	ab04      	add	r3, sp, #16
    e13e:	4698      	mov	r8, r3
    e140:	2301      	movs	r3, #1
    e142:	4642      	mov	r2, r8
    e144:	9304      	str	r3, [sp, #16]
    e146:	4b6b      	ldr	r3, [pc, #428]	; (e2f4 <pow+0x33c>)
    e148:	6053      	str	r3, [r2, #4]
    e14a:	4643      	mov	r3, r8
    e14c:	465a      	mov	r2, fp
    e14e:	609e      	str	r6, [r3, #8]
    e150:	60df      	str	r7, [r3, #12]
    e152:	621a      	str	r2, [r3, #32]
    e154:	611c      	str	r4, [r3, #16]
    e156:	615d      	str	r5, [r3, #20]
    e158:	4653      	mov	r3, sl
    e15a:	781b      	ldrb	r3, [r3, #0]
    e15c:	b25b      	sxtb	r3, r3
    e15e:	2b00      	cmp	r3, #0
    e160:	d0c4      	beq.n	e0ec <pow+0x134>
    e162:	2000      	movs	r0, #0
    e164:	4642      	mov	r2, r8
    e166:	4965      	ldr	r1, [pc, #404]	; (e2fc <pow+0x344>)
    e168:	6190      	str	r0, [r2, #24]
    e16a:	61d1      	str	r1, [r2, #28]
    e16c:	2b02      	cmp	r3, #2
    e16e:	d1c2      	bne.n	e0f6 <pow+0x13e>
    e170:	f003 feae 	bl	11ed0 <__errno>
    e174:	2321      	movs	r3, #33	; 0x21
    e176:	6003      	str	r3, [r0, #0]
    e178:	e7c2      	b.n	e100 <pow+0x148>
    e17a:	2300      	movs	r3, #0
    e17c:	0020      	movs	r0, r4
    e17e:	0029      	movs	r1, r5
    e180:	f002 f89c 	bl	102bc <__aeabi_dcmpeq>
    e184:	2800      	cmp	r0, #0
    e186:	d100      	bne.n	e18a <pow+0x1d2>
    e188:	e76b      	b.n	e062 <pow+0xaa>
    e18a:	ab04      	add	r3, sp, #16
    e18c:	4698      	mov	r8, r3
    e18e:	2301      	movs	r3, #1
    e190:	4642      	mov	r2, r8
    e192:	9304      	str	r3, [sp, #16]
    e194:	4b57      	ldr	r3, [pc, #348]	; (e2f4 <pow+0x33c>)
    e196:	4641      	mov	r1, r8
    e198:	6053      	str	r3, [r2, #4]
    e19a:	4643      	mov	r3, r8
    e19c:	465a      	mov	r2, fp
    e19e:	621a      	str	r2, [r3, #32]
    e1a0:	2200      	movs	r2, #0
    e1a2:	609e      	str	r6, [r3, #8]
    e1a4:	60df      	str	r7, [r3, #12]
    e1a6:	611c      	str	r4, [r3, #16]
    e1a8:	615d      	str	r5, [r3, #20]
    e1aa:	4b53      	ldr	r3, [pc, #332]	; (e2f8 <pow+0x340>)
    e1ac:	618a      	str	r2, [r1, #24]
    e1ae:	61cb      	str	r3, [r1, #28]
    e1b0:	9200      	str	r2, [sp, #0]
    e1b2:	9301      	str	r3, [sp, #4]
    e1b4:	464b      	mov	r3, r9
    e1b6:	2b02      	cmp	r3, #2
    e1b8:	d19d      	bne.n	e0f6 <pow+0x13e>
    e1ba:	e752      	b.n	e062 <pow+0xaa>
    e1bc:	0030      	movs	r0, r6
    e1be:	0039      	movs	r1, r7
    e1c0:	f000 fec0 	bl	ef44 <finite>
    e1c4:	2800      	cmp	r0, #0
    e1c6:	d100      	bne.n	e1ca <pow+0x212>
    e1c8:	e75c      	b.n	e084 <pow+0xcc>
    e1ca:	0020      	movs	r0, r4
    e1cc:	0029      	movs	r1, r5
    e1ce:	f000 feb9 	bl	ef44 <finite>
    e1d2:	2800      	cmp	r0, #0
    e1d4:	d100      	bne.n	e1d8 <pow+0x220>
    e1d6:	e755      	b.n	e084 <pow+0xcc>
    e1d8:	9800      	ldr	r0, [sp, #0]
    e1da:	9901      	ldr	r1, [sp, #4]
    e1dc:	000b      	movs	r3, r1
    e1de:	0002      	movs	r2, r0
    e1e0:	f003 fdbc 	bl	11d5c <__aeabi_dcmpun>
    e1e4:	ab04      	add	r3, sp, #16
    e1e6:	4698      	mov	r8, r3
    e1e8:	2800      	cmp	r0, #0
    e1ea:	d161      	bne.n	e2b0 <pow+0x2f8>
    e1ec:	2303      	movs	r3, #3
    e1ee:	4642      	mov	r2, r8
    e1f0:	9304      	str	r3, [sp, #16]
    e1f2:	4b40      	ldr	r3, [pc, #256]	; (e2f4 <pow+0x33c>)
    e1f4:	6210      	str	r0, [r2, #32]
    e1f6:	6053      	str	r3, [r2, #4]
    e1f8:	4653      	mov	r3, sl
    e1fa:	781b      	ldrb	r3, [r3, #0]
    e1fc:	6096      	str	r6, [r2, #8]
    e1fe:	60d7      	str	r7, [r2, #12]
    e200:	b25b      	sxtb	r3, r3
    e202:	6114      	str	r4, [r2, #16]
    e204:	6155      	str	r5, [r2, #20]
    e206:	4699      	mov	r9, r3
    e208:	2b00      	cmp	r3, #0
    e20a:	d12f      	bne.n	e26c <pow+0x2b4>
    e20c:	22e0      	movs	r2, #224	; 0xe0
    e20e:	4641      	mov	r1, r8
    e210:	4b3b      	ldr	r3, [pc, #236]	; (e300 <pow+0x348>)
    e212:	0612      	lsls	r2, r2, #24
    e214:	618a      	str	r2, [r1, #24]
    e216:	61cb      	str	r3, [r1, #28]
    e218:	0030      	movs	r0, r6
    e21a:	2200      	movs	r2, #0
    e21c:	2300      	movs	r3, #0
    e21e:	0039      	movs	r1, r7
    e220:	f002 f852 	bl	102c8 <__aeabi_dcmplt>
    e224:	2800      	cmp	r0, #0
    e226:	d100      	bne.n	e22a <pow+0x272>
    e228:	e756      	b.n	e0d8 <pow+0x120>
    e22a:	2200      	movs	r2, #0
    e22c:	4b35      	ldr	r3, [pc, #212]	; (e304 <pow+0x34c>)
    e22e:	0020      	movs	r0, r4
    e230:	0029      	movs	r1, r5
    e232:	f002 fffd 	bl	11230 <__aeabi_dmul>
    e236:	0004      	movs	r4, r0
    e238:	000d      	movs	r5, r1
    e23a:	f000 fe95 	bl	ef68 <rint>
    e23e:	0002      	movs	r2, r0
    e240:	000b      	movs	r3, r1
    e242:	0020      	movs	r0, r4
    e244:	0029      	movs	r1, r5
    e246:	f002 f839 	bl	102bc <__aeabi_dcmpeq>
    e24a:	2800      	cmp	r0, #0
    e24c:	d105      	bne.n	e25a <pow+0x2a2>
    e24e:	22e0      	movs	r2, #224	; 0xe0
    e250:	4b2d      	ldr	r3, [pc, #180]	; (e308 <pow+0x350>)
    e252:	0612      	lsls	r2, r2, #24
    e254:	4641      	mov	r1, r8
    e256:	618a      	str	r2, [r1, #24]
    e258:	61cb      	str	r3, [r1, #28]
    e25a:	4653      	mov	r3, sl
    e25c:	781b      	ldrb	r3, [r3, #0]
    e25e:	b25b      	sxtb	r3, r3
    e260:	4699      	mov	r9, r3
    e262:	464b      	mov	r3, r9
    e264:	2b02      	cmp	r3, #2
    e266:	d000      	beq.n	e26a <pow+0x2b2>
    e268:	e736      	b.n	e0d8 <pow+0x120>
    e26a:	e73a      	b.n	e0e2 <pow+0x12a>
    e26c:	2200      	movs	r2, #0
    e26e:	4641      	mov	r1, r8
    e270:	4b26      	ldr	r3, [pc, #152]	; (e30c <pow+0x354>)
    e272:	0030      	movs	r0, r6
    e274:	618a      	str	r2, [r1, #24]
    e276:	61cb      	str	r3, [r1, #28]
    e278:	2200      	movs	r2, #0
    e27a:	2300      	movs	r3, #0
    e27c:	0039      	movs	r1, r7
    e27e:	f002 f823 	bl	102c8 <__aeabi_dcmplt>
    e282:	2800      	cmp	r0, #0
    e284:	d0ed      	beq.n	e262 <pow+0x2aa>
    e286:	2200      	movs	r2, #0
    e288:	4b1e      	ldr	r3, [pc, #120]	; (e304 <pow+0x34c>)
    e28a:	0020      	movs	r0, r4
    e28c:	0029      	movs	r1, r5
    e28e:	f002 ffcf 	bl	11230 <__aeabi_dmul>
    e292:	0004      	movs	r4, r0
    e294:	000d      	movs	r5, r1
    e296:	f000 fe67 	bl	ef68 <rint>
    e29a:	0002      	movs	r2, r0
    e29c:	000b      	movs	r3, r1
    e29e:	0020      	movs	r0, r4
    e2a0:	0029      	movs	r1, r5
    e2a2:	f002 f80b 	bl	102bc <__aeabi_dcmpeq>
    e2a6:	2800      	cmp	r0, #0
    e2a8:	d1d7      	bne.n	e25a <pow+0x2a2>
    e2aa:	2200      	movs	r2, #0
    e2ac:	4b13      	ldr	r3, [pc, #76]	; (e2fc <pow+0x344>)
    e2ae:	e7d1      	b.n	e254 <pow+0x29c>
    e2b0:	2301      	movs	r3, #1
    e2b2:	4642      	mov	r2, r8
    e2b4:	9304      	str	r3, [sp, #16]
    e2b6:	4b0f      	ldr	r3, [pc, #60]	; (e2f4 <pow+0x33c>)
    e2b8:	6053      	str	r3, [r2, #4]
    e2ba:	4643      	mov	r3, r8
    e2bc:	464a      	mov	r2, r9
    e2be:	611c      	str	r4, [r3, #16]
    e2c0:	615d      	str	r5, [r3, #20]
    e2c2:	621a      	str	r2, [r3, #32]
    e2c4:	609e      	str	r6, [r3, #8]
    e2c6:	60df      	str	r7, [r3, #12]
    e2c8:	2400      	movs	r4, #0
    e2ca:	4653      	mov	r3, sl
    e2cc:	571c      	ldrsb	r4, [r3, r4]
    e2ce:	2c00      	cmp	r4, #0
    e2d0:	d100      	bne.n	e2d4 <pow+0x31c>
    e2d2:	e70b      	b.n	e0ec <pow+0x134>
    e2d4:	2300      	movs	r3, #0
    e2d6:	2200      	movs	r2, #0
    e2d8:	0019      	movs	r1, r3
    e2da:	0010      	movs	r0, r2
    e2dc:	f002 fb74 	bl	109c8 <__aeabi_ddiv>
    e2e0:	4643      	mov	r3, r8
    e2e2:	6198      	str	r0, [r3, #24]
    e2e4:	61d9      	str	r1, [r3, #28]
    e2e6:	2c02      	cmp	r4, #2
    e2e8:	d100      	bne.n	e2ec <pow+0x334>
    e2ea:	e741      	b.n	e170 <pow+0x1b8>
    e2ec:	e703      	b.n	e0f6 <pow+0x13e>
    e2ee:	46c0      	nop			; (mov r8, r8)
    e2f0:	20000064 	.word	0x20000064
    e2f4:	00015254 	.word	0x00015254
    e2f8:	3ff00000 	.word	0x3ff00000
    e2fc:	fff00000 	.word	0xfff00000
    e300:	47efffff 	.word	0x47efffff
    e304:	3fe00000 	.word	0x3fe00000
    e308:	c7efffff 	.word	0xc7efffff
    e30c:	7ff00000 	.word	0x7ff00000

0000e310 <__ieee754_pow>:
    e310:	b5f0      	push	{r4, r5, r6, r7, lr}
    e312:	4657      	mov	r7, sl
    e314:	464e      	mov	r6, r9
    e316:	4645      	mov	r5, r8
    e318:	46de      	mov	lr, fp
    e31a:	001c      	movs	r4, r3
    e31c:	0013      	movs	r3, r2
    e31e:	b5e0      	push	{r5, r6, r7, lr}
    e320:	0065      	lsls	r5, r4, #1
    e322:	b091      	sub	sp, #68	; 0x44
    e324:	086d      	lsrs	r5, r5, #1
    e326:	9300      	str	r3, [sp, #0]
    e328:	9401      	str	r4, [sp, #4]
    e32a:	0007      	movs	r7, r0
    e32c:	000e      	movs	r6, r1
    e32e:	4680      	mov	r8, r0
    e330:	4689      	mov	r9, r1
    e332:	46a2      	mov	sl, r4
    e334:	432b      	orrs	r3, r5
    e336:	d031      	beq.n	e39c <__ieee754_pow+0x8c>
    e338:	4b67      	ldr	r3, [pc, #412]	; (e4d8 <__ieee754_pow+0x1c8>)
    e33a:	0074      	lsls	r4, r6, #1
    e33c:	0864      	lsrs	r4, r4, #1
    e33e:	429c      	cmp	r4, r3
    e340:	dc27      	bgt.n	e392 <__ieee754_pow+0x82>
    e342:	d024      	beq.n	e38e <__ieee754_pow+0x7e>
    e344:	429d      	cmp	r5, r3
    e346:	dc24      	bgt.n	e392 <__ieee754_pow+0x82>
    e348:	4b63      	ldr	r3, [pc, #396]	; (e4d8 <__ieee754_pow+0x1c8>)
    e34a:	429d      	cmp	r5, r3
    e34c:	d100      	bne.n	e350 <__ieee754_pow+0x40>
    e34e:	e081      	b.n	e454 <__ieee754_pow+0x144>
    e350:	2300      	movs	r3, #0
    e352:	469b      	mov	fp, r3
    e354:	464b      	mov	r3, r9
    e356:	2b00      	cmp	r3, #0
    e358:	da00      	bge.n	e35c <__ieee754_pow+0x4c>
    e35a:	e07f      	b.n	e45c <__ieee754_pow+0x14c>
    e35c:	2a00      	cmp	r2, #0
    e35e:	d12c      	bne.n	e3ba <__ieee754_pow+0xaa>
    e360:	4b5d      	ldr	r3, [pc, #372]	; (e4d8 <__ieee754_pow+0x1c8>)
    e362:	429d      	cmp	r5, r3
    e364:	d100      	bne.n	e368 <__ieee754_pow+0x58>
    e366:	e097      	b.n	e498 <__ieee754_pow+0x188>
    e368:	4b5c      	ldr	r3, [pc, #368]	; (e4dc <__ieee754_pow+0x1cc>)
    e36a:	429d      	cmp	r5, r3
    e36c:	d066      	beq.n	e43c <__ieee754_pow+0x12c>
    e36e:	2380      	movs	r3, #128	; 0x80
    e370:	05db      	lsls	r3, r3, #23
    e372:	459a      	cmp	sl, r3
    e374:	d100      	bne.n	e378 <__ieee754_pow+0x68>
    e376:	e3b9      	b.n	eaec <__ieee754_pow+0x7dc>
    e378:	4b59      	ldr	r3, [pc, #356]	; (e4e0 <__ieee754_pow+0x1d0>)
    e37a:	459a      	cmp	sl, r3
    e37c:	d11d      	bne.n	e3ba <__ieee754_pow+0xaa>
    e37e:	464b      	mov	r3, r9
    e380:	2b00      	cmp	r3, #0
    e382:	db1a      	blt.n	e3ba <__ieee754_pow+0xaa>
    e384:	0038      	movs	r0, r7
    e386:	0031      	movs	r1, r6
    e388:	f000 fcf8 	bl	ed7c <__ieee754_sqrt>
    e38c:	e008      	b.n	e3a0 <__ieee754_pow+0x90>
    e38e:	2800      	cmp	r0, #0
    e390:	d00d      	beq.n	e3ae <__ieee754_pow+0x9e>
    e392:	4b54      	ldr	r3, [pc, #336]	; (e4e4 <__ieee754_pow+0x1d4>)
    e394:	469c      	mov	ip, r3
    e396:	4464      	add	r4, ip
    e398:	4327      	orrs	r7, r4
    e39a:	d10a      	bne.n	e3b2 <__ieee754_pow+0xa2>
    e39c:	2000      	movs	r0, #0
    e39e:	494f      	ldr	r1, [pc, #316]	; (e4dc <__ieee754_pow+0x1cc>)
    e3a0:	b011      	add	sp, #68	; 0x44
    e3a2:	bc3c      	pop	{r2, r3, r4, r5}
    e3a4:	4690      	mov	r8, r2
    e3a6:	4699      	mov	r9, r3
    e3a8:	46a2      	mov	sl, r4
    e3aa:	46ab      	mov	fp, r5
    e3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3ae:	42a5      	cmp	r5, r4
    e3b0:	ddca      	ble.n	e348 <__ieee754_pow+0x38>
    e3b2:	484d      	ldr	r0, [pc, #308]	; (e4e8 <__ieee754_pow+0x1d8>)
    e3b4:	f000 fdd2 	bl	ef5c <nan>
    e3b8:	e7f2      	b.n	e3a0 <__ieee754_pow+0x90>
    e3ba:	0038      	movs	r0, r7
    e3bc:	0031      	movs	r1, r6
    e3be:	f000 fdbd 	bl	ef3c <fabs>
    e3c2:	4643      	mov	r3, r8
    e3c4:	2b00      	cmp	r3, #0
    e3c6:	d11d      	bne.n	e404 <__ieee754_pow+0xf4>
    e3c8:	2c00      	cmp	r4, #0
    e3ca:	d004      	beq.n	e3d6 <__ieee754_pow+0xc6>
    e3cc:	4a43      	ldr	r2, [pc, #268]	; (e4dc <__ieee754_pow+0x1cc>)
    e3ce:	00b3      	lsls	r3, r6, #2
    e3d0:	089b      	lsrs	r3, r3, #2
    e3d2:	4293      	cmp	r3, r2
    e3d4:	d116      	bne.n	e404 <__ieee754_pow+0xf4>
    e3d6:	4653      	mov	r3, sl
    e3d8:	2b00      	cmp	r3, #0
    e3da:	da00      	bge.n	e3de <__ieee754_pow+0xce>
    e3dc:	e3c5      	b.n	eb6a <__ieee754_pow+0x85a>
    e3de:	464b      	mov	r3, r9
    e3e0:	2b00      	cmp	r3, #0
    e3e2:	dadd      	bge.n	e3a0 <__ieee754_pow+0x90>
    e3e4:	4b3f      	ldr	r3, [pc, #252]	; (e4e4 <__ieee754_pow+0x1d4>)
    e3e6:	469c      	mov	ip, r3
    e3e8:	465b      	mov	r3, fp
    e3ea:	4464      	add	r4, ip
    e3ec:	431c      	orrs	r4, r3
    e3ee:	d101      	bne.n	e3f4 <__ieee754_pow+0xe4>
    e3f0:	f000 fc53 	bl	ec9a <__ieee754_pow+0x98a>
    e3f4:	465b      	mov	r3, fp
    e3f6:	2b01      	cmp	r3, #1
    e3f8:	d1d2      	bne.n	e3a0 <__ieee754_pow+0x90>
    e3fa:	2480      	movs	r4, #128	; 0x80
    e3fc:	0624      	lsls	r4, r4, #24
    e3fe:	190b      	adds	r3, r1, r4
    e400:	0019      	movs	r1, r3
    e402:	e7cd      	b.n	e3a0 <__ieee754_pow+0x90>
    e404:	0ff3      	lsrs	r3, r6, #31
    e406:	3b01      	subs	r3, #1
    e408:	4698      	mov	r8, r3
    e40a:	465b      	mov	r3, fp
    e40c:	4642      	mov	r2, r8
    e40e:	4313      	orrs	r3, r2
    e410:	d057      	beq.n	e4c2 <__ieee754_pow+0x1b2>
    e412:	4b36      	ldr	r3, [pc, #216]	; (e4ec <__ieee754_pow+0x1dc>)
    e414:	429d      	cmp	r5, r3
    e416:	dd77      	ble.n	e508 <__ieee754_pow+0x1f8>
    e418:	4b35      	ldr	r3, [pc, #212]	; (e4f0 <__ieee754_pow+0x1e0>)
    e41a:	429d      	cmp	r5, r3
    e41c:	dc00      	bgt.n	e420 <__ieee754_pow+0x110>
    e41e:	e3b1      	b.n	eb84 <__ieee754_pow+0x874>
    e420:	4b34      	ldr	r3, [pc, #208]	; (e4f4 <__ieee754_pow+0x1e4>)
    e422:	429c      	cmp	r4, r3
    e424:	dc00      	bgt.n	e428 <__ieee754_pow+0x118>
    e426:	e3a8      	b.n	eb7a <__ieee754_pow+0x86a>
    e428:	4653      	mov	r3, sl
    e42a:	2b00      	cmp	r3, #0
    e42c:	dd43      	ble.n	e4b6 <__ieee754_pow+0x1a6>
    e42e:	4a32      	ldr	r2, [pc, #200]	; (e4f8 <__ieee754_pow+0x1e8>)
    e430:	4b32      	ldr	r3, [pc, #200]	; (e4fc <__ieee754_pow+0x1ec>)
    e432:	0010      	movs	r0, r2
    e434:	0019      	movs	r1, r3
    e436:	f002 fefb 	bl	11230 <__aeabi_dmul>
    e43a:	e7b1      	b.n	e3a0 <__ieee754_pow+0x90>
    e43c:	4653      	mov	r3, sl
    e43e:	0038      	movs	r0, r7
    e440:	0031      	movs	r1, r6
    e442:	2b00      	cmp	r3, #0
    e444:	daac      	bge.n	e3a0 <__ieee754_pow+0x90>
    e446:	003a      	movs	r2, r7
    e448:	0033      	movs	r3, r6
    e44a:	2000      	movs	r0, #0
    e44c:	4923      	ldr	r1, [pc, #140]	; (e4dc <__ieee754_pow+0x1cc>)
    e44e:	f002 fabb 	bl	109c8 <__aeabi_ddiv>
    e452:	e7a5      	b.n	e3a0 <__ieee754_pow+0x90>
    e454:	2a00      	cmp	r2, #0
    e456:	d100      	bne.n	e45a <__ieee754_pow+0x14a>
    e458:	e77a      	b.n	e350 <__ieee754_pow+0x40>
    e45a:	e79a      	b.n	e392 <__ieee754_pow+0x82>
    e45c:	4b28      	ldr	r3, [pc, #160]	; (e500 <__ieee754_pow+0x1f0>)
    e45e:	429d      	cmp	r5, r3
    e460:	dc2c      	bgt.n	e4bc <__ieee754_pow+0x1ac>
    e462:	4b24      	ldr	r3, [pc, #144]	; (e4f4 <__ieee754_pow+0x1e4>)
    e464:	429d      	cmp	r5, r3
    e466:	dc00      	bgt.n	e46a <__ieee754_pow+0x15a>
    e468:	e778      	b.n	e35c <__ieee754_pow+0x4c>
    e46a:	4926      	ldr	r1, [pc, #152]	; (e504 <__ieee754_pow+0x1f4>)
    e46c:	152b      	asrs	r3, r5, #20
    e46e:	468c      	mov	ip, r1
    e470:	4463      	add	r3, ip
    e472:	2b14      	cmp	r3, #20
    e474:	dc01      	bgt.n	e47a <__ieee754_pow+0x16a>
    e476:	f000 fbf3 	bl	ec60 <__ieee754_pow+0x950>
    e47a:	2134      	movs	r1, #52	; 0x34
    e47c:	1acb      	subs	r3, r1, r3
    e47e:	9900      	ldr	r1, [sp, #0]
    e480:	40d9      	lsrs	r1, r3
    e482:	0008      	movs	r0, r1
    e484:	4098      	lsls	r0, r3
    e486:	4282      	cmp	r2, r0
    e488:	d000      	beq.n	e48c <__ieee754_pow+0x17c>
    e48a:	e767      	b.n	e35c <__ieee754_pow+0x4c>
    e48c:	2301      	movs	r3, #1
    e48e:	4019      	ands	r1, r3
    e490:	3301      	adds	r3, #1
    e492:	1a5b      	subs	r3, r3, r1
    e494:	469b      	mov	fp, r3
    e496:	e761      	b.n	e35c <__ieee754_pow+0x4c>
    e498:	4b12      	ldr	r3, [pc, #72]	; (e4e4 <__ieee754_pow+0x1d4>)
    e49a:	18e3      	adds	r3, r4, r3
    e49c:	431f      	orrs	r7, r3
    e49e:	d100      	bne.n	e4a2 <__ieee754_pow+0x192>
    e4a0:	e77c      	b.n	e39c <__ieee754_pow+0x8c>
    e4a2:	4b14      	ldr	r3, [pc, #80]	; (e4f4 <__ieee754_pow+0x1e4>)
    e4a4:	429c      	cmp	r4, r3
    e4a6:	dc00      	bgt.n	e4aa <__ieee754_pow+0x19a>
    e4a8:	e327      	b.n	eafa <__ieee754_pow+0x7ea>
    e4aa:	9800      	ldr	r0, [sp, #0]
    e4ac:	9901      	ldr	r1, [sp, #4]
    e4ae:	4653      	mov	r3, sl
    e4b0:	2b00      	cmp	r3, #0
    e4b2:	db00      	blt.n	e4b6 <__ieee754_pow+0x1a6>
    e4b4:	e774      	b.n	e3a0 <__ieee754_pow+0x90>
    e4b6:	2000      	movs	r0, #0
    e4b8:	2100      	movs	r1, #0
    e4ba:	e771      	b.n	e3a0 <__ieee754_pow+0x90>
    e4bc:	2302      	movs	r3, #2
    e4be:	469b      	mov	fp, r3
    e4c0:	e74c      	b.n	e35c <__ieee754_pow+0x4c>
    e4c2:	003a      	movs	r2, r7
    e4c4:	0033      	movs	r3, r6
    e4c6:	0038      	movs	r0, r7
    e4c8:	0031      	movs	r1, r6
    e4ca:	f003 f931 	bl	11730 <__aeabi_dsub>
    e4ce:	0002      	movs	r2, r0
    e4d0:	000b      	movs	r3, r1
    e4d2:	f002 fa79 	bl	109c8 <__aeabi_ddiv>
    e4d6:	e763      	b.n	e3a0 <__ieee754_pow+0x90>
    e4d8:	7ff00000 	.word	0x7ff00000
    e4dc:	3ff00000 	.word	0x3ff00000
    e4e0:	3fe00000 	.word	0x3fe00000
    e4e4:	c0100000 	.word	0xc0100000
    e4e8:	00015258 	.word	0x00015258
    e4ec:	41e00000 	.word	0x41e00000
    e4f0:	43f00000 	.word	0x43f00000
    e4f4:	3fefffff 	.word	0x3fefffff
    e4f8:	8800759c 	.word	0x8800759c
    e4fc:	7e37e43c 	.word	0x7e37e43c
    e500:	433fffff 	.word	0x433fffff
    e504:	fffffc01 	.word	0xfffffc01
    e508:	4be9      	ldr	r3, [pc, #932]	; (e8b0 <__ieee754_pow+0x5a0>)
    e50a:	2200      	movs	r2, #0
    e50c:	429c      	cmp	r4, r3
    e50e:	dc06      	bgt.n	e51e <__ieee754_pow+0x20e>
    e510:	2200      	movs	r2, #0
    e512:	4be8      	ldr	r3, [pc, #928]	; (e8b4 <__ieee754_pow+0x5a4>)
    e514:	f002 fe8c 	bl	11230 <__aeabi_dmul>
    e518:	2235      	movs	r2, #53	; 0x35
    e51a:	000c      	movs	r4, r1
    e51c:	4252      	negs	r2, r2
    e51e:	4de6      	ldr	r5, [pc, #920]	; (e8b8 <__ieee754_pow+0x5a8>)
    e520:	1523      	asrs	r3, r4, #20
    e522:	46ac      	mov	ip, r5
    e524:	4463      	add	r3, ip
    e526:	4699      	mov	r9, r3
    e528:	0324      	lsls	r4, r4, #12
    e52a:	4de4      	ldr	r5, [pc, #912]	; (e8bc <__ieee754_pow+0x5ac>)
    e52c:	4be4      	ldr	r3, [pc, #912]	; (e8c0 <__ieee754_pow+0x5b0>)
    e52e:	0b24      	lsrs	r4, r4, #12
    e530:	4491      	add	r9, r2
    e532:	4325      	orrs	r5, r4
    e534:	429c      	cmp	r4, r3
    e536:	dd09      	ble.n	e54c <__ieee754_pow+0x23c>
    e538:	4be2      	ldr	r3, [pc, #904]	; (e8c4 <__ieee754_pow+0x5b4>)
    e53a:	429c      	cmp	r4, r3
    e53c:	dc00      	bgt.n	e540 <__ieee754_pow+0x230>
    e53e:	e3b6      	b.n	ecae <__ieee754_pow+0x99e>
    e540:	2301      	movs	r3, #1
    e542:	469c      	mov	ip, r3
    e544:	4be0      	ldr	r3, [pc, #896]	; (e8c8 <__ieee754_pow+0x5b8>)
    e546:	44e1      	add	r9, ip
    e548:	469c      	mov	ip, r3
    e54a:	4465      	add	r5, ip
    e54c:	2300      	movs	r3, #0
    e54e:	2400      	movs	r4, #0
    e550:	2200      	movs	r2, #0
    e552:	9308      	str	r3, [sp, #32]
    e554:	9409      	str	r4, [sp, #36]	; 0x24
    e556:	930c      	str	r3, [sp, #48]	; 0x30
    e558:	940d      	str	r4, [sp, #52]	; 0x34
    e55a:	2400      	movs	r4, #0
    e55c:	4bd7      	ldr	r3, [pc, #860]	; (e8bc <__ieee754_pow+0x5ac>)
    e55e:	9206      	str	r2, [sp, #24]
    e560:	9307      	str	r3, [sp, #28]
    e562:	9a06      	ldr	r2, [sp, #24]
    e564:	9b07      	ldr	r3, [sp, #28]
    e566:	0029      	movs	r1, r5
    e568:	900a      	str	r0, [sp, #40]	; 0x28
    e56a:	910b      	str	r1, [sp, #44]	; 0x2c
    e56c:	f003 f8e0 	bl	11730 <__aeabi_dsub>
    e570:	9a06      	ldr	r2, [sp, #24]
    e572:	9b07      	ldr	r3, [sp, #28]
    e574:	0006      	movs	r6, r0
    e576:	000f      	movs	r7, r1
    e578:	980a      	ldr	r0, [sp, #40]	; 0x28
    e57a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e57c:	f001 ff14 	bl	103a8 <__aeabi_dadd>
    e580:	0002      	movs	r2, r0
    e582:	000b      	movs	r3, r1
    e584:	2000      	movs	r0, #0
    e586:	49cd      	ldr	r1, [pc, #820]	; (e8bc <__ieee754_pow+0x5ac>)
    e588:	f002 fa1e 	bl	109c8 <__aeabi_ddiv>
    e58c:	000a      	movs	r2, r1
    e58e:	0001      	movs	r1, r0
    e590:	0013      	movs	r3, r2
    e592:	910e      	str	r1, [sp, #56]	; 0x38
    e594:	920f      	str	r2, [sp, #60]	; 0x3c
    e596:	0002      	movs	r2, r0
    e598:	0039      	movs	r1, r7
    e59a:	0030      	movs	r0, r6
    e59c:	f002 fe48 	bl	11230 <__aeabi_dmul>
    e5a0:	000a      	movs	r2, r1
    e5a2:	0001      	movs	r1, r0
    e5a4:	2080      	movs	r0, #128	; 0x80
    e5a6:	9104      	str	r1, [sp, #16]
    e5a8:	9205      	str	r2, [sp, #20]
    e5aa:	0013      	movs	r3, r2
    e5ac:	2200      	movs	r2, #0
    e5ae:	1069      	asrs	r1, r5, #1
    e5b0:	2580      	movs	r5, #128	; 0x80
    e5b2:	0300      	lsls	r0, r0, #12
    e5b4:	4684      	mov	ip, r0
    e5b6:	9202      	str	r2, [sp, #8]
    e5b8:	9303      	str	r3, [sp, #12]
    e5ba:	2200      	movs	r2, #0
    e5bc:	05ad      	lsls	r5, r5, #22
    e5be:	430d      	orrs	r5, r1
    e5c0:	4465      	add	r5, ip
    e5c2:	192b      	adds	r3, r5, r4
    e5c4:	9802      	ldr	r0, [sp, #8]
    e5c6:	9903      	ldr	r1, [sp, #12]
    e5c8:	0014      	movs	r4, r2
    e5ca:	001d      	movs	r5, r3
    e5cc:	f002 fe30 	bl	11230 <__aeabi_dmul>
    e5d0:	0002      	movs	r2, r0
    e5d2:	000b      	movs	r3, r1
    e5d4:	0030      	movs	r0, r6
    e5d6:	0039      	movs	r1, r7
    e5d8:	f003 f8aa 	bl	11730 <__aeabi_dsub>
    e5dc:	9a06      	ldr	r2, [sp, #24]
    e5de:	9b07      	ldr	r3, [sp, #28]
    e5e0:	0006      	movs	r6, r0
    e5e2:	000f      	movs	r7, r1
    e5e4:	0020      	movs	r0, r4
    e5e6:	0029      	movs	r1, r5
    e5e8:	f003 f8a2 	bl	11730 <__aeabi_dsub>
    e5ec:	0002      	movs	r2, r0
    e5ee:	000b      	movs	r3, r1
    e5f0:	980a      	ldr	r0, [sp, #40]	; 0x28
    e5f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e5f4:	f003 f89c 	bl	11730 <__aeabi_dsub>
    e5f8:	9a02      	ldr	r2, [sp, #8]
    e5fa:	9b03      	ldr	r3, [sp, #12]
    e5fc:	f002 fe18 	bl	11230 <__aeabi_dmul>
    e600:	0002      	movs	r2, r0
    e602:	000b      	movs	r3, r1
    e604:	0030      	movs	r0, r6
    e606:	0039      	movs	r1, r7
    e608:	f003 f892 	bl	11730 <__aeabi_dsub>
    e60c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e60e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e610:	f002 fe0e 	bl	11230 <__aeabi_dmul>
    e614:	9d04      	ldr	r5, [sp, #16]
    e616:	9e05      	ldr	r6, [sp, #20]
    e618:	9006      	str	r0, [sp, #24]
    e61a:	9107      	str	r1, [sp, #28]
    e61c:	002a      	movs	r2, r5
    e61e:	0033      	movs	r3, r6
    e620:	0028      	movs	r0, r5
    e622:	0031      	movs	r1, r6
    e624:	f002 fe04 	bl	11230 <__aeabi_dmul>
    e628:	0006      	movs	r6, r0
    e62a:	000f      	movs	r7, r1
    e62c:	4aa7      	ldr	r2, [pc, #668]	; (e8cc <__ieee754_pow+0x5bc>)
    e62e:	4ba8      	ldr	r3, [pc, #672]	; (e8d0 <__ieee754_pow+0x5c0>)
    e630:	f002 fdfe 	bl	11230 <__aeabi_dmul>
    e634:	4aa7      	ldr	r2, [pc, #668]	; (e8d4 <__ieee754_pow+0x5c4>)
    e636:	4ba8      	ldr	r3, [pc, #672]	; (e8d8 <__ieee754_pow+0x5c8>)
    e638:	f001 feb6 	bl	103a8 <__aeabi_dadd>
    e63c:	0032      	movs	r2, r6
    e63e:	003b      	movs	r3, r7
    e640:	f002 fdf6 	bl	11230 <__aeabi_dmul>
    e644:	4aa5      	ldr	r2, [pc, #660]	; (e8dc <__ieee754_pow+0x5cc>)
    e646:	4ba6      	ldr	r3, [pc, #664]	; (e8e0 <__ieee754_pow+0x5d0>)
    e648:	f001 feae 	bl	103a8 <__aeabi_dadd>
    e64c:	0032      	movs	r2, r6
    e64e:	003b      	movs	r3, r7
    e650:	f002 fdee 	bl	11230 <__aeabi_dmul>
    e654:	4aa3      	ldr	r2, [pc, #652]	; (e8e4 <__ieee754_pow+0x5d4>)
    e656:	4ba4      	ldr	r3, [pc, #656]	; (e8e8 <__ieee754_pow+0x5d8>)
    e658:	f001 fea6 	bl	103a8 <__aeabi_dadd>
    e65c:	0032      	movs	r2, r6
    e65e:	003b      	movs	r3, r7
    e660:	f002 fde6 	bl	11230 <__aeabi_dmul>
    e664:	4aa1      	ldr	r2, [pc, #644]	; (e8ec <__ieee754_pow+0x5dc>)
    e666:	4ba2      	ldr	r3, [pc, #648]	; (e8f0 <__ieee754_pow+0x5e0>)
    e668:	f001 fe9e 	bl	103a8 <__aeabi_dadd>
    e66c:	0032      	movs	r2, r6
    e66e:	003b      	movs	r3, r7
    e670:	f002 fdde 	bl	11230 <__aeabi_dmul>
    e674:	4a9f      	ldr	r2, [pc, #636]	; (e8f4 <__ieee754_pow+0x5e4>)
    e676:	4ba0      	ldr	r3, [pc, #640]	; (e8f8 <__ieee754_pow+0x5e8>)
    e678:	f001 fe96 	bl	103a8 <__aeabi_dadd>
    e67c:	0032      	movs	r2, r6
    e67e:	0004      	movs	r4, r0
    e680:	000d      	movs	r5, r1
    e682:	003b      	movs	r3, r7
    e684:	0030      	movs	r0, r6
    e686:	0039      	movs	r1, r7
    e688:	f002 fdd2 	bl	11230 <__aeabi_dmul>
    e68c:	0002      	movs	r2, r0
    e68e:	000b      	movs	r3, r1
    e690:	0020      	movs	r0, r4
    e692:	0029      	movs	r1, r5
    e694:	f002 fdcc 	bl	11230 <__aeabi_dmul>
    e698:	9e02      	ldr	r6, [sp, #8]
    e69a:	9f03      	ldr	r7, [sp, #12]
    e69c:	0004      	movs	r4, r0
    e69e:	000d      	movs	r5, r1
    e6a0:	9804      	ldr	r0, [sp, #16]
    e6a2:	9905      	ldr	r1, [sp, #20]
    e6a4:	0032      	movs	r2, r6
    e6a6:	003b      	movs	r3, r7
    e6a8:	f001 fe7e 	bl	103a8 <__aeabi_dadd>
    e6ac:	9a06      	ldr	r2, [sp, #24]
    e6ae:	9b07      	ldr	r3, [sp, #28]
    e6b0:	f002 fdbe 	bl	11230 <__aeabi_dmul>
    e6b4:	0022      	movs	r2, r4
    e6b6:	002b      	movs	r3, r5
    e6b8:	f001 fe76 	bl	103a8 <__aeabi_dadd>
    e6bc:	0032      	movs	r2, r6
    e6be:	900a      	str	r0, [sp, #40]	; 0x28
    e6c0:	910b      	str	r1, [sp, #44]	; 0x2c
    e6c2:	003b      	movs	r3, r7
    e6c4:	0030      	movs	r0, r6
    e6c6:	0039      	movs	r1, r7
    e6c8:	9602      	str	r6, [sp, #8]
    e6ca:	9703      	str	r7, [sp, #12]
    e6cc:	f002 fdb0 	bl	11230 <__aeabi_dmul>
    e6d0:	2200      	movs	r2, #0
    e6d2:	4b8a      	ldr	r3, [pc, #552]	; (e8fc <__ieee754_pow+0x5ec>)
    e6d4:	0004      	movs	r4, r0
    e6d6:	000d      	movs	r5, r1
    e6d8:	f001 fe66 	bl	103a8 <__aeabi_dadd>
    e6dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e6e0:	f001 fe62 	bl	103a8 <__aeabi_dadd>
    e6e4:	2600      	movs	r6, #0
    e6e6:	000f      	movs	r7, r1
    e6e8:	0032      	movs	r2, r6
    e6ea:	000b      	movs	r3, r1
    e6ec:	9802      	ldr	r0, [sp, #8]
    e6ee:	9903      	ldr	r1, [sp, #12]
    e6f0:	f002 fd9e 	bl	11230 <__aeabi_dmul>
    e6f4:	2200      	movs	r2, #0
    e6f6:	9002      	str	r0, [sp, #8]
    e6f8:	9103      	str	r1, [sp, #12]
    e6fa:	4b80      	ldr	r3, [pc, #512]	; (e8fc <__ieee754_pow+0x5ec>)
    e6fc:	0030      	movs	r0, r6
    e6fe:	0039      	movs	r1, r7
    e700:	f003 f816 	bl	11730 <__aeabi_dsub>
    e704:	0022      	movs	r2, r4
    e706:	002b      	movs	r3, r5
    e708:	f003 f812 	bl	11730 <__aeabi_dsub>
    e70c:	0002      	movs	r2, r0
    e70e:	000b      	movs	r3, r1
    e710:	980a      	ldr	r0, [sp, #40]	; 0x28
    e712:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e714:	f003 f80c 	bl	11730 <__aeabi_dsub>
    e718:	9a04      	ldr	r2, [sp, #16]
    e71a:	9b05      	ldr	r3, [sp, #20]
    e71c:	f002 fd88 	bl	11230 <__aeabi_dmul>
    e720:	0032      	movs	r2, r6
    e722:	0004      	movs	r4, r0
    e724:	000d      	movs	r5, r1
    e726:	9806      	ldr	r0, [sp, #24]
    e728:	9907      	ldr	r1, [sp, #28]
    e72a:	003b      	movs	r3, r7
    e72c:	f002 fd80 	bl	11230 <__aeabi_dmul>
    e730:	0002      	movs	r2, r0
    e732:	000b      	movs	r3, r1
    e734:	0020      	movs	r0, r4
    e736:	0029      	movs	r1, r5
    e738:	f001 fe36 	bl	103a8 <__aeabi_dadd>
    e73c:	0004      	movs	r4, r0
    e73e:	000d      	movs	r5, r1
    e740:	0002      	movs	r2, r0
    e742:	000b      	movs	r3, r1
    e744:	9802      	ldr	r0, [sp, #8]
    e746:	9903      	ldr	r1, [sp, #12]
    e748:	f001 fe2e 	bl	103a8 <__aeabi_dadd>
    e74c:	2600      	movs	r6, #0
    e74e:	22e0      	movs	r2, #224	; 0xe0
    e750:	4b6b      	ldr	r3, [pc, #428]	; (e900 <__ieee754_pow+0x5f0>)
    e752:	0612      	lsls	r2, r2, #24
    e754:	0030      	movs	r0, r6
    e756:	000f      	movs	r7, r1
    e758:	f002 fd6a 	bl	11230 <__aeabi_dmul>
    e75c:	9a02      	ldr	r2, [sp, #8]
    e75e:	9b03      	ldr	r3, [sp, #12]
    e760:	9004      	str	r0, [sp, #16]
    e762:	9105      	str	r1, [sp, #20]
    e764:	0030      	movs	r0, r6
    e766:	0039      	movs	r1, r7
    e768:	f002 ffe2 	bl	11730 <__aeabi_dsub>
    e76c:	0002      	movs	r2, r0
    e76e:	000b      	movs	r3, r1
    e770:	0020      	movs	r0, r4
    e772:	0029      	movs	r1, r5
    e774:	f002 ffdc 	bl	11730 <__aeabi_dsub>
    e778:	4a62      	ldr	r2, [pc, #392]	; (e904 <__ieee754_pow+0x5f4>)
    e77a:	4b61      	ldr	r3, [pc, #388]	; (e900 <__ieee754_pow+0x5f0>)
    e77c:	f002 fd58 	bl	11230 <__aeabi_dmul>
    e780:	4a61      	ldr	r2, [pc, #388]	; (e908 <__ieee754_pow+0x5f8>)
    e782:	0004      	movs	r4, r0
    e784:	000d      	movs	r5, r1
    e786:	4b61      	ldr	r3, [pc, #388]	; (e90c <__ieee754_pow+0x5fc>)
    e788:	0030      	movs	r0, r6
    e78a:	0039      	movs	r1, r7
    e78c:	f002 fd50 	bl	11230 <__aeabi_dmul>
    e790:	0002      	movs	r2, r0
    e792:	000b      	movs	r3, r1
    e794:	0020      	movs	r0, r4
    e796:	0029      	movs	r1, r5
    e798:	f001 fe06 	bl	103a8 <__aeabi_dadd>
    e79c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e79e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e7a0:	f001 fe02 	bl	103a8 <__aeabi_dadd>
    e7a4:	0006      	movs	r6, r0
    e7a6:	4648      	mov	r0, r9
    e7a8:	000f      	movs	r7, r1
    e7aa:	f003 fb2b 	bl	11e04 <__aeabi_i2d>
    e7ae:	0004      	movs	r4, r0
    e7b0:	000d      	movs	r5, r1
    e7b2:	9804      	ldr	r0, [sp, #16]
    e7b4:	9905      	ldr	r1, [sp, #20]
    e7b6:	0032      	movs	r2, r6
    e7b8:	003b      	movs	r3, r7
    e7ba:	f001 fdf5 	bl	103a8 <__aeabi_dadd>
    e7be:	9a08      	ldr	r2, [sp, #32]
    e7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e7c2:	f001 fdf1 	bl	103a8 <__aeabi_dadd>
    e7c6:	0022      	movs	r2, r4
    e7c8:	002b      	movs	r3, r5
    e7ca:	f001 fded 	bl	103a8 <__aeabi_dadd>
    e7ce:	2000      	movs	r0, #0
    e7d0:	0022      	movs	r2, r4
    e7d2:	002b      	movs	r3, r5
    e7d4:	9002      	str	r0, [sp, #8]
    e7d6:	9103      	str	r1, [sp, #12]
    e7d8:	f002 ffaa 	bl	11730 <__aeabi_dsub>
    e7dc:	9a08      	ldr	r2, [sp, #32]
    e7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e7e0:	f002 ffa6 	bl	11730 <__aeabi_dsub>
    e7e4:	9a04      	ldr	r2, [sp, #16]
    e7e6:	9b05      	ldr	r3, [sp, #20]
    e7e8:	f002 ffa2 	bl	11730 <__aeabi_dsub>
    e7ec:	0002      	movs	r2, r0
    e7ee:	000b      	movs	r3, r1
    e7f0:	0030      	movs	r0, r6
    e7f2:	0039      	movs	r1, r7
    e7f4:	f002 ff9c 	bl	11730 <__aeabi_dsub>
    e7f8:	9004      	str	r0, [sp, #16]
    e7fa:	9105      	str	r1, [sp, #20]
    e7fc:	465b      	mov	r3, fp
    e7fe:	4642      	mov	r2, r8
    e800:	3b01      	subs	r3, #1
    e802:	4313      	orrs	r3, r2
    e804:	d100      	bne.n	e808 <__ieee754_pow+0x4f8>
    e806:	e1ab      	b.n	eb60 <__ieee754_pow+0x850>
    e808:	2300      	movs	r3, #0
    e80a:	4c2c      	ldr	r4, [pc, #176]	; (e8bc <__ieee754_pow+0x5ac>)
    e80c:	9306      	str	r3, [sp, #24]
    e80e:	9407      	str	r4, [sp, #28]
    e810:	9800      	ldr	r0, [sp, #0]
    e812:	9901      	ldr	r1, [sp, #4]
    e814:	2600      	movs	r6, #0
    e816:	000b      	movs	r3, r1
    e818:	0032      	movs	r2, r6
    e81a:	000f      	movs	r7, r1
    e81c:	f002 ff88 	bl	11730 <__aeabi_dsub>
    e820:	9a02      	ldr	r2, [sp, #8]
    e822:	9b03      	ldr	r3, [sp, #12]
    e824:	f002 fd04 	bl	11230 <__aeabi_dmul>
    e828:	9a00      	ldr	r2, [sp, #0]
    e82a:	9b01      	ldr	r3, [sp, #4]
    e82c:	0004      	movs	r4, r0
    e82e:	000d      	movs	r5, r1
    e830:	9804      	ldr	r0, [sp, #16]
    e832:	9905      	ldr	r1, [sp, #20]
    e834:	f002 fcfc 	bl	11230 <__aeabi_dmul>
    e838:	0002      	movs	r2, r0
    e83a:	000b      	movs	r3, r1
    e83c:	0020      	movs	r0, r4
    e83e:	0029      	movs	r1, r5
    e840:	f001 fdb2 	bl	103a8 <__aeabi_dadd>
    e844:	0004      	movs	r4, r0
    e846:	000d      	movs	r5, r1
    e848:	9802      	ldr	r0, [sp, #8]
    e84a:	9903      	ldr	r1, [sp, #12]
    e84c:	0032      	movs	r2, r6
    e84e:	003b      	movs	r3, r7
    e850:	9400      	str	r4, [sp, #0]
    e852:	9501      	str	r5, [sp, #4]
    e854:	f002 fcec 	bl	11230 <__aeabi_dmul>
    e858:	0002      	movs	r2, r0
    e85a:	000b      	movs	r3, r1
    e85c:	0006      	movs	r6, r0
    e85e:	000f      	movs	r7, r1
    e860:	0020      	movs	r0, r4
    e862:	0029      	movs	r1, r5
    e864:	f001 fda0 	bl	103a8 <__aeabi_dadd>
    e868:	4b29      	ldr	r3, [pc, #164]	; (e910 <__ieee754_pow+0x600>)
    e86a:	0004      	movs	r4, r0
    e86c:	000d      	movs	r5, r1
    e86e:	0002      	movs	r2, r0
    e870:	468b      	mov	fp, r1
    e872:	4299      	cmp	r1, r3
    e874:	dc00      	bgt.n	e878 <__ieee754_pow+0x568>
    e876:	e14f      	b.n	eb18 <__ieee754_pow+0x808>
    e878:	4b26      	ldr	r3, [pc, #152]	; (e914 <__ieee754_pow+0x604>)
    e87a:	18cb      	adds	r3, r1, r3
    e87c:	4303      	orrs	r3, r0
    e87e:	d000      	beq.n	e882 <__ieee754_pow+0x572>
    e880:	e1e2      	b.n	ec48 <__ieee754_pow+0x938>
    e882:	9800      	ldr	r0, [sp, #0]
    e884:	9901      	ldr	r1, [sp, #4]
    e886:	4a24      	ldr	r2, [pc, #144]	; (e918 <__ieee754_pow+0x608>)
    e888:	4b24      	ldr	r3, [pc, #144]	; (e91c <__ieee754_pow+0x60c>)
    e88a:	f001 fd8d 	bl	103a8 <__aeabi_dadd>
    e88e:	0032      	movs	r2, r6
    e890:	9002      	str	r0, [sp, #8]
    e892:	9103      	str	r1, [sp, #12]
    e894:	003b      	movs	r3, r7
    e896:	0020      	movs	r0, r4
    e898:	0029      	movs	r1, r5
    e89a:	f002 ff49 	bl	11730 <__aeabi_dsub>
    e89e:	0002      	movs	r2, r0
    e8a0:	000b      	movs	r3, r1
    e8a2:	9802      	ldr	r0, [sp, #8]
    e8a4:	9903      	ldr	r1, [sp, #12]
    e8a6:	f001 fd23 	bl	102f0 <__aeabi_dcmpgt>
    e8aa:	46aa      	mov	sl, r5
    e8ac:	e038      	b.n	e920 <__ieee754_pow+0x610>
    e8ae:	46c0      	nop			; (mov r8, r8)
    e8b0:	000fffff 	.word	0x000fffff
    e8b4:	43400000 	.word	0x43400000
    e8b8:	fffffc01 	.word	0xfffffc01
    e8bc:	3ff00000 	.word	0x3ff00000
    e8c0:	0003988e 	.word	0x0003988e
    e8c4:	000bb679 	.word	0x000bb679
    e8c8:	fff00000 	.word	0xfff00000
    e8cc:	4a454eef 	.word	0x4a454eef
    e8d0:	3fca7e28 	.word	0x3fca7e28
    e8d4:	93c9db65 	.word	0x93c9db65
    e8d8:	3fcd864a 	.word	0x3fcd864a
    e8dc:	a91d4101 	.word	0xa91d4101
    e8e0:	3fd17460 	.word	0x3fd17460
    e8e4:	518f264d 	.word	0x518f264d
    e8e8:	3fd55555 	.word	0x3fd55555
    e8ec:	db6fabff 	.word	0xdb6fabff
    e8f0:	3fdb6db6 	.word	0x3fdb6db6
    e8f4:	33333303 	.word	0x33333303
    e8f8:	3fe33333 	.word	0x3fe33333
    e8fc:	40080000 	.word	0x40080000
    e900:	3feec709 	.word	0x3feec709
    e904:	dc3a03fd 	.word	0xdc3a03fd
    e908:	145b01f5 	.word	0x145b01f5
    e90c:	be3e2fe0 	.word	0xbe3e2fe0
    e910:	408fffff 	.word	0x408fffff
    e914:	bf700000 	.word	0xbf700000
    e918:	652b82fe 	.word	0x652b82fe
    e91c:	3c971547 	.word	0x3c971547
    e920:	2800      	cmp	r0, #0
    e922:	d000      	beq.n	e926 <__ieee754_pow+0x616>
    e924:	e190      	b.n	ec48 <__ieee754_pow+0x938>
    e926:	4aec      	ldr	r2, [pc, #944]	; (ecd8 <__ieee754_pow+0x9c8>)
    e928:	4653      	mov	r3, sl
    e92a:	4694      	mov	ip, r2
    e92c:	2280      	movs	r2, #128	; 0x80
    e92e:	0352      	lsls	r2, r2, #13
    e930:	0011      	movs	r1, r2
    e932:	151b      	asrs	r3, r3, #20
    e934:	4463      	add	r3, ip
    e936:	4119      	asrs	r1, r3
    e938:	000b      	movs	r3, r1
    e93a:	4690      	mov	r8, r2
    e93c:	4ae7      	ldr	r2, [pc, #924]	; (ecdc <__ieee754_pow+0x9cc>)
    e93e:	445b      	add	r3, fp
    e940:	4694      	mov	ip, r2
    e942:	005c      	lsls	r4, r3, #1
    e944:	0d64      	lsrs	r4, r4, #21
    e946:	4de6      	ldr	r5, [pc, #920]	; (ece0 <__ieee754_pow+0x9d0>)
    e948:	4464      	add	r4, ip
    e94a:	4125      	asrs	r5, r4
    e94c:	001a      	movs	r2, r3
    e94e:	43aa      	bics	r2, r5
    e950:	0011      	movs	r1, r2
    e952:	4642      	mov	r2, r8
    e954:	031b      	lsls	r3, r3, #12
    e956:	0b1b      	lsrs	r3, r3, #12
    e958:	4313      	orrs	r3, r2
    e95a:	2214      	movs	r2, #20
    e95c:	1b14      	subs	r4, r2, r4
    e95e:	4123      	asrs	r3, r4
    e960:	4699      	mov	r9, r3
    e962:	465b      	mov	r3, fp
    e964:	2000      	movs	r0, #0
    e966:	2b00      	cmp	r3, #0
    e968:	da00      	bge.n	e96c <__ieee754_pow+0x65c>
    e96a:	e1b0      	b.n	ecce <__ieee754_pow+0x9be>
    e96c:	0002      	movs	r2, r0
    e96e:	000b      	movs	r3, r1
    e970:	0030      	movs	r0, r6
    e972:	0039      	movs	r1, r7
    e974:	f002 fedc 	bl	11730 <__aeabi_dsub>
    e978:	000b      	movs	r3, r1
    e97a:	0002      	movs	r2, r0
    e97c:	0006      	movs	r6, r0
    e97e:	000f      	movs	r7, r1
    e980:	9800      	ldr	r0, [sp, #0]
    e982:	9901      	ldr	r1, [sp, #4]
    e984:	f001 fd10 	bl	103a8 <__aeabi_dadd>
    e988:	464b      	mov	r3, r9
    e98a:	051b      	lsls	r3, r3, #20
    e98c:	000d      	movs	r5, r1
    e98e:	4698      	mov	r8, r3
    e990:	2400      	movs	r4, #0
    e992:	2200      	movs	r2, #0
    e994:	4bd3      	ldr	r3, [pc, #844]	; (ece4 <__ieee754_pow+0x9d4>)
    e996:	0020      	movs	r0, r4
    e998:	0029      	movs	r1, r5
    e99a:	f002 fc49 	bl	11230 <__aeabi_dmul>
    e99e:	0032      	movs	r2, r6
    e9a0:	9002      	str	r0, [sp, #8]
    e9a2:	9103      	str	r1, [sp, #12]
    e9a4:	003b      	movs	r3, r7
    e9a6:	0020      	movs	r0, r4
    e9a8:	0029      	movs	r1, r5
    e9aa:	f002 fec1 	bl	11730 <__aeabi_dsub>
    e9ae:	0002      	movs	r2, r0
    e9b0:	000b      	movs	r3, r1
    e9b2:	9800      	ldr	r0, [sp, #0]
    e9b4:	9901      	ldr	r1, [sp, #4]
    e9b6:	f002 febb 	bl	11730 <__aeabi_dsub>
    e9ba:	4acb      	ldr	r2, [pc, #812]	; (ece8 <__ieee754_pow+0x9d8>)
    e9bc:	4bcb      	ldr	r3, [pc, #812]	; (ecec <__ieee754_pow+0x9dc>)
    e9be:	f002 fc37 	bl	11230 <__aeabi_dmul>
    e9c2:	4acb      	ldr	r2, [pc, #812]	; (ecf0 <__ieee754_pow+0x9e0>)
    e9c4:	0006      	movs	r6, r0
    e9c6:	000f      	movs	r7, r1
    e9c8:	4bca      	ldr	r3, [pc, #808]	; (ecf4 <__ieee754_pow+0x9e4>)
    e9ca:	0020      	movs	r0, r4
    e9cc:	0029      	movs	r1, r5
    e9ce:	f002 fc2f 	bl	11230 <__aeabi_dmul>
    e9d2:	0002      	movs	r2, r0
    e9d4:	000b      	movs	r3, r1
    e9d6:	0030      	movs	r0, r6
    e9d8:	0039      	movs	r1, r7
    e9da:	f001 fce5 	bl	103a8 <__aeabi_dadd>
    e9de:	0004      	movs	r4, r0
    e9e0:	000d      	movs	r5, r1
    e9e2:	0002      	movs	r2, r0
    e9e4:	000b      	movs	r3, r1
    e9e6:	9802      	ldr	r0, [sp, #8]
    e9e8:	9903      	ldr	r1, [sp, #12]
    e9ea:	f001 fcdd 	bl	103a8 <__aeabi_dadd>
    e9ee:	9a02      	ldr	r2, [sp, #8]
    e9f0:	9b03      	ldr	r3, [sp, #12]
    e9f2:	0006      	movs	r6, r0
    e9f4:	000f      	movs	r7, r1
    e9f6:	f002 fe9b 	bl	11730 <__aeabi_dsub>
    e9fa:	0002      	movs	r2, r0
    e9fc:	000b      	movs	r3, r1
    e9fe:	0020      	movs	r0, r4
    ea00:	0029      	movs	r1, r5
    ea02:	f002 fe95 	bl	11730 <__aeabi_dsub>
    ea06:	0032      	movs	r2, r6
    ea08:	9000      	str	r0, [sp, #0]
    ea0a:	9101      	str	r1, [sp, #4]
    ea0c:	003b      	movs	r3, r7
    ea0e:	0030      	movs	r0, r6
    ea10:	0039      	movs	r1, r7
    ea12:	f002 fc0d 	bl	11230 <__aeabi_dmul>
    ea16:	0004      	movs	r4, r0
    ea18:	000d      	movs	r5, r1
    ea1a:	4ab7      	ldr	r2, [pc, #732]	; (ecf8 <__ieee754_pow+0x9e8>)
    ea1c:	4bb7      	ldr	r3, [pc, #732]	; (ecfc <__ieee754_pow+0x9ec>)
    ea1e:	f002 fc07 	bl	11230 <__aeabi_dmul>
    ea22:	4ab7      	ldr	r2, [pc, #732]	; (ed00 <__ieee754_pow+0x9f0>)
    ea24:	4bb7      	ldr	r3, [pc, #732]	; (ed04 <__ieee754_pow+0x9f4>)
    ea26:	f002 fe83 	bl	11730 <__aeabi_dsub>
    ea2a:	0022      	movs	r2, r4
    ea2c:	002b      	movs	r3, r5
    ea2e:	f002 fbff 	bl	11230 <__aeabi_dmul>
    ea32:	4ab5      	ldr	r2, [pc, #724]	; (ed08 <__ieee754_pow+0x9f8>)
    ea34:	4bb5      	ldr	r3, [pc, #724]	; (ed0c <__ieee754_pow+0x9fc>)
    ea36:	f001 fcb7 	bl	103a8 <__aeabi_dadd>
    ea3a:	0022      	movs	r2, r4
    ea3c:	002b      	movs	r3, r5
    ea3e:	f002 fbf7 	bl	11230 <__aeabi_dmul>
    ea42:	4ab3      	ldr	r2, [pc, #716]	; (ed10 <__ieee754_pow+0xa00>)
    ea44:	4bb3      	ldr	r3, [pc, #716]	; (ed14 <__ieee754_pow+0xa04>)
    ea46:	f002 fe73 	bl	11730 <__aeabi_dsub>
    ea4a:	0022      	movs	r2, r4
    ea4c:	002b      	movs	r3, r5
    ea4e:	f002 fbef 	bl	11230 <__aeabi_dmul>
    ea52:	4ab1      	ldr	r2, [pc, #708]	; (ed18 <__ieee754_pow+0xa08>)
    ea54:	4bb1      	ldr	r3, [pc, #708]	; (ed1c <__ieee754_pow+0xa0c>)
    ea56:	f001 fca7 	bl	103a8 <__aeabi_dadd>
    ea5a:	0022      	movs	r2, r4
    ea5c:	002b      	movs	r3, r5
    ea5e:	f002 fbe7 	bl	11230 <__aeabi_dmul>
    ea62:	0002      	movs	r2, r0
    ea64:	000b      	movs	r3, r1
    ea66:	0030      	movs	r0, r6
    ea68:	0039      	movs	r1, r7
    ea6a:	f002 fe61 	bl	11730 <__aeabi_dsub>
    ea6e:	0004      	movs	r4, r0
    ea70:	000d      	movs	r5, r1
    ea72:	0002      	movs	r2, r0
    ea74:	000b      	movs	r3, r1
    ea76:	0030      	movs	r0, r6
    ea78:	0039      	movs	r1, r7
    ea7a:	f002 fbd9 	bl	11230 <__aeabi_dmul>
    ea7e:	2380      	movs	r3, #128	; 0x80
    ea80:	9002      	str	r0, [sp, #8]
    ea82:	9103      	str	r1, [sp, #12]
    ea84:	2200      	movs	r2, #0
    ea86:	05db      	lsls	r3, r3, #23
    ea88:	0020      	movs	r0, r4
    ea8a:	0029      	movs	r1, r5
    ea8c:	f002 fe50 	bl	11730 <__aeabi_dsub>
    ea90:	0002      	movs	r2, r0
    ea92:	000b      	movs	r3, r1
    ea94:	9802      	ldr	r0, [sp, #8]
    ea96:	9903      	ldr	r1, [sp, #12]
    ea98:	f001 ff96 	bl	109c8 <__aeabi_ddiv>
    ea9c:	9a00      	ldr	r2, [sp, #0]
    ea9e:	9b01      	ldr	r3, [sp, #4]
    eaa0:	0004      	movs	r4, r0
    eaa2:	000d      	movs	r5, r1
    eaa4:	0030      	movs	r0, r6
    eaa6:	0039      	movs	r1, r7
    eaa8:	f002 fbc2 	bl	11230 <__aeabi_dmul>
    eaac:	9a00      	ldr	r2, [sp, #0]
    eaae:	9b01      	ldr	r3, [sp, #4]
    eab0:	f001 fc7a 	bl	103a8 <__aeabi_dadd>
    eab4:	0002      	movs	r2, r0
    eab6:	000b      	movs	r3, r1
    eab8:	0020      	movs	r0, r4
    eaba:	0029      	movs	r1, r5
    eabc:	f002 fe38 	bl	11730 <__aeabi_dsub>
    eac0:	0032      	movs	r2, r6
    eac2:	003b      	movs	r3, r7
    eac4:	f002 fe34 	bl	11730 <__aeabi_dsub>
    eac8:	0002      	movs	r2, r0
    eaca:	000b      	movs	r3, r1
    eacc:	2000      	movs	r0, #0
    eace:	4994      	ldr	r1, [pc, #592]	; (ed20 <__ieee754_pow+0xa10>)
    ead0:	f002 fe2e 	bl	11730 <__aeabi_dsub>
    ead4:	4643      	mov	r3, r8
    ead6:	185b      	adds	r3, r3, r1
    ead8:	151a      	asrs	r2, r3, #20
    eada:	2a00      	cmp	r2, #0
    eadc:	dc00      	bgt.n	eae0 <__ieee754_pow+0x7d0>
    eade:	e149      	b.n	ed74 <__ieee754_pow+0xa64>
    eae0:	0019      	movs	r1, r3
    eae2:	9a06      	ldr	r2, [sp, #24]
    eae4:	9b07      	ldr	r3, [sp, #28]
    eae6:	f002 fba3 	bl	11230 <__aeabi_dmul>
    eaea:	e459      	b.n	e3a0 <__ieee754_pow+0x90>
    eaec:	003a      	movs	r2, r7
    eaee:	0033      	movs	r3, r6
    eaf0:	0038      	movs	r0, r7
    eaf2:	0031      	movs	r1, r6
    eaf4:	f002 fb9c 	bl	11230 <__aeabi_dmul>
    eaf8:	e452      	b.n	e3a0 <__ieee754_pow+0x90>
    eafa:	4653      	mov	r3, sl
    eafc:	2b00      	cmp	r3, #0
    eafe:	db00      	blt.n	eb02 <__ieee754_pow+0x7f2>
    eb00:	e4d9      	b.n	e4b6 <__ieee754_pow+0x1a6>
    eb02:	9c00      	ldr	r4, [sp, #0]
    eb04:	9d01      	ldr	r5, [sp, #4]
    eb06:	2280      	movs	r2, #128	; 0x80
    eb08:	0612      	lsls	r2, r2, #24
    eb0a:	002b      	movs	r3, r5
    eb0c:	4694      	mov	ip, r2
    eb0e:	4463      	add	r3, ip
    eb10:	0020      	movs	r0, r4
    eb12:	0019      	movs	r1, r3
    eb14:	f7ff fc44 	bl	e3a0 <__ieee754_pow+0x90>
    eb18:	004b      	lsls	r3, r1, #1
    eb1a:	085b      	lsrs	r3, r3, #1
    eb1c:	469a      	mov	sl, r3
    eb1e:	4b81      	ldr	r3, [pc, #516]	; (ed24 <__ieee754_pow+0xa14>)
    eb20:	459a      	cmp	sl, r3
    eb22:	dc00      	bgt.n	eb26 <__ieee754_pow+0x816>
    eb24:	e0b1      	b.n	ec8a <__ieee754_pow+0x97a>
    eb26:	4b80      	ldr	r3, [pc, #512]	; (ed28 <__ieee754_pow+0xa18>)
    eb28:	445b      	add	r3, fp
    eb2a:	431a      	orrs	r2, r3
    eb2c:	d10c      	bne.n	eb48 <__ieee754_pow+0x838>
    eb2e:	0032      	movs	r2, r6
    eb30:	003b      	movs	r3, r7
    eb32:	f002 fdfd 	bl	11730 <__aeabi_dsub>
    eb36:	0002      	movs	r2, r0
    eb38:	000b      	movs	r3, r1
    eb3a:	9800      	ldr	r0, [sp, #0]
    eb3c:	9901      	ldr	r1, [sp, #4]
    eb3e:	f001 fbcd 	bl	102dc <__aeabi_dcmple>
    eb42:	2800      	cmp	r0, #0
    eb44:	d100      	bne.n	eb48 <__ieee754_pow+0x838>
    eb46:	e6ee      	b.n	e926 <__ieee754_pow+0x616>
    eb48:	9806      	ldr	r0, [sp, #24]
    eb4a:	9907      	ldr	r1, [sp, #28]
    eb4c:	4a77      	ldr	r2, [pc, #476]	; (ed2c <__ieee754_pow+0xa1c>)
    eb4e:	4b78      	ldr	r3, [pc, #480]	; (ed30 <__ieee754_pow+0xa20>)
    eb50:	f002 fb6e 	bl	11230 <__aeabi_dmul>
    eb54:	4a75      	ldr	r2, [pc, #468]	; (ed2c <__ieee754_pow+0xa1c>)
    eb56:	4b76      	ldr	r3, [pc, #472]	; (ed30 <__ieee754_pow+0xa20>)
    eb58:	f002 fb6a 	bl	11230 <__aeabi_dmul>
    eb5c:	f7ff fc20 	bl	e3a0 <__ieee754_pow+0x90>
    eb60:	2300      	movs	r3, #0
    eb62:	4c74      	ldr	r4, [pc, #464]	; (ed34 <__ieee754_pow+0xa24>)
    eb64:	9306      	str	r3, [sp, #24]
    eb66:	9407      	str	r4, [sp, #28]
    eb68:	e652      	b.n	e810 <__ieee754_pow+0x500>
    eb6a:	0002      	movs	r2, r0
    eb6c:	000b      	movs	r3, r1
    eb6e:	2000      	movs	r0, #0
    eb70:	496b      	ldr	r1, [pc, #428]	; (ed20 <__ieee754_pow+0xa10>)
    eb72:	f001 ff29 	bl	109c8 <__aeabi_ddiv>
    eb76:	f7ff fc32 	bl	e3de <__ieee754_pow+0xce>
    eb7a:	4653      	mov	r3, sl
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	db00      	blt.n	eb82 <__ieee754_pow+0x872>
    eb80:	e499      	b.n	e4b6 <__ieee754_pow+0x1a6>
    eb82:	e454      	b.n	e42e <__ieee754_pow+0x11e>
    eb84:	4b6c      	ldr	r3, [pc, #432]	; (ed38 <__ieee754_pow+0xa28>)
    eb86:	429c      	cmp	r4, r3
    eb88:	ddf7      	ble.n	eb7a <__ieee754_pow+0x86a>
    eb8a:	4b65      	ldr	r3, [pc, #404]	; (ed20 <__ieee754_pow+0xa10>)
    eb8c:	429c      	cmp	r4, r3
    eb8e:	dd00      	ble.n	eb92 <__ieee754_pow+0x882>
    eb90:	e44a      	b.n	e428 <__ieee754_pow+0x118>
    eb92:	2200      	movs	r2, #0
    eb94:	4b62      	ldr	r3, [pc, #392]	; (ed20 <__ieee754_pow+0xa10>)
    eb96:	f002 fdcb 	bl	11730 <__aeabi_dsub>
    eb9a:	22c0      	movs	r2, #192	; 0xc0
    eb9c:	4b67      	ldr	r3, [pc, #412]	; (ed3c <__ieee754_pow+0xa2c>)
    eb9e:	05d2      	lsls	r2, r2, #23
    eba0:	0004      	movs	r4, r0
    eba2:	000d      	movs	r5, r1
    eba4:	f002 fb44 	bl	11230 <__aeabi_dmul>
    eba8:	4a65      	ldr	r2, [pc, #404]	; (ed40 <__ieee754_pow+0xa30>)
    ebaa:	0006      	movs	r6, r0
    ebac:	000f      	movs	r7, r1
    ebae:	4b65      	ldr	r3, [pc, #404]	; (ed44 <__ieee754_pow+0xa34>)
    ebb0:	0020      	movs	r0, r4
    ebb2:	0029      	movs	r1, r5
    ebb4:	f002 fb3c 	bl	11230 <__aeabi_dmul>
    ebb8:	2200      	movs	r2, #0
    ebba:	9002      	str	r0, [sp, #8]
    ebbc:	9103      	str	r1, [sp, #12]
    ebbe:	4b62      	ldr	r3, [pc, #392]	; (ed48 <__ieee754_pow+0xa38>)
    ebc0:	0020      	movs	r0, r4
    ebc2:	0029      	movs	r1, r5
    ebc4:	f002 fb34 	bl	11230 <__aeabi_dmul>
    ebc8:	0002      	movs	r2, r0
    ebca:	000b      	movs	r3, r1
    ebcc:	485f      	ldr	r0, [pc, #380]	; (ed4c <__ieee754_pow+0xa3c>)
    ebce:	4960      	ldr	r1, [pc, #384]	; (ed50 <__ieee754_pow+0xa40>)
    ebd0:	f002 fdae 	bl	11730 <__aeabi_dsub>
    ebd4:	0022      	movs	r2, r4
    ebd6:	002b      	movs	r3, r5
    ebd8:	f002 fb2a 	bl	11230 <__aeabi_dmul>
    ebdc:	0002      	movs	r2, r0
    ebde:	000b      	movs	r3, r1
    ebe0:	2000      	movs	r0, #0
    ebe2:	495c      	ldr	r1, [pc, #368]	; (ed54 <__ieee754_pow+0xa44>)
    ebe4:	f002 fda4 	bl	11730 <__aeabi_dsub>
    ebe8:	0022      	movs	r2, r4
    ebea:	9004      	str	r0, [sp, #16]
    ebec:	9105      	str	r1, [sp, #20]
    ebee:	002b      	movs	r3, r5
    ebf0:	0020      	movs	r0, r4
    ebf2:	0029      	movs	r1, r5
    ebf4:	f002 fb1c 	bl	11230 <__aeabi_dmul>
    ebf8:	0002      	movs	r2, r0
    ebfa:	000b      	movs	r3, r1
    ebfc:	9804      	ldr	r0, [sp, #16]
    ebfe:	9905      	ldr	r1, [sp, #20]
    ec00:	f002 fb16 	bl	11230 <__aeabi_dmul>
    ec04:	4a54      	ldr	r2, [pc, #336]	; (ed58 <__ieee754_pow+0xa48>)
    ec06:	4b4d      	ldr	r3, [pc, #308]	; (ed3c <__ieee754_pow+0xa2c>)
    ec08:	f002 fb12 	bl	11230 <__aeabi_dmul>
    ec0c:	0002      	movs	r2, r0
    ec0e:	000b      	movs	r3, r1
    ec10:	9802      	ldr	r0, [sp, #8]
    ec12:	9903      	ldr	r1, [sp, #12]
    ec14:	f002 fd8c 	bl	11730 <__aeabi_dsub>
    ec18:	0002      	movs	r2, r0
    ec1a:	000b      	movs	r3, r1
    ec1c:	0004      	movs	r4, r0
    ec1e:	000d      	movs	r5, r1
    ec20:	0030      	movs	r0, r6
    ec22:	0039      	movs	r1, r7
    ec24:	f001 fbc0 	bl	103a8 <__aeabi_dadd>
    ec28:	2000      	movs	r0, #0
    ec2a:	0032      	movs	r2, r6
    ec2c:	003b      	movs	r3, r7
    ec2e:	9002      	str	r0, [sp, #8]
    ec30:	9103      	str	r1, [sp, #12]
    ec32:	f002 fd7d 	bl	11730 <__aeabi_dsub>
    ec36:	0002      	movs	r2, r0
    ec38:	000b      	movs	r3, r1
    ec3a:	0020      	movs	r0, r4
    ec3c:	0029      	movs	r1, r5
    ec3e:	f002 fd77 	bl	11730 <__aeabi_dsub>
    ec42:	9004      	str	r0, [sp, #16]
    ec44:	9105      	str	r1, [sp, #20]
    ec46:	e5d9      	b.n	e7fc <__ieee754_pow+0x4ec>
    ec48:	4a44      	ldr	r2, [pc, #272]	; (ed5c <__ieee754_pow+0xa4c>)
    ec4a:	4b45      	ldr	r3, [pc, #276]	; (ed60 <__ieee754_pow+0xa50>)
    ec4c:	9806      	ldr	r0, [sp, #24]
    ec4e:	9907      	ldr	r1, [sp, #28]
    ec50:	f002 faee 	bl	11230 <__aeabi_dmul>
    ec54:	4a41      	ldr	r2, [pc, #260]	; (ed5c <__ieee754_pow+0xa4c>)
    ec56:	4b42      	ldr	r3, [pc, #264]	; (ed60 <__ieee754_pow+0xa50>)
    ec58:	f002 faea 	bl	11230 <__aeabi_dmul>
    ec5c:	f7ff fba0 	bl	e3a0 <__ieee754_pow+0x90>
    ec60:	2a00      	cmp	r2, #0
    ec62:	d001      	beq.n	ec68 <__ieee754_pow+0x958>
    ec64:	f7ff fba9 	bl	e3ba <__ieee754_pow+0xaa>
    ec68:	3214      	adds	r2, #20
    ec6a:	1ad3      	subs	r3, r2, r3
    ec6c:	002a      	movs	r2, r5
    ec6e:	411a      	asrs	r2, r3
    ec70:	0011      	movs	r1, r2
    ec72:	4099      	lsls	r1, r3
    ec74:	428d      	cmp	r5, r1
    ec76:	d001      	beq.n	ec7c <__ieee754_pow+0x96c>
    ec78:	f7ff fb76 	bl	e368 <__ieee754_pow+0x58>
    ec7c:	2301      	movs	r3, #1
    ec7e:	401a      	ands	r2, r3
    ec80:	18db      	adds	r3, r3, r3
    ec82:	1a9b      	subs	r3, r3, r2
    ec84:	469b      	mov	fp, r3
    ec86:	f7ff fb6f 	bl	e368 <__ieee754_pow+0x58>
    ec8a:	2200      	movs	r2, #0
    ec8c:	4b31      	ldr	r3, [pc, #196]	; (ed54 <__ieee754_pow+0xa44>)
    ec8e:	4690      	mov	r8, r2
    ec90:	4691      	mov	r9, r2
    ec92:	459a      	cmp	sl, r3
    ec94:	dc00      	bgt.n	ec98 <__ieee754_pow+0x988>
    ec96:	e67b      	b.n	e990 <__ieee754_pow+0x680>
    ec98:	e645      	b.n	e926 <__ieee754_pow+0x616>
    ec9a:	0002      	movs	r2, r0
    ec9c:	000b      	movs	r3, r1
    ec9e:	f002 fd47 	bl	11730 <__aeabi_dsub>
    eca2:	0002      	movs	r2, r0
    eca4:	000b      	movs	r3, r1
    eca6:	f001 fe8f 	bl	109c8 <__aeabi_ddiv>
    ecaa:	f7ff fb79 	bl	e3a0 <__ieee754_pow+0x90>
    ecae:	2380      	movs	r3, #128	; 0x80
    ecb0:	4c2c      	ldr	r4, [pc, #176]	; (ed64 <__ieee754_pow+0xa54>)
    ecb2:	05db      	lsls	r3, r3, #23
    ecb4:	9308      	str	r3, [sp, #32]
    ecb6:	9409      	str	r4, [sp, #36]	; 0x24
    ecb8:	4b2b      	ldr	r3, [pc, #172]	; (ed68 <__ieee754_pow+0xa58>)
    ecba:	4c2c      	ldr	r4, [pc, #176]	; (ed6c <__ieee754_pow+0xa5c>)
    ecbc:	2200      	movs	r2, #0
    ecbe:	930c      	str	r3, [sp, #48]	; 0x30
    ecc0:	940d      	str	r4, [sp, #52]	; 0x34
    ecc2:	2480      	movs	r4, #128	; 0x80
    ecc4:	4b2a      	ldr	r3, [pc, #168]	; (ed70 <__ieee754_pow+0xa60>)
    ecc6:	02e4      	lsls	r4, r4, #11
    ecc8:	9206      	str	r2, [sp, #24]
    ecca:	9307      	str	r3, [sp, #28]
    eccc:	e449      	b.n	e562 <__ieee754_pow+0x252>
    ecce:	464b      	mov	r3, r9
    ecd0:	425b      	negs	r3, r3
    ecd2:	4699      	mov	r9, r3
    ecd4:	e64a      	b.n	e96c <__ieee754_pow+0x65c>
    ecd6:	46c0      	nop			; (mov r8, r8)
    ecd8:	fffffc02 	.word	0xfffffc02
    ecdc:	fffffc01 	.word	0xfffffc01
    ece0:	000fffff 	.word	0x000fffff
    ece4:	3fe62e43 	.word	0x3fe62e43
    ece8:	fefa39ef 	.word	0xfefa39ef
    ecec:	3fe62e42 	.word	0x3fe62e42
    ecf0:	0ca86c39 	.word	0x0ca86c39
    ecf4:	be205c61 	.word	0xbe205c61
    ecf8:	72bea4d0 	.word	0x72bea4d0
    ecfc:	3e663769 	.word	0x3e663769
    ed00:	c5d26bf1 	.word	0xc5d26bf1
    ed04:	3ebbbd41 	.word	0x3ebbbd41
    ed08:	af25de2c 	.word	0xaf25de2c
    ed0c:	3f11566a 	.word	0x3f11566a
    ed10:	16bebd93 	.word	0x16bebd93
    ed14:	3f66c16c 	.word	0x3f66c16c
    ed18:	5555553e 	.word	0x5555553e
    ed1c:	3fc55555 	.word	0x3fc55555
    ed20:	3ff00000 	.word	0x3ff00000
    ed24:	4090cbff 	.word	0x4090cbff
    ed28:	3f6f3400 	.word	0x3f6f3400
    ed2c:	c2f8f359 	.word	0xc2f8f359
    ed30:	01a56e1f 	.word	0x01a56e1f
    ed34:	bff00000 	.word	0xbff00000
    ed38:	3feffffe 	.word	0x3feffffe
    ed3c:	3ff71547 	.word	0x3ff71547
    ed40:	f85ddf44 	.word	0xf85ddf44
    ed44:	3e54ae0b 	.word	0x3e54ae0b
    ed48:	3fd00000 	.word	0x3fd00000
    ed4c:	55555555 	.word	0x55555555
    ed50:	3fd55555 	.word	0x3fd55555
    ed54:	3fe00000 	.word	0x3fe00000
    ed58:	652b82fe 	.word	0x652b82fe
    ed5c:	8800759c 	.word	0x8800759c
    ed60:	7e37e43c 	.word	0x7e37e43c
    ed64:	3fe2b803 	.word	0x3fe2b803
    ed68:	43cfd006 	.word	0x43cfd006
    ed6c:	3e4cfdeb 	.word	0x3e4cfdeb
    ed70:	3ff80000 	.word	0x3ff80000
    ed74:	464a      	mov	r2, r9
    ed76:	f000 f999 	bl	f0ac <scalbn>
    ed7a:	e6b2      	b.n	eae2 <__ieee754_pow+0x7d2>

0000ed7c <__ieee754_sqrt>:
    ed7c:	4b6c      	ldr	r3, [pc, #432]	; (ef30 <__ieee754_sqrt+0x1b4>)
    ed7e:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed80:	000a      	movs	r2, r1
    ed82:	4646      	mov	r6, r8
    ed84:	000d      	movs	r5, r1
    ed86:	46d6      	mov	lr, sl
    ed88:	464f      	mov	r7, r9
    ed8a:	0019      	movs	r1, r3
    ed8c:	b5c0      	push	{r6, r7, lr}
    ed8e:	0004      	movs	r4, r0
    ed90:	0006      	movs	r6, r0
    ed92:	4029      	ands	r1, r5
    ed94:	4299      	cmp	r1, r3
    ed96:	d100      	bne.n	ed9a <__ieee754_sqrt+0x1e>
    ed98:	e0a7      	b.n	eeea <__ieee754_sqrt+0x16e>
    ed9a:	2d00      	cmp	r5, #0
    ed9c:	dc00      	bgt.n	eda0 <__ieee754_sqrt+0x24>
    ed9e:	e081      	b.n	eea4 <__ieee754_sqrt+0x128>
    eda0:	152f      	asrs	r7, r5, #20
    eda2:	d100      	bne.n	eda6 <__ieee754_sqrt+0x2a>
    eda4:	e08e      	b.n	eec4 <__ieee754_sqrt+0x148>
    eda6:	4b63      	ldr	r3, [pc, #396]	; (ef34 <__ieee754_sqrt+0x1b8>)
    eda8:	0312      	lsls	r2, r2, #12
    edaa:	469c      	mov	ip, r3
    edac:	2380      	movs	r3, #128	; 0x80
    edae:	0b12      	lsrs	r2, r2, #12
    edb0:	035b      	lsls	r3, r3, #13
    edb2:	4467      	add	r7, ip
    edb4:	431a      	orrs	r2, r3
    edb6:	07fb      	lsls	r3, r7, #31
    edb8:	d468      	bmi.n	ee8c <__ieee754_sqrt+0x110>
    edba:	107b      	asrs	r3, r7, #1
    edbc:	469c      	mov	ip, r3
    edbe:	0fe3      	lsrs	r3, r4, #31
    edc0:	189b      	adds	r3, r3, r2
    edc2:	189b      	adds	r3, r3, r2
    edc4:	2280      	movs	r2, #128	; 0x80
    edc6:	2116      	movs	r1, #22
    edc8:	2600      	movs	r6, #0
    edca:	2500      	movs	r5, #0
    edcc:	0064      	lsls	r4, r4, #1
    edce:	0392      	lsls	r2, r2, #14
    edd0:	18a8      	adds	r0, r5, r2
    edd2:	4298      	cmp	r0, r3
    edd4:	dc02      	bgt.n	eddc <__ieee754_sqrt+0x60>
    edd6:	1885      	adds	r5, r0, r2
    edd8:	1a1b      	subs	r3, r3, r0
    edda:	18b6      	adds	r6, r6, r2
    eddc:	0fe0      	lsrs	r0, r4, #31
    edde:	005b      	lsls	r3, r3, #1
    ede0:	3901      	subs	r1, #1
    ede2:	181b      	adds	r3, r3, r0
    ede4:	0064      	lsls	r4, r4, #1
    ede6:	0852      	lsrs	r2, r2, #1
    ede8:	2900      	cmp	r1, #0
    edea:	d1f1      	bne.n	edd0 <__ieee754_sqrt+0x54>
    edec:	2200      	movs	r2, #0
    edee:	4692      	mov	sl, r2
    edf0:	4690      	mov	r8, r2
    edf2:	2280      	movs	r2, #128	; 0x80
    edf4:	2020      	movs	r0, #32
    edf6:	0612      	lsls	r2, r2, #24
    edf8:	e009      	b.n	ee0e <__ieee754_sqrt+0x92>
    edfa:	42ab      	cmp	r3, r5
    edfc:	d038      	beq.n	ee70 <__ieee754_sqrt+0xf4>
    edfe:	0fe1      	lsrs	r1, r4, #31
    ee00:	18c9      	adds	r1, r1, r3
    ee02:	3801      	subs	r0, #1
    ee04:	18cb      	adds	r3, r1, r3
    ee06:	0064      	lsls	r4, r4, #1
    ee08:	0852      	lsrs	r2, r2, #1
    ee0a:	2800      	cmp	r0, #0
    ee0c:	d018      	beq.n	ee40 <__ieee754_sqrt+0xc4>
    ee0e:	4641      	mov	r1, r8
    ee10:	1851      	adds	r1, r2, r1
    ee12:	42ab      	cmp	r3, r5
    ee14:	ddf1      	ble.n	edfa <__ieee754_sqrt+0x7e>
    ee16:	188f      	adds	r7, r1, r2
    ee18:	46b8      	mov	r8, r7
    ee1a:	46a9      	mov	r9, r5
    ee1c:	2900      	cmp	r1, #0
    ee1e:	db30      	blt.n	ee82 <__ieee754_sqrt+0x106>
    ee20:	1b5b      	subs	r3, r3, r5
    ee22:	428c      	cmp	r4, r1
    ee24:	41ad      	sbcs	r5, r5
    ee26:	426d      	negs	r5, r5
    ee28:	1b5b      	subs	r3, r3, r5
    ee2a:	1a64      	subs	r4, r4, r1
    ee2c:	0fe1      	lsrs	r1, r4, #31
    ee2e:	18c9      	adds	r1, r1, r3
    ee30:	3801      	subs	r0, #1
    ee32:	4492      	add	sl, r2
    ee34:	464d      	mov	r5, r9
    ee36:	18cb      	adds	r3, r1, r3
    ee38:	0064      	lsls	r4, r4, #1
    ee3a:	0852      	lsrs	r2, r2, #1
    ee3c:	2800      	cmp	r0, #0
    ee3e:	d1e6      	bne.n	ee0e <__ieee754_sqrt+0x92>
    ee40:	4323      	orrs	r3, r4
    ee42:	d128      	bne.n	ee96 <__ieee754_sqrt+0x11a>
    ee44:	4653      	mov	r3, sl
    ee46:	085b      	lsrs	r3, r3, #1
    ee48:	493b      	ldr	r1, [pc, #236]	; (ef38 <__ieee754_sqrt+0x1bc>)
    ee4a:	1072      	asrs	r2, r6, #1
    ee4c:	4688      	mov	r8, r1
    ee4e:	4442      	add	r2, r8
    ee50:	07f1      	lsls	r1, r6, #31
    ee52:	d502      	bpl.n	ee5a <__ieee754_sqrt+0xde>
    ee54:	2180      	movs	r1, #128	; 0x80
    ee56:	0609      	lsls	r1, r1, #24
    ee58:	430b      	orrs	r3, r1
    ee5a:	4661      	mov	r1, ip
    ee5c:	001e      	movs	r6, r3
    ee5e:	050f      	lsls	r7, r1, #20
    ee60:	18bd      	adds	r5, r7, r2
    ee62:	0030      	movs	r0, r6
    ee64:	0029      	movs	r1, r5
    ee66:	bc1c      	pop	{r2, r3, r4}
    ee68:	4690      	mov	r8, r2
    ee6a:	4699      	mov	r9, r3
    ee6c:	46a2      	mov	sl, r4
    ee6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee70:	42a1      	cmp	r1, r4
    ee72:	d8c4      	bhi.n	edfe <__ieee754_sqrt+0x82>
    ee74:	188f      	adds	r7, r1, r2
    ee76:	46b8      	mov	r8, r7
    ee78:	2900      	cmp	r1, #0
    ee7a:	db42      	blt.n	ef02 <__ieee754_sqrt+0x186>
    ee7c:	4699      	mov	r9, r3
    ee7e:	2300      	movs	r3, #0
    ee80:	e7d3      	b.n	ee2a <__ieee754_sqrt+0xae>
    ee82:	2f00      	cmp	r7, #0
    ee84:	db2f      	blt.n	eee6 <__ieee754_sqrt+0x16a>
    ee86:	1c6f      	adds	r7, r5, #1
    ee88:	46b9      	mov	r9, r7
    ee8a:	e7c9      	b.n	ee20 <__ieee754_sqrt+0xa4>
    ee8c:	0fe1      	lsrs	r1, r4, #31
    ee8e:	0052      	lsls	r2, r2, #1
    ee90:	188a      	adds	r2, r1, r2
    ee92:	0064      	lsls	r4, r4, #1
    ee94:	e791      	b.n	edba <__ieee754_sqrt+0x3e>
    ee96:	4653      	mov	r3, sl
    ee98:	3301      	adds	r3, #1
    ee9a:	d035      	beq.n	ef08 <__ieee754_sqrt+0x18c>
    ee9c:	4653      	mov	r3, sl
    ee9e:	3301      	adds	r3, #1
    eea0:	085b      	lsrs	r3, r3, #1
    eea2:	e7d1      	b.n	ee48 <__ieee754_sqrt+0xcc>
    eea4:	006b      	lsls	r3, r5, #1
    eea6:	085b      	lsrs	r3, r3, #1
    eea8:	4303      	orrs	r3, r0
    eeaa:	d0da      	beq.n	ee62 <__ieee754_sqrt+0xe6>
    eeac:	2700      	movs	r7, #0
    eeae:	2d00      	cmp	r5, #0
    eeb0:	d132      	bne.n	ef18 <__ieee754_sqrt+0x19c>
    eeb2:	0ae2      	lsrs	r2, r4, #11
    eeb4:	3f15      	subs	r7, #21
    eeb6:	0564      	lsls	r4, r4, #21
    eeb8:	2a00      	cmp	r2, #0
    eeba:	d0fa      	beq.n	eeb2 <__ieee754_sqrt+0x136>
    eebc:	2380      	movs	r3, #128	; 0x80
    eebe:	035b      	lsls	r3, r3, #13
    eec0:	421a      	tst	r2, r3
    eec2:	d124      	bne.n	ef0e <__ieee754_sqrt+0x192>
    eec4:	2080      	movs	r0, #128	; 0x80
    eec6:	2300      	movs	r3, #0
    eec8:	0340      	lsls	r0, r0, #13
    eeca:	e000      	b.n	eece <__ieee754_sqrt+0x152>
    eecc:	000b      	movs	r3, r1
    eece:	0052      	lsls	r2, r2, #1
    eed0:	1c59      	adds	r1, r3, #1
    eed2:	4202      	tst	r2, r0
    eed4:	d0fa      	beq.n	eecc <__ieee754_sqrt+0x150>
    eed6:	2020      	movs	r0, #32
    eed8:	1a40      	subs	r0, r0, r1
    eeda:	1aff      	subs	r7, r7, r3
    eedc:	0023      	movs	r3, r4
    eede:	40c3      	lsrs	r3, r0
    eee0:	408c      	lsls	r4, r1
    eee2:	431a      	orrs	r2, r3
    eee4:	e75f      	b.n	eda6 <__ieee754_sqrt+0x2a>
    eee6:	46a9      	mov	r9, r5
    eee8:	e79a      	b.n	ee20 <__ieee754_sqrt+0xa4>
    eeea:	002b      	movs	r3, r5
    eeec:	0002      	movs	r2, r0
    eeee:	0029      	movs	r1, r5
    eef0:	f002 f99e 	bl	11230 <__aeabi_dmul>
    eef4:	0032      	movs	r2, r6
    eef6:	002b      	movs	r3, r5
    eef8:	f001 fa56 	bl	103a8 <__aeabi_dadd>
    eefc:	0006      	movs	r6, r0
    eefe:	000d      	movs	r5, r1
    ef00:	e7af      	b.n	ee62 <__ieee754_sqrt+0xe6>
    ef02:	2f00      	cmp	r7, #0
    ef04:	dabf      	bge.n	ee86 <__ieee754_sqrt+0x10a>
    ef06:	e7b9      	b.n	ee7c <__ieee754_sqrt+0x100>
    ef08:	3601      	adds	r6, #1
    ef0a:	2300      	movs	r3, #0
    ef0c:	e79c      	b.n	ee48 <__ieee754_sqrt+0xcc>
    ef0e:	2301      	movs	r3, #1
    ef10:	2100      	movs	r1, #0
    ef12:	2020      	movs	r0, #32
    ef14:	425b      	negs	r3, r3
    ef16:	e7e0      	b.n	eeda <__ieee754_sqrt+0x15e>
    ef18:	002b      	movs	r3, r5
    ef1a:	0002      	movs	r2, r0
    ef1c:	0029      	movs	r1, r5
    ef1e:	f002 fc07 	bl	11730 <__aeabi_dsub>
    ef22:	0002      	movs	r2, r0
    ef24:	000b      	movs	r3, r1
    ef26:	f001 fd4f 	bl	109c8 <__aeabi_ddiv>
    ef2a:	0006      	movs	r6, r0
    ef2c:	000d      	movs	r5, r1
    ef2e:	e798      	b.n	ee62 <__ieee754_sqrt+0xe6>
    ef30:	7ff00000 	.word	0x7ff00000
    ef34:	fffffc01 	.word	0xfffffc01
    ef38:	3fe00000 	.word	0x3fe00000

0000ef3c <fabs>:
    ef3c:	0049      	lsls	r1, r1, #1
    ef3e:	084b      	lsrs	r3, r1, #1
    ef40:	0019      	movs	r1, r3
    ef42:	4770      	bx	lr

0000ef44 <finite>:
    ef44:	4b03      	ldr	r3, [pc, #12]	; (ef54 <finite+0x10>)
    ef46:	0048      	lsls	r0, r1, #1
    ef48:	469c      	mov	ip, r3
    ef4a:	0840      	lsrs	r0, r0, #1
    ef4c:	4460      	add	r0, ip
    ef4e:	0fc0      	lsrs	r0, r0, #31
    ef50:	4770      	bx	lr
    ef52:	46c0      	nop			; (mov r8, r8)
    ef54:	80100000 	.word	0x80100000

0000ef58 <matherr>:
    ef58:	2000      	movs	r0, #0
    ef5a:	4770      	bx	lr

0000ef5c <nan>:
    ef5c:	2000      	movs	r0, #0
    ef5e:	4901      	ldr	r1, [pc, #4]	; (ef64 <nan+0x8>)
    ef60:	4770      	bx	lr
    ef62:	46c0      	nop			; (mov r8, r8)
    ef64:	7ff80000 	.word	0x7ff80000

0000ef68 <rint>:
    ef68:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef6a:	46c6      	mov	lr, r8
    ef6c:	b500      	push	{lr}
    ef6e:	0fcb      	lsrs	r3, r1, #31
    ef70:	4698      	mov	r8, r3
    ef72:	4c4a      	ldr	r4, [pc, #296]	; (f09c <rint+0x134>)
    ef74:	004b      	lsls	r3, r1, #1
    ef76:	0d5b      	lsrs	r3, r3, #21
    ef78:	191e      	adds	r6, r3, r4
    ef7a:	b082      	sub	sp, #8
    ef7c:	0007      	movs	r7, r0
    ef7e:	000a      	movs	r2, r1
    ef80:	2e13      	cmp	r6, #19
    ef82:	dc35      	bgt.n	eff0 <rint+0x88>
    ef84:	2e00      	cmp	r6, #0
    ef86:	db57      	blt.n	f038 <rint+0xd0>
    ef88:	4b45      	ldr	r3, [pc, #276]	; (f0a0 <rint+0x138>)
    ef8a:	0004      	movs	r4, r0
    ef8c:	4133      	asrs	r3, r6
    ef8e:	001f      	movs	r7, r3
    ef90:	400f      	ands	r7, r1
    ef92:	4307      	orrs	r7, r0
    ef94:	000d      	movs	r5, r1
    ef96:	2f00      	cmp	r7, #0
    ef98:	d024      	beq.n	efe4 <rint+0x7c>
    ef9a:	085b      	lsrs	r3, r3, #1
    ef9c:	001c      	movs	r4, r3
    ef9e:	400c      	ands	r4, r1
    efa0:	4320      	orrs	r0, r4
    efa2:	2700      	movs	r7, #0
    efa4:	2800      	cmp	r0, #0
    efa6:	d007      	beq.n	efb8 <rint+0x50>
    efa8:	2e13      	cmp	r6, #19
    efaa:	d100      	bne.n	efae <rint+0x46>
    efac:	e073      	b.n	f096 <rint+0x12e>
    efae:	2280      	movs	r2, #128	; 0x80
    efb0:	02d2      	lsls	r2, r2, #11
    efb2:	4132      	asrs	r2, r6
    efb4:	4399      	bics	r1, r3
    efb6:	430a      	orrs	r2, r1
    efb8:	4643      	mov	r3, r8
    efba:	00de      	lsls	r6, r3, #3
    efbc:	4b39      	ldr	r3, [pc, #228]	; (f0a4 <rint+0x13c>)
    efbe:	0011      	movs	r1, r2
    efc0:	199e      	adds	r6, r3, r6
    efc2:	6834      	ldr	r4, [r6, #0]
    efc4:	6875      	ldr	r5, [r6, #4]
    efc6:	0038      	movs	r0, r7
    efc8:	0022      	movs	r2, r4
    efca:	002b      	movs	r3, r5
    efcc:	f001 f9ec 	bl	103a8 <__aeabi_dadd>
    efd0:	9000      	str	r0, [sp, #0]
    efd2:	9101      	str	r1, [sp, #4]
    efd4:	9800      	ldr	r0, [sp, #0]
    efd6:	9901      	ldr	r1, [sp, #4]
    efd8:	0022      	movs	r2, r4
    efda:	002b      	movs	r3, r5
    efdc:	f002 fba8 	bl	11730 <__aeabi_dsub>
    efe0:	0004      	movs	r4, r0
    efe2:	000d      	movs	r5, r1
    efe4:	0020      	movs	r0, r4
    efe6:	0029      	movs	r1, r5
    efe8:	b002      	add	sp, #8
    efea:	bc04      	pop	{r2}
    efec:	4690      	mov	r8, r2
    efee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eff0:	2e33      	cmp	r6, #51	; 0x33
    eff2:	dd0c      	ble.n	f00e <rint+0xa6>
    eff4:	2380      	movs	r3, #128	; 0x80
    eff6:	0004      	movs	r4, r0
    eff8:	00db      	lsls	r3, r3, #3
    effa:	000d      	movs	r5, r1
    effc:	429e      	cmp	r6, r3
    effe:	d1f1      	bne.n	efe4 <rint+0x7c>
    f000:	0002      	movs	r2, r0
    f002:	000b      	movs	r3, r1
    f004:	f001 f9d0 	bl	103a8 <__aeabi_dadd>
    f008:	0004      	movs	r4, r0
    f00a:	000d      	movs	r5, r1
    f00c:	e7ea      	b.n	efe4 <rint+0x7c>
    f00e:	4c26      	ldr	r4, [pc, #152]	; (f0a8 <rint+0x140>)
    f010:	000d      	movs	r5, r1
    f012:	46a4      	mov	ip, r4
    f014:	2401      	movs	r4, #1
    f016:	4463      	add	r3, ip
    f018:	4264      	negs	r4, r4
    f01a:	40dc      	lsrs	r4, r3
    f01c:	46a4      	mov	ip, r4
    f01e:	4661      	mov	r1, ip
    f020:	0004      	movs	r4, r0
    f022:	4201      	tst	r1, r0
    f024:	d0de      	beq.n	efe4 <rint+0x7c>
    f026:	0849      	lsrs	r1, r1, #1
    f028:	4201      	tst	r1, r0
    f02a:	d0c5      	beq.n	efb8 <rint+0x50>
    f02c:	2780      	movs	r7, #128	; 0x80
    f02e:	05ff      	lsls	r7, r7, #23
    f030:	411f      	asrs	r7, r3
    f032:	4388      	bics	r0, r1
    f034:	4307      	orrs	r7, r0
    f036:	e7bf      	b.n	efb8 <rint+0x50>
    f038:	004b      	lsls	r3, r1, #1
    f03a:	085b      	lsrs	r3, r3, #1
    f03c:	4303      	orrs	r3, r0
    f03e:	0004      	movs	r4, r0
    f040:	000d      	movs	r5, r1
    f042:	2b00      	cmp	r3, #0
    f044:	d0ce      	beq.n	efe4 <rint+0x7c>
    f046:	030b      	lsls	r3, r1, #12
    f048:	0b1b      	lsrs	r3, r3, #12
    f04a:	4303      	orrs	r3, r0
    f04c:	001a      	movs	r2, r3
    f04e:	425b      	negs	r3, r3
    f050:	4313      	orrs	r3, r2
    f052:	2280      	movs	r2, #128	; 0x80
    f054:	0b1b      	lsrs	r3, r3, #12
    f056:	0312      	lsls	r2, r2, #12
    f058:	4013      	ands	r3, r2
    f05a:	0c4a      	lsrs	r2, r1, #17
    f05c:	0452      	lsls	r2, r2, #17
    f05e:	4313      	orrs	r3, r2
    f060:	0019      	movs	r1, r3
    f062:	4643      	mov	r3, r8
    f064:	00da      	lsls	r2, r3, #3
    f066:	4b0f      	ldr	r3, [pc, #60]	; (f0a4 <rint+0x13c>)
    f068:	189b      	adds	r3, r3, r2
    f06a:	681c      	ldr	r4, [r3, #0]
    f06c:	685d      	ldr	r5, [r3, #4]
    f06e:	0022      	movs	r2, r4
    f070:	002b      	movs	r3, r5
    f072:	f001 f999 	bl	103a8 <__aeabi_dadd>
    f076:	9000      	str	r0, [sp, #0]
    f078:	9101      	str	r1, [sp, #4]
    f07a:	9800      	ldr	r0, [sp, #0]
    f07c:	9901      	ldr	r1, [sp, #4]
    f07e:	0022      	movs	r2, r4
    f080:	002b      	movs	r3, r5
    f082:	f002 fb55 	bl	11730 <__aeabi_dsub>
    f086:	4642      	mov	r2, r8
    f088:	004b      	lsls	r3, r1, #1
    f08a:	085b      	lsrs	r3, r3, #1
    f08c:	07d6      	lsls	r6, r2, #31
    f08e:	4333      	orrs	r3, r6
    f090:	0004      	movs	r4, r0
    f092:	001d      	movs	r5, r3
    f094:	e7a6      	b.n	efe4 <rint+0x7c>
    f096:	2780      	movs	r7, #128	; 0x80
    f098:	063f      	lsls	r7, r7, #24
    f09a:	e788      	b.n	efae <rint+0x46>
    f09c:	fffffc01 	.word	0xfffffc01
    f0a0:	000fffff 	.word	0x000fffff
    f0a4:	00015260 	.word	0x00015260
    f0a8:	fffffbed 	.word	0xfffffbed

0000f0ac <scalbn>:
    f0ac:	004b      	lsls	r3, r1, #1
    f0ae:	b570      	push	{r4, r5, r6, lr}
    f0b0:	0d5b      	lsrs	r3, r3, #21
    f0b2:	0014      	movs	r4, r2
    f0b4:	000a      	movs	r2, r1
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	d11a      	bne.n	f0f0 <scalbn+0x44>
    f0ba:	004b      	lsls	r3, r1, #1
    f0bc:	085b      	lsrs	r3, r3, #1
    f0be:	4303      	orrs	r3, r0
    f0c0:	d015      	beq.n	f0ee <scalbn+0x42>
    f0c2:	2200      	movs	r2, #0
    f0c4:	4b22      	ldr	r3, [pc, #136]	; (f150 <scalbn+0xa4>)
    f0c6:	f002 f8b3 	bl	11230 <__aeabi_dmul>
    f0ca:	4b22      	ldr	r3, [pc, #136]	; (f154 <scalbn+0xa8>)
    f0cc:	000a      	movs	r2, r1
    f0ce:	429c      	cmp	r4, r3
    f0d0:	db22      	blt.n	f118 <scalbn+0x6c>
    f0d2:	004b      	lsls	r3, r1, #1
    f0d4:	0d5b      	lsrs	r3, r3, #21
    f0d6:	3b36      	subs	r3, #54	; 0x36
    f0d8:	4d1f      	ldr	r5, [pc, #124]	; (f158 <scalbn+0xac>)
    f0da:	18e3      	adds	r3, r4, r3
    f0dc:	42ab      	cmp	r3, r5
    f0de:	dc20      	bgt.n	f122 <scalbn+0x76>
    f0e0:	2b00      	cmp	r3, #0
    f0e2:	dd0d      	ble.n	f100 <scalbn+0x54>
    f0e4:	4c1d      	ldr	r4, [pc, #116]	; (f15c <scalbn+0xb0>)
    f0e6:	051b      	lsls	r3, r3, #20
    f0e8:	4022      	ands	r2, r4
    f0ea:	431a      	orrs	r2, r3
    f0ec:	0011      	movs	r1, r2
    f0ee:	bd70      	pop	{r4, r5, r6, pc}
    f0f0:	4d1b      	ldr	r5, [pc, #108]	; (f160 <scalbn+0xb4>)
    f0f2:	42ab      	cmp	r3, r5
    f0f4:	d1f0      	bne.n	f0d8 <scalbn+0x2c>
    f0f6:	0002      	movs	r2, r0
    f0f8:	000b      	movs	r3, r1
    f0fa:	f001 f955 	bl	103a8 <__aeabi_dadd>
    f0fe:	e7f6      	b.n	f0ee <scalbn+0x42>
    f100:	001d      	movs	r5, r3
    f102:	3535      	adds	r5, #53	; 0x35
    f104:	da18      	bge.n	f138 <scalbn+0x8c>
    f106:	4b17      	ldr	r3, [pc, #92]	; (f164 <scalbn+0xb8>)
    f108:	0002      	movs	r2, r0
    f10a:	429c      	cmp	r4, r3
    f10c:	dc0a      	bgt.n	f124 <scalbn+0x78>
    f10e:	000b      	movs	r3, r1
    f110:	4815      	ldr	r0, [pc, #84]	; (f168 <scalbn+0xbc>)
    f112:	4916      	ldr	r1, [pc, #88]	; (f16c <scalbn+0xc0>)
    f114:	f000 f832 	bl	f17c <copysign>
    f118:	4a13      	ldr	r2, [pc, #76]	; (f168 <scalbn+0xbc>)
    f11a:	4b14      	ldr	r3, [pc, #80]	; (f16c <scalbn+0xc0>)
    f11c:	f002 f888 	bl	11230 <__aeabi_dmul>
    f120:	e7e5      	b.n	f0ee <scalbn+0x42>
    f122:	0002      	movs	r2, r0
    f124:	000b      	movs	r3, r1
    f126:	4812      	ldr	r0, [pc, #72]	; (f170 <scalbn+0xc4>)
    f128:	4912      	ldr	r1, [pc, #72]	; (f174 <scalbn+0xc8>)
    f12a:	f000 f827 	bl	f17c <copysign>
    f12e:	4a10      	ldr	r2, [pc, #64]	; (f170 <scalbn+0xc4>)
    f130:	4b10      	ldr	r3, [pc, #64]	; (f174 <scalbn+0xc8>)
    f132:	f002 f87d 	bl	11230 <__aeabi_dmul>
    f136:	e7da      	b.n	f0ee <scalbn+0x42>
    f138:	4c08      	ldr	r4, [pc, #32]	; (f15c <scalbn+0xb0>)
    f13a:	3336      	adds	r3, #54	; 0x36
    f13c:	4022      	ands	r2, r4
    f13e:	051b      	lsls	r3, r3, #20
    f140:	4313      	orrs	r3, r2
    f142:	0019      	movs	r1, r3
    f144:	2200      	movs	r2, #0
    f146:	4b0c      	ldr	r3, [pc, #48]	; (f178 <scalbn+0xcc>)
    f148:	f002 f872 	bl	11230 <__aeabi_dmul>
    f14c:	e7cf      	b.n	f0ee <scalbn+0x42>
    f14e:	46c0      	nop			; (mov r8, r8)
    f150:	43500000 	.word	0x43500000
    f154:	ffff3cb0 	.word	0xffff3cb0
    f158:	000007fe 	.word	0x000007fe
    f15c:	800fffff 	.word	0x800fffff
    f160:	000007ff 	.word	0x000007ff
    f164:	0000c350 	.word	0x0000c350
    f168:	c2f8f359 	.word	0xc2f8f359
    f16c:	01a56e1f 	.word	0x01a56e1f
    f170:	8800759c 	.word	0x8800759c
    f174:	7e37e43c 	.word	0x7e37e43c
    f178:	3c900000 	.word	0x3c900000

0000f17c <copysign>:
    f17c:	b530      	push	{r4, r5, lr}
    f17e:	004a      	lsls	r2, r1, #1
    f180:	0fdb      	lsrs	r3, r3, #31
    f182:	07db      	lsls	r3, r3, #31
    f184:	0852      	lsrs	r2, r2, #1
    f186:	431a      	orrs	r2, r3
    f188:	0011      	movs	r1, r2
    f18a:	bd30      	pop	{r4, r5, pc}

0000f18c <_hwerr_to_stderr>:
    f18c:	1c03      	adds	r3, r0, #0
    f18e:	300e      	adds	r0, #14
    f190:	b500      	push	{lr}
    f192:	280e      	cmp	r0, #14
    f194:	d819      	bhi.n	f1ca <_hwerr_to_stderr+0x3e>
    f196:	f000 ff01 	bl	ff9c <__gnu_thumb1_case_uqi>
    f19a:	1416      	.short	0x1416
    f19c:	1b181012 	.word	0x1b181012
    f1a0:	180c0e18 	.word	0x180c0e18
    f1a4:	1d0a0e0e 	.word	0x1d0a0e0e
    f1a8:	08          	.byte	0x08
    f1a9:	00          	.byte	0x00
    f1aa:	2000      	movs	r0, #0
    f1ac:	e014      	b.n	f1d8 <_hwerr_to_stderr+0x4c>
    f1ae:	2070      	movs	r0, #112	; 0x70
    f1b0:	e011      	b.n	f1d6 <_hwerr_to_stderr+0x4a>
    f1b2:	2016      	movs	r0, #22
    f1b4:	e00f      	b.n	f1d6 <_hwerr_to_stderr+0x4a>
    f1b6:	200c      	movs	r0, #12
    f1b8:	e00d      	b.n	f1d6 <_hwerr_to_stderr+0x4a>
    f1ba:	2079      	movs	r0, #121	; 0x79
    f1bc:	e00b      	b.n	f1d6 <_hwerr_to_stderr+0x4a>
    f1be:	2068      	movs	r0, #104	; 0x68
    f1c0:	e009      	b.n	f1d6 <_hwerr_to_stderr+0x4a>
    f1c2:	200b      	movs	r0, #11
    f1c4:	e007      	b.n	f1d6 <_hwerr_to_stderr+0x4a>
    f1c6:	2010      	movs	r0, #16
    f1c8:	e005      	b.n	f1d6 <_hwerr_to_stderr+0x4a>
    f1ca:	2000      	movs	r0, #0
    f1cc:	4283      	cmp	r3, r0
    f1ce:	da03      	bge.n	f1d8 <_hwerr_to_stderr+0x4c>
    f1d0:	2005      	movs	r0, #5
    f1d2:	e000      	b.n	f1d6 <_hwerr_to_stderr+0x4a>
    f1d4:	2002      	movs	r0, #2
    f1d6:	4240      	negs	r0, r0
    f1d8:	bd00      	pop	{pc}
	...

0000f1dc <_mqtt_send_wait>:
    f1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1de:	1c04      	adds	r4, r0, #0
    f1e0:	3443      	adds	r4, #67	; 0x43
    f1e2:	7823      	ldrb	r3, [r4, #0]
    f1e4:	1c05      	adds	r5, r0, #0
    f1e6:	07d8      	lsls	r0, r3, #31
    f1e8:	d51c      	bpl.n	f224 <_mqtt_send_wait+0x48>
    f1ea:	2604      	movs	r6, #4
    f1ec:	4333      	orrs	r3, r6
    f1ee:	7023      	strb	r3, [r4, #0]
    f1f0:	2002      	movs	r0, #2
    f1f2:	5628      	ldrsb	r0, [r5, r0]
    f1f4:	b292      	uxth	r2, r2
    f1f6:	2300      	movs	r3, #0
    f1f8:	4f0c      	ldr	r7, [pc, #48]	; (f22c <_mqtt_send_wait+0x50>)
    f1fa:	47b8      	blx	r7
    f1fc:	2800      	cmp	r0, #0
    f1fe:	da05      	bge.n	f20c <_mqtt_send_wait+0x30>
    f200:	7823      	ldrb	r3, [r4, #0]
    f202:	43b3      	bics	r3, r6
    f204:	7023      	strb	r3, [r4, #0]
    f206:	4b0a      	ldr	r3, [pc, #40]	; (f230 <_mqtt_send_wait+0x54>)
    f208:	4798      	blx	r3
    f20a:	e00d      	b.n	f228 <_mqtt_send_wait+0x4c>
    f20c:	7822      	ldrb	r2, [r4, #0]
    f20e:	2314      	movs	r3, #20
    f210:	4013      	ands	r3, r2
    f212:	2000      	movs	r0, #0
    f214:	2b04      	cmp	r3, #4
    f216:	d107      	bne.n	f228 <_mqtt_send_wait+0x4c>
    f218:	4b06      	ldr	r3, [pc, #24]	; (f234 <_mqtt_send_wait+0x58>)
    f21a:	4798      	blx	r3
    f21c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    f21e:	4b06      	ldr	r3, [pc, #24]	; (f238 <_mqtt_send_wait+0x5c>)
    f220:	4798      	blx	r3
    f222:	e7f3      	b.n	f20c <_mqtt_send_wait+0x30>
    f224:	2001      	movs	r0, #1
    f226:	4240      	negs	r0, r0
    f228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f22a:	46c0      	nop			; (mov r8, r8)
    f22c:	00006799 	.word	0x00006799
    f230:	0000f18d 	.word	0x0000f18d
    f234:	000039f5 	.word	0x000039f5
    f238:	000023e1 	.word	0x000023e1

0000f23c <mqtt_get_config_defaults>:
    f23c:	4b07      	ldr	r3, [pc, #28]	; (f25c <mqtt_get_config_defaults+0x20>)
    f23e:	2240      	movs	r2, #64	; 0x40
    f240:	8003      	strh	r3, [r0, #0]
    f242:	2396      	movs	r3, #150	; 0x96
    f244:	009b      	lsls	r3, r3, #2
    f246:	8103      	strh	r3, [r0, #8]
    f248:	6102      	str	r2, [r0, #16]
    f24a:	2300      	movs	r3, #0
    f24c:	2220      	movs	r2, #32
    f24e:	7083      	strb	r3, [r0, #2]
    f250:	6043      	str	r3, [r0, #4]
    f252:	60c3      	str	r3, [r0, #12]
    f254:	6142      	str	r2, [r0, #20]
    f256:	7603      	strb	r3, [r0, #24]
    f258:	4770      	bx	lr
    f25a:	46c0      	nop			; (mov r8, r8)
    f25c:	0000075b 	.word	0x0000075b

0000f260 <mqtt_init>:
    f260:	b538      	push	{r3, r4, r5, lr}
    f262:	1c04      	adds	r4, r0, #0
    f264:	1c0d      	adds	r5, r1, #0
    f266:	2800      	cmp	r0, #0
    f268:	d030      	beq.n	f2cc <mqtt_init+0x6c>
    f26a:	2900      	cmp	r1, #0
    f26c:	d02e      	beq.n	f2cc <mqtt_init+0x6c>
    f26e:	690b      	ldr	r3, [r1, #16]
    f270:	2b00      	cmp	r3, #0
    f272:	d02b      	beq.n	f2cc <mqtt_init+0x6c>
    f274:	684b      	ldr	r3, [r1, #4]
    f276:	2b00      	cmp	r3, #0
    f278:	d028      	beq.n	f2cc <mqtt_init+0x6c>
    f27a:	2100      	movs	r1, #0
    f27c:	2274      	movs	r2, #116	; 0x74
    f27e:	4b16      	ldr	r3, [pc, #88]	; (f2d8 <mqtt_init+0x78>)
    f280:	4798      	blx	r3
    f282:	1c20      	adds	r0, r4, #0
    f284:	4b15      	ldr	r3, [pc, #84]	; (f2dc <mqtt_init+0x7c>)
    f286:	3058      	adds	r0, #88	; 0x58
    f288:	1c29      	adds	r1, r5, #0
    f28a:	221c      	movs	r2, #28
    f28c:	4798      	blx	r3
    f28e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f290:	2b00      	cmp	r3, #0
    f292:	d10b      	bne.n	f2ac <mqtt_init+0x4c>
    f294:	6928      	ldr	r0, [r5, #16]
    f296:	4b12      	ldr	r3, [pc, #72]	; (f2e0 <mqtt_init+0x80>)
    f298:	4798      	blx	r3
    f29a:	6660      	str	r0, [r4, #100]	; 0x64
    f29c:	2800      	cmp	r0, #0
    f29e:	d017      	beq.n	f2d0 <mqtt_init+0x70>
    f2a0:	1c23      	adds	r3, r4, #0
    f2a2:	3343      	adds	r3, #67	; 0x43
    f2a4:	781a      	ldrb	r2, [r3, #0]
    f2a6:	2120      	movs	r1, #32
    f2a8:	430a      	orrs	r2, r1
    f2aa:	701a      	strb	r2, [r3, #0]
    f2ac:	892a      	ldrh	r2, [r5, #8]
    f2ae:	23fa      	movs	r3, #250	; 0xfa
    f2b0:	005b      	lsls	r3, r3, #1
    f2b2:	4353      	muls	r3, r2
    f2b4:	6868      	ldr	r0, [r5, #4]
    f2b6:	490b      	ldr	r1, [pc, #44]	; (f2e4 <mqtt_init+0x84>)
    f2b8:	1c22      	adds	r2, r4, #0
    f2ba:	4d0b      	ldr	r5, [pc, #44]	; (f2e8 <mqtt_init+0x88>)
    f2bc:	47a8      	blx	r5
    f2be:	1c03      	adds	r3, r0, #0
    f2c0:	6520      	str	r0, [r4, #80]	; 0x50
    f2c2:	2000      	movs	r0, #0
    f2c4:	4283      	cmp	r3, r0
    f2c6:	da05      	bge.n	f2d4 <mqtt_init+0x74>
    f2c8:	201c      	movs	r0, #28
    f2ca:	e002      	b.n	f2d2 <mqtt_init+0x72>
    f2cc:	2016      	movs	r0, #22
    f2ce:	e000      	b.n	f2d2 <mqtt_init+0x72>
    f2d0:	200c      	movs	r0, #12
    f2d2:	4240      	negs	r0, r0
    f2d4:	bd38      	pop	{r3, r4, r5, pc}
    f2d6:	46c0      	nop			; (mov r8, r8)
    f2d8:	00011fcb 	.word	0x00011fcb
    f2dc:	00011f95 	.word	0x00011f95
    f2e0:	00011f49 	.word	0x00011f49
    f2e4:	0000fa69 	.word	0x0000fa69
    f2e8:	000022d5 	.word	0x000022d5

0000f2ec <mqtt_register_callback>:
    f2ec:	2800      	cmp	r0, #0
    f2ee:	d002      	beq.n	f2f6 <mqtt_register_callback+0xa>
    f2f0:	6541      	str	r1, [r0, #84]	; 0x54
    f2f2:	2000      	movs	r0, #0
    f2f4:	e001      	b.n	f2fa <mqtt_register_callback+0xe>
    f2f6:	2016      	movs	r0, #22
    f2f8:	4240      	negs	r0, r0
    f2fa:	4770      	bx	lr

0000f2fc <mqtt_socket_resolve_handler>:
    f2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2fe:	1c06      	adds	r6, r0, #0
    f300:	b085      	sub	sp, #20
    f302:	1c0f      	adds	r7, r1, #0
    f304:	2400      	movs	r4, #0
    f306:	4b0f      	ldr	r3, [pc, #60]	; (f344 <mqtt_socket_resolve_handler+0x48>)
    f308:	58e5      	ldr	r5, [r4, r3]
    f30a:	2d00      	cmp	r5, #0
    f30c:	d015      	beq.n	f33a <mqtt_socket_resolve_handler+0x3e>
    f30e:	1ce9      	adds	r1, r5, #3
    f310:	1c30      	adds	r0, r6, #0
    f312:	4b0d      	ldr	r3, [pc, #52]	; (f348 <mqtt_socket_resolve_handler+0x4c>)
    f314:	4798      	blx	r3
    f316:	2800      	cmp	r0, #0
    f318:	d10f      	bne.n	f33a <mqtt_socket_resolve_handler+0x3e>
    f31a:	466a      	mov	r2, sp
    f31c:	2302      	movs	r3, #2
    f31e:	8013      	strh	r3, [r2, #0]
    f320:	1c2b      	adds	r3, r5, #0
    f322:	3358      	adds	r3, #88	; 0x58
    f324:	881b      	ldrh	r3, [r3, #0]
    f326:	9701      	str	r7, [sp, #4]
    f328:	ba5b      	rev16	r3, r3
    f32a:	8053      	strh	r3, [r2, #2]
    f32c:	2002      	movs	r0, #2
    f32e:	5628      	ldrsb	r0, [r5, r0]
    f330:	4669      	mov	r1, sp
    f332:	2210      	movs	r2, #16
    f334:	4b05      	ldr	r3, [pc, #20]	; (f34c <mqtt_socket_resolve_handler+0x50>)
    f336:	4798      	blx	r3
    f338:	e002      	b.n	f340 <mqtt_socket_resolve_handler+0x44>
    f33a:	3404      	adds	r4, #4
    f33c:	2c1c      	cmp	r4, #28
    f33e:	d1e2      	bne.n	f306 <mqtt_socket_resolve_handler+0xa>
    f340:	b005      	add	sp, #20
    f342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f344:	200003e0 	.word	0x200003e0
    f348:	0001244d 	.word	0x0001244d
    f34c:	00006645 	.word	0x00006645

0000f350 <mqtt_connect>:
    f350:	b5f0      	push	{r4, r5, r6, r7, lr}
    f352:	1c04      	adds	r4, r0, #0
    f354:	b089      	sub	sp, #36	; 0x24
    f356:	1c0d      	adds	r5, r1, #0
    f358:	2800      	cmp	r0, #0
    f35a:	d051      	beq.n	f400 <mqtt_connect+0xb0>
    f35c:	2900      	cmp	r1, #0
    f35e:	d04f      	beq.n	f400 <mqtt_connect+0xb0>
    f360:	1c08      	adds	r0, r1, #0
    f362:	4b39      	ldr	r3, [pc, #228]	; (f448 <mqtt_connect+0xf8>)
    f364:	4798      	blx	r3
    f366:	2840      	cmp	r0, #64	; 0x40
    f368:	d84c      	bhi.n	f404 <mqtt_connect+0xb4>
    f36a:	1c21      	adds	r1, r4, #0
    f36c:	3143      	adds	r1, #67	; 0x43
    f36e:	780b      	ldrb	r3, [r1, #0]
    f370:	9101      	str	r1, [sp, #4]
    f372:	07db      	lsls	r3, r3, #31
    f374:	0fd9      	lsrs	r1, r3, #31
    f376:	466a      	mov	r2, sp
    f378:	b2ce      	uxtb	r6, r1
    f37a:	1ce0      	adds	r0, r4, #3
    f37c:	7211      	strb	r1, [r2, #8]
    f37e:	2e00      	cmp	r6, #0
    f380:	d142      	bne.n	f408 <mqtt_connect+0xb8>
    f382:	2701      	movs	r7, #1
    f384:	1c29      	adds	r1, r5, #0
    f386:	4b31      	ldr	r3, [pc, #196]	; (f44c <mqtt_connect+0xfc>)
    f388:	8027      	strh	r7, [r4, #0]
    f38a:	4798      	blx	r3
    f38c:	9a01      	ldr	r2, [sp, #4]
    f38e:	2002      	movs	r0, #2
    f390:	7813      	ldrb	r3, [r2, #0]
    f392:	9901      	ldr	r1, [sp, #4]
    f394:	43bb      	bics	r3, r7
    f396:	4383      	bics	r3, r0
    f398:	22e3      	movs	r2, #227	; 0xe3
    f39a:	4013      	ands	r3, r2
    f39c:	466a      	mov	r2, sp
    f39e:	700b      	strb	r3, [r1, #0]
    f3a0:	7a12      	ldrb	r2, [r2, #8]
    f3a2:	1c23      	adds	r3, r4, #0
    f3a4:	3348      	adds	r3, #72	; 0x48
    f3a6:	6466      	str	r6, [r4, #68]	; 0x44
    f3a8:	701a      	strb	r2, [r3, #0]
    f3aa:	7c9a      	ldrb	r2, [r3, #18]
    f3ac:	805e      	strh	r6, [r3, #2]
    f3ae:	1e53      	subs	r3, r2, #1
    f3b0:	419a      	sbcs	r2, r3
    f3b2:	b2d2      	uxtb	r2, r2
    f3b4:	1c39      	adds	r1, r7, #0
    f3b6:	4b26      	ldr	r3, [pc, #152]	; (f450 <mqtt_connect+0x100>)
    f3b8:	4798      	blx	r3
    f3ba:	70a0      	strb	r0, [r4, #2]
    f3bc:	2800      	cmp	r0, #0
    f3be:	db25      	blt.n	f40c <mqtt_connect+0xbc>
    f3c0:	4b24      	ldr	r3, [pc, #144]	; (f454 <mqtt_connect+0x104>)
    f3c2:	0080      	lsls	r0, r0, #2
    f3c4:	50c4      	str	r4, [r0, r3]
    f3c6:	1c2b      	adds	r3, r5, #0
    f3c8:	781f      	ldrb	r7, [r3, #0]
    f3ca:	2f00      	cmp	r7, #0
    f3cc:	d026      	beq.n	f41c <mqtt_connect+0xcc>
    f3ce:	2220      	movs	r2, #32
    f3d0:	1c39      	adds	r1, r7, #0
    f3d2:	4391      	bics	r1, r2
    f3d4:	1c0a      	adds	r2, r1, #0
    f3d6:	3a41      	subs	r2, #65	; 0x41
    f3d8:	b2d2      	uxtb	r2, r2
    f3da:	3301      	adds	r3, #1
    f3dc:	2a05      	cmp	r2, #5
    f3de:	d90d      	bls.n	f3fc <mqtt_connect+0xac>
    f3e0:	2f3a      	cmp	r7, #58	; 0x3a
    f3e2:	d00b      	beq.n	f3fc <mqtt_connect+0xac>
    f3e4:	2f2f      	cmp	r7, #47	; 0x2f
    f3e6:	d009      	beq.n	f3fc <mqtt_connect+0xac>
    f3e8:	2f2e      	cmp	r7, #46	; 0x2e
    f3ea:	d102      	bne.n	f3f2 <mqtt_connect+0xa2>
    f3ec:	2e00      	cmp	r6, #0
    f3ee:	d0eb      	beq.n	f3c8 <mqtt_connect+0x78>
    f3f0:	e00f      	b.n	f412 <mqtt_connect+0xc2>
    f3f2:	2230      	movs	r2, #48	; 0x30
    f3f4:	4017      	ands	r7, r2
    f3f6:	4297      	cmp	r7, r2
    f3f8:	d0e6      	beq.n	f3c8 <mqtt_connect+0x78>
    f3fa:	e00a      	b.n	f412 <mqtt_connect+0xc2>
    f3fc:	2601      	movs	r6, #1
    f3fe:	e7e3      	b.n	f3c8 <mqtt_connect+0x78>
    f400:	2016      	movs	r0, #22
    f402:	e004      	b.n	f40e <mqtt_connect+0xbe>
    f404:	205b      	movs	r0, #91	; 0x5b
    f406:	e002      	b.n	f40e <mqtt_connect+0xbe>
    f408:	2078      	movs	r0, #120	; 0x78
    f40a:	e000      	b.n	f40e <mqtt_connect+0xbe>
    f40c:	201c      	movs	r0, #28
    f40e:	4240      	negs	r0, r0
    f410:	e017      	b.n	f442 <mqtt_connect+0xf2>
    f412:	1c28      	adds	r0, r5, #0
    f414:	4b10      	ldr	r3, [pc, #64]	; (f458 <mqtt_connect+0x108>)
    f416:	4798      	blx	r3
    f418:	2000      	movs	r0, #0
    f41a:	e012      	b.n	f442 <mqtt_connect+0xf2>
    f41c:	466a      	mov	r2, sp
    f41e:	2302      	movs	r3, #2
    f420:	8213      	strh	r3, [r2, #16]
    f422:	1c23      	adds	r3, r4, #0
    f424:	3358      	adds	r3, #88	; 0x58
    f426:	881b      	ldrh	r3, [r3, #0]
    f428:	1c28      	adds	r0, r5, #0
    f42a:	ba5b      	rev16	r3, r3
    f42c:	8253      	strh	r3, [r2, #18]
    f42e:	4b0b      	ldr	r3, [pc, #44]	; (f45c <mqtt_connect+0x10c>)
    f430:	4798      	blx	r3
    f432:	9005      	str	r0, [sp, #20]
    f434:	2002      	movs	r0, #2
    f436:	5620      	ldrsb	r0, [r4, r0]
    f438:	a904      	add	r1, sp, #16
    f43a:	2210      	movs	r2, #16
    f43c:	4b08      	ldr	r3, [pc, #32]	; (f460 <mqtt_connect+0x110>)
    f43e:	4798      	blx	r3
    f440:	1c38      	adds	r0, r7, #0
    f442:	b009      	add	sp, #36	; 0x24
    f444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f446:	46c0      	nop			; (mov r8, r8)
    f448:	000124ab 	.word	0x000124ab
    f44c:	00012461 	.word	0x00012461
    f450:	000064c1 	.word	0x000064c1
    f454:	200003e0 	.word	0x200003e0
    f458:	00006ce1 	.word	0x00006ce1
    f45c:	00006bd9 	.word	0x00006bd9
    f460:	00006645 	.word	0x00006645

0000f464 <mqtt_connect_broker>:
    f464:	b5f0      	push	{r4, r5, r6, r7, lr}
    f466:	b095      	sub	sp, #84	; 0x54
    f468:	af02      	add	r7, sp, #8
    f46a:	617b      	str	r3, [r7, #20]
    f46c:	1c3b      	adds	r3, r7, #0
    f46e:	3370      	adds	r3, #112	; 0x70
    f470:	781b      	ldrb	r3, [r3, #0]
    f472:	1c05      	adds	r5, r0, #0
    f474:	60fb      	str	r3, [r7, #12]
    f476:	1c3b      	adds	r3, r7, #0
    f478:	3374      	adds	r3, #116	; 0x74
    f47a:	781b      	ldrb	r3, [r3, #0]
    f47c:	6139      	str	r1, [r7, #16]
    f47e:	61fa      	str	r2, [r7, #28]
    f480:	60bb      	str	r3, [r7, #8]
    f482:	2800      	cmp	r0, #0
    f484:	d101      	bne.n	f48a <mqtt_connect_broker+0x26>
    f486:	2016      	movs	r0, #22
    f488:	e129      	b.n	f6de <mqtt_connect_broker+0x27a>
    f48a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    f48c:	4668      	mov	r0, sp
    f48e:	3307      	adds	r3, #7
    f490:	08db      	lsrs	r3, r3, #3
    f492:	00db      	lsls	r3, r3, #3
    f494:	1ac0      	subs	r0, r0, r3
    f496:	4685      	mov	sp, r0
    f498:	ac02      	add	r4, sp, #8
    f49a:	607c      	str	r4, [r7, #4]
    f49c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    f49e:	2c00      	cmp	r4, #0
    f4a0:	d0f1      	beq.n	f486 <mqtt_connect_broker+0x22>
    f4a2:	1c2b      	adds	r3, r5, #0
    f4a4:	3343      	adds	r3, #67	; 0x43
    f4a6:	781b      	ldrb	r3, [r3, #0]
    f4a8:	07d8      	lsls	r0, r3, #31
    f4aa:	d400      	bmi.n	f4ae <mqtt_connect_broker+0x4a>
    f4ac:	e112      	b.n	f6d4 <mqtt_connect_broker+0x270>
    f4ae:	079a      	lsls	r2, r3, #30
    f4b0:	d500      	bpl.n	f4b4 <mqtt_connect_broker+0x50>
    f4b2:	e111      	b.n	f6d8 <mqtt_connect_broker+0x274>
    f4b4:	071c      	lsls	r4, r3, #28
    f4b6:	d40b      	bmi.n	f4d0 <mqtt_connect_broker+0x6c>
    f4b8:	4e8b      	ldr	r6, [pc, #556]	; (f6e8 <mqtt_connect_broker+0x284>)
    f4ba:	6e38      	ldr	r0, [r7, #96]	; 0x60
    f4bc:	47b0      	blx	r6
    f4be:	1c03      	adds	r3, r0, #0
    f4c0:	61b8      	str	r0, [r7, #24]
    f4c2:	69f8      	ldr	r0, [r7, #28]
    f4c4:	330e      	adds	r3, #14
    f4c6:	1c34      	adds	r4, r6, #0
    f4c8:	2800      	cmp	r0, #0
    f4ca:	d113      	bne.n	f4f4 <mqtt_connect_broker+0x90>
    f4cc:	1c1e      	adds	r6, r3, #0
    f4ce:	e01d      	b.n	f50c <mqtt_connect_broker+0xa8>
    f4d0:	1c2b      	adds	r3, r5, #0
    f4d2:	3370      	adds	r3, #112	; 0x70
    f4d4:	781b      	ldrb	r3, [r3, #0]
    f4d6:	2b00      	cmp	r3, #0
    f4d8:	d000      	beq.n	f4dc <mqtt_connect_broker+0x78>
    f4da:	e0ff      	b.n	f6dc <mqtt_connect_broker+0x278>
    f4dc:	1c2b      	adds	r3, r5, #0
    f4de:	3343      	adds	r3, #67	; 0x43
    f4e0:	781b      	ldrb	r3, [r3, #0]
    f4e2:	071a      	lsls	r2, r3, #28
    f4e4:	d5e8      	bpl.n	f4b8 <mqtt_connect_broker+0x54>
    f4e6:	4b81      	ldr	r3, [pc, #516]	; (f6ec <mqtt_connect_broker+0x288>)
    f4e8:	2000      	movs	r0, #0
    f4ea:	4798      	blx	r3
    f4ec:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    f4ee:	4b80      	ldr	r3, [pc, #512]	; (f6f0 <mqtt_connect_broker+0x28c>)
    f4f0:	4798      	blx	r3
    f4f2:	e7f3      	b.n	f4dc <mqtt_connect_broker+0x78>
    f4f4:	69f8      	ldr	r0, [r7, #28]
    f4f6:	47b0      	blx	r6
    f4f8:	69be      	ldr	r6, [r7, #24]
    f4fa:	697b      	ldr	r3, [r7, #20]
    f4fc:	3610      	adds	r6, #16
    f4fe:	1836      	adds	r6, r6, r0
    f500:	2b00      	cmp	r3, #0
    f502:	d003      	beq.n	f50c <mqtt_connect_broker+0xa8>
    f504:	1c18      	adds	r0, r3, #0
    f506:	47a0      	blx	r4
    f508:	3602      	adds	r6, #2
    f50a:	1836      	adds	r6, r6, r0
    f50c:	6e78      	ldr	r0, [r7, #100]	; 0x64
    f50e:	2800      	cmp	r0, #0
    f510:	d007      	beq.n	f522 <mqtt_connect_broker+0xbe>
    f512:	47a0      	blx	r4
    f514:	3602      	adds	r6, #2
    f516:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    f518:	1830      	adds	r0, r6, r0
    f51a:	1906      	adds	r6, r0, r4
    f51c:	2c00      	cmp	r4, #0
    f51e:	d100      	bne.n	f522 <mqtt_connect_broker+0xbe>
    f520:	1c06      	adds	r6, r0, #0
    f522:	69fc      	ldr	r4, [r7, #28]
    f524:	2c00      	cmp	r4, #0
    f526:	d006      	beq.n	f536 <mqtt_connect_broker+0xd2>
    f528:	24c0      	movs	r4, #192	; 0xc0
    f52a:	61bc      	str	r4, [r7, #24]
    f52c:	697c      	ldr	r4, [r7, #20]
    f52e:	2c00      	cmp	r4, #0
    f530:	d103      	bne.n	f53a <mqtt_connect_broker+0xd6>
    f532:	2480      	movs	r4, #128	; 0x80
    f534:	e000      	b.n	f538 <mqtt_connect_broker+0xd4>
    f536:	69fc      	ldr	r4, [r7, #28]
    f538:	61bc      	str	r4, [r7, #24]
    f53a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    f53c:	2c00      	cmp	r4, #0
    f53e:	d00f      	beq.n	f560 <mqtt_connect_broker+0xfc>
    f540:	68bc      	ldr	r4, [r7, #8]
    f542:	2c00      	cmp	r4, #0
    f544:	d003      	beq.n	f54e <mqtt_connect_broker+0xea>
    f546:	69bc      	ldr	r4, [r7, #24]
    f548:	2320      	movs	r3, #32
    f54a:	431c      	orrs	r4, r3
    f54c:	61bc      	str	r4, [r7, #24]
    f54e:	68fc      	ldr	r4, [r7, #12]
    f550:	2303      	movs	r3, #3
    f552:	4023      	ands	r3, r4
    f554:	00db      	lsls	r3, r3, #3
    f556:	69bc      	ldr	r4, [r7, #24]
    f558:	2204      	movs	r2, #4
    f55a:	4313      	orrs	r3, r2
    f55c:	431c      	orrs	r4, r3
    f55e:	61bc      	str	r4, [r7, #24]
    f560:	693c      	ldr	r4, [r7, #16]
    f562:	2c00      	cmp	r4, #0
    f564:	d003      	beq.n	f56e <mqtt_connect_broker+0x10a>
    f566:	69bc      	ldr	r4, [r7, #24]
    f568:	2302      	movs	r3, #2
    f56a:	431c      	orrs	r4, r3
    f56c:	61bc      	str	r4, [r7, #24]
    f56e:	1c2b      	adds	r3, r5, #0
    f570:	3343      	adds	r3, #67	; 0x43
    f572:	781a      	ldrb	r2, [r3, #0]
    f574:	2108      	movs	r1, #8
    f576:	430a      	orrs	r2, r1
    f578:	701a      	strb	r2, [r3, #0]
    f57a:	1c38      	adds	r0, r7, #0
    f57c:	9500      	str	r5, [sp, #0]
    f57e:	3020      	adds	r0, #32
    f580:	6879      	ldr	r1, [r7, #4]
    f582:	4b5c      	ldr	r3, [pc, #368]	; (f6f4 <mqtt_connect_broker+0x290>)
    f584:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    f586:	4c5c      	ldr	r4, [pc, #368]	; (f6f8 <mqtt_connect_broker+0x294>)
    f588:	47a0      	blx	r4
    f58a:	1c38      	adds	r0, r7, #0
    f58c:	3020      	adds	r0, #32
    f58e:	2110      	movs	r1, #16
    f590:	4b5a      	ldr	r3, [pc, #360]	; (f6fc <mqtt_connect_broker+0x298>)
    f592:	4798      	blx	r3
    f594:	2e80      	cmp	r6, #128	; 0x80
    f596:	dd09      	ble.n	f5ac <mqtt_connect_broker+0x148>
    f598:	2180      	movs	r1, #128	; 0x80
    f59a:	4249      	negs	r1, r1
    f59c:	4331      	orrs	r1, r6
    f59e:	1c38      	adds	r0, r7, #0
    f5a0:	b249      	sxtb	r1, r1
    f5a2:	3020      	adds	r0, #32
    f5a4:	4c55      	ldr	r4, [pc, #340]	; (f6fc <mqtt_connect_broker+0x298>)
    f5a6:	47a0      	blx	r4
    f5a8:	11f6      	asrs	r6, r6, #7
    f5aa:	e7f3      	b.n	f594 <mqtt_connect_broker+0x130>
    f5ac:	4b54      	ldr	r3, [pc, #336]	; (f700 <mqtt_connect_broker+0x29c>)
    f5ae:	401e      	ands	r6, r3
    f5b0:	d504      	bpl.n	f5bc <mqtt_connect_broker+0x158>
    f5b2:	2380      	movs	r3, #128	; 0x80
    f5b4:	3e01      	subs	r6, #1
    f5b6:	425b      	negs	r3, r3
    f5b8:	431e      	orrs	r6, r3
    f5ba:	3601      	adds	r6, #1
    f5bc:	1c38      	adds	r0, r7, #0
    f5be:	b271      	sxtb	r1, r6
    f5c0:	3020      	adds	r0, #32
    f5c2:	4c4e      	ldr	r4, [pc, #312]	; (f6fc <mqtt_connect_broker+0x298>)
    f5c4:	47a0      	blx	r4
    f5c6:	1c38      	adds	r0, r7, #0
    f5c8:	4c4e      	ldr	r4, [pc, #312]	; (f704 <mqtt_connect_broker+0x2a0>)
    f5ca:	3020      	adds	r0, #32
    f5cc:	2106      	movs	r1, #6
    f5ce:	47a0      	blx	r4
    f5d0:	1c38      	adds	r0, r7, #0
    f5d2:	4b4d      	ldr	r3, [pc, #308]	; (f708 <mqtt_connect_broker+0x2a4>)
    f5d4:	3020      	adds	r0, #32
    f5d6:	494d      	ldr	r1, [pc, #308]	; (f70c <mqtt_connect_broker+0x2a8>)
    f5d8:	2206      	movs	r2, #6
    f5da:	4798      	blx	r3
    f5dc:	1c38      	adds	r0, r7, #0
    f5de:	3020      	adds	r0, #32
    f5e0:	2103      	movs	r1, #3
    f5e2:	4a46      	ldr	r2, [pc, #280]	; (f6fc <mqtt_connect_broker+0x298>)
    f5e4:	4790      	blx	r2
    f5e6:	69bb      	ldr	r3, [r7, #24]
    f5e8:	1c38      	adds	r0, r7, #0
    f5ea:	4a44      	ldr	r2, [pc, #272]	; (f6fc <mqtt_connect_broker+0x298>)
    f5ec:	b259      	sxtb	r1, r3
    f5ee:	3020      	adds	r0, #32
    f5f0:	4790      	blx	r2
    f5f2:	1c2b      	adds	r3, r5, #0
    f5f4:	3360      	adds	r3, #96	; 0x60
    f5f6:	2000      	movs	r0, #0
    f5f8:	5e19      	ldrsh	r1, [r3, r0]
    f5fa:	1c38      	adds	r0, r7, #0
    f5fc:	3020      	adds	r0, #32
    f5fe:	47a0      	blx	r4
    f600:	4e39      	ldr	r6, [pc, #228]	; (f6e8 <mqtt_connect_broker+0x284>)
    f602:	6e38      	ldr	r0, [r7, #96]	; 0x60
    f604:	47b0      	blx	r6
    f606:	b201      	sxth	r1, r0
    f608:	1c38      	adds	r0, r7, #0
    f60a:	3020      	adds	r0, #32
    f60c:	47a0      	blx	r4
    f60e:	6e38      	ldr	r0, [r7, #96]	; 0x60
    f610:	47b0      	blx	r6
    f612:	1c02      	adds	r2, r0, #0
    f614:	1c38      	adds	r0, r7, #0
    f616:	3020      	adds	r0, #32
    f618:	6e39      	ldr	r1, [r7, #96]	; 0x60
    f61a:	4b3b      	ldr	r3, [pc, #236]	; (f708 <mqtt_connect_broker+0x2a4>)
    f61c:	4798      	blx	r3
    f61e:	6e78      	ldr	r0, [r7, #100]	; 0x64
    f620:	2800      	cmp	r0, #0
    f622:	d015      	beq.n	f650 <mqtt_connect_broker+0x1ec>
    f624:	47b0      	blx	r6
    f626:	b201      	sxth	r1, r0
    f628:	1c38      	adds	r0, r7, #0
    f62a:	3020      	adds	r0, #32
    f62c:	47a0      	blx	r4
    f62e:	6e78      	ldr	r0, [r7, #100]	; 0x64
    f630:	47b0      	blx	r6
    f632:	1c02      	adds	r2, r0, #0
    f634:	1c38      	adds	r0, r7, #0
    f636:	4c34      	ldr	r4, [pc, #208]	; (f708 <mqtt_connect_broker+0x2a4>)
    f638:	3020      	adds	r0, #32
    f63a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    f63c:	47a0      	blx	r4
    f63e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    f640:	2c00      	cmp	r4, #0
    f642:	d005      	beq.n	f650 <mqtt_connect_broker+0x1ec>
    f644:	1c38      	adds	r0, r7, #0
    f646:	1c21      	adds	r1, r4, #0
    f648:	3020      	adds	r0, #32
    f64a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    f64c:	4c2e      	ldr	r4, [pc, #184]	; (f708 <mqtt_connect_broker+0x2a4>)
    f64e:	47a0      	blx	r4
    f650:	69fc      	ldr	r4, [r7, #28]
    f652:	2c00      	cmp	r4, #0
    f654:	d01f      	beq.n	f696 <mqtt_connect_broker+0x232>
    f656:	4e24      	ldr	r6, [pc, #144]	; (f6e8 <mqtt_connect_broker+0x284>)
    f658:	1c20      	adds	r0, r4, #0
    f65a:	47b0      	blx	r6
    f65c:	b201      	sxth	r1, r0
    f65e:	1c38      	adds	r0, r7, #0
    f660:	3020      	adds	r0, #32
    f662:	4c28      	ldr	r4, [pc, #160]	; (f704 <mqtt_connect_broker+0x2a0>)
    f664:	47a0      	blx	r4
    f666:	69f8      	ldr	r0, [r7, #28]
    f668:	47b0      	blx	r6
    f66a:	1c02      	adds	r2, r0, #0
    f66c:	1c38      	adds	r0, r7, #0
    f66e:	3020      	adds	r0, #32
    f670:	69f9      	ldr	r1, [r7, #28]
    f672:	4c25      	ldr	r4, [pc, #148]	; (f708 <mqtt_connect_broker+0x2a4>)
    f674:	47a0      	blx	r4
    f676:	6978      	ldr	r0, [r7, #20]
    f678:	2800      	cmp	r0, #0
    f67a:	d00c      	beq.n	f696 <mqtt_connect_broker+0x232>
    f67c:	47b0      	blx	r6
    f67e:	b201      	sxth	r1, r0
    f680:	1c38      	adds	r0, r7, #0
    f682:	4a20      	ldr	r2, [pc, #128]	; (f704 <mqtt_connect_broker+0x2a0>)
    f684:	3020      	adds	r0, #32
    f686:	4790      	blx	r2
    f688:	6978      	ldr	r0, [r7, #20]
    f68a:	47b0      	blx	r6
    f68c:	1c02      	adds	r2, r0, #0
    f68e:	1c38      	adds	r0, r7, #0
    f690:	3020      	adds	r0, #32
    f692:	6979      	ldr	r1, [r7, #20]
    f694:	47a0      	blx	r4
    f696:	1c38      	adds	r0, r7, #0
    f698:	1c2c      	adds	r4, r5, #0
    f69a:	3020      	adds	r0, #32
    f69c:	4b1c      	ldr	r3, [pc, #112]	; (f710 <mqtt_connect_broker+0x2ac>)
    f69e:	3443      	adds	r4, #67	; 0x43
    f6a0:	4798      	blx	r3
    f6a2:	7821      	ldrb	r1, [r4, #0]
    f6a4:	0789      	lsls	r1, r1, #30
    f6a6:	0fc9      	lsrs	r1, r1, #31
    f6a8:	2901      	cmp	r1, #1
    f6aa:	d10b      	bne.n	f6c4 <mqtt_connect_broker+0x260>
    f6ac:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    f6ae:	2a00      	cmp	r2, #0
    f6b0:	d108      	bne.n	f6c4 <mqtt_connect_broker+0x260>
    f6b2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    f6b4:	2b00      	cmp	r3, #0
    f6b6:	d005      	beq.n	f6c4 <mqtt_connect_broker+0x260>
    f6b8:	2034      	movs	r0, #52	; 0x34
    f6ba:	55c2      	strb	r2, [r0, r7]
    f6bc:	1c3a      	adds	r2, r7, #0
    f6be:	1c28      	adds	r0, r5, #0
    f6c0:	3234      	adds	r2, #52	; 0x34
    f6c2:	4798      	blx	r3
    f6c4:	7823      	ldrb	r3, [r4, #0]
    f6c6:	2202      	movs	r2, #2
    f6c8:	4313      	orrs	r3, r2
    f6ca:	2208      	movs	r2, #8
    f6cc:	4393      	bics	r3, r2
    f6ce:	7023      	strb	r3, [r4, #0]
    f6d0:	2000      	movs	r0, #0
    f6d2:	e005      	b.n	f6e0 <mqtt_connect_broker+0x27c>
    f6d4:	2080      	movs	r0, #128	; 0x80
    f6d6:	e002      	b.n	f6de <mqtt_connect_broker+0x27a>
    f6d8:	2078      	movs	r0, #120	; 0x78
    f6da:	e000      	b.n	f6de <mqtt_connect_broker+0x27a>
    f6dc:	200b      	movs	r0, #11
    f6de:	4240      	negs	r0, r0
    f6e0:	46bd      	mov	sp, r7
    f6e2:	b013      	add	sp, #76	; 0x4c
    f6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f6e6:	46c0      	nop			; (mov r8, r8)
    f6e8:	000124ab 	.word	0x000124ab
    f6ec:	000039f5 	.word	0x000039f5
    f6f0:	000023e1 	.word	0x000023e1
    f6f4:	0000f1dd 	.word	0x0000f1dd
    f6f8:	00001ffd 	.word	0x00001ffd
    f6fc:	00002031 	.word	0x00002031
    f700:	8000007f 	.word	0x8000007f
    f704:	0000207d 	.word	0x0000207d
    f708:	000020bd 	.word	0x000020bd
    f70c:	00015270 	.word	0x00015270
    f710:	000020f9 	.word	0x000020f9

0000f714 <mqtt_publish>:
    f714:	b5f0      	push	{r4, r5, r6, r7, lr}
    f716:	b093      	sub	sp, #76	; 0x4c
    f718:	af02      	add	r7, sp, #8
    f71a:	60fb      	str	r3, [r7, #12]
    f71c:	1c3b      	adds	r3, r7, #0
    f71e:	3358      	adds	r3, #88	; 0x58
    f720:	781b      	ldrb	r3, [r3, #0]
    f722:	1c04      	adds	r4, r0, #0
    f724:	613b      	str	r3, [r7, #16]
    f726:	1c3b      	adds	r3, r7, #0
    f728:	335c      	adds	r3, #92	; 0x5c
    f72a:	781b      	ldrb	r3, [r3, #0]
    f72c:	6179      	str	r1, [r7, #20]
    f72e:	60ba      	str	r2, [r7, #8]
    f730:	607b      	str	r3, [r7, #4]
    f732:	2800      	cmp	r0, #0
    f734:	d101      	bne.n	f73a <mqtt_publish+0x26>
    f736:	2516      	movs	r5, #22
    f738:	e0a7      	b.n	f88a <mqtt_publish+0x176>
    f73a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    f73c:	466a      	mov	r2, sp
    f73e:	3307      	adds	r3, #7
    f740:	08db      	lsrs	r3, r3, #3
    f742:	00db      	lsls	r3, r3, #3
    f744:	1ad2      	subs	r2, r2, r3
    f746:	697b      	ldr	r3, [r7, #20]
    f748:	4695      	mov	sp, r2
    f74a:	ae02      	add	r6, sp, #8
    f74c:	2b00      	cmp	r3, #0
    f74e:	d0f2      	beq.n	f736 <mqtt_publish+0x22>
    f750:	693a      	ldr	r2, [r7, #16]
    f752:	2a02      	cmp	r2, #2
    f754:	d8ef      	bhi.n	f736 <mqtt_publish+0x22>
    f756:	1c05      	adds	r5, r0, #0
    f758:	3543      	adds	r5, #67	; 0x43
    f75a:	782b      	ldrb	r3, [r5, #0]
    f75c:	079a      	lsls	r2, r3, #30
    f75e:	d400      	bmi.n	f762 <mqtt_publish+0x4e>
    f760:	e090      	b.n	f884 <mqtt_publish+0x170>
    f762:	071a      	lsls	r2, r3, #28
    f764:	d40a      	bmi.n	f77c <mqtt_publish+0x68>
    f766:	4b4b      	ldr	r3, [pc, #300]	; (f894 <mqtt_publish+0x180>)
    f768:	6978      	ldr	r0, [r7, #20]
    f76a:	4798      	blx	r3
    f76c:	68fd      	ldr	r5, [r7, #12]
    f76e:	693b      	ldr	r3, [r7, #16]
    f770:	3502      	adds	r5, #2
    f772:	182d      	adds	r5, r5, r0
    f774:	2b00      	cmp	r3, #0
    f776:	d011      	beq.n	f79c <mqtt_publish+0x88>
    f778:	3502      	adds	r5, #2
    f77a:	e00f      	b.n	f79c <mqtt_publish+0x88>
    f77c:	1c03      	adds	r3, r0, #0
    f77e:	3370      	adds	r3, #112	; 0x70
    f780:	781b      	ldrb	r3, [r3, #0]
    f782:	2b00      	cmp	r3, #0
    f784:	d000      	beq.n	f788 <mqtt_publish+0x74>
    f786:	e07f      	b.n	f888 <mqtt_publish+0x174>
    f788:	782b      	ldrb	r3, [r5, #0]
    f78a:	071a      	lsls	r2, r3, #28
    f78c:	d5eb      	bpl.n	f766 <mqtt_publish+0x52>
    f78e:	4b42      	ldr	r3, [pc, #264]	; (f898 <mqtt_publish+0x184>)
    f790:	2000      	movs	r0, #0
    f792:	4798      	blx	r3
    f794:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    f796:	4b41      	ldr	r3, [pc, #260]	; (f89c <mqtt_publish+0x188>)
    f798:	4798      	blx	r3
    f79a:	e7f5      	b.n	f788 <mqtt_publish+0x74>
    f79c:	1c23      	adds	r3, r4, #0
    f79e:	3343      	adds	r3, #67	; 0x43
    f7a0:	781a      	ldrb	r2, [r3, #0]
    f7a2:	2108      	movs	r1, #8
    f7a4:	430a      	orrs	r2, r1
    f7a6:	701a      	strb	r2, [r3, #0]
    f7a8:	1c38      	adds	r0, r7, #0
    f7aa:	9400      	str	r4, [sp, #0]
    f7ac:	1c31      	adds	r1, r6, #0
    f7ae:	302c      	adds	r0, #44	; 0x2c
    f7b0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    f7b2:	4b3b      	ldr	r3, [pc, #236]	; (f8a0 <mqtt_publish+0x18c>)
    f7b4:	4e3b      	ldr	r6, [pc, #236]	; (f8a4 <mqtt_publish+0x190>)
    f7b6:	47b0      	blx	r6
    f7b8:	687b      	ldr	r3, [r7, #4]
    f7ba:	2101      	movs	r1, #1
    f7bc:	4019      	ands	r1, r3
    f7be:	2330      	movs	r3, #48	; 0x30
    f7c0:	4319      	orrs	r1, r3
    f7c2:	693b      	ldr	r3, [r7, #16]
    f7c4:	1c38      	adds	r0, r7, #0
    f7c6:	005a      	lsls	r2, r3, #1
    f7c8:	2306      	movs	r3, #6
    f7ca:	4013      	ands	r3, r2
    f7cc:	4319      	orrs	r1, r3
    f7ce:	302c      	adds	r0, #44	; 0x2c
    f7d0:	4b35      	ldr	r3, [pc, #212]	; (f8a8 <mqtt_publish+0x194>)
    f7d2:	4798      	blx	r3
    f7d4:	4b34      	ldr	r3, [pc, #208]	; (f8a8 <mqtt_publish+0x194>)
    f7d6:	2d80      	cmp	r5, #128	; 0x80
    f7d8:	dd08      	ble.n	f7ec <mqtt_publish+0xd8>
    f7da:	2180      	movs	r1, #128	; 0x80
    f7dc:	4249      	negs	r1, r1
    f7de:	4329      	orrs	r1, r5
    f7e0:	1c38      	adds	r0, r7, #0
    f7e2:	b249      	sxtb	r1, r1
    f7e4:	302c      	adds	r0, #44	; 0x2c
    f7e6:	4798      	blx	r3
    f7e8:	11ed      	asrs	r5, r5, #7
    f7ea:	e7f3      	b.n	f7d4 <mqtt_publish+0xc0>
    f7ec:	4a2f      	ldr	r2, [pc, #188]	; (f8ac <mqtt_publish+0x198>)
    f7ee:	4015      	ands	r5, r2
    f7f0:	d504      	bpl.n	f7fc <mqtt_publish+0xe8>
    f7f2:	2280      	movs	r2, #128	; 0x80
    f7f4:	3d01      	subs	r5, #1
    f7f6:	4252      	negs	r2, r2
    f7f8:	4315      	orrs	r5, r2
    f7fa:	3501      	adds	r5, #1
    f7fc:	1c38      	adds	r0, r7, #0
    f7fe:	b269      	sxtb	r1, r5
    f800:	302c      	adds	r0, #44	; 0x2c
    f802:	4798      	blx	r3
    f804:	4e23      	ldr	r6, [pc, #140]	; (f894 <mqtt_publish+0x180>)
    f806:	6978      	ldr	r0, [r7, #20]
    f808:	47b0      	blx	r6
    f80a:	b201      	sxth	r1, r0
    f80c:	1c38      	adds	r0, r7, #0
    f80e:	302c      	adds	r0, #44	; 0x2c
    f810:	4d27      	ldr	r5, [pc, #156]	; (f8b0 <mqtt_publish+0x19c>)
    f812:	47a8      	blx	r5
    f814:	6978      	ldr	r0, [r7, #20]
    f816:	47b0      	blx	r6
    f818:	1c02      	adds	r2, r0, #0
    f81a:	1c38      	adds	r0, r7, #0
    f81c:	302c      	adds	r0, #44	; 0x2c
    f81e:	6979      	ldr	r1, [r7, #20]
    f820:	4e24      	ldr	r6, [pc, #144]	; (f8b4 <mqtt_publish+0x1a0>)
    f822:	47b0      	blx	r6
    f824:	693a      	ldr	r2, [r7, #16]
    f826:	2a00      	cmp	r2, #0
    f828:	d006      	beq.n	f838 <mqtt_publish+0x124>
    f82a:	8821      	ldrh	r1, [r4, #0]
    f82c:	1c38      	adds	r0, r7, #0
    f82e:	1c4b      	adds	r3, r1, #1
    f830:	8023      	strh	r3, [r4, #0]
    f832:	b209      	sxth	r1, r1
    f834:	302c      	adds	r0, #44	; 0x2c
    f836:	47a8      	blx	r5
    f838:	8823      	ldrh	r3, [r4, #0]
    f83a:	2b00      	cmp	r3, #0
    f83c:	d101      	bne.n	f842 <mqtt_publish+0x12e>
    f83e:	2301      	movs	r3, #1
    f840:	8023      	strh	r3, [r4, #0]
    f842:	68bb      	ldr	r3, [r7, #8]
    f844:	2b00      	cmp	r3, #0
    f846:	d006      	beq.n	f856 <mqtt_publish+0x142>
    f848:	68fa      	ldr	r2, [r7, #12]
    f84a:	2a00      	cmp	r2, #0
    f84c:	d003      	beq.n	f856 <mqtt_publish+0x142>
    f84e:	1c38      	adds	r0, r7, #0
    f850:	302c      	adds	r0, #44	; 0x2c
    f852:	1c19      	adds	r1, r3, #0
    f854:	47b0      	blx	r6
    f856:	1c38      	adds	r0, r7, #0
    f858:	4b17      	ldr	r3, [pc, #92]	; (f8b8 <mqtt_publish+0x1a4>)
    f85a:	302c      	adds	r0, #44	; 0x2c
    f85c:	4798      	blx	r3
    f85e:	1c23      	adds	r3, r4, #0
    f860:	3343      	adds	r3, #67	; 0x43
    f862:	781a      	ldrb	r2, [r3, #0]
    f864:	2108      	movs	r1, #8
    f866:	438a      	bics	r2, r1
    f868:	701a      	strb	r2, [r3, #0]
    f86a:	693b      	ldr	r3, [r7, #16]
    f86c:	2500      	movs	r5, #0
    f86e:	42ab      	cmp	r3, r5
    f870:	d10c      	bne.n	f88c <mqtt_publish+0x178>
    f872:	6d63      	ldr	r3, [r4, #84]	; 0x54
    f874:	42ab      	cmp	r3, r5
    f876:	d009      	beq.n	f88c <mqtt_publish+0x178>
    f878:	1c3a      	adds	r2, r7, #0
    f87a:	1c20      	adds	r0, r4, #0
    f87c:	2102      	movs	r1, #2
    f87e:	3218      	adds	r2, #24
    f880:	4798      	blx	r3
    f882:	e003      	b.n	f88c <mqtt_publish+0x178>
    f884:	2580      	movs	r5, #128	; 0x80
    f886:	e000      	b.n	f88a <mqtt_publish+0x176>
    f888:	250b      	movs	r5, #11
    f88a:	426d      	negs	r5, r5
    f88c:	1c28      	adds	r0, r5, #0
    f88e:	46bd      	mov	sp, r7
    f890:	b011      	add	sp, #68	; 0x44
    f892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f894:	000124ab 	.word	0x000124ab
    f898:	000039f5 	.word	0x000039f5
    f89c:	000023e1 	.word	0x000023e1
    f8a0:	0000f1dd 	.word	0x0000f1dd
    f8a4:	00001ffd 	.word	0x00001ffd
    f8a8:	00002031 	.word	0x00002031
    f8ac:	8000007f 	.word	0x8000007f
    f8b0:	0000207d 	.word	0x0000207d
    f8b4:	000020bd 	.word	0x000020bd
    f8b8:	000020f9 	.word	0x000020f9

0000f8bc <mqtt_subscribe>:
    f8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8be:	b08d      	sub	sp, #52	; 0x34
    f8c0:	af02      	add	r7, sp, #8
    f8c2:	1c04      	adds	r4, r0, #0
    f8c4:	60b9      	str	r1, [r7, #8]
    f8c6:	607a      	str	r2, [r7, #4]
    f8c8:	d101      	bne.n	f8ce <mqtt_subscribe+0x12>
    f8ca:	2016      	movs	r0, #22
    f8cc:	e086      	b.n	f9dc <mqtt_subscribe+0x120>
    f8ce:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    f8d0:	466a      	mov	r2, sp
    f8d2:	3307      	adds	r3, #7
    f8d4:	08db      	lsrs	r3, r3, #3
    f8d6:	00db      	lsls	r3, r3, #3
    f8d8:	1ad2      	subs	r2, r2, r3
    f8da:	4695      	mov	sp, r2
    f8dc:	ad02      	add	r5, sp, #8
    f8de:	603d      	str	r5, [r7, #0]
    f8e0:	68bd      	ldr	r5, [r7, #8]
    f8e2:	2d00      	cmp	r5, #0
    f8e4:	d0f1      	beq.n	f8ca <mqtt_subscribe+0xe>
    f8e6:	687d      	ldr	r5, [r7, #4]
    f8e8:	2d02      	cmp	r5, #2
    f8ea:	d8ee      	bhi.n	f8ca <mqtt_subscribe+0xe>
    f8ec:	1c05      	adds	r5, r0, #0
    f8ee:	3543      	adds	r5, #67	; 0x43
    f8f0:	782b      	ldrb	r3, [r5, #0]
    f8f2:	079a      	lsls	r2, r3, #30
    f8f4:	d56f      	bpl.n	f9d6 <mqtt_subscribe+0x11a>
    f8f6:	071a      	lsls	r2, r3, #28
    f8f8:	d41a      	bmi.n	f930 <mqtt_subscribe+0x74>
    f8fa:	68b8      	ldr	r0, [r7, #8]
    f8fc:	4d39      	ldr	r5, [pc, #228]	; (f9e4 <mqtt_subscribe+0x128>)
    f8fe:	47a8      	blx	r5
    f900:	1c25      	adds	r5, r4, #0
    f902:	3543      	adds	r5, #67	; 0x43
    f904:	782b      	ldrb	r3, [r5, #0]
    f906:	2208      	movs	r2, #8
    f908:	4313      	orrs	r3, r2
    f90a:	702b      	strb	r3, [r5, #0]
    f90c:	60fd      	str	r5, [r7, #12]
    f90e:	1d46      	adds	r6, r0, #5
    f910:	9400      	str	r4, [sp, #0]
    f912:	1c38      	adds	r0, r7, #0
    f914:	3014      	adds	r0, #20
    f916:	6839      	ldr	r1, [r7, #0]
    f918:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    f91a:	4b33      	ldr	r3, [pc, #204]	; (f9e8 <mqtt_subscribe+0x12c>)
    f91c:	4d33      	ldr	r5, [pc, #204]	; (f9ec <mqtt_subscribe+0x130>)
    f91e:	47a8      	blx	r5
    f920:	1c38      	adds	r0, r7, #0
    f922:	217e      	movs	r1, #126	; 0x7e
    f924:	3014      	adds	r0, #20
    f926:	4249      	negs	r1, r1
    f928:	4b31      	ldr	r3, [pc, #196]	; (f9f0 <mqtt_subscribe+0x134>)
    f92a:	4798      	blx	r3
    f92c:	4d2d      	ldr	r5, [pc, #180]	; (f9e4 <mqtt_subscribe+0x128>)
    f92e:	e00e      	b.n	f94e <mqtt_subscribe+0x92>
    f930:	1c03      	adds	r3, r0, #0
    f932:	3370      	adds	r3, #112	; 0x70
    f934:	781b      	ldrb	r3, [r3, #0]
    f936:	2b00      	cmp	r3, #0
    f938:	d14f      	bne.n	f9da <mqtt_subscribe+0x11e>
    f93a:	782b      	ldrb	r3, [r5, #0]
    f93c:	071a      	lsls	r2, r3, #28
    f93e:	d5dc      	bpl.n	f8fa <mqtt_subscribe+0x3e>
    f940:	4b2c      	ldr	r3, [pc, #176]	; (f9f4 <mqtt_subscribe+0x138>)
    f942:	2000      	movs	r0, #0
    f944:	4798      	blx	r3
    f946:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    f948:	4b2b      	ldr	r3, [pc, #172]	; (f9f8 <mqtt_subscribe+0x13c>)
    f94a:	4798      	blx	r3
    f94c:	e7f5      	b.n	f93a <mqtt_subscribe+0x7e>
    f94e:	4b28      	ldr	r3, [pc, #160]	; (f9f0 <mqtt_subscribe+0x134>)
    f950:	2e80      	cmp	r6, #128	; 0x80
    f952:	dd08      	ble.n	f966 <mqtt_subscribe+0xaa>
    f954:	2180      	movs	r1, #128	; 0x80
    f956:	4249      	negs	r1, r1
    f958:	4331      	orrs	r1, r6
    f95a:	1c38      	adds	r0, r7, #0
    f95c:	b249      	sxtb	r1, r1
    f95e:	3014      	adds	r0, #20
    f960:	4798      	blx	r3
    f962:	11f6      	asrs	r6, r6, #7
    f964:	e7f3      	b.n	f94e <mqtt_subscribe+0x92>
    f966:	4925      	ldr	r1, [pc, #148]	; (f9fc <mqtt_subscribe+0x140>)
    f968:	4031      	ands	r1, r6
    f96a:	d504      	bpl.n	f976 <mqtt_subscribe+0xba>
    f96c:	2280      	movs	r2, #128	; 0x80
    f96e:	3901      	subs	r1, #1
    f970:	4252      	negs	r2, r2
    f972:	4311      	orrs	r1, r2
    f974:	3101      	adds	r1, #1
    f976:	1c38      	adds	r0, r7, #0
    f978:	b249      	sxtb	r1, r1
    f97a:	3014      	adds	r0, #20
    f97c:	4798      	blx	r3
    f97e:	8821      	ldrh	r1, [r4, #0]
    f980:	1c38      	adds	r0, r7, #0
    f982:	1c4b      	adds	r3, r1, #1
    f984:	8023      	strh	r3, [r4, #0]
    f986:	b209      	sxth	r1, r1
    f988:	3014      	adds	r0, #20
    f98a:	4e1d      	ldr	r6, [pc, #116]	; (fa00 <mqtt_subscribe+0x144>)
    f98c:	47b0      	blx	r6
    f98e:	8823      	ldrh	r3, [r4, #0]
    f990:	2b00      	cmp	r3, #0
    f992:	d101      	bne.n	f998 <mqtt_subscribe+0xdc>
    f994:	2301      	movs	r3, #1
    f996:	8023      	strh	r3, [r4, #0]
    f998:	68b8      	ldr	r0, [r7, #8]
    f99a:	47a8      	blx	r5
    f99c:	b201      	sxth	r1, r0
    f99e:	1c38      	adds	r0, r7, #0
    f9a0:	3014      	adds	r0, #20
    f9a2:	47b0      	blx	r6
    f9a4:	68b8      	ldr	r0, [r7, #8]
    f9a6:	47a8      	blx	r5
    f9a8:	1c02      	adds	r2, r0, #0
    f9aa:	1c38      	adds	r0, r7, #0
    f9ac:	3014      	adds	r0, #20
    f9ae:	68b9      	ldr	r1, [r7, #8]
    f9b0:	4b14      	ldr	r3, [pc, #80]	; (fa04 <mqtt_subscribe+0x148>)
    f9b2:	4798      	blx	r3
    f9b4:	687d      	ldr	r5, [r7, #4]
    f9b6:	1c38      	adds	r0, r7, #0
    f9b8:	b269      	sxtb	r1, r5
    f9ba:	3014      	adds	r0, #20
    f9bc:	4b0c      	ldr	r3, [pc, #48]	; (f9f0 <mqtt_subscribe+0x134>)
    f9be:	4798      	blx	r3
    f9c0:	1c38      	adds	r0, r7, #0
    f9c2:	3014      	adds	r0, #20
    f9c4:	4b10      	ldr	r3, [pc, #64]	; (fa08 <mqtt_subscribe+0x14c>)
    f9c6:	4798      	blx	r3
    f9c8:	68fd      	ldr	r5, [r7, #12]
    f9ca:	2208      	movs	r2, #8
    f9cc:	782b      	ldrb	r3, [r5, #0]
    f9ce:	2000      	movs	r0, #0
    f9d0:	4393      	bics	r3, r2
    f9d2:	702b      	strb	r3, [r5, #0]
    f9d4:	e003      	b.n	f9de <mqtt_subscribe+0x122>
    f9d6:	2080      	movs	r0, #128	; 0x80
    f9d8:	e000      	b.n	f9dc <mqtt_subscribe+0x120>
    f9da:	200b      	movs	r0, #11
    f9dc:	4240      	negs	r0, r0
    f9de:	46bd      	mov	sp, r7
    f9e0:	b00b      	add	sp, #44	; 0x2c
    f9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9e4:	000124ab 	.word	0x000124ab
    f9e8:	0000f1dd 	.word	0x0000f1dd
    f9ec:	00001ffd 	.word	0x00001ffd
    f9f0:	00002031 	.word	0x00002031
    f9f4:	000039f5 	.word	0x000039f5
    f9f8:	000023e1 	.word	0x000023e1
    f9fc:	8000007f 	.word	0x8000007f
    fa00:	0000207d 	.word	0x0000207d
    fa04:	000020bd 	.word	0x000020bd
    fa08:	000020f9 	.word	0x000020f9

0000fa0c <_mqtt_ping>:
    fa0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fa0e:	23c0      	movs	r3, #192	; 0xc0
    fa10:	a901      	add	r1, sp, #4
    fa12:	2500      	movs	r5, #0
    fa14:	700b      	strb	r3, [r1, #0]
    fa16:	704d      	strb	r5, [r1, #1]
    fa18:	42a8      	cmp	r0, r5
    fa1a:	d019      	beq.n	fa50 <_mqtt_ping+0x44>
    fa1c:	1c04      	adds	r4, r0, #0
    fa1e:	3443      	adds	r4, #67	; 0x43
    fa20:	7823      	ldrb	r3, [r4, #0]
    fa22:	079a      	lsls	r2, r3, #30
    fa24:	d516      	bpl.n	fa54 <_mqtt_ping+0x48>
    fa26:	071a      	lsls	r2, r3, #28
    fa28:	d416      	bmi.n	fa58 <_mqtt_ping+0x4c>
    fa2a:	2608      	movs	r6, #8
    fa2c:	4333      	orrs	r3, r6
    fa2e:	7023      	strb	r3, [r4, #0]
    fa30:	7880      	ldrb	r0, [r0, #2]
    fa32:	1c2b      	adds	r3, r5, #0
    fa34:	b240      	sxtb	r0, r0
    fa36:	2202      	movs	r2, #2
    fa38:	4f09      	ldr	r7, [pc, #36]	; (fa60 <_mqtt_ping+0x54>)
    fa3a:	47b8      	blx	r7
    fa3c:	1c2b      	adds	r3, r5, #0
    fa3e:	42a8      	cmp	r0, r5
    fa40:	da0c      	bge.n	fa5c <_mqtt_ping+0x50>
    fa42:	7823      	ldrb	r3, [r4, #0]
    fa44:	43b3      	bics	r3, r6
    fa46:	7023      	strb	r3, [r4, #0]
    fa48:	4b06      	ldr	r3, [pc, #24]	; (fa64 <_mqtt_ping+0x58>)
    fa4a:	4798      	blx	r3
    fa4c:	1c03      	adds	r3, r0, #0
    fa4e:	e005      	b.n	fa5c <_mqtt_ping+0x50>
    fa50:	2316      	movs	r3, #22
    fa52:	e002      	b.n	fa5a <_mqtt_ping+0x4e>
    fa54:	2380      	movs	r3, #128	; 0x80
    fa56:	e000      	b.n	fa5a <_mqtt_ping+0x4e>
    fa58:	230b      	movs	r3, #11
    fa5a:	425b      	negs	r3, r3
    fa5c:	1c18      	adds	r0, r3, #0
    fa5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fa60:	00006799 	.word	0x00006799
    fa64:	0000f18d 	.word	0x0000f18d

0000fa68 <mqtt_timer_callback>:
    fa68:	b570      	push	{r4, r5, r6, lr}
    fa6a:	1c05      	adds	r5, r0, #0
    fa6c:	b086      	sub	sp, #24
    fa6e:	1c0e      	adds	r6, r1, #0
    fa70:	1c14      	adds	r4, r2, #0
    fa72:	2800      	cmp	r0, #0
    fa74:	d012      	beq.n	fa9c <mqtt_timer_callback+0x34>
    fa76:	2a00      	cmp	r2, #0
    fa78:	d010      	beq.n	fa9c <mqtt_timer_callback+0x34>
    fa7a:	1c10      	adds	r0, r2, #0
    fa7c:	4b08      	ldr	r3, [pc, #32]	; (faa0 <mqtt_timer_callback+0x38>)
    fa7e:	4798      	blx	r3
    fa80:	2800      	cmp	r0, #0
    fa82:	da04      	bge.n	fa8e <mqtt_timer_callback+0x26>
    fa84:	1c28      	adds	r0, r5, #0
    fa86:	1c31      	adds	r1, r6, #0
    fa88:	2200      	movs	r2, #0
    fa8a:	4b06      	ldr	r3, [pc, #24]	; (faa4 <mqtt_timer_callback+0x3c>)
    fa8c:	e005      	b.n	fa9a <mqtt_timer_callback+0x32>
    fa8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fa90:	2b00      	cmp	r3, #0
    fa92:	d003      	beq.n	fa9c <mqtt_timer_callback+0x34>
    fa94:	1c20      	adds	r0, r4, #0
    fa96:	2107      	movs	r1, #7
    fa98:	aa01      	add	r2, sp, #4
    fa9a:	4798      	blx	r3
    fa9c:	b006      	add	sp, #24
    fa9e:	bd70      	pop	{r4, r5, r6, pc}
    faa0:	0000fa0d 	.word	0x0000fa0d
    faa4:	00002365 	.word	0x00002365

0000faa8 <_mqtt_puback>:
    faa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    faaa:	2302      	movs	r3, #2
    faac:	ac01      	add	r4, sp, #4
    faae:	2700      	movs	r7, #0
    fab0:	7063      	strb	r3, [r4, #1]
    fab2:	42b8      	cmp	r0, r7
    fab4:	d01e      	beq.n	faf4 <_mqtt_puback+0x4c>
    fab6:	1c05      	adds	r5, r0, #0
    fab8:	3543      	adds	r5, #67	; 0x43
    faba:	782b      	ldrb	r3, [r5, #0]
    fabc:	079e      	lsls	r6, r3, #30
    fabe:	d51b      	bpl.n	faf8 <_mqtt_puback+0x50>
    fac0:	071e      	lsls	r6, r3, #28
    fac2:	d41b      	bmi.n	fafc <_mqtt_puback+0x54>
    fac4:	2608      	movs	r6, #8
    fac6:	4333      	orrs	r3, r6
    fac8:	702b      	strb	r3, [r5, #0]
    faca:	7880      	ldrb	r0, [r0, #2]
    facc:	7021      	strb	r1, [r4, #0]
    face:	0a11      	lsrs	r1, r2, #8
    fad0:	70a1      	strb	r1, [r4, #2]
    fad2:	70e2      	strb	r2, [r4, #3]
    fad4:	1c21      	adds	r1, r4, #0
    fad6:	1c3b      	adds	r3, r7, #0
    fad8:	b240      	sxtb	r0, r0
    fada:	2204      	movs	r2, #4
    fadc:	4c09      	ldr	r4, [pc, #36]	; (fb04 <_mqtt_puback+0x5c>)
    fade:	47a0      	blx	r4
    fae0:	1c3b      	adds	r3, r7, #0
    fae2:	42b8      	cmp	r0, r7
    fae4:	da0c      	bge.n	fb00 <_mqtt_puback+0x58>
    fae6:	782b      	ldrb	r3, [r5, #0]
    fae8:	43b3      	bics	r3, r6
    faea:	702b      	strb	r3, [r5, #0]
    faec:	4b06      	ldr	r3, [pc, #24]	; (fb08 <_mqtt_puback+0x60>)
    faee:	4798      	blx	r3
    faf0:	1c03      	adds	r3, r0, #0
    faf2:	e005      	b.n	fb00 <_mqtt_puback+0x58>
    faf4:	2316      	movs	r3, #22
    faf6:	e002      	b.n	fafe <_mqtt_puback+0x56>
    faf8:	2380      	movs	r3, #128	; 0x80
    fafa:	e000      	b.n	fafe <_mqtt_puback+0x56>
    fafc:	230b      	movs	r3, #11
    fafe:	425b      	negs	r3, r3
    fb00:	1c18      	adds	r0, r3, #0
    fb02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fb04:	00006799 	.word	0x00006799
    fb08:	0000f18d 	.word	0x0000f18d

0000fb0c <mqtt_clear_conn>:
    fb0c:	b530      	push	{r4, r5, lr}
    fb0e:	1c04      	adds	r4, r0, #0
    fb10:	b087      	sub	sp, #28
    fb12:	2800      	cmp	r0, #0
    fb14:	d01c      	beq.n	fb50 <mqtt_clear_conn+0x44>
    fb16:	2002      	movs	r0, #2
    fb18:	4b0e      	ldr	r3, [pc, #56]	; (fb54 <mqtt_clear_conn+0x48>)
    fb1a:	5620      	ldrsb	r0, [r4, r0]
    fb1c:	4798      	blx	r3
    fb1e:	1c23      	adds	r3, r4, #0
    fb20:	3343      	adds	r3, #67	; 0x43
    fb22:	781a      	ldrb	r2, [r3, #0]
    fb24:	21fc      	movs	r1, #252	; 0xfc
    fb26:	0795      	lsls	r5, r2, #30
    fb28:	400a      	ands	r2, r1
    fb2a:	701a      	strb	r2, [r3, #0]
    fb2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    fb2e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    fb30:	9301      	str	r3, [sp, #4]
    fb32:	2300      	movs	r3, #0
    fb34:	64e3      	str	r3, [r4, #76]	; 0x4c
    fb36:	6d21      	ldr	r1, [r4, #80]	; 0x50
    fb38:	4b07      	ldr	r3, [pc, #28]	; (fb58 <mqtt_clear_conn+0x4c>)
    fb3a:	4798      	blx	r3
    fb3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fb3e:	0fed      	lsrs	r5, r5, #31
    fb40:	2b00      	cmp	r3, #0
    fb42:	d005      	beq.n	fb50 <mqtt_clear_conn+0x44>
    fb44:	2d00      	cmp	r5, #0
    fb46:	d003      	beq.n	fb50 <mqtt_clear_conn+0x44>
    fb48:	1c20      	adds	r0, r4, #0
    fb4a:	2105      	movs	r1, #5
    fb4c:	aa01      	add	r2, sp, #4
    fb4e:	4798      	blx	r3
    fb50:	b007      	add	sp, #28
    fb52:	bd30      	pop	{r4, r5, pc}
    fb54:	00006aa5 	.word	0x00006aa5
    fb58:	000023b5 	.word	0x000023b5

0000fb5c <mqtt_disconnect>:
    fb5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fb5e:	23e0      	movs	r3, #224	; 0xe0
    fb60:	ae01      	add	r6, sp, #4
    fb62:	2700      	movs	r7, #0
    fb64:	1c05      	adds	r5, r0, #0
    fb66:	7033      	strb	r3, [r6, #0]
    fb68:	7077      	strb	r7, [r6, #1]
    fb6a:	42b8      	cmp	r0, r7
    fb6c:	d036      	beq.n	fbdc <mqtt_disconnect+0x80>
    fb6e:	1c04      	adds	r4, r0, #0
    fb70:	3443      	adds	r4, #67	; 0x43
    fb72:	7823      	ldrb	r3, [r4, #0]
    fb74:	079a      	lsls	r2, r3, #30
    fb76:	d533      	bpl.n	fbe0 <mqtt_disconnect+0x84>
    fb78:	42b9      	cmp	r1, r7
    fb7a:	d12b      	bne.n	fbd4 <mqtt_disconnect+0x78>
    fb7c:	071a      	lsls	r2, r3, #28
    fb7e:	d414      	bmi.n	fbaa <mqtt_disconnect+0x4e>
    fb80:	7823      	ldrb	r3, [r4, #0]
    fb82:	2210      	movs	r2, #16
    fb84:	4313      	orrs	r3, r2
    fb86:	2708      	movs	r7, #8
    fb88:	433b      	orrs	r3, r7
    fb8a:	7023      	strb	r3, [r4, #0]
    fb8c:	2002      	movs	r0, #2
    fb8e:	5628      	ldrsb	r0, [r5, r0]
    fb90:	1c31      	adds	r1, r6, #0
    fb92:	2202      	movs	r2, #2
    fb94:	2300      	movs	r3, #0
    fb96:	4d15      	ldr	r5, [pc, #84]	; (fbec <mqtt_disconnect+0x90>)
    fb98:	47a8      	blx	r5
    fb9a:	2800      	cmp	r0, #0
    fb9c:	da14      	bge.n	fbc8 <mqtt_disconnect+0x6c>
    fb9e:	7823      	ldrb	r3, [r4, #0]
    fba0:	43bb      	bics	r3, r7
    fba2:	7023      	strb	r3, [r4, #0]
    fba4:	4b12      	ldr	r3, [pc, #72]	; (fbf0 <mqtt_disconnect+0x94>)
    fba6:	4798      	blx	r3
    fba8:	e01e      	b.n	fbe8 <mqtt_disconnect+0x8c>
    fbaa:	1c03      	adds	r3, r0, #0
    fbac:	3370      	adds	r3, #112	; 0x70
    fbae:	781b      	ldrb	r3, [r3, #0]
    fbb0:	2b00      	cmp	r3, #0
    fbb2:	d117      	bne.n	fbe4 <mqtt_disconnect+0x88>
    fbb4:	7823      	ldrb	r3, [r4, #0]
    fbb6:	071a      	lsls	r2, r3, #28
    fbb8:	d5e2      	bpl.n	fb80 <mqtt_disconnect+0x24>
    fbba:	4b0e      	ldr	r3, [pc, #56]	; (fbf4 <mqtt_disconnect+0x98>)
    fbbc:	2000      	movs	r0, #0
    fbbe:	4798      	blx	r3
    fbc0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    fbc2:	4b0d      	ldr	r3, [pc, #52]	; (fbf8 <mqtt_disconnect+0x9c>)
    fbc4:	4798      	blx	r3
    fbc6:	e7f5      	b.n	fbb4 <mqtt_disconnect+0x58>
    fbc8:	7823      	ldrb	r3, [r4, #0]
    fbca:	2202      	movs	r2, #2
    fbcc:	4393      	bics	r3, r2
    fbce:	7023      	strb	r3, [r4, #0]
    fbd0:	2000      	movs	r0, #0
    fbd2:	e009      	b.n	fbe8 <mqtt_disconnect+0x8c>
    fbd4:	4b09      	ldr	r3, [pc, #36]	; (fbfc <mqtt_disconnect+0xa0>)
    fbd6:	4798      	blx	r3
    fbd8:	1c38      	adds	r0, r7, #0
    fbda:	e005      	b.n	fbe8 <mqtt_disconnect+0x8c>
    fbdc:	2016      	movs	r0, #22
    fbde:	e002      	b.n	fbe6 <mqtt_disconnect+0x8a>
    fbe0:	2080      	movs	r0, #128	; 0x80
    fbe2:	e000      	b.n	fbe6 <mqtt_disconnect+0x8a>
    fbe4:	200b      	movs	r0, #11
    fbe6:	4240      	negs	r0, r0
    fbe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fbea:	46c0      	nop			; (mov r8, r8)
    fbec:	00006799 	.word	0x00006799
    fbf0:	0000f18d 	.word	0x0000f18d
    fbf4:	000039f5 	.word	0x000039f5
    fbf8:	000023e1 	.word	0x000023e1
    fbfc:	0000fb0d 	.word	0x0000fb0d

0000fc00 <_mqtt_recv_handler>:
    fc00:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc02:	1c04      	adds	r4, r0, #0
    fc04:	6e40      	ldr	r0, [r0, #100]	; 0x64
    fc06:	230f      	movs	r3, #15
    fc08:	7802      	ldrb	r2, [r0, #0]
    fc0a:	b087      	sub	sp, #28
    fc0c:	1c15      	adds	r5, r2, #0
    fc0e:	439d      	bics	r5, r3
    fc10:	2d50      	cmp	r5, #80	; 0x50
    fc12:	d100      	bne.n	fc16 <_mqtt_recv_handler+0x16>
    fc14:	e098      	b.n	fd48 <_mqtt_recv_handler+0x148>
    fc16:	d808      	bhi.n	fc2a <_mqtt_recv_handler+0x2a>
    fc18:	2d30      	cmp	r5, #48	; 0x30
    fc1a:	d03f      	beq.n	fc9c <_mqtt_recv_handler+0x9c>
    fc1c:	2d40      	cmp	r5, #64	; 0x40
    fc1e:	d100      	bne.n	fc22 <_mqtt_recv_handler+0x22>
    fc20:	e0b3      	b.n	fd8a <_mqtt_recv_handler+0x18a>
    fc22:	2d20      	cmp	r5, #32
    fc24:	d000      	beq.n	fc28 <_mqtt_recv_handler+0x28>
    fc26:	e0c3      	b.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fc28:	e00e      	b.n	fc48 <_mqtt_recv_handler+0x48>
    fc2a:	2d70      	cmp	r5, #112	; 0x70
    fc2c:	d100      	bne.n	fc30 <_mqtt_recv_handler+0x30>
    fc2e:	e0ac      	b.n	fd8a <_mqtt_recv_handler+0x18a>
    fc30:	d803      	bhi.n	fc3a <_mqtt_recv_handler+0x3a>
    fc32:	2d60      	cmp	r5, #96	; 0x60
    fc34:	d100      	bne.n	fc38 <_mqtt_recv_handler+0x38>
    fc36:	e096      	b.n	fd66 <_mqtt_recv_handler+0x166>
    fc38:	e0ba      	b.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fc3a:	2d90      	cmp	r5, #144	; 0x90
    fc3c:	d100      	bne.n	fc40 <_mqtt_recv_handler+0x40>
    fc3e:	e0aa      	b.n	fd96 <_mqtt_recv_handler+0x196>
    fc40:	2db0      	cmp	r5, #176	; 0xb0
    fc42:	d100      	bne.n	fc46 <_mqtt_recv_handler+0x46>
    fc44:	e0ad      	b.n	fda2 <_mqtt_recv_handler+0x1a2>
    fc46:	e0b3      	b.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fc48:	aa01      	add	r2, sp, #4
    fc4a:	2303      	movs	r3, #3
    fc4c:	2901      	cmp	r1, #1
    fc4e:	d900      	bls.n	fc52 <_mqtt_recv_handler+0x52>
    fc50:	78c3      	ldrb	r3, [r0, #3]
    fc52:	7013      	strb	r3, [r2, #0]
    fc54:	7813      	ldrb	r3, [r2, #0]
    fc56:	2b00      	cmp	r3, #0
    fc58:	d00d      	beq.n	fc76 <_mqtt_recv_handler+0x76>
    fc5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fc5c:	2b00      	cmp	r3, #0
    fc5e:	d002      	beq.n	fc66 <_mqtt_recv_handler+0x66>
    fc60:	1c20      	adds	r0, r4, #0
    fc62:	2101      	movs	r1, #1
    fc64:	4798      	blx	r3
    fc66:	236f      	movs	r3, #111	; 0x6f
    fc68:	425b      	negs	r3, r3
    fc6a:	64e3      	str	r3, [r4, #76]	; 0x4c
    fc6c:	1c20      	adds	r0, r4, #0
    fc6e:	2100      	movs	r1, #0
    fc70:	4b50      	ldr	r3, [pc, #320]	; (fdb4 <_mqtt_recv_handler+0x1b4>)
    fc72:	4798      	blx	r3
    fc74:	e09c      	b.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fc76:	1c23      	adds	r3, r4, #0
    fc78:	3343      	adds	r3, #67	; 0x43
    fc7a:	7819      	ldrb	r1, [r3, #0]
    fc7c:	0789      	lsls	r1, r1, #30
    fc7e:	0fc9      	lsrs	r1, r1, #31
    fc80:	d105      	bne.n	fc8e <_mqtt_recv_handler+0x8e>
    fc82:	781a      	ldrb	r2, [r3, #0]
    fc84:	64e1      	str	r1, [r4, #76]	; 0x4c
    fc86:	2102      	movs	r1, #2
    fc88:	430a      	orrs	r2, r1
    fc8a:	701a      	strb	r2, [r3, #0]
    fc8c:	e090      	b.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fc8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fc90:	2b00      	cmp	r3, #0
    fc92:	d100      	bne.n	fc96 <_mqtt_recv_handler+0x96>
    fc94:	e08c      	b.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fc96:	1c20      	adds	r0, r4, #0
    fc98:	2101      	movs	r1, #1
    fc9a:	e088      	b.n	fdae <_mqtt_recv_handler+0x1ae>
    fc9c:	ad01      	add	r5, sp, #4
    fc9e:	0713      	lsls	r3, r2, #28
    fca0:	7c2a      	ldrb	r2, [r5, #16]
    fca2:	0fdb      	lsrs	r3, r3, #31
    fca4:	2604      	movs	r6, #4
    fca6:	009b      	lsls	r3, r3, #2
    fca8:	43b2      	bics	r2, r6
    fcaa:	431a      	orrs	r2, r3
    fcac:	742a      	strb	r2, [r5, #16]
    fcae:	7807      	ldrb	r7, [r0, #0]
    fcb0:	2303      	movs	r3, #3
    fcb2:	b2d2      	uxtb	r2, r2
    fcb4:	087f      	lsrs	r7, r7, #1
    fcb6:	439a      	bics	r2, r3
    fcb8:	401f      	ands	r7, r3
    fcba:	1c13      	adds	r3, r2, #0
    fcbc:	433b      	orrs	r3, r7
    fcbe:	742b      	strb	r3, [r5, #16]
    fcc0:	1c43      	adds	r3, r0, #1
    fcc2:	7818      	ldrb	r0, [r3, #0]
    fcc4:	1c5a      	adds	r2, r3, #1
    fcc6:	287f      	cmp	r0, #127	; 0x7f
    fcc8:	d901      	bls.n	fcce <_mqtt_recv_handler+0xce>
    fcca:	1c13      	adds	r3, r2, #0
    fccc:	e7f9      	b.n	fcc2 <_mqtt_recv_handler+0xc2>
    fcce:	7858      	ldrb	r0, [r3, #1]
    fcd0:	789e      	ldrb	r6, [r3, #2]
    fcd2:	0200      	lsls	r0, r0, #8
    fcd4:	4330      	orrs	r0, r6
    fcd6:	3303      	adds	r3, #3
    fcd8:	2600      	movs	r6, #0
    fcda:	6068      	str	r0, [r5, #4]
    fcdc:	9301      	str	r3, [sp, #4]
    fcde:	1818      	adds	r0, r3, r0
    fce0:	42b7      	cmp	r7, r6
    fce2:	d004      	beq.n	fcee <_mqtt_recv_handler+0xee>
    fce4:	7806      	ldrb	r6, [r0, #0]
    fce6:	7843      	ldrb	r3, [r0, #1]
    fce8:	0236      	lsls	r6, r6, #8
    fcea:	431e      	orrs	r6, r3
    fcec:	3002      	adds	r0, #2
    fcee:	1851      	adds	r1, r2, r1
    fcf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fcf2:	60a8      	str	r0, [r5, #8]
    fcf4:	1a08      	subs	r0, r1, r0
    fcf6:	60e8      	str	r0, [r5, #12]
    fcf8:	2b00      	cmp	r3, #0
    fcfa:	d003      	beq.n	fd04 <_mqtt_recv_handler+0x104>
    fcfc:	1c20      	adds	r0, r4, #0
    fcfe:	2106      	movs	r1, #6
    fd00:	1c2a      	adds	r2, r5, #0
    fd02:	4798      	blx	r3
    fd04:	7c2b      	ldrb	r3, [r5, #16]
    fd06:	079b      	lsls	r3, r3, #30
    fd08:	0f9b      	lsrs	r3, r3, #30
    fd0a:	2b01      	cmp	r3, #1
    fd0c:	d10b      	bne.n	fd26 <_mqtt_recv_handler+0x126>
    fd0e:	b2b6      	uxth	r6, r6
    fd10:	1c20      	adds	r0, r4, #0
    fd12:	2140      	movs	r1, #64	; 0x40
    fd14:	1c32      	adds	r2, r6, #0
    fd16:	4b28      	ldr	r3, [pc, #160]	; (fdb8 <_mqtt_recv_handler+0x1b8>)
    fd18:	4798      	blx	r3
    fd1a:	2800      	cmp	r0, #0
    fd1c:	d048      	beq.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fd1e:	1c23      	adds	r3, r4, #0
    fd20:	3348      	adds	r3, #72	; 0x48
    fd22:	2240      	movs	r2, #64	; 0x40
    fd24:	e00c      	b.n	fd40 <_mqtt_recv_handler+0x140>
    fd26:	2b02      	cmp	r3, #2
    fd28:	d142      	bne.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fd2a:	b2b6      	uxth	r6, r6
    fd2c:	1c20      	adds	r0, r4, #0
    fd2e:	2150      	movs	r1, #80	; 0x50
    fd30:	1c32      	adds	r2, r6, #0
    fd32:	4b21      	ldr	r3, [pc, #132]	; (fdb8 <_mqtt_recv_handler+0x1b8>)
    fd34:	4798      	blx	r3
    fd36:	2800      	cmp	r0, #0
    fd38:	d03a      	beq.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fd3a:	1c23      	adds	r3, r4, #0
    fd3c:	3348      	adds	r3, #72	; 0x48
    fd3e:	2250      	movs	r2, #80	; 0x50
    fd40:	344a      	adds	r4, #74	; 0x4a
    fd42:	701a      	strb	r2, [r3, #0]
    fd44:	8026      	strh	r6, [r4, #0]
    fd46:	e033      	b.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fd48:	7885      	ldrb	r5, [r0, #2]
    fd4a:	78c3      	ldrb	r3, [r0, #3]
    fd4c:	022d      	lsls	r5, r5, #8
    fd4e:	431d      	orrs	r5, r3
    fd50:	1c20      	adds	r0, r4, #0
    fd52:	2162      	movs	r1, #98	; 0x62
    fd54:	1c2a      	adds	r2, r5, #0
    fd56:	4b18      	ldr	r3, [pc, #96]	; (fdb8 <_mqtt_recv_handler+0x1b8>)
    fd58:	4798      	blx	r3
    fd5a:	2800      	cmp	r0, #0
    fd5c:	d028      	beq.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fd5e:	1c23      	adds	r3, r4, #0
    fd60:	3348      	adds	r3, #72	; 0x48
    fd62:	2260      	movs	r2, #96	; 0x60
    fd64:	e00d      	b.n	fd82 <_mqtt_recv_handler+0x182>
    fd66:	7885      	ldrb	r5, [r0, #2]
    fd68:	78c3      	ldrb	r3, [r0, #3]
    fd6a:	022d      	lsls	r5, r5, #8
    fd6c:	431d      	orrs	r5, r3
    fd6e:	1c20      	adds	r0, r4, #0
    fd70:	2170      	movs	r1, #112	; 0x70
    fd72:	1c2a      	adds	r2, r5, #0
    fd74:	4b10      	ldr	r3, [pc, #64]	; (fdb8 <_mqtt_recv_handler+0x1b8>)
    fd76:	4798      	blx	r3
    fd78:	2800      	cmp	r0, #0
    fd7a:	d019      	beq.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fd7c:	1c23      	adds	r3, r4, #0
    fd7e:	3348      	adds	r3, #72	; 0x48
    fd80:	2270      	movs	r2, #112	; 0x70
    fd82:	344a      	adds	r4, #74	; 0x4a
    fd84:	701a      	strb	r2, [r3, #0]
    fd86:	8025      	strh	r5, [r4, #0]
    fd88:	e012      	b.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fd8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fd8c:	2b00      	cmp	r3, #0
    fd8e:	d00f      	beq.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fd90:	1c20      	adds	r0, r4, #0
    fd92:	2102      	movs	r1, #2
    fd94:	e00a      	b.n	fdac <_mqtt_recv_handler+0x1ac>
    fd96:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fd98:	2b00      	cmp	r3, #0
    fd9a:	d009      	beq.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fd9c:	1c20      	adds	r0, r4, #0
    fd9e:	2103      	movs	r1, #3
    fda0:	e004      	b.n	fdac <_mqtt_recv_handler+0x1ac>
    fda2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fda4:	2b00      	cmp	r3, #0
    fda6:	d003      	beq.n	fdb0 <_mqtt_recv_handler+0x1b0>
    fda8:	1c20      	adds	r0, r4, #0
    fdaa:	2104      	movs	r1, #4
    fdac:	aa01      	add	r2, sp, #4
    fdae:	4798      	blx	r3
    fdb0:	b007      	add	sp, #28
    fdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdb4:	0000fb5d 	.word	0x0000fb5d
    fdb8:	0000faa9 	.word	0x0000faa9

0000fdbc <mqtt_recv_packet>:
    fdbc:	b538      	push	{r3, r4, r5, lr}
    fdbe:	1e04      	subs	r4, r0, #0
    fdc0:	d017      	beq.n	fdf2 <mqtt_recv_packet+0x36>
    fdc2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    fdc4:	6e83      	ldr	r3, [r0, #104]	; 0x68
    fdc6:	429a      	cmp	r2, r3
    fdc8:	d906      	bls.n	fdd8 <mqtt_recv_packet+0x1c>
    fdca:	238b      	movs	r3, #139	; 0x8b
    fdcc:	425b      	negs	r3, r3
    fdce:	64c3      	str	r3, [r0, #76]	; 0x4c
    fdd0:	2100      	movs	r1, #0
    fdd2:	4b08      	ldr	r3, [pc, #32]	; (fdf4 <mqtt_recv_packet+0x38>)
    fdd4:	4798      	blx	r3
    fdd6:	e00c      	b.n	fdf2 <mqtt_recv_packet+0x36>
    fdd8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    fdda:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fddc:	2002      	movs	r0, #2
    fdde:	1899      	adds	r1, r3, r2
    fde0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    fde2:	5620      	ldrsb	r0, [r4, r0]
    fde4:	1a9a      	subs	r2, r3, r2
    fde6:	b292      	uxth	r2, r2
    fde8:	2300      	movs	r3, #0
    fdea:	4d03      	ldr	r5, [pc, #12]	; (fdf8 <mqtt_recv_packet+0x3c>)
    fdec:	47a8      	blx	r5
    fdee:	2800      	cmp	r0, #0
    fdf0:	d1f2      	bne.n	fdd8 <mqtt_recv_packet+0x1c>
    fdf2:	bd38      	pop	{r3, r4, r5, pc}
    fdf4:	0000fb5d 	.word	0x0000fb5d
    fdf8:	000068fd 	.word	0x000068fd

0000fdfc <mqtt_recved_packet>:
    fdfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fdfe:	1e04      	subs	r4, r0, #0
    fe00:	d042      	beq.n	fe88 <mqtt_recved_packet+0x8c>
    fe02:	6c63      	ldr	r3, [r4, #68]	; 0x44
    fe04:	6e67      	ldr	r7, [r4, #100]	; 0x64
    fe06:	18ca      	adds	r2, r1, r3
    fe08:	2301      	movs	r3, #1
    fe0a:	9701      	str	r7, [sp, #4]
    fe0c:	6462      	str	r2, [r4, #68]	; 0x44
    fe0e:	2600      	movs	r6, #0
    fe10:	1c1d      	adds	r5, r3, #0
    fe12:	42a9      	cmp	r1, r5
    fe14:	dc03      	bgt.n	fe1e <mqtt_recved_packet+0x22>
    fe16:	1c20      	adds	r0, r4, #0
    fe18:	4b1c      	ldr	r3, [pc, #112]	; (fe8c <mqtt_recved_packet+0x90>)
    fe1a:	4798      	blx	r3
    fe1c:	e034      	b.n	fe88 <mqtt_recved_packet+0x8c>
    fe1e:	9f01      	ldr	r7, [sp, #4]
    fe20:	5d78      	ldrb	r0, [r7, r5]
    fe22:	01df      	lsls	r7, r3, #7
    fe24:	46bc      	mov	ip, r7
    fe26:	2d03      	cmp	r5, #3
    fe28:	d101      	bne.n	fe2e <mqtt_recved_packet+0x32>
    fe2a:	234d      	movs	r3, #77	; 0x4d
    fe2c:	e00e      	b.n	fe4c <mqtt_recved_packet+0x50>
    fe2e:	277f      	movs	r7, #127	; 0x7f
    fe30:	4007      	ands	r7, r0
    fe32:	437b      	muls	r3, r7
    fe34:	b240      	sxtb	r0, r0
    fe36:	3501      	adds	r5, #1
    fe38:	18f6      	adds	r6, r6, r3
    fe3a:	2800      	cmp	r0, #0
    fe3c:	da01      	bge.n	fe42 <mqtt_recved_packet+0x46>
    fe3e:	4663      	mov	r3, ip
    fe40:	e7e7      	b.n	fe12 <mqtt_recved_packet+0x16>
    fe42:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    fe44:	19af      	adds	r7, r5, r6
    fe46:	429f      	cmp	r7, r3
    fe48:	d907      	bls.n	fe5a <mqtt_recved_packet+0x5e>
    fe4a:	238b      	movs	r3, #139	; 0x8b
    fe4c:	425b      	negs	r3, r3
    fe4e:	64e3      	str	r3, [r4, #76]	; 0x4c
    fe50:	1c20      	adds	r0, r4, #0
    fe52:	2100      	movs	r1, #0
    fe54:	4b0e      	ldr	r3, [pc, #56]	; (fe90 <mqtt_recved_packet+0x94>)
    fe56:	4798      	blx	r3
    fe58:	e016      	b.n	fe88 <mqtt_recved_packet+0x8c>
    fe5a:	42ba      	cmp	r2, r7
    fe5c:	d314      	bcc.n	fe88 <mqtt_recved_packet+0x8c>
    fe5e:	4b0d      	ldr	r3, [pc, #52]	; (fe94 <mqtt_recved_packet+0x98>)
    fe60:	1c20      	adds	r0, r4, #0
    fe62:	1c31      	adds	r1, r6, #0
    fe64:	4798      	blx	r3
    fe66:	6c63      	ldr	r3, [r4, #68]	; 0x44
    fe68:	42bb      	cmp	r3, r7
    fe6a:	d102      	bne.n	fe72 <mqtt_recved_packet+0x76>
    fe6c:	2300      	movs	r3, #0
    fe6e:	6463      	str	r3, [r4, #68]	; 0x44
    fe70:	e00a      	b.n	fe88 <mqtt_recved_packet+0x8c>
    fe72:	1b9e      	subs	r6, r3, r6
    fe74:	9b01      	ldr	r3, [sp, #4]
    fe76:	1b75      	subs	r5, r6, r5
    fe78:	19d9      	adds	r1, r3, r7
    fe7a:	1c18      	adds	r0, r3, #0
    fe7c:	1c2a      	adds	r2, r5, #0
    fe7e:	4b06      	ldr	r3, [pc, #24]	; (fe98 <mqtt_recved_packet+0x9c>)
    fe80:	4798      	blx	r3
    fe82:	6465      	str	r5, [r4, #68]	; 0x44
    fe84:	2100      	movs	r1, #0
    fe86:	e7bc      	b.n	fe02 <mqtt_recved_packet+0x6>
    fe88:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    fe8a:	46c0      	nop			; (mov r8, r8)
    fe8c:	0000fdbd 	.word	0x0000fdbd
    fe90:	0000fb5d 	.word	0x0000fb5d
    fe94:	0000fc01 	.word	0x0000fc01
    fe98:	00011fa7 	.word	0x00011fa7

0000fe9c <mqtt_socket_event_handler>:
    fe9c:	b570      	push	{r4, r5, r6, lr}
    fe9e:	4d37      	ldr	r5, [pc, #220]	; (ff7c <mqtt_socket_event_handler+0xe0>)
    fea0:	0086      	lsls	r6, r0, #2
    fea2:	5974      	ldr	r4, [r6, r5]
    fea4:	b086      	sub	sp, #24
    fea6:	2c00      	cmp	r4, #0
    fea8:	d066      	beq.n	ff78 <mqtt_socket_event_handler+0xdc>
    feaa:	2906      	cmp	r1, #6
    feac:	d02b      	beq.n	ff06 <mqtt_socket_event_handler+0x6a>
    feae:	2907      	cmp	r1, #7
    feb0:	d039      	beq.n	ff26 <mqtt_socket_event_handler+0x8a>
    feb2:	2905      	cmp	r1, #5
    feb4:	d160      	bne.n	ff78 <mqtt_socket_event_handler+0xdc>
    feb6:	2001      	movs	r0, #1
    feb8:	5610      	ldrsb	r0, [r2, r0]
    feba:	4b31      	ldr	r3, [pc, #196]	; (ff80 <mqtt_socket_event_handler+0xe4>)
    febc:	4798      	blx	r3
    febe:	9001      	str	r0, [sp, #4]
    fec0:	2800      	cmp	r0, #0
    fec2:	da06      	bge.n	fed2 <mqtt_socket_event_handler+0x36>
    fec4:	2002      	movs	r0, #2
    fec6:	4b2f      	ldr	r3, [pc, #188]	; (ff84 <mqtt_socket_event_handler+0xe8>)
    fec8:	5620      	ldrsb	r0, [r4, r0]
    feca:	4798      	blx	r3
    fecc:	2300      	movs	r3, #0
    fece:	5173      	str	r3, [r6, r5]
    fed0:	e011      	b.n	fef6 <mqtt_socket_event_handler+0x5a>
    fed2:	1c23      	adds	r3, r4, #0
    fed4:	3343      	adds	r3, #67	; 0x43
    fed6:	781a      	ldrb	r2, [r3, #0]
    fed8:	2101      	movs	r1, #1
    feda:	430a      	orrs	r2, r1
    fedc:	701a      	strb	r2, [r3, #0]
    fede:	331d      	adds	r3, #29
    fee0:	881b      	ldrh	r3, [r3, #0]
    fee2:	2b00      	cmp	r3, #0
    fee4:	d004      	beq.n	fef0 <mqtt_socket_event_handler+0x54>
    fee6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    fee8:	6d21      	ldr	r1, [r4, #80]	; 0x50
    feea:	2200      	movs	r2, #0
    feec:	4b26      	ldr	r3, [pc, #152]	; (ff88 <mqtt_socket_event_handler+0xec>)
    feee:	4798      	blx	r3
    fef0:	1c20      	adds	r0, r4, #0
    fef2:	4b26      	ldr	r3, [pc, #152]	; (ff8c <mqtt_socket_event_handler+0xf0>)
    fef4:	4798      	blx	r3
    fef6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    fef8:	2b00      	cmp	r3, #0
    fefa:	d03d      	beq.n	ff78 <mqtt_socket_event_handler+0xdc>
    fefc:	1c20      	adds	r0, r4, #0
    fefe:	2100      	movs	r1, #0
    ff00:	aa01      	add	r2, sp, #4
    ff02:	4798      	blx	r3
    ff04:	e038      	b.n	ff78 <mqtt_socket_event_handler+0xdc>
    ff06:	2304      	movs	r3, #4
    ff08:	5ed1      	ldrsh	r1, [r2, r3]
    ff0a:	2900      	cmp	r1, #0
    ff0c:	dd03      	ble.n	ff16 <mqtt_socket_event_handler+0x7a>
    ff0e:	1c20      	adds	r0, r4, #0
    ff10:	4b1f      	ldr	r3, [pc, #124]	; (ff90 <mqtt_socket_event_handler+0xf4>)
    ff12:	4798      	blx	r3
    ff14:	e003      	b.n	ff1e <mqtt_socket_event_handler+0x82>
    ff16:	1c0b      	adds	r3, r1, #0
    ff18:	1c08      	adds	r0, r1, #0
    ff1a:	330d      	adds	r3, #13
    ff1c:	d11a      	bne.n	ff54 <mqtt_socket_event_handler+0xb8>
    ff1e:	4b1b      	ldr	r3, [pc, #108]	; (ff8c <mqtt_socket_event_handler+0xf0>)
    ff20:	1c20      	adds	r0, r4, #0
    ff22:	4798      	blx	r3
    ff24:	e028      	b.n	ff78 <mqtt_socket_event_handler+0xdc>
    ff26:	1c23      	adds	r3, r4, #0
    ff28:	3343      	adds	r3, #67	; 0x43
    ff2a:	8810      	ldrh	r0, [r2, #0]
    ff2c:	781a      	ldrb	r2, [r3, #0]
    ff2e:	0751      	lsls	r1, r2, #29
    ff30:	d402      	bmi.n	ff38 <mqtt_socket_event_handler+0x9c>
    ff32:	2108      	movs	r1, #8
    ff34:	438a      	bics	r2, r1
    ff36:	701a      	strb	r2, [r3, #0]
    ff38:	781a      	ldrb	r2, [r3, #0]
    ff3a:	2104      	movs	r1, #4
    ff3c:	438a      	bics	r2, r1
    ff3e:	701a      	strb	r2, [r3, #0]
    ff40:	06d3      	lsls	r3, r2, #27
    ff42:	0fde      	lsrs	r6, r3, #31
    ff44:	b200      	sxth	r0, r0
    ff46:	2b00      	cmp	r3, #0
    ff48:	db02      	blt.n	ff50 <mqtt_socket_event_handler+0xb4>
    ff4a:	2800      	cmp	r0, #0
    ff4c:	da08      	bge.n	ff60 <mqtt_socket_event_handler+0xc4>
    ff4e:	e001      	b.n	ff54 <mqtt_socket_event_handler+0xb8>
    ff50:	2800      	cmp	r0, #0
    ff52:	da02      	bge.n	ff5a <mqtt_socket_event_handler+0xbe>
    ff54:	4b0a      	ldr	r3, [pc, #40]	; (ff80 <mqtt_socket_event_handler+0xe4>)
    ff56:	4798      	blx	r3
    ff58:	64e0      	str	r0, [r4, #76]	; 0x4c
    ff5a:	1c20      	adds	r0, r4, #0
    ff5c:	4b0d      	ldr	r3, [pc, #52]	; (ff94 <mqtt_socket_event_handler+0xf8>)
    ff5e:	e7e0      	b.n	ff22 <mqtt_socket_event_handler+0x86>
    ff60:	1c25      	adds	r5, r4, #0
    ff62:	3548      	adds	r5, #72	; 0x48
    ff64:	7829      	ldrb	r1, [r5, #0]
    ff66:	2900      	cmp	r1, #0
    ff68:	d006      	beq.n	ff78 <mqtt_socket_event_handler+0xdc>
    ff6a:	1c23      	adds	r3, r4, #0
    ff6c:	334a      	adds	r3, #74	; 0x4a
    ff6e:	881a      	ldrh	r2, [r3, #0]
    ff70:	1c20      	adds	r0, r4, #0
    ff72:	4b09      	ldr	r3, [pc, #36]	; (ff98 <mqtt_socket_event_handler+0xfc>)
    ff74:	4798      	blx	r3
    ff76:	702e      	strb	r6, [r5, #0]
    ff78:	b006      	add	sp, #24
    ff7a:	bd70      	pop	{r4, r5, r6, pc}
    ff7c:	200003e0 	.word	0x200003e0
    ff80:	0000f18d 	.word	0x0000f18d
    ff84:	00006aa5 	.word	0x00006aa5
    ff88:	00002365 	.word	0x00002365
    ff8c:	0000fdbd 	.word	0x0000fdbd
    ff90:	0000fdfd 	.word	0x0000fdfd
    ff94:	0000fb0d 	.word	0x0000fb0d
    ff98:	0000faa9 	.word	0x0000faa9

0000ff9c <__gnu_thumb1_case_uqi>:
    ff9c:	b402      	push	{r1}
    ff9e:	4671      	mov	r1, lr
    ffa0:	0849      	lsrs	r1, r1, #1
    ffa2:	0049      	lsls	r1, r1, #1
    ffa4:	5c09      	ldrb	r1, [r1, r0]
    ffa6:	0049      	lsls	r1, r1, #1
    ffa8:	448e      	add	lr, r1
    ffaa:	bc02      	pop	{r1}
    ffac:	4770      	bx	lr
    ffae:	46c0      	nop			; (mov r8, r8)

0000ffb0 <__udivsi3>:
    ffb0:	2200      	movs	r2, #0
    ffb2:	0843      	lsrs	r3, r0, #1
    ffb4:	428b      	cmp	r3, r1
    ffb6:	d374      	bcc.n	100a2 <__udivsi3+0xf2>
    ffb8:	0903      	lsrs	r3, r0, #4
    ffba:	428b      	cmp	r3, r1
    ffbc:	d35f      	bcc.n	1007e <__udivsi3+0xce>
    ffbe:	0a03      	lsrs	r3, r0, #8
    ffc0:	428b      	cmp	r3, r1
    ffc2:	d344      	bcc.n	1004e <__udivsi3+0x9e>
    ffc4:	0b03      	lsrs	r3, r0, #12
    ffc6:	428b      	cmp	r3, r1
    ffc8:	d328      	bcc.n	1001c <__udivsi3+0x6c>
    ffca:	0c03      	lsrs	r3, r0, #16
    ffcc:	428b      	cmp	r3, r1
    ffce:	d30d      	bcc.n	ffec <__udivsi3+0x3c>
    ffd0:	22ff      	movs	r2, #255	; 0xff
    ffd2:	0209      	lsls	r1, r1, #8
    ffd4:	ba12      	rev	r2, r2
    ffd6:	0c03      	lsrs	r3, r0, #16
    ffd8:	428b      	cmp	r3, r1
    ffda:	d302      	bcc.n	ffe2 <__udivsi3+0x32>
    ffdc:	1212      	asrs	r2, r2, #8
    ffde:	0209      	lsls	r1, r1, #8
    ffe0:	d065      	beq.n	100ae <__udivsi3+0xfe>
    ffe2:	0b03      	lsrs	r3, r0, #12
    ffe4:	428b      	cmp	r3, r1
    ffe6:	d319      	bcc.n	1001c <__udivsi3+0x6c>
    ffe8:	e000      	b.n	ffec <__udivsi3+0x3c>
    ffea:	0a09      	lsrs	r1, r1, #8
    ffec:	0bc3      	lsrs	r3, r0, #15
    ffee:	428b      	cmp	r3, r1
    fff0:	d301      	bcc.n	fff6 <__udivsi3+0x46>
    fff2:	03cb      	lsls	r3, r1, #15
    fff4:	1ac0      	subs	r0, r0, r3
    fff6:	4152      	adcs	r2, r2
    fff8:	0b83      	lsrs	r3, r0, #14
    fffa:	428b      	cmp	r3, r1
    fffc:	d301      	bcc.n	10002 <__udivsi3+0x52>
    fffe:	038b      	lsls	r3, r1, #14
   10000:	1ac0      	subs	r0, r0, r3
   10002:	4152      	adcs	r2, r2
   10004:	0b43      	lsrs	r3, r0, #13
   10006:	428b      	cmp	r3, r1
   10008:	d301      	bcc.n	1000e <__udivsi3+0x5e>
   1000a:	034b      	lsls	r3, r1, #13
   1000c:	1ac0      	subs	r0, r0, r3
   1000e:	4152      	adcs	r2, r2
   10010:	0b03      	lsrs	r3, r0, #12
   10012:	428b      	cmp	r3, r1
   10014:	d301      	bcc.n	1001a <__udivsi3+0x6a>
   10016:	030b      	lsls	r3, r1, #12
   10018:	1ac0      	subs	r0, r0, r3
   1001a:	4152      	adcs	r2, r2
   1001c:	0ac3      	lsrs	r3, r0, #11
   1001e:	428b      	cmp	r3, r1
   10020:	d301      	bcc.n	10026 <__udivsi3+0x76>
   10022:	02cb      	lsls	r3, r1, #11
   10024:	1ac0      	subs	r0, r0, r3
   10026:	4152      	adcs	r2, r2
   10028:	0a83      	lsrs	r3, r0, #10
   1002a:	428b      	cmp	r3, r1
   1002c:	d301      	bcc.n	10032 <__udivsi3+0x82>
   1002e:	028b      	lsls	r3, r1, #10
   10030:	1ac0      	subs	r0, r0, r3
   10032:	4152      	adcs	r2, r2
   10034:	0a43      	lsrs	r3, r0, #9
   10036:	428b      	cmp	r3, r1
   10038:	d301      	bcc.n	1003e <__udivsi3+0x8e>
   1003a:	024b      	lsls	r3, r1, #9
   1003c:	1ac0      	subs	r0, r0, r3
   1003e:	4152      	adcs	r2, r2
   10040:	0a03      	lsrs	r3, r0, #8
   10042:	428b      	cmp	r3, r1
   10044:	d301      	bcc.n	1004a <__udivsi3+0x9a>
   10046:	020b      	lsls	r3, r1, #8
   10048:	1ac0      	subs	r0, r0, r3
   1004a:	4152      	adcs	r2, r2
   1004c:	d2cd      	bcs.n	ffea <__udivsi3+0x3a>
   1004e:	09c3      	lsrs	r3, r0, #7
   10050:	428b      	cmp	r3, r1
   10052:	d301      	bcc.n	10058 <__udivsi3+0xa8>
   10054:	01cb      	lsls	r3, r1, #7
   10056:	1ac0      	subs	r0, r0, r3
   10058:	4152      	adcs	r2, r2
   1005a:	0983      	lsrs	r3, r0, #6
   1005c:	428b      	cmp	r3, r1
   1005e:	d301      	bcc.n	10064 <__udivsi3+0xb4>
   10060:	018b      	lsls	r3, r1, #6
   10062:	1ac0      	subs	r0, r0, r3
   10064:	4152      	adcs	r2, r2
   10066:	0943      	lsrs	r3, r0, #5
   10068:	428b      	cmp	r3, r1
   1006a:	d301      	bcc.n	10070 <__udivsi3+0xc0>
   1006c:	014b      	lsls	r3, r1, #5
   1006e:	1ac0      	subs	r0, r0, r3
   10070:	4152      	adcs	r2, r2
   10072:	0903      	lsrs	r3, r0, #4
   10074:	428b      	cmp	r3, r1
   10076:	d301      	bcc.n	1007c <__udivsi3+0xcc>
   10078:	010b      	lsls	r3, r1, #4
   1007a:	1ac0      	subs	r0, r0, r3
   1007c:	4152      	adcs	r2, r2
   1007e:	08c3      	lsrs	r3, r0, #3
   10080:	428b      	cmp	r3, r1
   10082:	d301      	bcc.n	10088 <__udivsi3+0xd8>
   10084:	00cb      	lsls	r3, r1, #3
   10086:	1ac0      	subs	r0, r0, r3
   10088:	4152      	adcs	r2, r2
   1008a:	0883      	lsrs	r3, r0, #2
   1008c:	428b      	cmp	r3, r1
   1008e:	d301      	bcc.n	10094 <__udivsi3+0xe4>
   10090:	008b      	lsls	r3, r1, #2
   10092:	1ac0      	subs	r0, r0, r3
   10094:	4152      	adcs	r2, r2
   10096:	0843      	lsrs	r3, r0, #1
   10098:	428b      	cmp	r3, r1
   1009a:	d301      	bcc.n	100a0 <__udivsi3+0xf0>
   1009c:	004b      	lsls	r3, r1, #1
   1009e:	1ac0      	subs	r0, r0, r3
   100a0:	4152      	adcs	r2, r2
   100a2:	1a41      	subs	r1, r0, r1
   100a4:	d200      	bcs.n	100a8 <__udivsi3+0xf8>
   100a6:	4601      	mov	r1, r0
   100a8:	4152      	adcs	r2, r2
   100aa:	4610      	mov	r0, r2
   100ac:	4770      	bx	lr
   100ae:	e7ff      	b.n	100b0 <__udivsi3+0x100>
   100b0:	b501      	push	{r0, lr}
   100b2:	2000      	movs	r0, #0
   100b4:	f000 f8f0 	bl	10298 <__aeabi_idiv0>
   100b8:	bd02      	pop	{r1, pc}
   100ba:	46c0      	nop			; (mov r8, r8)

000100bc <__aeabi_uidivmod>:
   100bc:	2900      	cmp	r1, #0
   100be:	d0f7      	beq.n	100b0 <__udivsi3+0x100>
   100c0:	e776      	b.n	ffb0 <__udivsi3>
   100c2:	4770      	bx	lr

000100c4 <__divsi3>:
   100c4:	4603      	mov	r3, r0
   100c6:	430b      	orrs	r3, r1
   100c8:	d47f      	bmi.n	101ca <__divsi3+0x106>
   100ca:	2200      	movs	r2, #0
   100cc:	0843      	lsrs	r3, r0, #1
   100ce:	428b      	cmp	r3, r1
   100d0:	d374      	bcc.n	101bc <__divsi3+0xf8>
   100d2:	0903      	lsrs	r3, r0, #4
   100d4:	428b      	cmp	r3, r1
   100d6:	d35f      	bcc.n	10198 <__divsi3+0xd4>
   100d8:	0a03      	lsrs	r3, r0, #8
   100da:	428b      	cmp	r3, r1
   100dc:	d344      	bcc.n	10168 <__divsi3+0xa4>
   100de:	0b03      	lsrs	r3, r0, #12
   100e0:	428b      	cmp	r3, r1
   100e2:	d328      	bcc.n	10136 <__divsi3+0x72>
   100e4:	0c03      	lsrs	r3, r0, #16
   100e6:	428b      	cmp	r3, r1
   100e8:	d30d      	bcc.n	10106 <__divsi3+0x42>
   100ea:	22ff      	movs	r2, #255	; 0xff
   100ec:	0209      	lsls	r1, r1, #8
   100ee:	ba12      	rev	r2, r2
   100f0:	0c03      	lsrs	r3, r0, #16
   100f2:	428b      	cmp	r3, r1
   100f4:	d302      	bcc.n	100fc <__divsi3+0x38>
   100f6:	1212      	asrs	r2, r2, #8
   100f8:	0209      	lsls	r1, r1, #8
   100fa:	d065      	beq.n	101c8 <__divsi3+0x104>
   100fc:	0b03      	lsrs	r3, r0, #12
   100fe:	428b      	cmp	r3, r1
   10100:	d319      	bcc.n	10136 <__divsi3+0x72>
   10102:	e000      	b.n	10106 <__divsi3+0x42>
   10104:	0a09      	lsrs	r1, r1, #8
   10106:	0bc3      	lsrs	r3, r0, #15
   10108:	428b      	cmp	r3, r1
   1010a:	d301      	bcc.n	10110 <__divsi3+0x4c>
   1010c:	03cb      	lsls	r3, r1, #15
   1010e:	1ac0      	subs	r0, r0, r3
   10110:	4152      	adcs	r2, r2
   10112:	0b83      	lsrs	r3, r0, #14
   10114:	428b      	cmp	r3, r1
   10116:	d301      	bcc.n	1011c <__divsi3+0x58>
   10118:	038b      	lsls	r3, r1, #14
   1011a:	1ac0      	subs	r0, r0, r3
   1011c:	4152      	adcs	r2, r2
   1011e:	0b43      	lsrs	r3, r0, #13
   10120:	428b      	cmp	r3, r1
   10122:	d301      	bcc.n	10128 <__divsi3+0x64>
   10124:	034b      	lsls	r3, r1, #13
   10126:	1ac0      	subs	r0, r0, r3
   10128:	4152      	adcs	r2, r2
   1012a:	0b03      	lsrs	r3, r0, #12
   1012c:	428b      	cmp	r3, r1
   1012e:	d301      	bcc.n	10134 <__divsi3+0x70>
   10130:	030b      	lsls	r3, r1, #12
   10132:	1ac0      	subs	r0, r0, r3
   10134:	4152      	adcs	r2, r2
   10136:	0ac3      	lsrs	r3, r0, #11
   10138:	428b      	cmp	r3, r1
   1013a:	d301      	bcc.n	10140 <__divsi3+0x7c>
   1013c:	02cb      	lsls	r3, r1, #11
   1013e:	1ac0      	subs	r0, r0, r3
   10140:	4152      	adcs	r2, r2
   10142:	0a83      	lsrs	r3, r0, #10
   10144:	428b      	cmp	r3, r1
   10146:	d301      	bcc.n	1014c <__divsi3+0x88>
   10148:	028b      	lsls	r3, r1, #10
   1014a:	1ac0      	subs	r0, r0, r3
   1014c:	4152      	adcs	r2, r2
   1014e:	0a43      	lsrs	r3, r0, #9
   10150:	428b      	cmp	r3, r1
   10152:	d301      	bcc.n	10158 <__divsi3+0x94>
   10154:	024b      	lsls	r3, r1, #9
   10156:	1ac0      	subs	r0, r0, r3
   10158:	4152      	adcs	r2, r2
   1015a:	0a03      	lsrs	r3, r0, #8
   1015c:	428b      	cmp	r3, r1
   1015e:	d301      	bcc.n	10164 <__divsi3+0xa0>
   10160:	020b      	lsls	r3, r1, #8
   10162:	1ac0      	subs	r0, r0, r3
   10164:	4152      	adcs	r2, r2
   10166:	d2cd      	bcs.n	10104 <__divsi3+0x40>
   10168:	09c3      	lsrs	r3, r0, #7
   1016a:	428b      	cmp	r3, r1
   1016c:	d301      	bcc.n	10172 <__divsi3+0xae>
   1016e:	01cb      	lsls	r3, r1, #7
   10170:	1ac0      	subs	r0, r0, r3
   10172:	4152      	adcs	r2, r2
   10174:	0983      	lsrs	r3, r0, #6
   10176:	428b      	cmp	r3, r1
   10178:	d301      	bcc.n	1017e <__divsi3+0xba>
   1017a:	018b      	lsls	r3, r1, #6
   1017c:	1ac0      	subs	r0, r0, r3
   1017e:	4152      	adcs	r2, r2
   10180:	0943      	lsrs	r3, r0, #5
   10182:	428b      	cmp	r3, r1
   10184:	d301      	bcc.n	1018a <__divsi3+0xc6>
   10186:	014b      	lsls	r3, r1, #5
   10188:	1ac0      	subs	r0, r0, r3
   1018a:	4152      	adcs	r2, r2
   1018c:	0903      	lsrs	r3, r0, #4
   1018e:	428b      	cmp	r3, r1
   10190:	d301      	bcc.n	10196 <__divsi3+0xd2>
   10192:	010b      	lsls	r3, r1, #4
   10194:	1ac0      	subs	r0, r0, r3
   10196:	4152      	adcs	r2, r2
   10198:	08c3      	lsrs	r3, r0, #3
   1019a:	428b      	cmp	r3, r1
   1019c:	d301      	bcc.n	101a2 <__divsi3+0xde>
   1019e:	00cb      	lsls	r3, r1, #3
   101a0:	1ac0      	subs	r0, r0, r3
   101a2:	4152      	adcs	r2, r2
   101a4:	0883      	lsrs	r3, r0, #2
   101a6:	428b      	cmp	r3, r1
   101a8:	d301      	bcc.n	101ae <__divsi3+0xea>
   101aa:	008b      	lsls	r3, r1, #2
   101ac:	1ac0      	subs	r0, r0, r3
   101ae:	4152      	adcs	r2, r2
   101b0:	0843      	lsrs	r3, r0, #1
   101b2:	428b      	cmp	r3, r1
   101b4:	d301      	bcc.n	101ba <__divsi3+0xf6>
   101b6:	004b      	lsls	r3, r1, #1
   101b8:	1ac0      	subs	r0, r0, r3
   101ba:	4152      	adcs	r2, r2
   101bc:	1a41      	subs	r1, r0, r1
   101be:	d200      	bcs.n	101c2 <__divsi3+0xfe>
   101c0:	4601      	mov	r1, r0
   101c2:	4152      	adcs	r2, r2
   101c4:	4610      	mov	r0, r2
   101c6:	4770      	bx	lr
   101c8:	e05d      	b.n	10286 <__divsi3+0x1c2>
   101ca:	0fca      	lsrs	r2, r1, #31
   101cc:	d000      	beq.n	101d0 <__divsi3+0x10c>
   101ce:	4249      	negs	r1, r1
   101d0:	1003      	asrs	r3, r0, #32
   101d2:	d300      	bcc.n	101d6 <__divsi3+0x112>
   101d4:	4240      	negs	r0, r0
   101d6:	4053      	eors	r3, r2
   101d8:	2200      	movs	r2, #0
   101da:	469c      	mov	ip, r3
   101dc:	0903      	lsrs	r3, r0, #4
   101de:	428b      	cmp	r3, r1
   101e0:	d32d      	bcc.n	1023e <__divsi3+0x17a>
   101e2:	0a03      	lsrs	r3, r0, #8
   101e4:	428b      	cmp	r3, r1
   101e6:	d312      	bcc.n	1020e <__divsi3+0x14a>
   101e8:	22fc      	movs	r2, #252	; 0xfc
   101ea:	0189      	lsls	r1, r1, #6
   101ec:	ba12      	rev	r2, r2
   101ee:	0a03      	lsrs	r3, r0, #8
   101f0:	428b      	cmp	r3, r1
   101f2:	d30c      	bcc.n	1020e <__divsi3+0x14a>
   101f4:	0189      	lsls	r1, r1, #6
   101f6:	1192      	asrs	r2, r2, #6
   101f8:	428b      	cmp	r3, r1
   101fa:	d308      	bcc.n	1020e <__divsi3+0x14a>
   101fc:	0189      	lsls	r1, r1, #6
   101fe:	1192      	asrs	r2, r2, #6
   10200:	428b      	cmp	r3, r1
   10202:	d304      	bcc.n	1020e <__divsi3+0x14a>
   10204:	0189      	lsls	r1, r1, #6
   10206:	d03a      	beq.n	1027e <__divsi3+0x1ba>
   10208:	1192      	asrs	r2, r2, #6
   1020a:	e000      	b.n	1020e <__divsi3+0x14a>
   1020c:	0989      	lsrs	r1, r1, #6
   1020e:	09c3      	lsrs	r3, r0, #7
   10210:	428b      	cmp	r3, r1
   10212:	d301      	bcc.n	10218 <__divsi3+0x154>
   10214:	01cb      	lsls	r3, r1, #7
   10216:	1ac0      	subs	r0, r0, r3
   10218:	4152      	adcs	r2, r2
   1021a:	0983      	lsrs	r3, r0, #6
   1021c:	428b      	cmp	r3, r1
   1021e:	d301      	bcc.n	10224 <__divsi3+0x160>
   10220:	018b      	lsls	r3, r1, #6
   10222:	1ac0      	subs	r0, r0, r3
   10224:	4152      	adcs	r2, r2
   10226:	0943      	lsrs	r3, r0, #5
   10228:	428b      	cmp	r3, r1
   1022a:	d301      	bcc.n	10230 <__divsi3+0x16c>
   1022c:	014b      	lsls	r3, r1, #5
   1022e:	1ac0      	subs	r0, r0, r3
   10230:	4152      	adcs	r2, r2
   10232:	0903      	lsrs	r3, r0, #4
   10234:	428b      	cmp	r3, r1
   10236:	d301      	bcc.n	1023c <__divsi3+0x178>
   10238:	010b      	lsls	r3, r1, #4
   1023a:	1ac0      	subs	r0, r0, r3
   1023c:	4152      	adcs	r2, r2
   1023e:	08c3      	lsrs	r3, r0, #3
   10240:	428b      	cmp	r3, r1
   10242:	d301      	bcc.n	10248 <__divsi3+0x184>
   10244:	00cb      	lsls	r3, r1, #3
   10246:	1ac0      	subs	r0, r0, r3
   10248:	4152      	adcs	r2, r2
   1024a:	0883      	lsrs	r3, r0, #2
   1024c:	428b      	cmp	r3, r1
   1024e:	d301      	bcc.n	10254 <__divsi3+0x190>
   10250:	008b      	lsls	r3, r1, #2
   10252:	1ac0      	subs	r0, r0, r3
   10254:	4152      	adcs	r2, r2
   10256:	d2d9      	bcs.n	1020c <__divsi3+0x148>
   10258:	0843      	lsrs	r3, r0, #1
   1025a:	428b      	cmp	r3, r1
   1025c:	d301      	bcc.n	10262 <__divsi3+0x19e>
   1025e:	004b      	lsls	r3, r1, #1
   10260:	1ac0      	subs	r0, r0, r3
   10262:	4152      	adcs	r2, r2
   10264:	1a41      	subs	r1, r0, r1
   10266:	d200      	bcs.n	1026a <__divsi3+0x1a6>
   10268:	4601      	mov	r1, r0
   1026a:	4663      	mov	r3, ip
   1026c:	4152      	adcs	r2, r2
   1026e:	105b      	asrs	r3, r3, #1
   10270:	4610      	mov	r0, r2
   10272:	d301      	bcc.n	10278 <__divsi3+0x1b4>
   10274:	4240      	negs	r0, r0
   10276:	2b00      	cmp	r3, #0
   10278:	d500      	bpl.n	1027c <__divsi3+0x1b8>
   1027a:	4249      	negs	r1, r1
   1027c:	4770      	bx	lr
   1027e:	4663      	mov	r3, ip
   10280:	105b      	asrs	r3, r3, #1
   10282:	d300      	bcc.n	10286 <__divsi3+0x1c2>
   10284:	4240      	negs	r0, r0
   10286:	b501      	push	{r0, lr}
   10288:	2000      	movs	r0, #0
   1028a:	f000 f805 	bl	10298 <__aeabi_idiv0>
   1028e:	bd02      	pop	{r1, pc}

00010290 <__aeabi_idivmod>:
   10290:	2900      	cmp	r1, #0
   10292:	d0f8      	beq.n	10286 <__divsi3+0x1c2>
   10294:	e716      	b.n	100c4 <__divsi3>
   10296:	4770      	bx	lr

00010298 <__aeabi_idiv0>:
   10298:	4770      	bx	lr
   1029a:	46c0      	nop			; (mov r8, r8)

0001029c <__aeabi_cdrcmple>:
   1029c:	4684      	mov	ip, r0
   1029e:	1c10      	adds	r0, r2, #0
   102a0:	4662      	mov	r2, ip
   102a2:	468c      	mov	ip, r1
   102a4:	1c19      	adds	r1, r3, #0
   102a6:	4663      	mov	r3, ip
   102a8:	e000      	b.n	102ac <__aeabi_cdcmpeq>
   102aa:	46c0      	nop			; (mov r8, r8)

000102ac <__aeabi_cdcmpeq>:
   102ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   102ae:	f000 ff5d 	bl	1116c <__ledf2>
   102b2:	2800      	cmp	r0, #0
   102b4:	d401      	bmi.n	102ba <__aeabi_cdcmpeq+0xe>
   102b6:	2100      	movs	r1, #0
   102b8:	42c8      	cmn	r0, r1
   102ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000102bc <__aeabi_dcmpeq>:
   102bc:	b510      	push	{r4, lr}
   102be:	f000 feb7 	bl	11030 <__eqdf2>
   102c2:	4240      	negs	r0, r0
   102c4:	3001      	adds	r0, #1
   102c6:	bd10      	pop	{r4, pc}

000102c8 <__aeabi_dcmplt>:
   102c8:	b510      	push	{r4, lr}
   102ca:	f000 ff4f 	bl	1116c <__ledf2>
   102ce:	2800      	cmp	r0, #0
   102d0:	db01      	blt.n	102d6 <__aeabi_dcmplt+0xe>
   102d2:	2000      	movs	r0, #0
   102d4:	bd10      	pop	{r4, pc}
   102d6:	2001      	movs	r0, #1
   102d8:	bd10      	pop	{r4, pc}
   102da:	46c0      	nop			; (mov r8, r8)

000102dc <__aeabi_dcmple>:
   102dc:	b510      	push	{r4, lr}
   102de:	f000 ff45 	bl	1116c <__ledf2>
   102e2:	2800      	cmp	r0, #0
   102e4:	dd01      	ble.n	102ea <__aeabi_dcmple+0xe>
   102e6:	2000      	movs	r0, #0
   102e8:	bd10      	pop	{r4, pc}
   102ea:	2001      	movs	r0, #1
   102ec:	bd10      	pop	{r4, pc}
   102ee:	46c0      	nop			; (mov r8, r8)

000102f0 <__aeabi_dcmpgt>:
   102f0:	b510      	push	{r4, lr}
   102f2:	f000 fed7 	bl	110a4 <__gedf2>
   102f6:	2800      	cmp	r0, #0
   102f8:	dc01      	bgt.n	102fe <__aeabi_dcmpgt+0xe>
   102fa:	2000      	movs	r0, #0
   102fc:	bd10      	pop	{r4, pc}
   102fe:	2001      	movs	r0, #1
   10300:	bd10      	pop	{r4, pc}
   10302:	46c0      	nop			; (mov r8, r8)

00010304 <__aeabi_dcmpge>:
   10304:	b510      	push	{r4, lr}
   10306:	f000 fecd 	bl	110a4 <__gedf2>
   1030a:	2800      	cmp	r0, #0
   1030c:	da01      	bge.n	10312 <__aeabi_dcmpge+0xe>
   1030e:	2000      	movs	r0, #0
   10310:	bd10      	pop	{r4, pc}
   10312:	2001      	movs	r0, #1
   10314:	bd10      	pop	{r4, pc}
   10316:	46c0      	nop			; (mov r8, r8)

00010318 <__aeabi_lmul>:
   10318:	b5f0      	push	{r4, r5, r6, r7, lr}
   1031a:	46ce      	mov	lr, r9
   1031c:	4647      	mov	r7, r8
   1031e:	0415      	lsls	r5, r2, #16
   10320:	0c2d      	lsrs	r5, r5, #16
   10322:	002e      	movs	r6, r5
   10324:	b580      	push	{r7, lr}
   10326:	0407      	lsls	r7, r0, #16
   10328:	0c14      	lsrs	r4, r2, #16
   1032a:	0c3f      	lsrs	r7, r7, #16
   1032c:	4699      	mov	r9, r3
   1032e:	0c03      	lsrs	r3, r0, #16
   10330:	437e      	muls	r6, r7
   10332:	435d      	muls	r5, r3
   10334:	4367      	muls	r7, r4
   10336:	4363      	muls	r3, r4
   10338:	197f      	adds	r7, r7, r5
   1033a:	0c34      	lsrs	r4, r6, #16
   1033c:	19e4      	adds	r4, r4, r7
   1033e:	469c      	mov	ip, r3
   10340:	42a5      	cmp	r5, r4
   10342:	d903      	bls.n	1034c <__aeabi_lmul+0x34>
   10344:	2380      	movs	r3, #128	; 0x80
   10346:	025b      	lsls	r3, r3, #9
   10348:	4698      	mov	r8, r3
   1034a:	44c4      	add	ip, r8
   1034c:	464b      	mov	r3, r9
   1034e:	4351      	muls	r1, r2
   10350:	4343      	muls	r3, r0
   10352:	0436      	lsls	r6, r6, #16
   10354:	0c36      	lsrs	r6, r6, #16
   10356:	0c25      	lsrs	r5, r4, #16
   10358:	0424      	lsls	r4, r4, #16
   1035a:	4465      	add	r5, ip
   1035c:	19a4      	adds	r4, r4, r6
   1035e:	1859      	adds	r1, r3, r1
   10360:	1949      	adds	r1, r1, r5
   10362:	0020      	movs	r0, r4
   10364:	bc0c      	pop	{r2, r3}
   10366:	4690      	mov	r8, r2
   10368:	4699      	mov	r9, r3
   1036a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001036c <__aeabi_d2uiz>:
   1036c:	b570      	push	{r4, r5, r6, lr}
   1036e:	2200      	movs	r2, #0
   10370:	4b0c      	ldr	r3, [pc, #48]	; (103a4 <__aeabi_d2uiz+0x38>)
   10372:	0004      	movs	r4, r0
   10374:	000d      	movs	r5, r1
   10376:	f7ff ffc5 	bl	10304 <__aeabi_dcmpge>
   1037a:	2800      	cmp	r0, #0
   1037c:	d104      	bne.n	10388 <__aeabi_d2uiz+0x1c>
   1037e:	0020      	movs	r0, r4
   10380:	0029      	movs	r1, r5
   10382:	f001 fd0b 	bl	11d9c <__aeabi_d2iz>
   10386:	bd70      	pop	{r4, r5, r6, pc}
   10388:	4b06      	ldr	r3, [pc, #24]	; (103a4 <__aeabi_d2uiz+0x38>)
   1038a:	2200      	movs	r2, #0
   1038c:	0020      	movs	r0, r4
   1038e:	0029      	movs	r1, r5
   10390:	f001 f9ce 	bl	11730 <__aeabi_dsub>
   10394:	f001 fd02 	bl	11d9c <__aeabi_d2iz>
   10398:	2380      	movs	r3, #128	; 0x80
   1039a:	061b      	lsls	r3, r3, #24
   1039c:	469c      	mov	ip, r3
   1039e:	4460      	add	r0, ip
   103a0:	e7f1      	b.n	10386 <__aeabi_d2uiz+0x1a>
   103a2:	46c0      	nop			; (mov r8, r8)
   103a4:	41e00000 	.word	0x41e00000

000103a8 <__aeabi_dadd>:
   103a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103aa:	4645      	mov	r5, r8
   103ac:	46de      	mov	lr, fp
   103ae:	4657      	mov	r7, sl
   103b0:	464e      	mov	r6, r9
   103b2:	030c      	lsls	r4, r1, #12
   103b4:	b5e0      	push	{r5, r6, r7, lr}
   103b6:	004e      	lsls	r6, r1, #1
   103b8:	0fc9      	lsrs	r1, r1, #31
   103ba:	4688      	mov	r8, r1
   103bc:	000d      	movs	r5, r1
   103be:	0a61      	lsrs	r1, r4, #9
   103c0:	0f44      	lsrs	r4, r0, #29
   103c2:	430c      	orrs	r4, r1
   103c4:	00c7      	lsls	r7, r0, #3
   103c6:	0319      	lsls	r1, r3, #12
   103c8:	0058      	lsls	r0, r3, #1
   103ca:	0fdb      	lsrs	r3, r3, #31
   103cc:	469b      	mov	fp, r3
   103ce:	0a4b      	lsrs	r3, r1, #9
   103d0:	0f51      	lsrs	r1, r2, #29
   103d2:	430b      	orrs	r3, r1
   103d4:	0d76      	lsrs	r6, r6, #21
   103d6:	0d40      	lsrs	r0, r0, #21
   103d8:	0019      	movs	r1, r3
   103da:	00d2      	lsls	r2, r2, #3
   103dc:	45d8      	cmp	r8, fp
   103de:	d100      	bne.n	103e2 <__aeabi_dadd+0x3a>
   103e0:	e0ae      	b.n	10540 <__aeabi_dadd+0x198>
   103e2:	1a35      	subs	r5, r6, r0
   103e4:	2d00      	cmp	r5, #0
   103e6:	dc00      	bgt.n	103ea <__aeabi_dadd+0x42>
   103e8:	e0f6      	b.n	105d8 <__aeabi_dadd+0x230>
   103ea:	2800      	cmp	r0, #0
   103ec:	d10f      	bne.n	1040e <__aeabi_dadd+0x66>
   103ee:	4313      	orrs	r3, r2
   103f0:	d100      	bne.n	103f4 <__aeabi_dadd+0x4c>
   103f2:	e0db      	b.n	105ac <__aeabi_dadd+0x204>
   103f4:	1e6b      	subs	r3, r5, #1
   103f6:	2b00      	cmp	r3, #0
   103f8:	d000      	beq.n	103fc <__aeabi_dadd+0x54>
   103fa:	e137      	b.n	1066c <__aeabi_dadd+0x2c4>
   103fc:	1aba      	subs	r2, r7, r2
   103fe:	4297      	cmp	r7, r2
   10400:	41bf      	sbcs	r7, r7
   10402:	1a64      	subs	r4, r4, r1
   10404:	427f      	negs	r7, r7
   10406:	1be4      	subs	r4, r4, r7
   10408:	2601      	movs	r6, #1
   1040a:	0017      	movs	r7, r2
   1040c:	e024      	b.n	10458 <__aeabi_dadd+0xb0>
   1040e:	4bc6      	ldr	r3, [pc, #792]	; (10728 <__aeabi_dadd+0x380>)
   10410:	429e      	cmp	r6, r3
   10412:	d04d      	beq.n	104b0 <__aeabi_dadd+0x108>
   10414:	2380      	movs	r3, #128	; 0x80
   10416:	041b      	lsls	r3, r3, #16
   10418:	4319      	orrs	r1, r3
   1041a:	2d38      	cmp	r5, #56	; 0x38
   1041c:	dd00      	ble.n	10420 <__aeabi_dadd+0x78>
   1041e:	e107      	b.n	10630 <__aeabi_dadd+0x288>
   10420:	2d1f      	cmp	r5, #31
   10422:	dd00      	ble.n	10426 <__aeabi_dadd+0x7e>
   10424:	e138      	b.n	10698 <__aeabi_dadd+0x2f0>
   10426:	2020      	movs	r0, #32
   10428:	1b43      	subs	r3, r0, r5
   1042a:	469a      	mov	sl, r3
   1042c:	000b      	movs	r3, r1
   1042e:	4650      	mov	r0, sl
   10430:	4083      	lsls	r3, r0
   10432:	4699      	mov	r9, r3
   10434:	0013      	movs	r3, r2
   10436:	4648      	mov	r0, r9
   10438:	40eb      	lsrs	r3, r5
   1043a:	4318      	orrs	r0, r3
   1043c:	0003      	movs	r3, r0
   1043e:	4650      	mov	r0, sl
   10440:	4082      	lsls	r2, r0
   10442:	1e50      	subs	r0, r2, #1
   10444:	4182      	sbcs	r2, r0
   10446:	40e9      	lsrs	r1, r5
   10448:	431a      	orrs	r2, r3
   1044a:	1aba      	subs	r2, r7, r2
   1044c:	1a61      	subs	r1, r4, r1
   1044e:	4297      	cmp	r7, r2
   10450:	41a4      	sbcs	r4, r4
   10452:	0017      	movs	r7, r2
   10454:	4264      	negs	r4, r4
   10456:	1b0c      	subs	r4, r1, r4
   10458:	0223      	lsls	r3, r4, #8
   1045a:	d562      	bpl.n	10522 <__aeabi_dadd+0x17a>
   1045c:	0264      	lsls	r4, r4, #9
   1045e:	0a65      	lsrs	r5, r4, #9
   10460:	2d00      	cmp	r5, #0
   10462:	d100      	bne.n	10466 <__aeabi_dadd+0xbe>
   10464:	e0df      	b.n	10626 <__aeabi_dadd+0x27e>
   10466:	0028      	movs	r0, r5
   10468:	f001 fd0e 	bl	11e88 <__clzsi2>
   1046c:	0003      	movs	r3, r0
   1046e:	3b08      	subs	r3, #8
   10470:	2b1f      	cmp	r3, #31
   10472:	dd00      	ble.n	10476 <__aeabi_dadd+0xce>
   10474:	e0d2      	b.n	1061c <__aeabi_dadd+0x274>
   10476:	2220      	movs	r2, #32
   10478:	003c      	movs	r4, r7
   1047a:	1ad2      	subs	r2, r2, r3
   1047c:	409d      	lsls	r5, r3
   1047e:	40d4      	lsrs	r4, r2
   10480:	409f      	lsls	r7, r3
   10482:	4325      	orrs	r5, r4
   10484:	429e      	cmp	r6, r3
   10486:	dd00      	ble.n	1048a <__aeabi_dadd+0xe2>
   10488:	e0c4      	b.n	10614 <__aeabi_dadd+0x26c>
   1048a:	1b9e      	subs	r6, r3, r6
   1048c:	1c73      	adds	r3, r6, #1
   1048e:	2b1f      	cmp	r3, #31
   10490:	dd00      	ble.n	10494 <__aeabi_dadd+0xec>
   10492:	e0f1      	b.n	10678 <__aeabi_dadd+0x2d0>
   10494:	2220      	movs	r2, #32
   10496:	0038      	movs	r0, r7
   10498:	0029      	movs	r1, r5
   1049a:	1ad2      	subs	r2, r2, r3
   1049c:	40d8      	lsrs	r0, r3
   1049e:	4091      	lsls	r1, r2
   104a0:	4097      	lsls	r7, r2
   104a2:	002c      	movs	r4, r5
   104a4:	4301      	orrs	r1, r0
   104a6:	1e78      	subs	r0, r7, #1
   104a8:	4187      	sbcs	r7, r0
   104aa:	40dc      	lsrs	r4, r3
   104ac:	2600      	movs	r6, #0
   104ae:	430f      	orrs	r7, r1
   104b0:	077b      	lsls	r3, r7, #29
   104b2:	d009      	beq.n	104c8 <__aeabi_dadd+0x120>
   104b4:	230f      	movs	r3, #15
   104b6:	403b      	ands	r3, r7
   104b8:	2b04      	cmp	r3, #4
   104ba:	d005      	beq.n	104c8 <__aeabi_dadd+0x120>
   104bc:	1d3b      	adds	r3, r7, #4
   104be:	42bb      	cmp	r3, r7
   104c0:	41bf      	sbcs	r7, r7
   104c2:	427f      	negs	r7, r7
   104c4:	19e4      	adds	r4, r4, r7
   104c6:	001f      	movs	r7, r3
   104c8:	0223      	lsls	r3, r4, #8
   104ca:	d52c      	bpl.n	10526 <__aeabi_dadd+0x17e>
   104cc:	4b96      	ldr	r3, [pc, #600]	; (10728 <__aeabi_dadd+0x380>)
   104ce:	3601      	adds	r6, #1
   104d0:	429e      	cmp	r6, r3
   104d2:	d100      	bne.n	104d6 <__aeabi_dadd+0x12e>
   104d4:	e09a      	b.n	1060c <__aeabi_dadd+0x264>
   104d6:	4645      	mov	r5, r8
   104d8:	4b94      	ldr	r3, [pc, #592]	; (1072c <__aeabi_dadd+0x384>)
   104da:	08ff      	lsrs	r7, r7, #3
   104dc:	401c      	ands	r4, r3
   104de:	0760      	lsls	r0, r4, #29
   104e0:	0576      	lsls	r6, r6, #21
   104e2:	0264      	lsls	r4, r4, #9
   104e4:	4307      	orrs	r7, r0
   104e6:	0b24      	lsrs	r4, r4, #12
   104e8:	0d76      	lsrs	r6, r6, #21
   104ea:	2100      	movs	r1, #0
   104ec:	0324      	lsls	r4, r4, #12
   104ee:	0b23      	lsrs	r3, r4, #12
   104f0:	0d0c      	lsrs	r4, r1, #20
   104f2:	4a8f      	ldr	r2, [pc, #572]	; (10730 <__aeabi_dadd+0x388>)
   104f4:	0524      	lsls	r4, r4, #20
   104f6:	431c      	orrs	r4, r3
   104f8:	4014      	ands	r4, r2
   104fa:	0533      	lsls	r3, r6, #20
   104fc:	4323      	orrs	r3, r4
   104fe:	005b      	lsls	r3, r3, #1
   10500:	07ed      	lsls	r5, r5, #31
   10502:	085b      	lsrs	r3, r3, #1
   10504:	432b      	orrs	r3, r5
   10506:	0038      	movs	r0, r7
   10508:	0019      	movs	r1, r3
   1050a:	bc3c      	pop	{r2, r3, r4, r5}
   1050c:	4690      	mov	r8, r2
   1050e:	4699      	mov	r9, r3
   10510:	46a2      	mov	sl, r4
   10512:	46ab      	mov	fp, r5
   10514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10516:	4664      	mov	r4, ip
   10518:	4304      	orrs	r4, r0
   1051a:	d100      	bne.n	1051e <__aeabi_dadd+0x176>
   1051c:	e211      	b.n	10942 <__aeabi_dadd+0x59a>
   1051e:	0004      	movs	r4, r0
   10520:	4667      	mov	r7, ip
   10522:	077b      	lsls	r3, r7, #29
   10524:	d1c6      	bne.n	104b4 <__aeabi_dadd+0x10c>
   10526:	4645      	mov	r5, r8
   10528:	0760      	lsls	r0, r4, #29
   1052a:	08ff      	lsrs	r7, r7, #3
   1052c:	4307      	orrs	r7, r0
   1052e:	08e4      	lsrs	r4, r4, #3
   10530:	4b7d      	ldr	r3, [pc, #500]	; (10728 <__aeabi_dadd+0x380>)
   10532:	429e      	cmp	r6, r3
   10534:	d030      	beq.n	10598 <__aeabi_dadd+0x1f0>
   10536:	0324      	lsls	r4, r4, #12
   10538:	0576      	lsls	r6, r6, #21
   1053a:	0b24      	lsrs	r4, r4, #12
   1053c:	0d76      	lsrs	r6, r6, #21
   1053e:	e7d4      	b.n	104ea <__aeabi_dadd+0x142>
   10540:	1a33      	subs	r3, r6, r0
   10542:	469a      	mov	sl, r3
   10544:	2b00      	cmp	r3, #0
   10546:	dd78      	ble.n	1063a <__aeabi_dadd+0x292>
   10548:	2800      	cmp	r0, #0
   1054a:	d031      	beq.n	105b0 <__aeabi_dadd+0x208>
   1054c:	4876      	ldr	r0, [pc, #472]	; (10728 <__aeabi_dadd+0x380>)
   1054e:	4286      	cmp	r6, r0
   10550:	d0ae      	beq.n	104b0 <__aeabi_dadd+0x108>
   10552:	2080      	movs	r0, #128	; 0x80
   10554:	0400      	lsls	r0, r0, #16
   10556:	4301      	orrs	r1, r0
   10558:	4653      	mov	r3, sl
   1055a:	2b38      	cmp	r3, #56	; 0x38
   1055c:	dc00      	bgt.n	10560 <__aeabi_dadd+0x1b8>
   1055e:	e0e9      	b.n	10734 <__aeabi_dadd+0x38c>
   10560:	430a      	orrs	r2, r1
   10562:	1e51      	subs	r1, r2, #1
   10564:	418a      	sbcs	r2, r1
   10566:	2100      	movs	r1, #0
   10568:	19d2      	adds	r2, r2, r7
   1056a:	42ba      	cmp	r2, r7
   1056c:	41bf      	sbcs	r7, r7
   1056e:	1909      	adds	r1, r1, r4
   10570:	427c      	negs	r4, r7
   10572:	0017      	movs	r7, r2
   10574:	190c      	adds	r4, r1, r4
   10576:	0223      	lsls	r3, r4, #8
   10578:	d5d3      	bpl.n	10522 <__aeabi_dadd+0x17a>
   1057a:	4b6b      	ldr	r3, [pc, #428]	; (10728 <__aeabi_dadd+0x380>)
   1057c:	3601      	adds	r6, #1
   1057e:	429e      	cmp	r6, r3
   10580:	d100      	bne.n	10584 <__aeabi_dadd+0x1dc>
   10582:	e13a      	b.n	107fa <__aeabi_dadd+0x452>
   10584:	2001      	movs	r0, #1
   10586:	4b69      	ldr	r3, [pc, #420]	; (1072c <__aeabi_dadd+0x384>)
   10588:	401c      	ands	r4, r3
   1058a:	087b      	lsrs	r3, r7, #1
   1058c:	4007      	ands	r7, r0
   1058e:	431f      	orrs	r7, r3
   10590:	07e0      	lsls	r0, r4, #31
   10592:	4307      	orrs	r7, r0
   10594:	0864      	lsrs	r4, r4, #1
   10596:	e78b      	b.n	104b0 <__aeabi_dadd+0x108>
   10598:	0023      	movs	r3, r4
   1059a:	433b      	orrs	r3, r7
   1059c:	d100      	bne.n	105a0 <__aeabi_dadd+0x1f8>
   1059e:	e1cb      	b.n	10938 <__aeabi_dadd+0x590>
   105a0:	2280      	movs	r2, #128	; 0x80
   105a2:	0312      	lsls	r2, r2, #12
   105a4:	4314      	orrs	r4, r2
   105a6:	0324      	lsls	r4, r4, #12
   105a8:	0b24      	lsrs	r4, r4, #12
   105aa:	e79e      	b.n	104ea <__aeabi_dadd+0x142>
   105ac:	002e      	movs	r6, r5
   105ae:	e77f      	b.n	104b0 <__aeabi_dadd+0x108>
   105b0:	0008      	movs	r0, r1
   105b2:	4310      	orrs	r0, r2
   105b4:	d100      	bne.n	105b8 <__aeabi_dadd+0x210>
   105b6:	e0b4      	b.n	10722 <__aeabi_dadd+0x37a>
   105b8:	1e58      	subs	r0, r3, #1
   105ba:	2800      	cmp	r0, #0
   105bc:	d000      	beq.n	105c0 <__aeabi_dadd+0x218>
   105be:	e0de      	b.n	1077e <__aeabi_dadd+0x3d6>
   105c0:	18ba      	adds	r2, r7, r2
   105c2:	42ba      	cmp	r2, r7
   105c4:	419b      	sbcs	r3, r3
   105c6:	1864      	adds	r4, r4, r1
   105c8:	425b      	negs	r3, r3
   105ca:	18e4      	adds	r4, r4, r3
   105cc:	0017      	movs	r7, r2
   105ce:	2601      	movs	r6, #1
   105d0:	0223      	lsls	r3, r4, #8
   105d2:	d5a6      	bpl.n	10522 <__aeabi_dadd+0x17a>
   105d4:	2602      	movs	r6, #2
   105d6:	e7d5      	b.n	10584 <__aeabi_dadd+0x1dc>
   105d8:	2d00      	cmp	r5, #0
   105da:	d16e      	bne.n	106ba <__aeabi_dadd+0x312>
   105dc:	1c70      	adds	r0, r6, #1
   105de:	0540      	lsls	r0, r0, #21
   105e0:	0d40      	lsrs	r0, r0, #21
   105e2:	2801      	cmp	r0, #1
   105e4:	dc00      	bgt.n	105e8 <__aeabi_dadd+0x240>
   105e6:	e0f9      	b.n	107dc <__aeabi_dadd+0x434>
   105e8:	1ab8      	subs	r0, r7, r2
   105ea:	4684      	mov	ip, r0
   105ec:	4287      	cmp	r7, r0
   105ee:	4180      	sbcs	r0, r0
   105f0:	1ae5      	subs	r5, r4, r3
   105f2:	4240      	negs	r0, r0
   105f4:	1a2d      	subs	r5, r5, r0
   105f6:	0228      	lsls	r0, r5, #8
   105f8:	d400      	bmi.n	105fc <__aeabi_dadd+0x254>
   105fa:	e089      	b.n	10710 <__aeabi_dadd+0x368>
   105fc:	1bd7      	subs	r7, r2, r7
   105fe:	42ba      	cmp	r2, r7
   10600:	4192      	sbcs	r2, r2
   10602:	1b1c      	subs	r4, r3, r4
   10604:	4252      	negs	r2, r2
   10606:	1aa5      	subs	r5, r4, r2
   10608:	46d8      	mov	r8, fp
   1060a:	e729      	b.n	10460 <__aeabi_dadd+0xb8>
   1060c:	4645      	mov	r5, r8
   1060e:	2400      	movs	r4, #0
   10610:	2700      	movs	r7, #0
   10612:	e76a      	b.n	104ea <__aeabi_dadd+0x142>
   10614:	4c45      	ldr	r4, [pc, #276]	; (1072c <__aeabi_dadd+0x384>)
   10616:	1af6      	subs	r6, r6, r3
   10618:	402c      	ands	r4, r5
   1061a:	e749      	b.n	104b0 <__aeabi_dadd+0x108>
   1061c:	003d      	movs	r5, r7
   1061e:	3828      	subs	r0, #40	; 0x28
   10620:	4085      	lsls	r5, r0
   10622:	2700      	movs	r7, #0
   10624:	e72e      	b.n	10484 <__aeabi_dadd+0xdc>
   10626:	0038      	movs	r0, r7
   10628:	f001 fc2e 	bl	11e88 <__clzsi2>
   1062c:	3020      	adds	r0, #32
   1062e:	e71d      	b.n	1046c <__aeabi_dadd+0xc4>
   10630:	430a      	orrs	r2, r1
   10632:	1e51      	subs	r1, r2, #1
   10634:	418a      	sbcs	r2, r1
   10636:	2100      	movs	r1, #0
   10638:	e707      	b.n	1044a <__aeabi_dadd+0xa2>
   1063a:	2b00      	cmp	r3, #0
   1063c:	d000      	beq.n	10640 <__aeabi_dadd+0x298>
   1063e:	e0f3      	b.n	10828 <__aeabi_dadd+0x480>
   10640:	1c70      	adds	r0, r6, #1
   10642:	0543      	lsls	r3, r0, #21
   10644:	0d5b      	lsrs	r3, r3, #21
   10646:	2b01      	cmp	r3, #1
   10648:	dc00      	bgt.n	1064c <__aeabi_dadd+0x2a4>
   1064a:	e0ad      	b.n	107a8 <__aeabi_dadd+0x400>
   1064c:	4b36      	ldr	r3, [pc, #216]	; (10728 <__aeabi_dadd+0x380>)
   1064e:	4298      	cmp	r0, r3
   10650:	d100      	bne.n	10654 <__aeabi_dadd+0x2ac>
   10652:	e0d1      	b.n	107f8 <__aeabi_dadd+0x450>
   10654:	18ba      	adds	r2, r7, r2
   10656:	42ba      	cmp	r2, r7
   10658:	41bf      	sbcs	r7, r7
   1065a:	1864      	adds	r4, r4, r1
   1065c:	427f      	negs	r7, r7
   1065e:	19e4      	adds	r4, r4, r7
   10660:	07e7      	lsls	r7, r4, #31
   10662:	0852      	lsrs	r2, r2, #1
   10664:	4317      	orrs	r7, r2
   10666:	0864      	lsrs	r4, r4, #1
   10668:	0006      	movs	r6, r0
   1066a:	e721      	b.n	104b0 <__aeabi_dadd+0x108>
   1066c:	482e      	ldr	r0, [pc, #184]	; (10728 <__aeabi_dadd+0x380>)
   1066e:	4285      	cmp	r5, r0
   10670:	d100      	bne.n	10674 <__aeabi_dadd+0x2cc>
   10672:	e093      	b.n	1079c <__aeabi_dadd+0x3f4>
   10674:	001d      	movs	r5, r3
   10676:	e6d0      	b.n	1041a <__aeabi_dadd+0x72>
   10678:	0029      	movs	r1, r5
   1067a:	3e1f      	subs	r6, #31
   1067c:	40f1      	lsrs	r1, r6
   1067e:	2b20      	cmp	r3, #32
   10680:	d100      	bne.n	10684 <__aeabi_dadd+0x2dc>
   10682:	e08d      	b.n	107a0 <__aeabi_dadd+0x3f8>
   10684:	2240      	movs	r2, #64	; 0x40
   10686:	1ad3      	subs	r3, r2, r3
   10688:	409d      	lsls	r5, r3
   1068a:	432f      	orrs	r7, r5
   1068c:	1e7d      	subs	r5, r7, #1
   1068e:	41af      	sbcs	r7, r5
   10690:	2400      	movs	r4, #0
   10692:	430f      	orrs	r7, r1
   10694:	2600      	movs	r6, #0
   10696:	e744      	b.n	10522 <__aeabi_dadd+0x17a>
   10698:	002b      	movs	r3, r5
   1069a:	0008      	movs	r0, r1
   1069c:	3b20      	subs	r3, #32
   1069e:	40d8      	lsrs	r0, r3
   106a0:	0003      	movs	r3, r0
   106a2:	2d20      	cmp	r5, #32
   106a4:	d100      	bne.n	106a8 <__aeabi_dadd+0x300>
   106a6:	e07d      	b.n	107a4 <__aeabi_dadd+0x3fc>
   106a8:	2040      	movs	r0, #64	; 0x40
   106aa:	1b45      	subs	r5, r0, r5
   106ac:	40a9      	lsls	r1, r5
   106ae:	430a      	orrs	r2, r1
   106b0:	1e51      	subs	r1, r2, #1
   106b2:	418a      	sbcs	r2, r1
   106b4:	2100      	movs	r1, #0
   106b6:	431a      	orrs	r2, r3
   106b8:	e6c7      	b.n	1044a <__aeabi_dadd+0xa2>
   106ba:	2e00      	cmp	r6, #0
   106bc:	d050      	beq.n	10760 <__aeabi_dadd+0x3b8>
   106be:	4e1a      	ldr	r6, [pc, #104]	; (10728 <__aeabi_dadd+0x380>)
   106c0:	42b0      	cmp	r0, r6
   106c2:	d057      	beq.n	10774 <__aeabi_dadd+0x3cc>
   106c4:	2680      	movs	r6, #128	; 0x80
   106c6:	426b      	negs	r3, r5
   106c8:	4699      	mov	r9, r3
   106ca:	0436      	lsls	r6, r6, #16
   106cc:	4334      	orrs	r4, r6
   106ce:	464b      	mov	r3, r9
   106d0:	2b38      	cmp	r3, #56	; 0x38
   106d2:	dd00      	ble.n	106d6 <__aeabi_dadd+0x32e>
   106d4:	e0d6      	b.n	10884 <__aeabi_dadd+0x4dc>
   106d6:	2b1f      	cmp	r3, #31
   106d8:	dd00      	ble.n	106dc <__aeabi_dadd+0x334>
   106da:	e135      	b.n	10948 <__aeabi_dadd+0x5a0>
   106dc:	2620      	movs	r6, #32
   106de:	1af5      	subs	r5, r6, r3
   106e0:	0026      	movs	r6, r4
   106e2:	40ae      	lsls	r6, r5
   106e4:	46b2      	mov	sl, r6
   106e6:	003e      	movs	r6, r7
   106e8:	40de      	lsrs	r6, r3
   106ea:	46ac      	mov	ip, r5
   106ec:	0035      	movs	r5, r6
   106ee:	4656      	mov	r6, sl
   106f0:	432e      	orrs	r6, r5
   106f2:	4665      	mov	r5, ip
   106f4:	40af      	lsls	r7, r5
   106f6:	1e7d      	subs	r5, r7, #1
   106f8:	41af      	sbcs	r7, r5
   106fa:	40dc      	lsrs	r4, r3
   106fc:	4337      	orrs	r7, r6
   106fe:	1bd7      	subs	r7, r2, r7
   10700:	42ba      	cmp	r2, r7
   10702:	4192      	sbcs	r2, r2
   10704:	1b0c      	subs	r4, r1, r4
   10706:	4252      	negs	r2, r2
   10708:	1aa4      	subs	r4, r4, r2
   1070a:	0006      	movs	r6, r0
   1070c:	46d8      	mov	r8, fp
   1070e:	e6a3      	b.n	10458 <__aeabi_dadd+0xb0>
   10710:	4664      	mov	r4, ip
   10712:	4667      	mov	r7, ip
   10714:	432c      	orrs	r4, r5
   10716:	d000      	beq.n	1071a <__aeabi_dadd+0x372>
   10718:	e6a2      	b.n	10460 <__aeabi_dadd+0xb8>
   1071a:	2500      	movs	r5, #0
   1071c:	2600      	movs	r6, #0
   1071e:	2700      	movs	r7, #0
   10720:	e706      	b.n	10530 <__aeabi_dadd+0x188>
   10722:	001e      	movs	r6, r3
   10724:	e6c4      	b.n	104b0 <__aeabi_dadd+0x108>
   10726:	46c0      	nop			; (mov r8, r8)
   10728:	000007ff 	.word	0x000007ff
   1072c:	ff7fffff 	.word	0xff7fffff
   10730:	800fffff 	.word	0x800fffff
   10734:	2b1f      	cmp	r3, #31
   10736:	dc63      	bgt.n	10800 <__aeabi_dadd+0x458>
   10738:	2020      	movs	r0, #32
   1073a:	1ac3      	subs	r3, r0, r3
   1073c:	0008      	movs	r0, r1
   1073e:	4098      	lsls	r0, r3
   10740:	469c      	mov	ip, r3
   10742:	4683      	mov	fp, r0
   10744:	4653      	mov	r3, sl
   10746:	0010      	movs	r0, r2
   10748:	40d8      	lsrs	r0, r3
   1074a:	0003      	movs	r3, r0
   1074c:	4658      	mov	r0, fp
   1074e:	4318      	orrs	r0, r3
   10750:	4663      	mov	r3, ip
   10752:	409a      	lsls	r2, r3
   10754:	1e53      	subs	r3, r2, #1
   10756:	419a      	sbcs	r2, r3
   10758:	4653      	mov	r3, sl
   1075a:	4302      	orrs	r2, r0
   1075c:	40d9      	lsrs	r1, r3
   1075e:	e703      	b.n	10568 <__aeabi_dadd+0x1c0>
   10760:	0026      	movs	r6, r4
   10762:	433e      	orrs	r6, r7
   10764:	d006      	beq.n	10774 <__aeabi_dadd+0x3cc>
   10766:	43eb      	mvns	r3, r5
   10768:	4699      	mov	r9, r3
   1076a:	2b00      	cmp	r3, #0
   1076c:	d0c7      	beq.n	106fe <__aeabi_dadd+0x356>
   1076e:	4e94      	ldr	r6, [pc, #592]	; (109c0 <__aeabi_dadd+0x618>)
   10770:	42b0      	cmp	r0, r6
   10772:	d1ac      	bne.n	106ce <__aeabi_dadd+0x326>
   10774:	000c      	movs	r4, r1
   10776:	0017      	movs	r7, r2
   10778:	0006      	movs	r6, r0
   1077a:	46d8      	mov	r8, fp
   1077c:	e698      	b.n	104b0 <__aeabi_dadd+0x108>
   1077e:	4b90      	ldr	r3, [pc, #576]	; (109c0 <__aeabi_dadd+0x618>)
   10780:	459a      	cmp	sl, r3
   10782:	d00b      	beq.n	1079c <__aeabi_dadd+0x3f4>
   10784:	4682      	mov	sl, r0
   10786:	e6e7      	b.n	10558 <__aeabi_dadd+0x1b0>
   10788:	2800      	cmp	r0, #0
   1078a:	d000      	beq.n	1078e <__aeabi_dadd+0x3e6>
   1078c:	e09e      	b.n	108cc <__aeabi_dadd+0x524>
   1078e:	0018      	movs	r0, r3
   10790:	4310      	orrs	r0, r2
   10792:	d100      	bne.n	10796 <__aeabi_dadd+0x3ee>
   10794:	e0e9      	b.n	1096a <__aeabi_dadd+0x5c2>
   10796:	001c      	movs	r4, r3
   10798:	0017      	movs	r7, r2
   1079a:	46d8      	mov	r8, fp
   1079c:	4e88      	ldr	r6, [pc, #544]	; (109c0 <__aeabi_dadd+0x618>)
   1079e:	e687      	b.n	104b0 <__aeabi_dadd+0x108>
   107a0:	2500      	movs	r5, #0
   107a2:	e772      	b.n	1068a <__aeabi_dadd+0x2e2>
   107a4:	2100      	movs	r1, #0
   107a6:	e782      	b.n	106ae <__aeabi_dadd+0x306>
   107a8:	0023      	movs	r3, r4
   107aa:	433b      	orrs	r3, r7
   107ac:	2e00      	cmp	r6, #0
   107ae:	d000      	beq.n	107b2 <__aeabi_dadd+0x40a>
   107b0:	e0ab      	b.n	1090a <__aeabi_dadd+0x562>
   107b2:	2b00      	cmp	r3, #0
   107b4:	d100      	bne.n	107b8 <__aeabi_dadd+0x410>
   107b6:	e0e7      	b.n	10988 <__aeabi_dadd+0x5e0>
   107b8:	000b      	movs	r3, r1
   107ba:	4313      	orrs	r3, r2
   107bc:	d100      	bne.n	107c0 <__aeabi_dadd+0x418>
   107be:	e677      	b.n	104b0 <__aeabi_dadd+0x108>
   107c0:	18ba      	adds	r2, r7, r2
   107c2:	42ba      	cmp	r2, r7
   107c4:	41bf      	sbcs	r7, r7
   107c6:	1864      	adds	r4, r4, r1
   107c8:	427f      	negs	r7, r7
   107ca:	19e4      	adds	r4, r4, r7
   107cc:	0223      	lsls	r3, r4, #8
   107ce:	d400      	bmi.n	107d2 <__aeabi_dadd+0x42a>
   107d0:	e0f2      	b.n	109b8 <__aeabi_dadd+0x610>
   107d2:	4b7c      	ldr	r3, [pc, #496]	; (109c4 <__aeabi_dadd+0x61c>)
   107d4:	0017      	movs	r7, r2
   107d6:	401c      	ands	r4, r3
   107d8:	0006      	movs	r6, r0
   107da:	e669      	b.n	104b0 <__aeabi_dadd+0x108>
   107dc:	0020      	movs	r0, r4
   107de:	4338      	orrs	r0, r7
   107e0:	2e00      	cmp	r6, #0
   107e2:	d1d1      	bne.n	10788 <__aeabi_dadd+0x3e0>
   107e4:	2800      	cmp	r0, #0
   107e6:	d15b      	bne.n	108a0 <__aeabi_dadd+0x4f8>
   107e8:	001c      	movs	r4, r3
   107ea:	4314      	orrs	r4, r2
   107ec:	d100      	bne.n	107f0 <__aeabi_dadd+0x448>
   107ee:	e0a8      	b.n	10942 <__aeabi_dadd+0x59a>
   107f0:	001c      	movs	r4, r3
   107f2:	0017      	movs	r7, r2
   107f4:	46d8      	mov	r8, fp
   107f6:	e65b      	b.n	104b0 <__aeabi_dadd+0x108>
   107f8:	0006      	movs	r6, r0
   107fa:	2400      	movs	r4, #0
   107fc:	2700      	movs	r7, #0
   107fe:	e697      	b.n	10530 <__aeabi_dadd+0x188>
   10800:	4650      	mov	r0, sl
   10802:	000b      	movs	r3, r1
   10804:	3820      	subs	r0, #32
   10806:	40c3      	lsrs	r3, r0
   10808:	4699      	mov	r9, r3
   1080a:	4653      	mov	r3, sl
   1080c:	2b20      	cmp	r3, #32
   1080e:	d100      	bne.n	10812 <__aeabi_dadd+0x46a>
   10810:	e095      	b.n	1093e <__aeabi_dadd+0x596>
   10812:	2340      	movs	r3, #64	; 0x40
   10814:	4650      	mov	r0, sl
   10816:	1a1b      	subs	r3, r3, r0
   10818:	4099      	lsls	r1, r3
   1081a:	430a      	orrs	r2, r1
   1081c:	1e51      	subs	r1, r2, #1
   1081e:	418a      	sbcs	r2, r1
   10820:	464b      	mov	r3, r9
   10822:	2100      	movs	r1, #0
   10824:	431a      	orrs	r2, r3
   10826:	e69f      	b.n	10568 <__aeabi_dadd+0x1c0>
   10828:	2e00      	cmp	r6, #0
   1082a:	d130      	bne.n	1088e <__aeabi_dadd+0x4e6>
   1082c:	0026      	movs	r6, r4
   1082e:	433e      	orrs	r6, r7
   10830:	d067      	beq.n	10902 <__aeabi_dadd+0x55a>
   10832:	43db      	mvns	r3, r3
   10834:	469a      	mov	sl, r3
   10836:	2b00      	cmp	r3, #0
   10838:	d01c      	beq.n	10874 <__aeabi_dadd+0x4cc>
   1083a:	4e61      	ldr	r6, [pc, #388]	; (109c0 <__aeabi_dadd+0x618>)
   1083c:	42b0      	cmp	r0, r6
   1083e:	d060      	beq.n	10902 <__aeabi_dadd+0x55a>
   10840:	4653      	mov	r3, sl
   10842:	2b38      	cmp	r3, #56	; 0x38
   10844:	dd00      	ble.n	10848 <__aeabi_dadd+0x4a0>
   10846:	e096      	b.n	10976 <__aeabi_dadd+0x5ce>
   10848:	2b1f      	cmp	r3, #31
   1084a:	dd00      	ble.n	1084e <__aeabi_dadd+0x4a6>
   1084c:	e09f      	b.n	1098e <__aeabi_dadd+0x5e6>
   1084e:	2620      	movs	r6, #32
   10850:	1af3      	subs	r3, r6, r3
   10852:	0026      	movs	r6, r4
   10854:	409e      	lsls	r6, r3
   10856:	469c      	mov	ip, r3
   10858:	46b3      	mov	fp, r6
   1085a:	4653      	mov	r3, sl
   1085c:	003e      	movs	r6, r7
   1085e:	40de      	lsrs	r6, r3
   10860:	0033      	movs	r3, r6
   10862:	465e      	mov	r6, fp
   10864:	431e      	orrs	r6, r3
   10866:	4663      	mov	r3, ip
   10868:	409f      	lsls	r7, r3
   1086a:	1e7b      	subs	r3, r7, #1
   1086c:	419f      	sbcs	r7, r3
   1086e:	4653      	mov	r3, sl
   10870:	40dc      	lsrs	r4, r3
   10872:	4337      	orrs	r7, r6
   10874:	18bf      	adds	r7, r7, r2
   10876:	4297      	cmp	r7, r2
   10878:	4192      	sbcs	r2, r2
   1087a:	1864      	adds	r4, r4, r1
   1087c:	4252      	negs	r2, r2
   1087e:	18a4      	adds	r4, r4, r2
   10880:	0006      	movs	r6, r0
   10882:	e678      	b.n	10576 <__aeabi_dadd+0x1ce>
   10884:	4327      	orrs	r7, r4
   10886:	1e7c      	subs	r4, r7, #1
   10888:	41a7      	sbcs	r7, r4
   1088a:	2400      	movs	r4, #0
   1088c:	e737      	b.n	106fe <__aeabi_dadd+0x356>
   1088e:	4e4c      	ldr	r6, [pc, #304]	; (109c0 <__aeabi_dadd+0x618>)
   10890:	42b0      	cmp	r0, r6
   10892:	d036      	beq.n	10902 <__aeabi_dadd+0x55a>
   10894:	2680      	movs	r6, #128	; 0x80
   10896:	425b      	negs	r3, r3
   10898:	0436      	lsls	r6, r6, #16
   1089a:	469a      	mov	sl, r3
   1089c:	4334      	orrs	r4, r6
   1089e:	e7cf      	b.n	10840 <__aeabi_dadd+0x498>
   108a0:	0018      	movs	r0, r3
   108a2:	4310      	orrs	r0, r2
   108a4:	d100      	bne.n	108a8 <__aeabi_dadd+0x500>
   108a6:	e603      	b.n	104b0 <__aeabi_dadd+0x108>
   108a8:	1ab8      	subs	r0, r7, r2
   108aa:	4684      	mov	ip, r0
   108ac:	4567      	cmp	r7, ip
   108ae:	41ad      	sbcs	r5, r5
   108b0:	1ae0      	subs	r0, r4, r3
   108b2:	426d      	negs	r5, r5
   108b4:	1b40      	subs	r0, r0, r5
   108b6:	0205      	lsls	r5, r0, #8
   108b8:	d400      	bmi.n	108bc <__aeabi_dadd+0x514>
   108ba:	e62c      	b.n	10516 <__aeabi_dadd+0x16e>
   108bc:	1bd7      	subs	r7, r2, r7
   108be:	42ba      	cmp	r2, r7
   108c0:	4192      	sbcs	r2, r2
   108c2:	1b1c      	subs	r4, r3, r4
   108c4:	4252      	negs	r2, r2
   108c6:	1aa4      	subs	r4, r4, r2
   108c8:	46d8      	mov	r8, fp
   108ca:	e5f1      	b.n	104b0 <__aeabi_dadd+0x108>
   108cc:	0018      	movs	r0, r3
   108ce:	4310      	orrs	r0, r2
   108d0:	d100      	bne.n	108d4 <__aeabi_dadd+0x52c>
   108d2:	e763      	b.n	1079c <__aeabi_dadd+0x3f4>
   108d4:	08f8      	lsrs	r0, r7, #3
   108d6:	0767      	lsls	r7, r4, #29
   108d8:	4307      	orrs	r7, r0
   108da:	2080      	movs	r0, #128	; 0x80
   108dc:	08e4      	lsrs	r4, r4, #3
   108de:	0300      	lsls	r0, r0, #12
   108e0:	4204      	tst	r4, r0
   108e2:	d008      	beq.n	108f6 <__aeabi_dadd+0x54e>
   108e4:	08dd      	lsrs	r5, r3, #3
   108e6:	4205      	tst	r5, r0
   108e8:	d105      	bne.n	108f6 <__aeabi_dadd+0x54e>
   108ea:	08d2      	lsrs	r2, r2, #3
   108ec:	0759      	lsls	r1, r3, #29
   108ee:	4311      	orrs	r1, r2
   108f0:	000f      	movs	r7, r1
   108f2:	002c      	movs	r4, r5
   108f4:	46d8      	mov	r8, fp
   108f6:	0f7b      	lsrs	r3, r7, #29
   108f8:	00e4      	lsls	r4, r4, #3
   108fa:	431c      	orrs	r4, r3
   108fc:	00ff      	lsls	r7, r7, #3
   108fe:	4e30      	ldr	r6, [pc, #192]	; (109c0 <__aeabi_dadd+0x618>)
   10900:	e5d6      	b.n	104b0 <__aeabi_dadd+0x108>
   10902:	000c      	movs	r4, r1
   10904:	0017      	movs	r7, r2
   10906:	0006      	movs	r6, r0
   10908:	e5d2      	b.n	104b0 <__aeabi_dadd+0x108>
   1090a:	2b00      	cmp	r3, #0
   1090c:	d038      	beq.n	10980 <__aeabi_dadd+0x5d8>
   1090e:	000b      	movs	r3, r1
   10910:	4313      	orrs	r3, r2
   10912:	d100      	bne.n	10916 <__aeabi_dadd+0x56e>
   10914:	e742      	b.n	1079c <__aeabi_dadd+0x3f4>
   10916:	08f8      	lsrs	r0, r7, #3
   10918:	0767      	lsls	r7, r4, #29
   1091a:	4307      	orrs	r7, r0
   1091c:	2080      	movs	r0, #128	; 0x80
   1091e:	08e4      	lsrs	r4, r4, #3
   10920:	0300      	lsls	r0, r0, #12
   10922:	4204      	tst	r4, r0
   10924:	d0e7      	beq.n	108f6 <__aeabi_dadd+0x54e>
   10926:	08cb      	lsrs	r3, r1, #3
   10928:	4203      	tst	r3, r0
   1092a:	d1e4      	bne.n	108f6 <__aeabi_dadd+0x54e>
   1092c:	08d2      	lsrs	r2, r2, #3
   1092e:	0749      	lsls	r1, r1, #29
   10930:	4311      	orrs	r1, r2
   10932:	000f      	movs	r7, r1
   10934:	001c      	movs	r4, r3
   10936:	e7de      	b.n	108f6 <__aeabi_dadd+0x54e>
   10938:	2700      	movs	r7, #0
   1093a:	2400      	movs	r4, #0
   1093c:	e5d5      	b.n	104ea <__aeabi_dadd+0x142>
   1093e:	2100      	movs	r1, #0
   10940:	e76b      	b.n	1081a <__aeabi_dadd+0x472>
   10942:	2500      	movs	r5, #0
   10944:	2700      	movs	r7, #0
   10946:	e5f3      	b.n	10530 <__aeabi_dadd+0x188>
   10948:	464e      	mov	r6, r9
   1094a:	0025      	movs	r5, r4
   1094c:	3e20      	subs	r6, #32
   1094e:	40f5      	lsrs	r5, r6
   10950:	464b      	mov	r3, r9
   10952:	002e      	movs	r6, r5
   10954:	2b20      	cmp	r3, #32
   10956:	d02d      	beq.n	109b4 <__aeabi_dadd+0x60c>
   10958:	2540      	movs	r5, #64	; 0x40
   1095a:	1aed      	subs	r5, r5, r3
   1095c:	40ac      	lsls	r4, r5
   1095e:	4327      	orrs	r7, r4
   10960:	1e7c      	subs	r4, r7, #1
   10962:	41a7      	sbcs	r7, r4
   10964:	2400      	movs	r4, #0
   10966:	4337      	orrs	r7, r6
   10968:	e6c9      	b.n	106fe <__aeabi_dadd+0x356>
   1096a:	2480      	movs	r4, #128	; 0x80
   1096c:	2500      	movs	r5, #0
   1096e:	0324      	lsls	r4, r4, #12
   10970:	4e13      	ldr	r6, [pc, #76]	; (109c0 <__aeabi_dadd+0x618>)
   10972:	2700      	movs	r7, #0
   10974:	e5dc      	b.n	10530 <__aeabi_dadd+0x188>
   10976:	4327      	orrs	r7, r4
   10978:	1e7c      	subs	r4, r7, #1
   1097a:	41a7      	sbcs	r7, r4
   1097c:	2400      	movs	r4, #0
   1097e:	e779      	b.n	10874 <__aeabi_dadd+0x4cc>
   10980:	000c      	movs	r4, r1
   10982:	0017      	movs	r7, r2
   10984:	4e0e      	ldr	r6, [pc, #56]	; (109c0 <__aeabi_dadd+0x618>)
   10986:	e593      	b.n	104b0 <__aeabi_dadd+0x108>
   10988:	000c      	movs	r4, r1
   1098a:	0017      	movs	r7, r2
   1098c:	e590      	b.n	104b0 <__aeabi_dadd+0x108>
   1098e:	4656      	mov	r6, sl
   10990:	0023      	movs	r3, r4
   10992:	3e20      	subs	r6, #32
   10994:	40f3      	lsrs	r3, r6
   10996:	4699      	mov	r9, r3
   10998:	4653      	mov	r3, sl
   1099a:	2b20      	cmp	r3, #32
   1099c:	d00e      	beq.n	109bc <__aeabi_dadd+0x614>
   1099e:	2340      	movs	r3, #64	; 0x40
   109a0:	4656      	mov	r6, sl
   109a2:	1b9b      	subs	r3, r3, r6
   109a4:	409c      	lsls	r4, r3
   109a6:	4327      	orrs	r7, r4
   109a8:	1e7c      	subs	r4, r7, #1
   109aa:	41a7      	sbcs	r7, r4
   109ac:	464b      	mov	r3, r9
   109ae:	2400      	movs	r4, #0
   109b0:	431f      	orrs	r7, r3
   109b2:	e75f      	b.n	10874 <__aeabi_dadd+0x4cc>
   109b4:	2400      	movs	r4, #0
   109b6:	e7d2      	b.n	1095e <__aeabi_dadd+0x5b6>
   109b8:	0017      	movs	r7, r2
   109ba:	e5b2      	b.n	10522 <__aeabi_dadd+0x17a>
   109bc:	2400      	movs	r4, #0
   109be:	e7f2      	b.n	109a6 <__aeabi_dadd+0x5fe>
   109c0:	000007ff 	.word	0x000007ff
   109c4:	ff7fffff 	.word	0xff7fffff

000109c8 <__aeabi_ddiv>:
   109c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ca:	4657      	mov	r7, sl
   109cc:	4645      	mov	r5, r8
   109ce:	46de      	mov	lr, fp
   109d0:	464e      	mov	r6, r9
   109d2:	b5e0      	push	{r5, r6, r7, lr}
   109d4:	004c      	lsls	r4, r1, #1
   109d6:	030e      	lsls	r6, r1, #12
   109d8:	b087      	sub	sp, #28
   109da:	4683      	mov	fp, r0
   109dc:	4692      	mov	sl, r2
   109de:	001d      	movs	r5, r3
   109e0:	4680      	mov	r8, r0
   109e2:	0b36      	lsrs	r6, r6, #12
   109e4:	0d64      	lsrs	r4, r4, #21
   109e6:	0fcf      	lsrs	r7, r1, #31
   109e8:	2c00      	cmp	r4, #0
   109ea:	d04f      	beq.n	10a8c <__aeabi_ddiv+0xc4>
   109ec:	4b6f      	ldr	r3, [pc, #444]	; (10bac <__aeabi_ddiv+0x1e4>)
   109ee:	429c      	cmp	r4, r3
   109f0:	d035      	beq.n	10a5e <__aeabi_ddiv+0x96>
   109f2:	2380      	movs	r3, #128	; 0x80
   109f4:	0f42      	lsrs	r2, r0, #29
   109f6:	041b      	lsls	r3, r3, #16
   109f8:	00f6      	lsls	r6, r6, #3
   109fa:	4313      	orrs	r3, r2
   109fc:	4333      	orrs	r3, r6
   109fe:	4699      	mov	r9, r3
   10a00:	00c3      	lsls	r3, r0, #3
   10a02:	4698      	mov	r8, r3
   10a04:	4b6a      	ldr	r3, [pc, #424]	; (10bb0 <__aeabi_ddiv+0x1e8>)
   10a06:	2600      	movs	r6, #0
   10a08:	469c      	mov	ip, r3
   10a0a:	2300      	movs	r3, #0
   10a0c:	4464      	add	r4, ip
   10a0e:	9303      	str	r3, [sp, #12]
   10a10:	032b      	lsls	r3, r5, #12
   10a12:	0b1b      	lsrs	r3, r3, #12
   10a14:	469b      	mov	fp, r3
   10a16:	006b      	lsls	r3, r5, #1
   10a18:	0fed      	lsrs	r5, r5, #31
   10a1a:	4650      	mov	r0, sl
   10a1c:	0d5b      	lsrs	r3, r3, #21
   10a1e:	9501      	str	r5, [sp, #4]
   10a20:	d05e      	beq.n	10ae0 <__aeabi_ddiv+0x118>
   10a22:	4a62      	ldr	r2, [pc, #392]	; (10bac <__aeabi_ddiv+0x1e4>)
   10a24:	4293      	cmp	r3, r2
   10a26:	d053      	beq.n	10ad0 <__aeabi_ddiv+0x108>
   10a28:	465a      	mov	r2, fp
   10a2a:	00d1      	lsls	r1, r2, #3
   10a2c:	2280      	movs	r2, #128	; 0x80
   10a2e:	0f40      	lsrs	r0, r0, #29
   10a30:	0412      	lsls	r2, r2, #16
   10a32:	4302      	orrs	r2, r0
   10a34:	430a      	orrs	r2, r1
   10a36:	4693      	mov	fp, r2
   10a38:	4652      	mov	r2, sl
   10a3a:	00d1      	lsls	r1, r2, #3
   10a3c:	4a5c      	ldr	r2, [pc, #368]	; (10bb0 <__aeabi_ddiv+0x1e8>)
   10a3e:	4694      	mov	ip, r2
   10a40:	2200      	movs	r2, #0
   10a42:	4463      	add	r3, ip
   10a44:	0038      	movs	r0, r7
   10a46:	4068      	eors	r0, r5
   10a48:	4684      	mov	ip, r0
   10a4a:	9002      	str	r0, [sp, #8]
   10a4c:	1ae4      	subs	r4, r4, r3
   10a4e:	4316      	orrs	r6, r2
   10a50:	2e0f      	cmp	r6, #15
   10a52:	d900      	bls.n	10a56 <__aeabi_ddiv+0x8e>
   10a54:	e0b4      	b.n	10bc0 <__aeabi_ddiv+0x1f8>
   10a56:	4b57      	ldr	r3, [pc, #348]	; (10bb4 <__aeabi_ddiv+0x1ec>)
   10a58:	00b6      	lsls	r6, r6, #2
   10a5a:	599b      	ldr	r3, [r3, r6]
   10a5c:	469f      	mov	pc, r3
   10a5e:	0003      	movs	r3, r0
   10a60:	4333      	orrs	r3, r6
   10a62:	4699      	mov	r9, r3
   10a64:	d16c      	bne.n	10b40 <__aeabi_ddiv+0x178>
   10a66:	2300      	movs	r3, #0
   10a68:	4698      	mov	r8, r3
   10a6a:	3302      	adds	r3, #2
   10a6c:	2608      	movs	r6, #8
   10a6e:	9303      	str	r3, [sp, #12]
   10a70:	e7ce      	b.n	10a10 <__aeabi_ddiv+0x48>
   10a72:	46cb      	mov	fp, r9
   10a74:	4641      	mov	r1, r8
   10a76:	9a03      	ldr	r2, [sp, #12]
   10a78:	9701      	str	r7, [sp, #4]
   10a7a:	2a02      	cmp	r2, #2
   10a7c:	d165      	bne.n	10b4a <__aeabi_ddiv+0x182>
   10a7e:	9b01      	ldr	r3, [sp, #4]
   10a80:	4c4a      	ldr	r4, [pc, #296]	; (10bac <__aeabi_ddiv+0x1e4>)
   10a82:	469c      	mov	ip, r3
   10a84:	2300      	movs	r3, #0
   10a86:	2200      	movs	r2, #0
   10a88:	4698      	mov	r8, r3
   10a8a:	e06b      	b.n	10b64 <__aeabi_ddiv+0x19c>
   10a8c:	0003      	movs	r3, r0
   10a8e:	4333      	orrs	r3, r6
   10a90:	4699      	mov	r9, r3
   10a92:	d04e      	beq.n	10b32 <__aeabi_ddiv+0x16a>
   10a94:	2e00      	cmp	r6, #0
   10a96:	d100      	bne.n	10a9a <__aeabi_ddiv+0xd2>
   10a98:	e1bc      	b.n	10e14 <__aeabi_ddiv+0x44c>
   10a9a:	0030      	movs	r0, r6
   10a9c:	f001 f9f4 	bl	11e88 <__clzsi2>
   10aa0:	0003      	movs	r3, r0
   10aa2:	3b0b      	subs	r3, #11
   10aa4:	2b1c      	cmp	r3, #28
   10aa6:	dd00      	ble.n	10aaa <__aeabi_ddiv+0xe2>
   10aa8:	e1ac      	b.n	10e04 <__aeabi_ddiv+0x43c>
   10aaa:	221d      	movs	r2, #29
   10aac:	1ad3      	subs	r3, r2, r3
   10aae:	465a      	mov	r2, fp
   10ab0:	0001      	movs	r1, r0
   10ab2:	40da      	lsrs	r2, r3
   10ab4:	3908      	subs	r1, #8
   10ab6:	408e      	lsls	r6, r1
   10ab8:	0013      	movs	r3, r2
   10aba:	4333      	orrs	r3, r6
   10abc:	4699      	mov	r9, r3
   10abe:	465b      	mov	r3, fp
   10ac0:	408b      	lsls	r3, r1
   10ac2:	4698      	mov	r8, r3
   10ac4:	2300      	movs	r3, #0
   10ac6:	4c3c      	ldr	r4, [pc, #240]	; (10bb8 <__aeabi_ddiv+0x1f0>)
   10ac8:	2600      	movs	r6, #0
   10aca:	1a24      	subs	r4, r4, r0
   10acc:	9303      	str	r3, [sp, #12]
   10ace:	e79f      	b.n	10a10 <__aeabi_ddiv+0x48>
   10ad0:	4651      	mov	r1, sl
   10ad2:	465a      	mov	r2, fp
   10ad4:	4311      	orrs	r1, r2
   10ad6:	d129      	bne.n	10b2c <__aeabi_ddiv+0x164>
   10ad8:	2200      	movs	r2, #0
   10ada:	4693      	mov	fp, r2
   10adc:	3202      	adds	r2, #2
   10ade:	e7b1      	b.n	10a44 <__aeabi_ddiv+0x7c>
   10ae0:	4659      	mov	r1, fp
   10ae2:	4301      	orrs	r1, r0
   10ae4:	d01e      	beq.n	10b24 <__aeabi_ddiv+0x15c>
   10ae6:	465b      	mov	r3, fp
   10ae8:	2b00      	cmp	r3, #0
   10aea:	d100      	bne.n	10aee <__aeabi_ddiv+0x126>
   10aec:	e19e      	b.n	10e2c <__aeabi_ddiv+0x464>
   10aee:	4658      	mov	r0, fp
   10af0:	f001 f9ca 	bl	11e88 <__clzsi2>
   10af4:	0003      	movs	r3, r0
   10af6:	3b0b      	subs	r3, #11
   10af8:	2b1c      	cmp	r3, #28
   10afa:	dd00      	ble.n	10afe <__aeabi_ddiv+0x136>
   10afc:	e18f      	b.n	10e1e <__aeabi_ddiv+0x456>
   10afe:	0002      	movs	r2, r0
   10b00:	4659      	mov	r1, fp
   10b02:	3a08      	subs	r2, #8
   10b04:	4091      	lsls	r1, r2
   10b06:	468b      	mov	fp, r1
   10b08:	211d      	movs	r1, #29
   10b0a:	1acb      	subs	r3, r1, r3
   10b0c:	4651      	mov	r1, sl
   10b0e:	40d9      	lsrs	r1, r3
   10b10:	000b      	movs	r3, r1
   10b12:	4659      	mov	r1, fp
   10b14:	430b      	orrs	r3, r1
   10b16:	4651      	mov	r1, sl
   10b18:	469b      	mov	fp, r3
   10b1a:	4091      	lsls	r1, r2
   10b1c:	4b26      	ldr	r3, [pc, #152]	; (10bb8 <__aeabi_ddiv+0x1f0>)
   10b1e:	2200      	movs	r2, #0
   10b20:	1a1b      	subs	r3, r3, r0
   10b22:	e78f      	b.n	10a44 <__aeabi_ddiv+0x7c>
   10b24:	2300      	movs	r3, #0
   10b26:	2201      	movs	r2, #1
   10b28:	469b      	mov	fp, r3
   10b2a:	e78b      	b.n	10a44 <__aeabi_ddiv+0x7c>
   10b2c:	4651      	mov	r1, sl
   10b2e:	2203      	movs	r2, #3
   10b30:	e788      	b.n	10a44 <__aeabi_ddiv+0x7c>
   10b32:	2300      	movs	r3, #0
   10b34:	4698      	mov	r8, r3
   10b36:	3301      	adds	r3, #1
   10b38:	2604      	movs	r6, #4
   10b3a:	2400      	movs	r4, #0
   10b3c:	9303      	str	r3, [sp, #12]
   10b3e:	e767      	b.n	10a10 <__aeabi_ddiv+0x48>
   10b40:	2303      	movs	r3, #3
   10b42:	46b1      	mov	r9, r6
   10b44:	9303      	str	r3, [sp, #12]
   10b46:	260c      	movs	r6, #12
   10b48:	e762      	b.n	10a10 <__aeabi_ddiv+0x48>
   10b4a:	2a03      	cmp	r2, #3
   10b4c:	d100      	bne.n	10b50 <__aeabi_ddiv+0x188>
   10b4e:	e25c      	b.n	1100a <__aeabi_ddiv+0x642>
   10b50:	9b01      	ldr	r3, [sp, #4]
   10b52:	2a01      	cmp	r2, #1
   10b54:	d000      	beq.n	10b58 <__aeabi_ddiv+0x190>
   10b56:	e1e4      	b.n	10f22 <__aeabi_ddiv+0x55a>
   10b58:	4013      	ands	r3, r2
   10b5a:	469c      	mov	ip, r3
   10b5c:	2300      	movs	r3, #0
   10b5e:	2400      	movs	r4, #0
   10b60:	2200      	movs	r2, #0
   10b62:	4698      	mov	r8, r3
   10b64:	2100      	movs	r1, #0
   10b66:	0312      	lsls	r2, r2, #12
   10b68:	0b13      	lsrs	r3, r2, #12
   10b6a:	0d0a      	lsrs	r2, r1, #20
   10b6c:	0512      	lsls	r2, r2, #20
   10b6e:	431a      	orrs	r2, r3
   10b70:	0523      	lsls	r3, r4, #20
   10b72:	4c12      	ldr	r4, [pc, #72]	; (10bbc <__aeabi_ddiv+0x1f4>)
   10b74:	4640      	mov	r0, r8
   10b76:	4022      	ands	r2, r4
   10b78:	4313      	orrs	r3, r2
   10b7a:	4662      	mov	r2, ip
   10b7c:	005b      	lsls	r3, r3, #1
   10b7e:	07d2      	lsls	r2, r2, #31
   10b80:	085b      	lsrs	r3, r3, #1
   10b82:	4313      	orrs	r3, r2
   10b84:	0019      	movs	r1, r3
   10b86:	b007      	add	sp, #28
   10b88:	bc3c      	pop	{r2, r3, r4, r5}
   10b8a:	4690      	mov	r8, r2
   10b8c:	4699      	mov	r9, r3
   10b8e:	46a2      	mov	sl, r4
   10b90:	46ab      	mov	fp, r5
   10b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b94:	2300      	movs	r3, #0
   10b96:	2280      	movs	r2, #128	; 0x80
   10b98:	469c      	mov	ip, r3
   10b9a:	0312      	lsls	r2, r2, #12
   10b9c:	4698      	mov	r8, r3
   10b9e:	4c03      	ldr	r4, [pc, #12]	; (10bac <__aeabi_ddiv+0x1e4>)
   10ba0:	e7e0      	b.n	10b64 <__aeabi_ddiv+0x19c>
   10ba2:	2300      	movs	r3, #0
   10ba4:	4c01      	ldr	r4, [pc, #4]	; (10bac <__aeabi_ddiv+0x1e4>)
   10ba6:	2200      	movs	r2, #0
   10ba8:	4698      	mov	r8, r3
   10baa:	e7db      	b.n	10b64 <__aeabi_ddiv+0x19c>
   10bac:	000007ff 	.word	0x000007ff
   10bb0:	fffffc01 	.word	0xfffffc01
   10bb4:	00015278 	.word	0x00015278
   10bb8:	fffffc0d 	.word	0xfffffc0d
   10bbc:	800fffff 	.word	0x800fffff
   10bc0:	45d9      	cmp	r9, fp
   10bc2:	d900      	bls.n	10bc6 <__aeabi_ddiv+0x1fe>
   10bc4:	e139      	b.n	10e3a <__aeabi_ddiv+0x472>
   10bc6:	d100      	bne.n	10bca <__aeabi_ddiv+0x202>
   10bc8:	e134      	b.n	10e34 <__aeabi_ddiv+0x46c>
   10bca:	2300      	movs	r3, #0
   10bcc:	4646      	mov	r6, r8
   10bce:	464d      	mov	r5, r9
   10bd0:	469a      	mov	sl, r3
   10bd2:	3c01      	subs	r4, #1
   10bd4:	465b      	mov	r3, fp
   10bd6:	0e0a      	lsrs	r2, r1, #24
   10bd8:	021b      	lsls	r3, r3, #8
   10bda:	431a      	orrs	r2, r3
   10bdc:	020b      	lsls	r3, r1, #8
   10bde:	0c17      	lsrs	r7, r2, #16
   10be0:	9303      	str	r3, [sp, #12]
   10be2:	0413      	lsls	r3, r2, #16
   10be4:	0c1b      	lsrs	r3, r3, #16
   10be6:	0039      	movs	r1, r7
   10be8:	0028      	movs	r0, r5
   10bea:	4690      	mov	r8, r2
   10bec:	9301      	str	r3, [sp, #4]
   10bee:	f7ff f9df 	bl	ffb0 <__udivsi3>
   10bf2:	0002      	movs	r2, r0
   10bf4:	9b01      	ldr	r3, [sp, #4]
   10bf6:	4683      	mov	fp, r0
   10bf8:	435a      	muls	r2, r3
   10bfa:	0028      	movs	r0, r5
   10bfc:	0039      	movs	r1, r7
   10bfe:	4691      	mov	r9, r2
   10c00:	f7ff fa5c 	bl	100bc <__aeabi_uidivmod>
   10c04:	0c35      	lsrs	r5, r6, #16
   10c06:	0409      	lsls	r1, r1, #16
   10c08:	430d      	orrs	r5, r1
   10c0a:	45a9      	cmp	r9, r5
   10c0c:	d90d      	bls.n	10c2a <__aeabi_ddiv+0x262>
   10c0e:	465b      	mov	r3, fp
   10c10:	4445      	add	r5, r8
   10c12:	3b01      	subs	r3, #1
   10c14:	45a8      	cmp	r8, r5
   10c16:	d900      	bls.n	10c1a <__aeabi_ddiv+0x252>
   10c18:	e13a      	b.n	10e90 <__aeabi_ddiv+0x4c8>
   10c1a:	45a9      	cmp	r9, r5
   10c1c:	d800      	bhi.n	10c20 <__aeabi_ddiv+0x258>
   10c1e:	e137      	b.n	10e90 <__aeabi_ddiv+0x4c8>
   10c20:	2302      	movs	r3, #2
   10c22:	425b      	negs	r3, r3
   10c24:	469c      	mov	ip, r3
   10c26:	4445      	add	r5, r8
   10c28:	44e3      	add	fp, ip
   10c2a:	464b      	mov	r3, r9
   10c2c:	1aeb      	subs	r3, r5, r3
   10c2e:	0039      	movs	r1, r7
   10c30:	0018      	movs	r0, r3
   10c32:	9304      	str	r3, [sp, #16]
   10c34:	f7ff f9bc 	bl	ffb0 <__udivsi3>
   10c38:	9b01      	ldr	r3, [sp, #4]
   10c3a:	0005      	movs	r5, r0
   10c3c:	4343      	muls	r3, r0
   10c3e:	0039      	movs	r1, r7
   10c40:	9804      	ldr	r0, [sp, #16]
   10c42:	4699      	mov	r9, r3
   10c44:	f7ff fa3a 	bl	100bc <__aeabi_uidivmod>
   10c48:	0433      	lsls	r3, r6, #16
   10c4a:	0409      	lsls	r1, r1, #16
   10c4c:	0c1b      	lsrs	r3, r3, #16
   10c4e:	430b      	orrs	r3, r1
   10c50:	4599      	cmp	r9, r3
   10c52:	d909      	bls.n	10c68 <__aeabi_ddiv+0x2a0>
   10c54:	4443      	add	r3, r8
   10c56:	1e6a      	subs	r2, r5, #1
   10c58:	4598      	cmp	r8, r3
   10c5a:	d900      	bls.n	10c5e <__aeabi_ddiv+0x296>
   10c5c:	e11a      	b.n	10e94 <__aeabi_ddiv+0x4cc>
   10c5e:	4599      	cmp	r9, r3
   10c60:	d800      	bhi.n	10c64 <__aeabi_ddiv+0x29c>
   10c62:	e117      	b.n	10e94 <__aeabi_ddiv+0x4cc>
   10c64:	3d02      	subs	r5, #2
   10c66:	4443      	add	r3, r8
   10c68:	464a      	mov	r2, r9
   10c6a:	1a9b      	subs	r3, r3, r2
   10c6c:	465a      	mov	r2, fp
   10c6e:	0412      	lsls	r2, r2, #16
   10c70:	432a      	orrs	r2, r5
   10c72:	9903      	ldr	r1, [sp, #12]
   10c74:	4693      	mov	fp, r2
   10c76:	0c10      	lsrs	r0, r2, #16
   10c78:	0c0a      	lsrs	r2, r1, #16
   10c7a:	4691      	mov	r9, r2
   10c7c:	0409      	lsls	r1, r1, #16
   10c7e:	465a      	mov	r2, fp
   10c80:	0c09      	lsrs	r1, r1, #16
   10c82:	464e      	mov	r6, r9
   10c84:	000d      	movs	r5, r1
   10c86:	0412      	lsls	r2, r2, #16
   10c88:	0c12      	lsrs	r2, r2, #16
   10c8a:	4345      	muls	r5, r0
   10c8c:	9105      	str	r1, [sp, #20]
   10c8e:	4351      	muls	r1, r2
   10c90:	4372      	muls	r2, r6
   10c92:	4370      	muls	r0, r6
   10c94:	1952      	adds	r2, r2, r5
   10c96:	0c0e      	lsrs	r6, r1, #16
   10c98:	18b2      	adds	r2, r6, r2
   10c9a:	4295      	cmp	r5, r2
   10c9c:	d903      	bls.n	10ca6 <__aeabi_ddiv+0x2de>
   10c9e:	2580      	movs	r5, #128	; 0x80
   10ca0:	026d      	lsls	r5, r5, #9
   10ca2:	46ac      	mov	ip, r5
   10ca4:	4460      	add	r0, ip
   10ca6:	0c15      	lsrs	r5, r2, #16
   10ca8:	0409      	lsls	r1, r1, #16
   10caa:	0412      	lsls	r2, r2, #16
   10cac:	0c09      	lsrs	r1, r1, #16
   10cae:	1828      	adds	r0, r5, r0
   10cb0:	1852      	adds	r2, r2, r1
   10cb2:	4283      	cmp	r3, r0
   10cb4:	d200      	bcs.n	10cb8 <__aeabi_ddiv+0x2f0>
   10cb6:	e0ce      	b.n	10e56 <__aeabi_ddiv+0x48e>
   10cb8:	d100      	bne.n	10cbc <__aeabi_ddiv+0x2f4>
   10cba:	e0c8      	b.n	10e4e <__aeabi_ddiv+0x486>
   10cbc:	1a1d      	subs	r5, r3, r0
   10cbe:	4653      	mov	r3, sl
   10cc0:	1a9e      	subs	r6, r3, r2
   10cc2:	45b2      	cmp	sl, r6
   10cc4:	4192      	sbcs	r2, r2
   10cc6:	4252      	negs	r2, r2
   10cc8:	1aab      	subs	r3, r5, r2
   10cca:	469a      	mov	sl, r3
   10ccc:	4598      	cmp	r8, r3
   10cce:	d100      	bne.n	10cd2 <__aeabi_ddiv+0x30a>
   10cd0:	e117      	b.n	10f02 <__aeabi_ddiv+0x53a>
   10cd2:	0039      	movs	r1, r7
   10cd4:	0018      	movs	r0, r3
   10cd6:	f7ff f96b 	bl	ffb0 <__udivsi3>
   10cda:	9b01      	ldr	r3, [sp, #4]
   10cdc:	0005      	movs	r5, r0
   10cde:	4343      	muls	r3, r0
   10ce0:	0039      	movs	r1, r7
   10ce2:	4650      	mov	r0, sl
   10ce4:	9304      	str	r3, [sp, #16]
   10ce6:	f7ff f9e9 	bl	100bc <__aeabi_uidivmod>
   10cea:	9804      	ldr	r0, [sp, #16]
   10cec:	040b      	lsls	r3, r1, #16
   10cee:	0c31      	lsrs	r1, r6, #16
   10cf0:	4319      	orrs	r1, r3
   10cf2:	4288      	cmp	r0, r1
   10cf4:	d909      	bls.n	10d0a <__aeabi_ddiv+0x342>
   10cf6:	4441      	add	r1, r8
   10cf8:	1e6b      	subs	r3, r5, #1
   10cfa:	4588      	cmp	r8, r1
   10cfc:	d900      	bls.n	10d00 <__aeabi_ddiv+0x338>
   10cfe:	e107      	b.n	10f10 <__aeabi_ddiv+0x548>
   10d00:	4288      	cmp	r0, r1
   10d02:	d800      	bhi.n	10d06 <__aeabi_ddiv+0x33e>
   10d04:	e104      	b.n	10f10 <__aeabi_ddiv+0x548>
   10d06:	3d02      	subs	r5, #2
   10d08:	4441      	add	r1, r8
   10d0a:	9b04      	ldr	r3, [sp, #16]
   10d0c:	1acb      	subs	r3, r1, r3
   10d0e:	0018      	movs	r0, r3
   10d10:	0039      	movs	r1, r7
   10d12:	9304      	str	r3, [sp, #16]
   10d14:	f7ff f94c 	bl	ffb0 <__udivsi3>
   10d18:	9b01      	ldr	r3, [sp, #4]
   10d1a:	4682      	mov	sl, r0
   10d1c:	4343      	muls	r3, r0
   10d1e:	0039      	movs	r1, r7
   10d20:	9804      	ldr	r0, [sp, #16]
   10d22:	9301      	str	r3, [sp, #4]
   10d24:	f7ff f9ca 	bl	100bc <__aeabi_uidivmod>
   10d28:	9801      	ldr	r0, [sp, #4]
   10d2a:	040b      	lsls	r3, r1, #16
   10d2c:	0431      	lsls	r1, r6, #16
   10d2e:	0c09      	lsrs	r1, r1, #16
   10d30:	4319      	orrs	r1, r3
   10d32:	4288      	cmp	r0, r1
   10d34:	d90d      	bls.n	10d52 <__aeabi_ddiv+0x38a>
   10d36:	4653      	mov	r3, sl
   10d38:	4441      	add	r1, r8
   10d3a:	3b01      	subs	r3, #1
   10d3c:	4588      	cmp	r8, r1
   10d3e:	d900      	bls.n	10d42 <__aeabi_ddiv+0x37a>
   10d40:	e0e8      	b.n	10f14 <__aeabi_ddiv+0x54c>
   10d42:	4288      	cmp	r0, r1
   10d44:	d800      	bhi.n	10d48 <__aeabi_ddiv+0x380>
   10d46:	e0e5      	b.n	10f14 <__aeabi_ddiv+0x54c>
   10d48:	2302      	movs	r3, #2
   10d4a:	425b      	negs	r3, r3
   10d4c:	469c      	mov	ip, r3
   10d4e:	4441      	add	r1, r8
   10d50:	44e2      	add	sl, ip
   10d52:	9b01      	ldr	r3, [sp, #4]
   10d54:	042d      	lsls	r5, r5, #16
   10d56:	1ace      	subs	r6, r1, r3
   10d58:	4651      	mov	r1, sl
   10d5a:	4329      	orrs	r1, r5
   10d5c:	9d05      	ldr	r5, [sp, #20]
   10d5e:	464f      	mov	r7, r9
   10d60:	002a      	movs	r2, r5
   10d62:	040b      	lsls	r3, r1, #16
   10d64:	0c08      	lsrs	r0, r1, #16
   10d66:	0c1b      	lsrs	r3, r3, #16
   10d68:	435a      	muls	r2, r3
   10d6a:	4345      	muls	r5, r0
   10d6c:	437b      	muls	r3, r7
   10d6e:	4378      	muls	r0, r7
   10d70:	195b      	adds	r3, r3, r5
   10d72:	0c17      	lsrs	r7, r2, #16
   10d74:	18fb      	adds	r3, r7, r3
   10d76:	429d      	cmp	r5, r3
   10d78:	d903      	bls.n	10d82 <__aeabi_ddiv+0x3ba>
   10d7a:	2580      	movs	r5, #128	; 0x80
   10d7c:	026d      	lsls	r5, r5, #9
   10d7e:	46ac      	mov	ip, r5
   10d80:	4460      	add	r0, ip
   10d82:	0c1d      	lsrs	r5, r3, #16
   10d84:	0412      	lsls	r2, r2, #16
   10d86:	041b      	lsls	r3, r3, #16
   10d88:	0c12      	lsrs	r2, r2, #16
   10d8a:	1828      	adds	r0, r5, r0
   10d8c:	189b      	adds	r3, r3, r2
   10d8e:	4286      	cmp	r6, r0
   10d90:	d200      	bcs.n	10d94 <__aeabi_ddiv+0x3cc>
   10d92:	e093      	b.n	10ebc <__aeabi_ddiv+0x4f4>
   10d94:	d100      	bne.n	10d98 <__aeabi_ddiv+0x3d0>
   10d96:	e08e      	b.n	10eb6 <__aeabi_ddiv+0x4ee>
   10d98:	2301      	movs	r3, #1
   10d9a:	4319      	orrs	r1, r3
   10d9c:	4ba0      	ldr	r3, [pc, #640]	; (11020 <__aeabi_ddiv+0x658>)
   10d9e:	18e3      	adds	r3, r4, r3
   10da0:	2b00      	cmp	r3, #0
   10da2:	dc00      	bgt.n	10da6 <__aeabi_ddiv+0x3de>
   10da4:	e099      	b.n	10eda <__aeabi_ddiv+0x512>
   10da6:	074a      	lsls	r2, r1, #29
   10da8:	d000      	beq.n	10dac <__aeabi_ddiv+0x3e4>
   10daa:	e09e      	b.n	10eea <__aeabi_ddiv+0x522>
   10dac:	465a      	mov	r2, fp
   10dae:	01d2      	lsls	r2, r2, #7
   10db0:	d506      	bpl.n	10dc0 <__aeabi_ddiv+0x3f8>
   10db2:	465a      	mov	r2, fp
   10db4:	4b9b      	ldr	r3, [pc, #620]	; (11024 <__aeabi_ddiv+0x65c>)
   10db6:	401a      	ands	r2, r3
   10db8:	2380      	movs	r3, #128	; 0x80
   10dba:	4693      	mov	fp, r2
   10dbc:	00db      	lsls	r3, r3, #3
   10dbe:	18e3      	adds	r3, r4, r3
   10dc0:	4a99      	ldr	r2, [pc, #612]	; (11028 <__aeabi_ddiv+0x660>)
   10dc2:	4293      	cmp	r3, r2
   10dc4:	dd68      	ble.n	10e98 <__aeabi_ddiv+0x4d0>
   10dc6:	2301      	movs	r3, #1
   10dc8:	9a02      	ldr	r2, [sp, #8]
   10dca:	4c98      	ldr	r4, [pc, #608]	; (1102c <__aeabi_ddiv+0x664>)
   10dcc:	401a      	ands	r2, r3
   10dce:	2300      	movs	r3, #0
   10dd0:	4694      	mov	ip, r2
   10dd2:	4698      	mov	r8, r3
   10dd4:	2200      	movs	r2, #0
   10dd6:	e6c5      	b.n	10b64 <__aeabi_ddiv+0x19c>
   10dd8:	2280      	movs	r2, #128	; 0x80
   10dda:	464b      	mov	r3, r9
   10ddc:	0312      	lsls	r2, r2, #12
   10dde:	4213      	tst	r3, r2
   10de0:	d00a      	beq.n	10df8 <__aeabi_ddiv+0x430>
   10de2:	465b      	mov	r3, fp
   10de4:	4213      	tst	r3, r2
   10de6:	d106      	bne.n	10df6 <__aeabi_ddiv+0x42e>
   10de8:	431a      	orrs	r2, r3
   10dea:	0312      	lsls	r2, r2, #12
   10dec:	0b12      	lsrs	r2, r2, #12
   10dee:	46ac      	mov	ip, r5
   10df0:	4688      	mov	r8, r1
   10df2:	4c8e      	ldr	r4, [pc, #568]	; (1102c <__aeabi_ddiv+0x664>)
   10df4:	e6b6      	b.n	10b64 <__aeabi_ddiv+0x19c>
   10df6:	464b      	mov	r3, r9
   10df8:	431a      	orrs	r2, r3
   10dfa:	0312      	lsls	r2, r2, #12
   10dfc:	0b12      	lsrs	r2, r2, #12
   10dfe:	46bc      	mov	ip, r7
   10e00:	4c8a      	ldr	r4, [pc, #552]	; (1102c <__aeabi_ddiv+0x664>)
   10e02:	e6af      	b.n	10b64 <__aeabi_ddiv+0x19c>
   10e04:	0003      	movs	r3, r0
   10e06:	465a      	mov	r2, fp
   10e08:	3b28      	subs	r3, #40	; 0x28
   10e0a:	409a      	lsls	r2, r3
   10e0c:	2300      	movs	r3, #0
   10e0e:	4691      	mov	r9, r2
   10e10:	4698      	mov	r8, r3
   10e12:	e657      	b.n	10ac4 <__aeabi_ddiv+0xfc>
   10e14:	4658      	mov	r0, fp
   10e16:	f001 f837 	bl	11e88 <__clzsi2>
   10e1a:	3020      	adds	r0, #32
   10e1c:	e640      	b.n	10aa0 <__aeabi_ddiv+0xd8>
   10e1e:	0003      	movs	r3, r0
   10e20:	4652      	mov	r2, sl
   10e22:	3b28      	subs	r3, #40	; 0x28
   10e24:	409a      	lsls	r2, r3
   10e26:	2100      	movs	r1, #0
   10e28:	4693      	mov	fp, r2
   10e2a:	e677      	b.n	10b1c <__aeabi_ddiv+0x154>
   10e2c:	f001 f82c 	bl	11e88 <__clzsi2>
   10e30:	3020      	adds	r0, #32
   10e32:	e65f      	b.n	10af4 <__aeabi_ddiv+0x12c>
   10e34:	4588      	cmp	r8, r1
   10e36:	d200      	bcs.n	10e3a <__aeabi_ddiv+0x472>
   10e38:	e6c7      	b.n	10bca <__aeabi_ddiv+0x202>
   10e3a:	464b      	mov	r3, r9
   10e3c:	07de      	lsls	r6, r3, #31
   10e3e:	085d      	lsrs	r5, r3, #1
   10e40:	4643      	mov	r3, r8
   10e42:	085b      	lsrs	r3, r3, #1
   10e44:	431e      	orrs	r6, r3
   10e46:	4643      	mov	r3, r8
   10e48:	07db      	lsls	r3, r3, #31
   10e4a:	469a      	mov	sl, r3
   10e4c:	e6c2      	b.n	10bd4 <__aeabi_ddiv+0x20c>
   10e4e:	2500      	movs	r5, #0
   10e50:	4592      	cmp	sl, r2
   10e52:	d300      	bcc.n	10e56 <__aeabi_ddiv+0x48e>
   10e54:	e733      	b.n	10cbe <__aeabi_ddiv+0x2f6>
   10e56:	9e03      	ldr	r6, [sp, #12]
   10e58:	4659      	mov	r1, fp
   10e5a:	46b4      	mov	ip, r6
   10e5c:	44e2      	add	sl, ip
   10e5e:	45b2      	cmp	sl, r6
   10e60:	41ad      	sbcs	r5, r5
   10e62:	426d      	negs	r5, r5
   10e64:	4445      	add	r5, r8
   10e66:	18eb      	adds	r3, r5, r3
   10e68:	3901      	subs	r1, #1
   10e6a:	4598      	cmp	r8, r3
   10e6c:	d207      	bcs.n	10e7e <__aeabi_ddiv+0x4b6>
   10e6e:	4298      	cmp	r0, r3
   10e70:	d900      	bls.n	10e74 <__aeabi_ddiv+0x4ac>
   10e72:	e07f      	b.n	10f74 <__aeabi_ddiv+0x5ac>
   10e74:	d100      	bne.n	10e78 <__aeabi_ddiv+0x4b0>
   10e76:	e0bc      	b.n	10ff2 <__aeabi_ddiv+0x62a>
   10e78:	1a1d      	subs	r5, r3, r0
   10e7a:	468b      	mov	fp, r1
   10e7c:	e71f      	b.n	10cbe <__aeabi_ddiv+0x2f6>
   10e7e:	4598      	cmp	r8, r3
   10e80:	d1fa      	bne.n	10e78 <__aeabi_ddiv+0x4b0>
   10e82:	9d03      	ldr	r5, [sp, #12]
   10e84:	4555      	cmp	r5, sl
   10e86:	d9f2      	bls.n	10e6e <__aeabi_ddiv+0x4a6>
   10e88:	4643      	mov	r3, r8
   10e8a:	468b      	mov	fp, r1
   10e8c:	1a1d      	subs	r5, r3, r0
   10e8e:	e716      	b.n	10cbe <__aeabi_ddiv+0x2f6>
   10e90:	469b      	mov	fp, r3
   10e92:	e6ca      	b.n	10c2a <__aeabi_ddiv+0x262>
   10e94:	0015      	movs	r5, r2
   10e96:	e6e7      	b.n	10c68 <__aeabi_ddiv+0x2a0>
   10e98:	465a      	mov	r2, fp
   10e9a:	08c9      	lsrs	r1, r1, #3
   10e9c:	0752      	lsls	r2, r2, #29
   10e9e:	430a      	orrs	r2, r1
   10ea0:	055b      	lsls	r3, r3, #21
   10ea2:	4690      	mov	r8, r2
   10ea4:	0d5c      	lsrs	r4, r3, #21
   10ea6:	465a      	mov	r2, fp
   10ea8:	2301      	movs	r3, #1
   10eaa:	9902      	ldr	r1, [sp, #8]
   10eac:	0252      	lsls	r2, r2, #9
   10eae:	4019      	ands	r1, r3
   10eb0:	0b12      	lsrs	r2, r2, #12
   10eb2:	468c      	mov	ip, r1
   10eb4:	e656      	b.n	10b64 <__aeabi_ddiv+0x19c>
   10eb6:	2b00      	cmp	r3, #0
   10eb8:	d100      	bne.n	10ebc <__aeabi_ddiv+0x4f4>
   10eba:	e76f      	b.n	10d9c <__aeabi_ddiv+0x3d4>
   10ebc:	4446      	add	r6, r8
   10ebe:	1e4a      	subs	r2, r1, #1
   10ec0:	45b0      	cmp	r8, r6
   10ec2:	d929      	bls.n	10f18 <__aeabi_ddiv+0x550>
   10ec4:	0011      	movs	r1, r2
   10ec6:	4286      	cmp	r6, r0
   10ec8:	d000      	beq.n	10ecc <__aeabi_ddiv+0x504>
   10eca:	e765      	b.n	10d98 <__aeabi_ddiv+0x3d0>
   10ecc:	9a03      	ldr	r2, [sp, #12]
   10ece:	4293      	cmp	r3, r2
   10ed0:	d000      	beq.n	10ed4 <__aeabi_ddiv+0x50c>
   10ed2:	e761      	b.n	10d98 <__aeabi_ddiv+0x3d0>
   10ed4:	e762      	b.n	10d9c <__aeabi_ddiv+0x3d4>
   10ed6:	2101      	movs	r1, #1
   10ed8:	4249      	negs	r1, r1
   10eda:	2001      	movs	r0, #1
   10edc:	1ac2      	subs	r2, r0, r3
   10ede:	2a38      	cmp	r2, #56	; 0x38
   10ee0:	dd21      	ble.n	10f26 <__aeabi_ddiv+0x55e>
   10ee2:	9b02      	ldr	r3, [sp, #8]
   10ee4:	4003      	ands	r3, r0
   10ee6:	469c      	mov	ip, r3
   10ee8:	e638      	b.n	10b5c <__aeabi_ddiv+0x194>
   10eea:	220f      	movs	r2, #15
   10eec:	400a      	ands	r2, r1
   10eee:	2a04      	cmp	r2, #4
   10ef0:	d100      	bne.n	10ef4 <__aeabi_ddiv+0x52c>
   10ef2:	e75b      	b.n	10dac <__aeabi_ddiv+0x3e4>
   10ef4:	000a      	movs	r2, r1
   10ef6:	1d11      	adds	r1, r2, #4
   10ef8:	4291      	cmp	r1, r2
   10efa:	4192      	sbcs	r2, r2
   10efc:	4252      	negs	r2, r2
   10efe:	4493      	add	fp, r2
   10f00:	e754      	b.n	10dac <__aeabi_ddiv+0x3e4>
   10f02:	4b47      	ldr	r3, [pc, #284]	; (11020 <__aeabi_ddiv+0x658>)
   10f04:	18e3      	adds	r3, r4, r3
   10f06:	2b00      	cmp	r3, #0
   10f08:	dde5      	ble.n	10ed6 <__aeabi_ddiv+0x50e>
   10f0a:	2201      	movs	r2, #1
   10f0c:	4252      	negs	r2, r2
   10f0e:	e7f2      	b.n	10ef6 <__aeabi_ddiv+0x52e>
   10f10:	001d      	movs	r5, r3
   10f12:	e6fa      	b.n	10d0a <__aeabi_ddiv+0x342>
   10f14:	469a      	mov	sl, r3
   10f16:	e71c      	b.n	10d52 <__aeabi_ddiv+0x38a>
   10f18:	42b0      	cmp	r0, r6
   10f1a:	d839      	bhi.n	10f90 <__aeabi_ddiv+0x5c8>
   10f1c:	d06e      	beq.n	10ffc <__aeabi_ddiv+0x634>
   10f1e:	0011      	movs	r1, r2
   10f20:	e73a      	b.n	10d98 <__aeabi_ddiv+0x3d0>
   10f22:	9302      	str	r3, [sp, #8]
   10f24:	e73a      	b.n	10d9c <__aeabi_ddiv+0x3d4>
   10f26:	2a1f      	cmp	r2, #31
   10f28:	dc3c      	bgt.n	10fa4 <__aeabi_ddiv+0x5dc>
   10f2a:	2320      	movs	r3, #32
   10f2c:	1a9b      	subs	r3, r3, r2
   10f2e:	000c      	movs	r4, r1
   10f30:	4658      	mov	r0, fp
   10f32:	4099      	lsls	r1, r3
   10f34:	4098      	lsls	r0, r3
   10f36:	1e4b      	subs	r3, r1, #1
   10f38:	4199      	sbcs	r1, r3
   10f3a:	465b      	mov	r3, fp
   10f3c:	40d4      	lsrs	r4, r2
   10f3e:	40d3      	lsrs	r3, r2
   10f40:	4320      	orrs	r0, r4
   10f42:	4308      	orrs	r0, r1
   10f44:	001a      	movs	r2, r3
   10f46:	0743      	lsls	r3, r0, #29
   10f48:	d009      	beq.n	10f5e <__aeabi_ddiv+0x596>
   10f4a:	230f      	movs	r3, #15
   10f4c:	4003      	ands	r3, r0
   10f4e:	2b04      	cmp	r3, #4
   10f50:	d005      	beq.n	10f5e <__aeabi_ddiv+0x596>
   10f52:	0001      	movs	r1, r0
   10f54:	1d08      	adds	r0, r1, #4
   10f56:	4288      	cmp	r0, r1
   10f58:	419b      	sbcs	r3, r3
   10f5a:	425b      	negs	r3, r3
   10f5c:	18d2      	adds	r2, r2, r3
   10f5e:	0213      	lsls	r3, r2, #8
   10f60:	d53a      	bpl.n	10fd8 <__aeabi_ddiv+0x610>
   10f62:	2301      	movs	r3, #1
   10f64:	9a02      	ldr	r2, [sp, #8]
   10f66:	2401      	movs	r4, #1
   10f68:	401a      	ands	r2, r3
   10f6a:	2300      	movs	r3, #0
   10f6c:	4694      	mov	ip, r2
   10f6e:	4698      	mov	r8, r3
   10f70:	2200      	movs	r2, #0
   10f72:	e5f7      	b.n	10b64 <__aeabi_ddiv+0x19c>
   10f74:	2102      	movs	r1, #2
   10f76:	4249      	negs	r1, r1
   10f78:	468c      	mov	ip, r1
   10f7a:	9d03      	ldr	r5, [sp, #12]
   10f7c:	44e3      	add	fp, ip
   10f7e:	46ac      	mov	ip, r5
   10f80:	44e2      	add	sl, ip
   10f82:	45aa      	cmp	sl, r5
   10f84:	41ad      	sbcs	r5, r5
   10f86:	426d      	negs	r5, r5
   10f88:	4445      	add	r5, r8
   10f8a:	18ed      	adds	r5, r5, r3
   10f8c:	1a2d      	subs	r5, r5, r0
   10f8e:	e696      	b.n	10cbe <__aeabi_ddiv+0x2f6>
   10f90:	1e8a      	subs	r2, r1, #2
   10f92:	9903      	ldr	r1, [sp, #12]
   10f94:	004d      	lsls	r5, r1, #1
   10f96:	428d      	cmp	r5, r1
   10f98:	4189      	sbcs	r1, r1
   10f9a:	4249      	negs	r1, r1
   10f9c:	4441      	add	r1, r8
   10f9e:	1876      	adds	r6, r6, r1
   10fa0:	9503      	str	r5, [sp, #12]
   10fa2:	e78f      	b.n	10ec4 <__aeabi_ddiv+0x4fc>
   10fa4:	201f      	movs	r0, #31
   10fa6:	4240      	negs	r0, r0
   10fa8:	1ac3      	subs	r3, r0, r3
   10faa:	4658      	mov	r0, fp
   10fac:	40d8      	lsrs	r0, r3
   10fae:	0003      	movs	r3, r0
   10fb0:	2a20      	cmp	r2, #32
   10fb2:	d028      	beq.n	11006 <__aeabi_ddiv+0x63e>
   10fb4:	2040      	movs	r0, #64	; 0x40
   10fb6:	465d      	mov	r5, fp
   10fb8:	1a82      	subs	r2, r0, r2
   10fba:	4095      	lsls	r5, r2
   10fbc:	4329      	orrs	r1, r5
   10fbe:	1e4a      	subs	r2, r1, #1
   10fc0:	4191      	sbcs	r1, r2
   10fc2:	4319      	orrs	r1, r3
   10fc4:	2307      	movs	r3, #7
   10fc6:	2200      	movs	r2, #0
   10fc8:	400b      	ands	r3, r1
   10fca:	d009      	beq.n	10fe0 <__aeabi_ddiv+0x618>
   10fcc:	230f      	movs	r3, #15
   10fce:	2200      	movs	r2, #0
   10fd0:	400b      	ands	r3, r1
   10fd2:	0008      	movs	r0, r1
   10fd4:	2b04      	cmp	r3, #4
   10fd6:	d1bd      	bne.n	10f54 <__aeabi_ddiv+0x58c>
   10fd8:	0001      	movs	r1, r0
   10fda:	0753      	lsls	r3, r2, #29
   10fdc:	0252      	lsls	r2, r2, #9
   10fde:	0b12      	lsrs	r2, r2, #12
   10fe0:	08c9      	lsrs	r1, r1, #3
   10fe2:	4319      	orrs	r1, r3
   10fe4:	2301      	movs	r3, #1
   10fe6:	4688      	mov	r8, r1
   10fe8:	9902      	ldr	r1, [sp, #8]
   10fea:	2400      	movs	r4, #0
   10fec:	4019      	ands	r1, r3
   10fee:	468c      	mov	ip, r1
   10ff0:	e5b8      	b.n	10b64 <__aeabi_ddiv+0x19c>
   10ff2:	4552      	cmp	r2, sl
   10ff4:	d8be      	bhi.n	10f74 <__aeabi_ddiv+0x5ac>
   10ff6:	468b      	mov	fp, r1
   10ff8:	2500      	movs	r5, #0
   10ffa:	e660      	b.n	10cbe <__aeabi_ddiv+0x2f6>
   10ffc:	9d03      	ldr	r5, [sp, #12]
   10ffe:	429d      	cmp	r5, r3
   11000:	d3c6      	bcc.n	10f90 <__aeabi_ddiv+0x5c8>
   11002:	0011      	movs	r1, r2
   11004:	e762      	b.n	10ecc <__aeabi_ddiv+0x504>
   11006:	2500      	movs	r5, #0
   11008:	e7d8      	b.n	10fbc <__aeabi_ddiv+0x5f4>
   1100a:	2280      	movs	r2, #128	; 0x80
   1100c:	465b      	mov	r3, fp
   1100e:	0312      	lsls	r2, r2, #12
   11010:	431a      	orrs	r2, r3
   11012:	9b01      	ldr	r3, [sp, #4]
   11014:	0312      	lsls	r2, r2, #12
   11016:	0b12      	lsrs	r2, r2, #12
   11018:	469c      	mov	ip, r3
   1101a:	4688      	mov	r8, r1
   1101c:	4c03      	ldr	r4, [pc, #12]	; (1102c <__aeabi_ddiv+0x664>)
   1101e:	e5a1      	b.n	10b64 <__aeabi_ddiv+0x19c>
   11020:	000003ff 	.word	0x000003ff
   11024:	feffffff 	.word	0xfeffffff
   11028:	000007fe 	.word	0x000007fe
   1102c:	000007ff 	.word	0x000007ff

00011030 <__eqdf2>:
   11030:	b5f0      	push	{r4, r5, r6, r7, lr}
   11032:	464f      	mov	r7, r9
   11034:	4646      	mov	r6, r8
   11036:	46d6      	mov	lr, sl
   11038:	005c      	lsls	r4, r3, #1
   1103a:	b5c0      	push	{r6, r7, lr}
   1103c:	031f      	lsls	r7, r3, #12
   1103e:	0fdb      	lsrs	r3, r3, #31
   11040:	469a      	mov	sl, r3
   11042:	4b17      	ldr	r3, [pc, #92]	; (110a0 <__eqdf2+0x70>)
   11044:	030e      	lsls	r6, r1, #12
   11046:	004d      	lsls	r5, r1, #1
   11048:	4684      	mov	ip, r0
   1104a:	4680      	mov	r8, r0
   1104c:	0b36      	lsrs	r6, r6, #12
   1104e:	0d6d      	lsrs	r5, r5, #21
   11050:	0fc9      	lsrs	r1, r1, #31
   11052:	4691      	mov	r9, r2
   11054:	0b3f      	lsrs	r7, r7, #12
   11056:	0d64      	lsrs	r4, r4, #21
   11058:	2001      	movs	r0, #1
   1105a:	429d      	cmp	r5, r3
   1105c:	d008      	beq.n	11070 <__eqdf2+0x40>
   1105e:	429c      	cmp	r4, r3
   11060:	d001      	beq.n	11066 <__eqdf2+0x36>
   11062:	42a5      	cmp	r5, r4
   11064:	d00b      	beq.n	1107e <__eqdf2+0x4e>
   11066:	bc1c      	pop	{r2, r3, r4}
   11068:	4690      	mov	r8, r2
   1106a:	4699      	mov	r9, r3
   1106c:	46a2      	mov	sl, r4
   1106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11070:	4663      	mov	r3, ip
   11072:	4333      	orrs	r3, r6
   11074:	d1f7      	bne.n	11066 <__eqdf2+0x36>
   11076:	42ac      	cmp	r4, r5
   11078:	d1f5      	bne.n	11066 <__eqdf2+0x36>
   1107a:	433a      	orrs	r2, r7
   1107c:	d1f3      	bne.n	11066 <__eqdf2+0x36>
   1107e:	2001      	movs	r0, #1
   11080:	42be      	cmp	r6, r7
   11082:	d1f0      	bne.n	11066 <__eqdf2+0x36>
   11084:	45c8      	cmp	r8, r9
   11086:	d1ee      	bne.n	11066 <__eqdf2+0x36>
   11088:	4551      	cmp	r1, sl
   1108a:	d007      	beq.n	1109c <__eqdf2+0x6c>
   1108c:	2d00      	cmp	r5, #0
   1108e:	d1ea      	bne.n	11066 <__eqdf2+0x36>
   11090:	4663      	mov	r3, ip
   11092:	431e      	orrs	r6, r3
   11094:	0030      	movs	r0, r6
   11096:	1e46      	subs	r6, r0, #1
   11098:	41b0      	sbcs	r0, r6
   1109a:	e7e4      	b.n	11066 <__eqdf2+0x36>
   1109c:	2000      	movs	r0, #0
   1109e:	e7e2      	b.n	11066 <__eqdf2+0x36>
   110a0:	000007ff 	.word	0x000007ff

000110a4 <__gedf2>:
   110a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   110a6:	4645      	mov	r5, r8
   110a8:	46de      	mov	lr, fp
   110aa:	4657      	mov	r7, sl
   110ac:	464e      	mov	r6, r9
   110ae:	b5e0      	push	{r5, r6, r7, lr}
   110b0:	031f      	lsls	r7, r3, #12
   110b2:	0b3d      	lsrs	r5, r7, #12
   110b4:	4f2c      	ldr	r7, [pc, #176]	; (11168 <__gedf2+0xc4>)
   110b6:	030e      	lsls	r6, r1, #12
   110b8:	004c      	lsls	r4, r1, #1
   110ba:	46ab      	mov	fp, r5
   110bc:	005d      	lsls	r5, r3, #1
   110be:	4684      	mov	ip, r0
   110c0:	0b36      	lsrs	r6, r6, #12
   110c2:	0d64      	lsrs	r4, r4, #21
   110c4:	0fc9      	lsrs	r1, r1, #31
   110c6:	4690      	mov	r8, r2
   110c8:	0d6d      	lsrs	r5, r5, #21
   110ca:	0fdb      	lsrs	r3, r3, #31
   110cc:	42bc      	cmp	r4, r7
   110ce:	d02a      	beq.n	11126 <__gedf2+0x82>
   110d0:	4f25      	ldr	r7, [pc, #148]	; (11168 <__gedf2+0xc4>)
   110d2:	42bd      	cmp	r5, r7
   110d4:	d02d      	beq.n	11132 <__gedf2+0x8e>
   110d6:	2c00      	cmp	r4, #0
   110d8:	d10f      	bne.n	110fa <__gedf2+0x56>
   110da:	4330      	orrs	r0, r6
   110dc:	0007      	movs	r7, r0
   110de:	4681      	mov	r9, r0
   110e0:	4278      	negs	r0, r7
   110e2:	4178      	adcs	r0, r7
   110e4:	b2c0      	uxtb	r0, r0
   110e6:	2d00      	cmp	r5, #0
   110e8:	d117      	bne.n	1111a <__gedf2+0x76>
   110ea:	465f      	mov	r7, fp
   110ec:	433a      	orrs	r2, r7
   110ee:	d114      	bne.n	1111a <__gedf2+0x76>
   110f0:	464b      	mov	r3, r9
   110f2:	2000      	movs	r0, #0
   110f4:	2b00      	cmp	r3, #0
   110f6:	d00a      	beq.n	1110e <__gedf2+0x6a>
   110f8:	e006      	b.n	11108 <__gedf2+0x64>
   110fa:	2d00      	cmp	r5, #0
   110fc:	d102      	bne.n	11104 <__gedf2+0x60>
   110fe:	4658      	mov	r0, fp
   11100:	4302      	orrs	r2, r0
   11102:	d001      	beq.n	11108 <__gedf2+0x64>
   11104:	4299      	cmp	r1, r3
   11106:	d018      	beq.n	1113a <__gedf2+0x96>
   11108:	4248      	negs	r0, r1
   1110a:	2101      	movs	r1, #1
   1110c:	4308      	orrs	r0, r1
   1110e:	bc3c      	pop	{r2, r3, r4, r5}
   11110:	4690      	mov	r8, r2
   11112:	4699      	mov	r9, r3
   11114:	46a2      	mov	sl, r4
   11116:	46ab      	mov	fp, r5
   11118:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1111a:	2800      	cmp	r0, #0
   1111c:	d0f2      	beq.n	11104 <__gedf2+0x60>
   1111e:	2001      	movs	r0, #1
   11120:	3b01      	subs	r3, #1
   11122:	4318      	orrs	r0, r3
   11124:	e7f3      	b.n	1110e <__gedf2+0x6a>
   11126:	0037      	movs	r7, r6
   11128:	4307      	orrs	r7, r0
   1112a:	d0d1      	beq.n	110d0 <__gedf2+0x2c>
   1112c:	2002      	movs	r0, #2
   1112e:	4240      	negs	r0, r0
   11130:	e7ed      	b.n	1110e <__gedf2+0x6a>
   11132:	465f      	mov	r7, fp
   11134:	4317      	orrs	r7, r2
   11136:	d0ce      	beq.n	110d6 <__gedf2+0x32>
   11138:	e7f8      	b.n	1112c <__gedf2+0x88>
   1113a:	42ac      	cmp	r4, r5
   1113c:	dce4      	bgt.n	11108 <__gedf2+0x64>
   1113e:	da03      	bge.n	11148 <__gedf2+0xa4>
   11140:	1e48      	subs	r0, r1, #1
   11142:	2101      	movs	r1, #1
   11144:	4308      	orrs	r0, r1
   11146:	e7e2      	b.n	1110e <__gedf2+0x6a>
   11148:	455e      	cmp	r6, fp
   1114a:	d8dd      	bhi.n	11108 <__gedf2+0x64>
   1114c:	d006      	beq.n	1115c <__gedf2+0xb8>
   1114e:	2000      	movs	r0, #0
   11150:	455e      	cmp	r6, fp
   11152:	d2dc      	bcs.n	1110e <__gedf2+0x6a>
   11154:	2301      	movs	r3, #1
   11156:	1e48      	subs	r0, r1, #1
   11158:	4318      	orrs	r0, r3
   1115a:	e7d8      	b.n	1110e <__gedf2+0x6a>
   1115c:	45c4      	cmp	ip, r8
   1115e:	d8d3      	bhi.n	11108 <__gedf2+0x64>
   11160:	2000      	movs	r0, #0
   11162:	45c4      	cmp	ip, r8
   11164:	d3f6      	bcc.n	11154 <__gedf2+0xb0>
   11166:	e7d2      	b.n	1110e <__gedf2+0x6a>
   11168:	000007ff 	.word	0x000007ff

0001116c <__ledf2>:
   1116c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1116e:	464e      	mov	r6, r9
   11170:	4645      	mov	r5, r8
   11172:	46de      	mov	lr, fp
   11174:	4657      	mov	r7, sl
   11176:	005c      	lsls	r4, r3, #1
   11178:	b5e0      	push	{r5, r6, r7, lr}
   1117a:	031f      	lsls	r7, r3, #12
   1117c:	0fdb      	lsrs	r3, r3, #31
   1117e:	4699      	mov	r9, r3
   11180:	4b2a      	ldr	r3, [pc, #168]	; (1122c <__ledf2+0xc0>)
   11182:	030e      	lsls	r6, r1, #12
   11184:	004d      	lsls	r5, r1, #1
   11186:	0fc9      	lsrs	r1, r1, #31
   11188:	4684      	mov	ip, r0
   1118a:	0b36      	lsrs	r6, r6, #12
   1118c:	0d6d      	lsrs	r5, r5, #21
   1118e:	468b      	mov	fp, r1
   11190:	4690      	mov	r8, r2
   11192:	0b3f      	lsrs	r7, r7, #12
   11194:	0d64      	lsrs	r4, r4, #21
   11196:	429d      	cmp	r5, r3
   11198:	d020      	beq.n	111dc <__ledf2+0x70>
   1119a:	4b24      	ldr	r3, [pc, #144]	; (1122c <__ledf2+0xc0>)
   1119c:	429c      	cmp	r4, r3
   1119e:	d022      	beq.n	111e6 <__ledf2+0x7a>
   111a0:	2d00      	cmp	r5, #0
   111a2:	d112      	bne.n	111ca <__ledf2+0x5e>
   111a4:	4330      	orrs	r0, r6
   111a6:	4243      	negs	r3, r0
   111a8:	4143      	adcs	r3, r0
   111aa:	b2db      	uxtb	r3, r3
   111ac:	2c00      	cmp	r4, #0
   111ae:	d01f      	beq.n	111f0 <__ledf2+0x84>
   111b0:	2b00      	cmp	r3, #0
   111b2:	d00c      	beq.n	111ce <__ledf2+0x62>
   111b4:	464b      	mov	r3, r9
   111b6:	2001      	movs	r0, #1
   111b8:	3b01      	subs	r3, #1
   111ba:	4303      	orrs	r3, r0
   111bc:	0018      	movs	r0, r3
   111be:	bc3c      	pop	{r2, r3, r4, r5}
   111c0:	4690      	mov	r8, r2
   111c2:	4699      	mov	r9, r3
   111c4:	46a2      	mov	sl, r4
   111c6:	46ab      	mov	fp, r5
   111c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111ca:	2c00      	cmp	r4, #0
   111cc:	d016      	beq.n	111fc <__ledf2+0x90>
   111ce:	45cb      	cmp	fp, r9
   111d0:	d017      	beq.n	11202 <__ledf2+0x96>
   111d2:	465b      	mov	r3, fp
   111d4:	4259      	negs	r1, r3
   111d6:	2301      	movs	r3, #1
   111d8:	430b      	orrs	r3, r1
   111da:	e7ef      	b.n	111bc <__ledf2+0x50>
   111dc:	0031      	movs	r1, r6
   111de:	2302      	movs	r3, #2
   111e0:	4301      	orrs	r1, r0
   111e2:	d1eb      	bne.n	111bc <__ledf2+0x50>
   111e4:	e7d9      	b.n	1119a <__ledf2+0x2e>
   111e6:	0039      	movs	r1, r7
   111e8:	2302      	movs	r3, #2
   111ea:	4311      	orrs	r1, r2
   111ec:	d1e6      	bne.n	111bc <__ledf2+0x50>
   111ee:	e7d7      	b.n	111a0 <__ledf2+0x34>
   111f0:	433a      	orrs	r2, r7
   111f2:	d1dd      	bne.n	111b0 <__ledf2+0x44>
   111f4:	2300      	movs	r3, #0
   111f6:	2800      	cmp	r0, #0
   111f8:	d0e0      	beq.n	111bc <__ledf2+0x50>
   111fa:	e7ea      	b.n	111d2 <__ledf2+0x66>
   111fc:	433a      	orrs	r2, r7
   111fe:	d1e6      	bne.n	111ce <__ledf2+0x62>
   11200:	e7e7      	b.n	111d2 <__ledf2+0x66>
   11202:	42a5      	cmp	r5, r4
   11204:	dce5      	bgt.n	111d2 <__ledf2+0x66>
   11206:	db05      	blt.n	11214 <__ledf2+0xa8>
   11208:	42be      	cmp	r6, r7
   1120a:	d8e2      	bhi.n	111d2 <__ledf2+0x66>
   1120c:	d007      	beq.n	1121e <__ledf2+0xb2>
   1120e:	2300      	movs	r3, #0
   11210:	42be      	cmp	r6, r7
   11212:	d2d3      	bcs.n	111bc <__ledf2+0x50>
   11214:	4659      	mov	r1, fp
   11216:	2301      	movs	r3, #1
   11218:	3901      	subs	r1, #1
   1121a:	430b      	orrs	r3, r1
   1121c:	e7ce      	b.n	111bc <__ledf2+0x50>
   1121e:	45c4      	cmp	ip, r8
   11220:	d8d7      	bhi.n	111d2 <__ledf2+0x66>
   11222:	2300      	movs	r3, #0
   11224:	45c4      	cmp	ip, r8
   11226:	d3f5      	bcc.n	11214 <__ledf2+0xa8>
   11228:	e7c8      	b.n	111bc <__ledf2+0x50>
   1122a:	46c0      	nop			; (mov r8, r8)
   1122c:	000007ff 	.word	0x000007ff

00011230 <__aeabi_dmul>:
   11230:	b5f0      	push	{r4, r5, r6, r7, lr}
   11232:	4657      	mov	r7, sl
   11234:	4645      	mov	r5, r8
   11236:	46de      	mov	lr, fp
   11238:	464e      	mov	r6, r9
   1123a:	b5e0      	push	{r5, r6, r7, lr}
   1123c:	030c      	lsls	r4, r1, #12
   1123e:	4698      	mov	r8, r3
   11240:	004e      	lsls	r6, r1, #1
   11242:	0b23      	lsrs	r3, r4, #12
   11244:	b087      	sub	sp, #28
   11246:	0007      	movs	r7, r0
   11248:	4692      	mov	sl, r2
   1124a:	469b      	mov	fp, r3
   1124c:	0d76      	lsrs	r6, r6, #21
   1124e:	0fcd      	lsrs	r5, r1, #31
   11250:	2e00      	cmp	r6, #0
   11252:	d06b      	beq.n	1132c <__aeabi_dmul+0xfc>
   11254:	4b6d      	ldr	r3, [pc, #436]	; (1140c <__aeabi_dmul+0x1dc>)
   11256:	429e      	cmp	r6, r3
   11258:	d035      	beq.n	112c6 <__aeabi_dmul+0x96>
   1125a:	2480      	movs	r4, #128	; 0x80
   1125c:	465b      	mov	r3, fp
   1125e:	0f42      	lsrs	r2, r0, #29
   11260:	0424      	lsls	r4, r4, #16
   11262:	00db      	lsls	r3, r3, #3
   11264:	4314      	orrs	r4, r2
   11266:	431c      	orrs	r4, r3
   11268:	00c3      	lsls	r3, r0, #3
   1126a:	4699      	mov	r9, r3
   1126c:	4b68      	ldr	r3, [pc, #416]	; (11410 <__aeabi_dmul+0x1e0>)
   1126e:	46a3      	mov	fp, r4
   11270:	469c      	mov	ip, r3
   11272:	2300      	movs	r3, #0
   11274:	2700      	movs	r7, #0
   11276:	4466      	add	r6, ip
   11278:	9302      	str	r3, [sp, #8]
   1127a:	4643      	mov	r3, r8
   1127c:	031c      	lsls	r4, r3, #12
   1127e:	005a      	lsls	r2, r3, #1
   11280:	0fdb      	lsrs	r3, r3, #31
   11282:	4650      	mov	r0, sl
   11284:	0b24      	lsrs	r4, r4, #12
   11286:	0d52      	lsrs	r2, r2, #21
   11288:	4698      	mov	r8, r3
   1128a:	d100      	bne.n	1128e <__aeabi_dmul+0x5e>
   1128c:	e076      	b.n	1137c <__aeabi_dmul+0x14c>
   1128e:	4b5f      	ldr	r3, [pc, #380]	; (1140c <__aeabi_dmul+0x1dc>)
   11290:	429a      	cmp	r2, r3
   11292:	d06d      	beq.n	11370 <__aeabi_dmul+0x140>
   11294:	2380      	movs	r3, #128	; 0x80
   11296:	0f41      	lsrs	r1, r0, #29
   11298:	041b      	lsls	r3, r3, #16
   1129a:	430b      	orrs	r3, r1
   1129c:	495c      	ldr	r1, [pc, #368]	; (11410 <__aeabi_dmul+0x1e0>)
   1129e:	00e4      	lsls	r4, r4, #3
   112a0:	468c      	mov	ip, r1
   112a2:	431c      	orrs	r4, r3
   112a4:	00c3      	lsls	r3, r0, #3
   112a6:	2000      	movs	r0, #0
   112a8:	4462      	add	r2, ip
   112aa:	4641      	mov	r1, r8
   112ac:	18b6      	adds	r6, r6, r2
   112ae:	4069      	eors	r1, r5
   112b0:	1c72      	adds	r2, r6, #1
   112b2:	9101      	str	r1, [sp, #4]
   112b4:	4694      	mov	ip, r2
   112b6:	4307      	orrs	r7, r0
   112b8:	2f0f      	cmp	r7, #15
   112ba:	d900      	bls.n	112be <__aeabi_dmul+0x8e>
   112bc:	e0b0      	b.n	11420 <__aeabi_dmul+0x1f0>
   112be:	4a55      	ldr	r2, [pc, #340]	; (11414 <__aeabi_dmul+0x1e4>)
   112c0:	00bf      	lsls	r7, r7, #2
   112c2:	59d2      	ldr	r2, [r2, r7]
   112c4:	4697      	mov	pc, r2
   112c6:	465b      	mov	r3, fp
   112c8:	4303      	orrs	r3, r0
   112ca:	4699      	mov	r9, r3
   112cc:	d000      	beq.n	112d0 <__aeabi_dmul+0xa0>
   112ce:	e087      	b.n	113e0 <__aeabi_dmul+0x1b0>
   112d0:	2300      	movs	r3, #0
   112d2:	469b      	mov	fp, r3
   112d4:	3302      	adds	r3, #2
   112d6:	2708      	movs	r7, #8
   112d8:	9302      	str	r3, [sp, #8]
   112da:	e7ce      	b.n	1127a <__aeabi_dmul+0x4a>
   112dc:	4642      	mov	r2, r8
   112de:	9201      	str	r2, [sp, #4]
   112e0:	2802      	cmp	r0, #2
   112e2:	d067      	beq.n	113b4 <__aeabi_dmul+0x184>
   112e4:	2803      	cmp	r0, #3
   112e6:	d100      	bne.n	112ea <__aeabi_dmul+0xba>
   112e8:	e20e      	b.n	11708 <__aeabi_dmul+0x4d8>
   112ea:	2801      	cmp	r0, #1
   112ec:	d000      	beq.n	112f0 <__aeabi_dmul+0xc0>
   112ee:	e162      	b.n	115b6 <__aeabi_dmul+0x386>
   112f0:	2300      	movs	r3, #0
   112f2:	2400      	movs	r4, #0
   112f4:	2200      	movs	r2, #0
   112f6:	4699      	mov	r9, r3
   112f8:	9901      	ldr	r1, [sp, #4]
   112fa:	4001      	ands	r1, r0
   112fc:	b2cd      	uxtb	r5, r1
   112fe:	2100      	movs	r1, #0
   11300:	0312      	lsls	r2, r2, #12
   11302:	0d0b      	lsrs	r3, r1, #20
   11304:	0b12      	lsrs	r2, r2, #12
   11306:	051b      	lsls	r3, r3, #20
   11308:	4313      	orrs	r3, r2
   1130a:	4a43      	ldr	r2, [pc, #268]	; (11418 <__aeabi_dmul+0x1e8>)
   1130c:	0524      	lsls	r4, r4, #20
   1130e:	4013      	ands	r3, r2
   11310:	431c      	orrs	r4, r3
   11312:	0064      	lsls	r4, r4, #1
   11314:	07ed      	lsls	r5, r5, #31
   11316:	0864      	lsrs	r4, r4, #1
   11318:	432c      	orrs	r4, r5
   1131a:	4648      	mov	r0, r9
   1131c:	0021      	movs	r1, r4
   1131e:	b007      	add	sp, #28
   11320:	bc3c      	pop	{r2, r3, r4, r5}
   11322:	4690      	mov	r8, r2
   11324:	4699      	mov	r9, r3
   11326:	46a2      	mov	sl, r4
   11328:	46ab      	mov	fp, r5
   1132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1132c:	4303      	orrs	r3, r0
   1132e:	4699      	mov	r9, r3
   11330:	d04f      	beq.n	113d2 <__aeabi_dmul+0x1a2>
   11332:	465b      	mov	r3, fp
   11334:	2b00      	cmp	r3, #0
   11336:	d100      	bne.n	1133a <__aeabi_dmul+0x10a>
   11338:	e189      	b.n	1164e <__aeabi_dmul+0x41e>
   1133a:	4658      	mov	r0, fp
   1133c:	f000 fda4 	bl	11e88 <__clzsi2>
   11340:	0003      	movs	r3, r0
   11342:	3b0b      	subs	r3, #11
   11344:	2b1c      	cmp	r3, #28
   11346:	dd00      	ble.n	1134a <__aeabi_dmul+0x11a>
   11348:	e17a      	b.n	11640 <__aeabi_dmul+0x410>
   1134a:	221d      	movs	r2, #29
   1134c:	1ad3      	subs	r3, r2, r3
   1134e:	003a      	movs	r2, r7
   11350:	0001      	movs	r1, r0
   11352:	465c      	mov	r4, fp
   11354:	40da      	lsrs	r2, r3
   11356:	3908      	subs	r1, #8
   11358:	408c      	lsls	r4, r1
   1135a:	0013      	movs	r3, r2
   1135c:	408f      	lsls	r7, r1
   1135e:	4323      	orrs	r3, r4
   11360:	469b      	mov	fp, r3
   11362:	46b9      	mov	r9, r7
   11364:	2300      	movs	r3, #0
   11366:	4e2d      	ldr	r6, [pc, #180]	; (1141c <__aeabi_dmul+0x1ec>)
   11368:	2700      	movs	r7, #0
   1136a:	1a36      	subs	r6, r6, r0
   1136c:	9302      	str	r3, [sp, #8]
   1136e:	e784      	b.n	1127a <__aeabi_dmul+0x4a>
   11370:	4653      	mov	r3, sl
   11372:	4323      	orrs	r3, r4
   11374:	d12a      	bne.n	113cc <__aeabi_dmul+0x19c>
   11376:	2400      	movs	r4, #0
   11378:	2002      	movs	r0, #2
   1137a:	e796      	b.n	112aa <__aeabi_dmul+0x7a>
   1137c:	4653      	mov	r3, sl
   1137e:	4323      	orrs	r3, r4
   11380:	d020      	beq.n	113c4 <__aeabi_dmul+0x194>
   11382:	2c00      	cmp	r4, #0
   11384:	d100      	bne.n	11388 <__aeabi_dmul+0x158>
   11386:	e157      	b.n	11638 <__aeabi_dmul+0x408>
   11388:	0020      	movs	r0, r4
   1138a:	f000 fd7d 	bl	11e88 <__clzsi2>
   1138e:	0003      	movs	r3, r0
   11390:	3b0b      	subs	r3, #11
   11392:	2b1c      	cmp	r3, #28
   11394:	dd00      	ble.n	11398 <__aeabi_dmul+0x168>
   11396:	e149      	b.n	1162c <__aeabi_dmul+0x3fc>
   11398:	211d      	movs	r1, #29
   1139a:	1acb      	subs	r3, r1, r3
   1139c:	4651      	mov	r1, sl
   1139e:	0002      	movs	r2, r0
   113a0:	40d9      	lsrs	r1, r3
   113a2:	4653      	mov	r3, sl
   113a4:	3a08      	subs	r2, #8
   113a6:	4094      	lsls	r4, r2
   113a8:	4093      	lsls	r3, r2
   113aa:	430c      	orrs	r4, r1
   113ac:	4a1b      	ldr	r2, [pc, #108]	; (1141c <__aeabi_dmul+0x1ec>)
   113ae:	1a12      	subs	r2, r2, r0
   113b0:	2000      	movs	r0, #0
   113b2:	e77a      	b.n	112aa <__aeabi_dmul+0x7a>
   113b4:	2501      	movs	r5, #1
   113b6:	9b01      	ldr	r3, [sp, #4]
   113b8:	4c14      	ldr	r4, [pc, #80]	; (1140c <__aeabi_dmul+0x1dc>)
   113ba:	401d      	ands	r5, r3
   113bc:	2300      	movs	r3, #0
   113be:	2200      	movs	r2, #0
   113c0:	4699      	mov	r9, r3
   113c2:	e79c      	b.n	112fe <__aeabi_dmul+0xce>
   113c4:	2400      	movs	r4, #0
   113c6:	2200      	movs	r2, #0
   113c8:	2001      	movs	r0, #1
   113ca:	e76e      	b.n	112aa <__aeabi_dmul+0x7a>
   113cc:	4653      	mov	r3, sl
   113ce:	2003      	movs	r0, #3
   113d0:	e76b      	b.n	112aa <__aeabi_dmul+0x7a>
   113d2:	2300      	movs	r3, #0
   113d4:	469b      	mov	fp, r3
   113d6:	3301      	adds	r3, #1
   113d8:	2704      	movs	r7, #4
   113da:	2600      	movs	r6, #0
   113dc:	9302      	str	r3, [sp, #8]
   113de:	e74c      	b.n	1127a <__aeabi_dmul+0x4a>
   113e0:	2303      	movs	r3, #3
   113e2:	4681      	mov	r9, r0
   113e4:	270c      	movs	r7, #12
   113e6:	9302      	str	r3, [sp, #8]
   113e8:	e747      	b.n	1127a <__aeabi_dmul+0x4a>
   113ea:	2280      	movs	r2, #128	; 0x80
   113ec:	2300      	movs	r3, #0
   113ee:	2500      	movs	r5, #0
   113f0:	0312      	lsls	r2, r2, #12
   113f2:	4699      	mov	r9, r3
   113f4:	4c05      	ldr	r4, [pc, #20]	; (1140c <__aeabi_dmul+0x1dc>)
   113f6:	e782      	b.n	112fe <__aeabi_dmul+0xce>
   113f8:	465c      	mov	r4, fp
   113fa:	464b      	mov	r3, r9
   113fc:	9802      	ldr	r0, [sp, #8]
   113fe:	e76f      	b.n	112e0 <__aeabi_dmul+0xb0>
   11400:	465c      	mov	r4, fp
   11402:	464b      	mov	r3, r9
   11404:	9501      	str	r5, [sp, #4]
   11406:	9802      	ldr	r0, [sp, #8]
   11408:	e76a      	b.n	112e0 <__aeabi_dmul+0xb0>
   1140a:	46c0      	nop			; (mov r8, r8)
   1140c:	000007ff 	.word	0x000007ff
   11410:	fffffc01 	.word	0xfffffc01
   11414:	000152b8 	.word	0x000152b8
   11418:	800fffff 	.word	0x800fffff
   1141c:	fffffc0d 	.word	0xfffffc0d
   11420:	464a      	mov	r2, r9
   11422:	4649      	mov	r1, r9
   11424:	0c17      	lsrs	r7, r2, #16
   11426:	0c1a      	lsrs	r2, r3, #16
   11428:	041b      	lsls	r3, r3, #16
   1142a:	0c1b      	lsrs	r3, r3, #16
   1142c:	0408      	lsls	r0, r1, #16
   1142e:	0019      	movs	r1, r3
   11430:	0c00      	lsrs	r0, r0, #16
   11432:	4341      	muls	r1, r0
   11434:	0015      	movs	r5, r2
   11436:	4688      	mov	r8, r1
   11438:	0019      	movs	r1, r3
   1143a:	437d      	muls	r5, r7
   1143c:	4379      	muls	r1, r7
   1143e:	9503      	str	r5, [sp, #12]
   11440:	4689      	mov	r9, r1
   11442:	0029      	movs	r1, r5
   11444:	0015      	movs	r5, r2
   11446:	4345      	muls	r5, r0
   11448:	444d      	add	r5, r9
   1144a:	9502      	str	r5, [sp, #8]
   1144c:	4645      	mov	r5, r8
   1144e:	0c2d      	lsrs	r5, r5, #16
   11450:	46aa      	mov	sl, r5
   11452:	9d02      	ldr	r5, [sp, #8]
   11454:	4455      	add	r5, sl
   11456:	45a9      	cmp	r9, r5
   11458:	d906      	bls.n	11468 <__aeabi_dmul+0x238>
   1145a:	468a      	mov	sl, r1
   1145c:	2180      	movs	r1, #128	; 0x80
   1145e:	0249      	lsls	r1, r1, #9
   11460:	4689      	mov	r9, r1
   11462:	44ca      	add	sl, r9
   11464:	4651      	mov	r1, sl
   11466:	9103      	str	r1, [sp, #12]
   11468:	0c29      	lsrs	r1, r5, #16
   1146a:	9104      	str	r1, [sp, #16]
   1146c:	4641      	mov	r1, r8
   1146e:	0409      	lsls	r1, r1, #16
   11470:	042d      	lsls	r5, r5, #16
   11472:	0c09      	lsrs	r1, r1, #16
   11474:	4688      	mov	r8, r1
   11476:	0029      	movs	r1, r5
   11478:	0c25      	lsrs	r5, r4, #16
   1147a:	0424      	lsls	r4, r4, #16
   1147c:	4441      	add	r1, r8
   1147e:	0c24      	lsrs	r4, r4, #16
   11480:	9105      	str	r1, [sp, #20]
   11482:	0021      	movs	r1, r4
   11484:	4341      	muls	r1, r0
   11486:	4688      	mov	r8, r1
   11488:	0021      	movs	r1, r4
   1148a:	4379      	muls	r1, r7
   1148c:	468a      	mov	sl, r1
   1148e:	4368      	muls	r0, r5
   11490:	4641      	mov	r1, r8
   11492:	4450      	add	r0, sl
   11494:	4681      	mov	r9, r0
   11496:	0c08      	lsrs	r0, r1, #16
   11498:	4448      	add	r0, r9
   1149a:	436f      	muls	r7, r5
   1149c:	4582      	cmp	sl, r0
   1149e:	d903      	bls.n	114a8 <__aeabi_dmul+0x278>
   114a0:	2180      	movs	r1, #128	; 0x80
   114a2:	0249      	lsls	r1, r1, #9
   114a4:	4689      	mov	r9, r1
   114a6:	444f      	add	r7, r9
   114a8:	0c01      	lsrs	r1, r0, #16
   114aa:	4689      	mov	r9, r1
   114ac:	0039      	movs	r1, r7
   114ae:	4449      	add	r1, r9
   114b0:	9102      	str	r1, [sp, #8]
   114b2:	4641      	mov	r1, r8
   114b4:	040f      	lsls	r7, r1, #16
   114b6:	9904      	ldr	r1, [sp, #16]
   114b8:	0c3f      	lsrs	r7, r7, #16
   114ba:	4688      	mov	r8, r1
   114bc:	0400      	lsls	r0, r0, #16
   114be:	19c0      	adds	r0, r0, r7
   114c0:	4480      	add	r8, r0
   114c2:	4641      	mov	r1, r8
   114c4:	9104      	str	r1, [sp, #16]
   114c6:	4659      	mov	r1, fp
   114c8:	0c0f      	lsrs	r7, r1, #16
   114ca:	0409      	lsls	r1, r1, #16
   114cc:	0c09      	lsrs	r1, r1, #16
   114ce:	4688      	mov	r8, r1
   114d0:	4359      	muls	r1, r3
   114d2:	468a      	mov	sl, r1
   114d4:	0039      	movs	r1, r7
   114d6:	4351      	muls	r1, r2
   114d8:	4689      	mov	r9, r1
   114da:	4641      	mov	r1, r8
   114dc:	434a      	muls	r2, r1
   114de:	4651      	mov	r1, sl
   114e0:	0c09      	lsrs	r1, r1, #16
   114e2:	468b      	mov	fp, r1
   114e4:	437b      	muls	r3, r7
   114e6:	18d2      	adds	r2, r2, r3
   114e8:	445a      	add	r2, fp
   114ea:	4293      	cmp	r3, r2
   114ec:	d903      	bls.n	114f6 <__aeabi_dmul+0x2c6>
   114ee:	2380      	movs	r3, #128	; 0x80
   114f0:	025b      	lsls	r3, r3, #9
   114f2:	469b      	mov	fp, r3
   114f4:	44d9      	add	r9, fp
   114f6:	4651      	mov	r1, sl
   114f8:	0409      	lsls	r1, r1, #16
   114fa:	0c09      	lsrs	r1, r1, #16
   114fc:	468a      	mov	sl, r1
   114fe:	4641      	mov	r1, r8
   11500:	4361      	muls	r1, r4
   11502:	437c      	muls	r4, r7
   11504:	0c13      	lsrs	r3, r2, #16
   11506:	0412      	lsls	r2, r2, #16
   11508:	444b      	add	r3, r9
   1150a:	4452      	add	r2, sl
   1150c:	46a1      	mov	r9, r4
   1150e:	468a      	mov	sl, r1
   11510:	003c      	movs	r4, r7
   11512:	4641      	mov	r1, r8
   11514:	436c      	muls	r4, r5
   11516:	434d      	muls	r5, r1
   11518:	4651      	mov	r1, sl
   1151a:	444d      	add	r5, r9
   1151c:	0c0f      	lsrs	r7, r1, #16
   1151e:	197d      	adds	r5, r7, r5
   11520:	45a9      	cmp	r9, r5
   11522:	d903      	bls.n	1152c <__aeabi_dmul+0x2fc>
   11524:	2180      	movs	r1, #128	; 0x80
   11526:	0249      	lsls	r1, r1, #9
   11528:	4688      	mov	r8, r1
   1152a:	4444      	add	r4, r8
   1152c:	9f04      	ldr	r7, [sp, #16]
   1152e:	9903      	ldr	r1, [sp, #12]
   11530:	46b8      	mov	r8, r7
   11532:	4441      	add	r1, r8
   11534:	468b      	mov	fp, r1
   11536:	4583      	cmp	fp, r0
   11538:	4180      	sbcs	r0, r0
   1153a:	4241      	negs	r1, r0
   1153c:	4688      	mov	r8, r1
   1153e:	4651      	mov	r1, sl
   11540:	0408      	lsls	r0, r1, #16
   11542:	042f      	lsls	r7, r5, #16
   11544:	0c00      	lsrs	r0, r0, #16
   11546:	183f      	adds	r7, r7, r0
   11548:	4658      	mov	r0, fp
   1154a:	9902      	ldr	r1, [sp, #8]
   1154c:	1810      	adds	r0, r2, r0
   1154e:	4689      	mov	r9, r1
   11550:	4290      	cmp	r0, r2
   11552:	4192      	sbcs	r2, r2
   11554:	444f      	add	r7, r9
   11556:	46ba      	mov	sl, r7
   11558:	4252      	negs	r2, r2
   1155a:	4699      	mov	r9, r3
   1155c:	4693      	mov	fp, r2
   1155e:	44c2      	add	sl, r8
   11560:	44d1      	add	r9, sl
   11562:	44cb      	add	fp, r9
   11564:	428f      	cmp	r7, r1
   11566:	41bf      	sbcs	r7, r7
   11568:	45c2      	cmp	sl, r8
   1156a:	4189      	sbcs	r1, r1
   1156c:	4599      	cmp	r9, r3
   1156e:	419b      	sbcs	r3, r3
   11570:	4593      	cmp	fp, r2
   11572:	4192      	sbcs	r2, r2
   11574:	427f      	negs	r7, r7
   11576:	4249      	negs	r1, r1
   11578:	0c2d      	lsrs	r5, r5, #16
   1157a:	4252      	negs	r2, r2
   1157c:	430f      	orrs	r7, r1
   1157e:	425b      	negs	r3, r3
   11580:	4313      	orrs	r3, r2
   11582:	197f      	adds	r7, r7, r5
   11584:	18ff      	adds	r7, r7, r3
   11586:	465b      	mov	r3, fp
   11588:	193c      	adds	r4, r7, r4
   1158a:	0ddb      	lsrs	r3, r3, #23
   1158c:	9a05      	ldr	r2, [sp, #20]
   1158e:	0264      	lsls	r4, r4, #9
   11590:	431c      	orrs	r4, r3
   11592:	0243      	lsls	r3, r0, #9
   11594:	4313      	orrs	r3, r2
   11596:	1e5d      	subs	r5, r3, #1
   11598:	41ab      	sbcs	r3, r5
   1159a:	465a      	mov	r2, fp
   1159c:	0dc0      	lsrs	r0, r0, #23
   1159e:	4303      	orrs	r3, r0
   115a0:	0252      	lsls	r2, r2, #9
   115a2:	4313      	orrs	r3, r2
   115a4:	01e2      	lsls	r2, r4, #7
   115a6:	d556      	bpl.n	11656 <__aeabi_dmul+0x426>
   115a8:	2001      	movs	r0, #1
   115aa:	085a      	lsrs	r2, r3, #1
   115ac:	4003      	ands	r3, r0
   115ae:	4313      	orrs	r3, r2
   115b0:	07e2      	lsls	r2, r4, #31
   115b2:	4313      	orrs	r3, r2
   115b4:	0864      	lsrs	r4, r4, #1
   115b6:	485a      	ldr	r0, [pc, #360]	; (11720 <__aeabi_dmul+0x4f0>)
   115b8:	4460      	add	r0, ip
   115ba:	2800      	cmp	r0, #0
   115bc:	dd4d      	ble.n	1165a <__aeabi_dmul+0x42a>
   115be:	075a      	lsls	r2, r3, #29
   115c0:	d009      	beq.n	115d6 <__aeabi_dmul+0x3a6>
   115c2:	220f      	movs	r2, #15
   115c4:	401a      	ands	r2, r3
   115c6:	2a04      	cmp	r2, #4
   115c8:	d005      	beq.n	115d6 <__aeabi_dmul+0x3a6>
   115ca:	1d1a      	adds	r2, r3, #4
   115cc:	429a      	cmp	r2, r3
   115ce:	419b      	sbcs	r3, r3
   115d0:	425b      	negs	r3, r3
   115d2:	18e4      	adds	r4, r4, r3
   115d4:	0013      	movs	r3, r2
   115d6:	01e2      	lsls	r2, r4, #7
   115d8:	d504      	bpl.n	115e4 <__aeabi_dmul+0x3b4>
   115da:	2080      	movs	r0, #128	; 0x80
   115dc:	4a51      	ldr	r2, [pc, #324]	; (11724 <__aeabi_dmul+0x4f4>)
   115de:	00c0      	lsls	r0, r0, #3
   115e0:	4014      	ands	r4, r2
   115e2:	4460      	add	r0, ip
   115e4:	4a50      	ldr	r2, [pc, #320]	; (11728 <__aeabi_dmul+0x4f8>)
   115e6:	4290      	cmp	r0, r2
   115e8:	dd00      	ble.n	115ec <__aeabi_dmul+0x3bc>
   115ea:	e6e3      	b.n	113b4 <__aeabi_dmul+0x184>
   115ec:	2501      	movs	r5, #1
   115ee:	08db      	lsrs	r3, r3, #3
   115f0:	0762      	lsls	r2, r4, #29
   115f2:	431a      	orrs	r2, r3
   115f4:	0264      	lsls	r4, r4, #9
   115f6:	9b01      	ldr	r3, [sp, #4]
   115f8:	4691      	mov	r9, r2
   115fa:	0b22      	lsrs	r2, r4, #12
   115fc:	0544      	lsls	r4, r0, #21
   115fe:	0d64      	lsrs	r4, r4, #21
   11600:	401d      	ands	r5, r3
   11602:	e67c      	b.n	112fe <__aeabi_dmul+0xce>
   11604:	2280      	movs	r2, #128	; 0x80
   11606:	4659      	mov	r1, fp
   11608:	0312      	lsls	r2, r2, #12
   1160a:	4211      	tst	r1, r2
   1160c:	d008      	beq.n	11620 <__aeabi_dmul+0x3f0>
   1160e:	4214      	tst	r4, r2
   11610:	d106      	bne.n	11620 <__aeabi_dmul+0x3f0>
   11612:	4322      	orrs	r2, r4
   11614:	0312      	lsls	r2, r2, #12
   11616:	0b12      	lsrs	r2, r2, #12
   11618:	4645      	mov	r5, r8
   1161a:	4699      	mov	r9, r3
   1161c:	4c43      	ldr	r4, [pc, #268]	; (1172c <__aeabi_dmul+0x4fc>)
   1161e:	e66e      	b.n	112fe <__aeabi_dmul+0xce>
   11620:	465b      	mov	r3, fp
   11622:	431a      	orrs	r2, r3
   11624:	0312      	lsls	r2, r2, #12
   11626:	0b12      	lsrs	r2, r2, #12
   11628:	4c40      	ldr	r4, [pc, #256]	; (1172c <__aeabi_dmul+0x4fc>)
   1162a:	e668      	b.n	112fe <__aeabi_dmul+0xce>
   1162c:	0003      	movs	r3, r0
   1162e:	4654      	mov	r4, sl
   11630:	3b28      	subs	r3, #40	; 0x28
   11632:	409c      	lsls	r4, r3
   11634:	2300      	movs	r3, #0
   11636:	e6b9      	b.n	113ac <__aeabi_dmul+0x17c>
   11638:	f000 fc26 	bl	11e88 <__clzsi2>
   1163c:	3020      	adds	r0, #32
   1163e:	e6a6      	b.n	1138e <__aeabi_dmul+0x15e>
   11640:	0003      	movs	r3, r0
   11642:	3b28      	subs	r3, #40	; 0x28
   11644:	409f      	lsls	r7, r3
   11646:	2300      	movs	r3, #0
   11648:	46bb      	mov	fp, r7
   1164a:	4699      	mov	r9, r3
   1164c:	e68a      	b.n	11364 <__aeabi_dmul+0x134>
   1164e:	f000 fc1b 	bl	11e88 <__clzsi2>
   11652:	3020      	adds	r0, #32
   11654:	e674      	b.n	11340 <__aeabi_dmul+0x110>
   11656:	46b4      	mov	ip, r6
   11658:	e7ad      	b.n	115b6 <__aeabi_dmul+0x386>
   1165a:	2501      	movs	r5, #1
   1165c:	1a2a      	subs	r2, r5, r0
   1165e:	2a38      	cmp	r2, #56	; 0x38
   11660:	dd06      	ble.n	11670 <__aeabi_dmul+0x440>
   11662:	9b01      	ldr	r3, [sp, #4]
   11664:	2400      	movs	r4, #0
   11666:	401d      	ands	r5, r3
   11668:	2300      	movs	r3, #0
   1166a:	2200      	movs	r2, #0
   1166c:	4699      	mov	r9, r3
   1166e:	e646      	b.n	112fe <__aeabi_dmul+0xce>
   11670:	2a1f      	cmp	r2, #31
   11672:	dc21      	bgt.n	116b8 <__aeabi_dmul+0x488>
   11674:	2520      	movs	r5, #32
   11676:	0020      	movs	r0, r4
   11678:	1aad      	subs	r5, r5, r2
   1167a:	001e      	movs	r6, r3
   1167c:	40ab      	lsls	r3, r5
   1167e:	40a8      	lsls	r0, r5
   11680:	40d6      	lsrs	r6, r2
   11682:	1e5d      	subs	r5, r3, #1
   11684:	41ab      	sbcs	r3, r5
   11686:	4330      	orrs	r0, r6
   11688:	4318      	orrs	r0, r3
   1168a:	40d4      	lsrs	r4, r2
   1168c:	0743      	lsls	r3, r0, #29
   1168e:	d009      	beq.n	116a4 <__aeabi_dmul+0x474>
   11690:	230f      	movs	r3, #15
   11692:	4003      	ands	r3, r0
   11694:	2b04      	cmp	r3, #4
   11696:	d005      	beq.n	116a4 <__aeabi_dmul+0x474>
   11698:	0003      	movs	r3, r0
   1169a:	1d18      	adds	r0, r3, #4
   1169c:	4298      	cmp	r0, r3
   1169e:	419b      	sbcs	r3, r3
   116a0:	425b      	negs	r3, r3
   116a2:	18e4      	adds	r4, r4, r3
   116a4:	0223      	lsls	r3, r4, #8
   116a6:	d521      	bpl.n	116ec <__aeabi_dmul+0x4bc>
   116a8:	2501      	movs	r5, #1
   116aa:	9b01      	ldr	r3, [sp, #4]
   116ac:	2401      	movs	r4, #1
   116ae:	401d      	ands	r5, r3
   116b0:	2300      	movs	r3, #0
   116b2:	2200      	movs	r2, #0
   116b4:	4699      	mov	r9, r3
   116b6:	e622      	b.n	112fe <__aeabi_dmul+0xce>
   116b8:	251f      	movs	r5, #31
   116ba:	0021      	movs	r1, r4
   116bc:	426d      	negs	r5, r5
   116be:	1a28      	subs	r0, r5, r0
   116c0:	40c1      	lsrs	r1, r0
   116c2:	0008      	movs	r0, r1
   116c4:	2a20      	cmp	r2, #32
   116c6:	d01d      	beq.n	11704 <__aeabi_dmul+0x4d4>
   116c8:	355f      	adds	r5, #95	; 0x5f
   116ca:	1aaa      	subs	r2, r5, r2
   116cc:	4094      	lsls	r4, r2
   116ce:	4323      	orrs	r3, r4
   116d0:	1e5c      	subs	r4, r3, #1
   116d2:	41a3      	sbcs	r3, r4
   116d4:	2507      	movs	r5, #7
   116d6:	4303      	orrs	r3, r0
   116d8:	401d      	ands	r5, r3
   116da:	2200      	movs	r2, #0
   116dc:	2d00      	cmp	r5, #0
   116de:	d009      	beq.n	116f4 <__aeabi_dmul+0x4c4>
   116e0:	220f      	movs	r2, #15
   116e2:	2400      	movs	r4, #0
   116e4:	401a      	ands	r2, r3
   116e6:	0018      	movs	r0, r3
   116e8:	2a04      	cmp	r2, #4
   116ea:	d1d6      	bne.n	1169a <__aeabi_dmul+0x46a>
   116ec:	0003      	movs	r3, r0
   116ee:	0765      	lsls	r5, r4, #29
   116f0:	0264      	lsls	r4, r4, #9
   116f2:	0b22      	lsrs	r2, r4, #12
   116f4:	08db      	lsrs	r3, r3, #3
   116f6:	432b      	orrs	r3, r5
   116f8:	2501      	movs	r5, #1
   116fa:	4699      	mov	r9, r3
   116fc:	9b01      	ldr	r3, [sp, #4]
   116fe:	2400      	movs	r4, #0
   11700:	401d      	ands	r5, r3
   11702:	e5fc      	b.n	112fe <__aeabi_dmul+0xce>
   11704:	2400      	movs	r4, #0
   11706:	e7e2      	b.n	116ce <__aeabi_dmul+0x49e>
   11708:	2280      	movs	r2, #128	; 0x80
   1170a:	2501      	movs	r5, #1
   1170c:	0312      	lsls	r2, r2, #12
   1170e:	4322      	orrs	r2, r4
   11710:	9901      	ldr	r1, [sp, #4]
   11712:	0312      	lsls	r2, r2, #12
   11714:	0b12      	lsrs	r2, r2, #12
   11716:	400d      	ands	r5, r1
   11718:	4699      	mov	r9, r3
   1171a:	4c04      	ldr	r4, [pc, #16]	; (1172c <__aeabi_dmul+0x4fc>)
   1171c:	e5ef      	b.n	112fe <__aeabi_dmul+0xce>
   1171e:	46c0      	nop			; (mov r8, r8)
   11720:	000003ff 	.word	0x000003ff
   11724:	feffffff 	.word	0xfeffffff
   11728:	000007fe 	.word	0x000007fe
   1172c:	000007ff 	.word	0x000007ff

00011730 <__aeabi_dsub>:
   11730:	b5f0      	push	{r4, r5, r6, r7, lr}
   11732:	4646      	mov	r6, r8
   11734:	46d6      	mov	lr, sl
   11736:	464f      	mov	r7, r9
   11738:	030c      	lsls	r4, r1, #12
   1173a:	b5c0      	push	{r6, r7, lr}
   1173c:	0fcd      	lsrs	r5, r1, #31
   1173e:	004e      	lsls	r6, r1, #1
   11740:	0a61      	lsrs	r1, r4, #9
   11742:	0f44      	lsrs	r4, r0, #29
   11744:	430c      	orrs	r4, r1
   11746:	00c1      	lsls	r1, r0, #3
   11748:	0058      	lsls	r0, r3, #1
   1174a:	0d40      	lsrs	r0, r0, #21
   1174c:	4684      	mov	ip, r0
   1174e:	468a      	mov	sl, r1
   11750:	000f      	movs	r7, r1
   11752:	0319      	lsls	r1, r3, #12
   11754:	0f50      	lsrs	r0, r2, #29
   11756:	0a49      	lsrs	r1, r1, #9
   11758:	4301      	orrs	r1, r0
   1175a:	48c6      	ldr	r0, [pc, #792]	; (11a74 <__aeabi_dsub+0x344>)
   1175c:	0d76      	lsrs	r6, r6, #21
   1175e:	46a8      	mov	r8, r5
   11760:	0fdb      	lsrs	r3, r3, #31
   11762:	00d2      	lsls	r2, r2, #3
   11764:	4584      	cmp	ip, r0
   11766:	d100      	bne.n	1176a <__aeabi_dsub+0x3a>
   11768:	e0d8      	b.n	1191c <__aeabi_dsub+0x1ec>
   1176a:	2001      	movs	r0, #1
   1176c:	4043      	eors	r3, r0
   1176e:	42ab      	cmp	r3, r5
   11770:	d100      	bne.n	11774 <__aeabi_dsub+0x44>
   11772:	e0a6      	b.n	118c2 <__aeabi_dsub+0x192>
   11774:	4660      	mov	r0, ip
   11776:	1a35      	subs	r5, r6, r0
   11778:	2d00      	cmp	r5, #0
   1177a:	dc00      	bgt.n	1177e <__aeabi_dsub+0x4e>
   1177c:	e105      	b.n	1198a <__aeabi_dsub+0x25a>
   1177e:	2800      	cmp	r0, #0
   11780:	d110      	bne.n	117a4 <__aeabi_dsub+0x74>
   11782:	000b      	movs	r3, r1
   11784:	4313      	orrs	r3, r2
   11786:	d100      	bne.n	1178a <__aeabi_dsub+0x5a>
   11788:	e0d7      	b.n	1193a <__aeabi_dsub+0x20a>
   1178a:	1e6b      	subs	r3, r5, #1
   1178c:	2b00      	cmp	r3, #0
   1178e:	d000      	beq.n	11792 <__aeabi_dsub+0x62>
   11790:	e14b      	b.n	11a2a <__aeabi_dsub+0x2fa>
   11792:	4653      	mov	r3, sl
   11794:	1a9f      	subs	r7, r3, r2
   11796:	45ba      	cmp	sl, r7
   11798:	4180      	sbcs	r0, r0
   1179a:	1a64      	subs	r4, r4, r1
   1179c:	4240      	negs	r0, r0
   1179e:	1a24      	subs	r4, r4, r0
   117a0:	2601      	movs	r6, #1
   117a2:	e01e      	b.n	117e2 <__aeabi_dsub+0xb2>
   117a4:	4bb3      	ldr	r3, [pc, #716]	; (11a74 <__aeabi_dsub+0x344>)
   117a6:	429e      	cmp	r6, r3
   117a8:	d048      	beq.n	1183c <__aeabi_dsub+0x10c>
   117aa:	2380      	movs	r3, #128	; 0x80
   117ac:	041b      	lsls	r3, r3, #16
   117ae:	4319      	orrs	r1, r3
   117b0:	2d38      	cmp	r5, #56	; 0x38
   117b2:	dd00      	ble.n	117b6 <__aeabi_dsub+0x86>
   117b4:	e119      	b.n	119ea <__aeabi_dsub+0x2ba>
   117b6:	2d1f      	cmp	r5, #31
   117b8:	dd00      	ble.n	117bc <__aeabi_dsub+0x8c>
   117ba:	e14c      	b.n	11a56 <__aeabi_dsub+0x326>
   117bc:	2320      	movs	r3, #32
   117be:	000f      	movs	r7, r1
   117c0:	1b5b      	subs	r3, r3, r5
   117c2:	0010      	movs	r0, r2
   117c4:	409a      	lsls	r2, r3
   117c6:	409f      	lsls	r7, r3
   117c8:	40e8      	lsrs	r0, r5
   117ca:	1e53      	subs	r3, r2, #1
   117cc:	419a      	sbcs	r2, r3
   117ce:	40e9      	lsrs	r1, r5
   117d0:	4307      	orrs	r7, r0
   117d2:	4317      	orrs	r7, r2
   117d4:	4653      	mov	r3, sl
   117d6:	1bdf      	subs	r7, r3, r7
   117d8:	1a61      	subs	r1, r4, r1
   117da:	45ba      	cmp	sl, r7
   117dc:	41a4      	sbcs	r4, r4
   117de:	4264      	negs	r4, r4
   117e0:	1b0c      	subs	r4, r1, r4
   117e2:	0223      	lsls	r3, r4, #8
   117e4:	d400      	bmi.n	117e8 <__aeabi_dsub+0xb8>
   117e6:	e0c5      	b.n	11974 <__aeabi_dsub+0x244>
   117e8:	0264      	lsls	r4, r4, #9
   117ea:	0a65      	lsrs	r5, r4, #9
   117ec:	2d00      	cmp	r5, #0
   117ee:	d100      	bne.n	117f2 <__aeabi_dsub+0xc2>
   117f0:	e0f6      	b.n	119e0 <__aeabi_dsub+0x2b0>
   117f2:	0028      	movs	r0, r5
   117f4:	f000 fb48 	bl	11e88 <__clzsi2>
   117f8:	0003      	movs	r3, r0
   117fa:	3b08      	subs	r3, #8
   117fc:	2b1f      	cmp	r3, #31
   117fe:	dd00      	ble.n	11802 <__aeabi_dsub+0xd2>
   11800:	e0e9      	b.n	119d6 <__aeabi_dsub+0x2a6>
   11802:	2220      	movs	r2, #32
   11804:	003c      	movs	r4, r7
   11806:	1ad2      	subs	r2, r2, r3
   11808:	409d      	lsls	r5, r3
   1180a:	40d4      	lsrs	r4, r2
   1180c:	409f      	lsls	r7, r3
   1180e:	4325      	orrs	r5, r4
   11810:	429e      	cmp	r6, r3
   11812:	dd00      	ble.n	11816 <__aeabi_dsub+0xe6>
   11814:	e0db      	b.n	119ce <__aeabi_dsub+0x29e>
   11816:	1b9e      	subs	r6, r3, r6
   11818:	1c73      	adds	r3, r6, #1
   1181a:	2b1f      	cmp	r3, #31
   1181c:	dd00      	ble.n	11820 <__aeabi_dsub+0xf0>
   1181e:	e10a      	b.n	11a36 <__aeabi_dsub+0x306>
   11820:	2220      	movs	r2, #32
   11822:	0038      	movs	r0, r7
   11824:	1ad2      	subs	r2, r2, r3
   11826:	0029      	movs	r1, r5
   11828:	4097      	lsls	r7, r2
   1182a:	002c      	movs	r4, r5
   1182c:	4091      	lsls	r1, r2
   1182e:	40d8      	lsrs	r0, r3
   11830:	1e7a      	subs	r2, r7, #1
   11832:	4197      	sbcs	r7, r2
   11834:	40dc      	lsrs	r4, r3
   11836:	2600      	movs	r6, #0
   11838:	4301      	orrs	r1, r0
   1183a:	430f      	orrs	r7, r1
   1183c:	077b      	lsls	r3, r7, #29
   1183e:	d009      	beq.n	11854 <__aeabi_dsub+0x124>
   11840:	230f      	movs	r3, #15
   11842:	403b      	ands	r3, r7
   11844:	2b04      	cmp	r3, #4
   11846:	d005      	beq.n	11854 <__aeabi_dsub+0x124>
   11848:	1d3b      	adds	r3, r7, #4
   1184a:	42bb      	cmp	r3, r7
   1184c:	41bf      	sbcs	r7, r7
   1184e:	427f      	negs	r7, r7
   11850:	19e4      	adds	r4, r4, r7
   11852:	001f      	movs	r7, r3
   11854:	0223      	lsls	r3, r4, #8
   11856:	d525      	bpl.n	118a4 <__aeabi_dsub+0x174>
   11858:	4b86      	ldr	r3, [pc, #536]	; (11a74 <__aeabi_dsub+0x344>)
   1185a:	3601      	adds	r6, #1
   1185c:	429e      	cmp	r6, r3
   1185e:	d100      	bne.n	11862 <__aeabi_dsub+0x132>
   11860:	e0af      	b.n	119c2 <__aeabi_dsub+0x292>
   11862:	4b85      	ldr	r3, [pc, #532]	; (11a78 <__aeabi_dsub+0x348>)
   11864:	2501      	movs	r5, #1
   11866:	401c      	ands	r4, r3
   11868:	4643      	mov	r3, r8
   1186a:	0762      	lsls	r2, r4, #29
   1186c:	08ff      	lsrs	r7, r7, #3
   1186e:	0264      	lsls	r4, r4, #9
   11870:	0576      	lsls	r6, r6, #21
   11872:	4317      	orrs	r7, r2
   11874:	0b24      	lsrs	r4, r4, #12
   11876:	0d76      	lsrs	r6, r6, #21
   11878:	401d      	ands	r5, r3
   1187a:	2100      	movs	r1, #0
   1187c:	0324      	lsls	r4, r4, #12
   1187e:	0b23      	lsrs	r3, r4, #12
   11880:	0d0c      	lsrs	r4, r1, #20
   11882:	4a7e      	ldr	r2, [pc, #504]	; (11a7c <__aeabi_dsub+0x34c>)
   11884:	0524      	lsls	r4, r4, #20
   11886:	431c      	orrs	r4, r3
   11888:	4014      	ands	r4, r2
   1188a:	0533      	lsls	r3, r6, #20
   1188c:	4323      	orrs	r3, r4
   1188e:	005b      	lsls	r3, r3, #1
   11890:	07ed      	lsls	r5, r5, #31
   11892:	085b      	lsrs	r3, r3, #1
   11894:	432b      	orrs	r3, r5
   11896:	0038      	movs	r0, r7
   11898:	0019      	movs	r1, r3
   1189a:	bc1c      	pop	{r2, r3, r4}
   1189c:	4690      	mov	r8, r2
   1189e:	4699      	mov	r9, r3
   118a0:	46a2      	mov	sl, r4
   118a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118a4:	2501      	movs	r5, #1
   118a6:	4643      	mov	r3, r8
   118a8:	0762      	lsls	r2, r4, #29
   118aa:	08ff      	lsrs	r7, r7, #3
   118ac:	4317      	orrs	r7, r2
   118ae:	08e4      	lsrs	r4, r4, #3
   118b0:	401d      	ands	r5, r3
   118b2:	4b70      	ldr	r3, [pc, #448]	; (11a74 <__aeabi_dsub+0x344>)
   118b4:	429e      	cmp	r6, r3
   118b6:	d036      	beq.n	11926 <__aeabi_dsub+0x1f6>
   118b8:	0324      	lsls	r4, r4, #12
   118ba:	0576      	lsls	r6, r6, #21
   118bc:	0b24      	lsrs	r4, r4, #12
   118be:	0d76      	lsrs	r6, r6, #21
   118c0:	e7db      	b.n	1187a <__aeabi_dsub+0x14a>
   118c2:	4663      	mov	r3, ip
   118c4:	1af3      	subs	r3, r6, r3
   118c6:	2b00      	cmp	r3, #0
   118c8:	dc00      	bgt.n	118cc <__aeabi_dsub+0x19c>
   118ca:	e094      	b.n	119f6 <__aeabi_dsub+0x2c6>
   118cc:	4660      	mov	r0, ip
   118ce:	2800      	cmp	r0, #0
   118d0:	d035      	beq.n	1193e <__aeabi_dsub+0x20e>
   118d2:	4868      	ldr	r0, [pc, #416]	; (11a74 <__aeabi_dsub+0x344>)
   118d4:	4286      	cmp	r6, r0
   118d6:	d0b1      	beq.n	1183c <__aeabi_dsub+0x10c>
   118d8:	2780      	movs	r7, #128	; 0x80
   118da:	043f      	lsls	r7, r7, #16
   118dc:	4339      	orrs	r1, r7
   118de:	2b38      	cmp	r3, #56	; 0x38
   118e0:	dc00      	bgt.n	118e4 <__aeabi_dsub+0x1b4>
   118e2:	e0fd      	b.n	11ae0 <__aeabi_dsub+0x3b0>
   118e4:	430a      	orrs	r2, r1
   118e6:	0017      	movs	r7, r2
   118e8:	2100      	movs	r1, #0
   118ea:	1e7a      	subs	r2, r7, #1
   118ec:	4197      	sbcs	r7, r2
   118ee:	4457      	add	r7, sl
   118f0:	4557      	cmp	r7, sl
   118f2:	4180      	sbcs	r0, r0
   118f4:	1909      	adds	r1, r1, r4
   118f6:	4244      	negs	r4, r0
   118f8:	190c      	adds	r4, r1, r4
   118fa:	0223      	lsls	r3, r4, #8
   118fc:	d53a      	bpl.n	11974 <__aeabi_dsub+0x244>
   118fe:	4b5d      	ldr	r3, [pc, #372]	; (11a74 <__aeabi_dsub+0x344>)
   11900:	3601      	adds	r6, #1
   11902:	429e      	cmp	r6, r3
   11904:	d100      	bne.n	11908 <__aeabi_dsub+0x1d8>
   11906:	e14b      	b.n	11ba0 <__aeabi_dsub+0x470>
   11908:	2201      	movs	r2, #1
   1190a:	4b5b      	ldr	r3, [pc, #364]	; (11a78 <__aeabi_dsub+0x348>)
   1190c:	401c      	ands	r4, r3
   1190e:	087b      	lsrs	r3, r7, #1
   11910:	4017      	ands	r7, r2
   11912:	431f      	orrs	r7, r3
   11914:	07e2      	lsls	r2, r4, #31
   11916:	4317      	orrs	r7, r2
   11918:	0864      	lsrs	r4, r4, #1
   1191a:	e78f      	b.n	1183c <__aeabi_dsub+0x10c>
   1191c:	0008      	movs	r0, r1
   1191e:	4310      	orrs	r0, r2
   11920:	d000      	beq.n	11924 <__aeabi_dsub+0x1f4>
   11922:	e724      	b.n	1176e <__aeabi_dsub+0x3e>
   11924:	e721      	b.n	1176a <__aeabi_dsub+0x3a>
   11926:	0023      	movs	r3, r4
   11928:	433b      	orrs	r3, r7
   1192a:	d100      	bne.n	1192e <__aeabi_dsub+0x1fe>
   1192c:	e1b9      	b.n	11ca2 <__aeabi_dsub+0x572>
   1192e:	2280      	movs	r2, #128	; 0x80
   11930:	0312      	lsls	r2, r2, #12
   11932:	4314      	orrs	r4, r2
   11934:	0324      	lsls	r4, r4, #12
   11936:	0b24      	lsrs	r4, r4, #12
   11938:	e79f      	b.n	1187a <__aeabi_dsub+0x14a>
   1193a:	002e      	movs	r6, r5
   1193c:	e77e      	b.n	1183c <__aeabi_dsub+0x10c>
   1193e:	0008      	movs	r0, r1
   11940:	4310      	orrs	r0, r2
   11942:	d100      	bne.n	11946 <__aeabi_dsub+0x216>
   11944:	e0ca      	b.n	11adc <__aeabi_dsub+0x3ac>
   11946:	1e58      	subs	r0, r3, #1
   11948:	4684      	mov	ip, r0
   1194a:	2800      	cmp	r0, #0
   1194c:	d000      	beq.n	11950 <__aeabi_dsub+0x220>
   1194e:	e0e7      	b.n	11b20 <__aeabi_dsub+0x3f0>
   11950:	4452      	add	r2, sl
   11952:	4552      	cmp	r2, sl
   11954:	4180      	sbcs	r0, r0
   11956:	1864      	adds	r4, r4, r1
   11958:	4240      	negs	r0, r0
   1195a:	1824      	adds	r4, r4, r0
   1195c:	0017      	movs	r7, r2
   1195e:	2601      	movs	r6, #1
   11960:	0223      	lsls	r3, r4, #8
   11962:	d507      	bpl.n	11974 <__aeabi_dsub+0x244>
   11964:	2602      	movs	r6, #2
   11966:	e7cf      	b.n	11908 <__aeabi_dsub+0x1d8>
   11968:	4664      	mov	r4, ip
   1196a:	432c      	orrs	r4, r5
   1196c:	d100      	bne.n	11970 <__aeabi_dsub+0x240>
   1196e:	e1b3      	b.n	11cd8 <__aeabi_dsub+0x5a8>
   11970:	002c      	movs	r4, r5
   11972:	4667      	mov	r7, ip
   11974:	077b      	lsls	r3, r7, #29
   11976:	d000      	beq.n	1197a <__aeabi_dsub+0x24a>
   11978:	e762      	b.n	11840 <__aeabi_dsub+0x110>
   1197a:	0763      	lsls	r3, r4, #29
   1197c:	08ff      	lsrs	r7, r7, #3
   1197e:	431f      	orrs	r7, r3
   11980:	2501      	movs	r5, #1
   11982:	4643      	mov	r3, r8
   11984:	08e4      	lsrs	r4, r4, #3
   11986:	401d      	ands	r5, r3
   11988:	e793      	b.n	118b2 <__aeabi_dsub+0x182>
   1198a:	2d00      	cmp	r5, #0
   1198c:	d178      	bne.n	11a80 <__aeabi_dsub+0x350>
   1198e:	1c75      	adds	r5, r6, #1
   11990:	056d      	lsls	r5, r5, #21
   11992:	0d6d      	lsrs	r5, r5, #21
   11994:	2d01      	cmp	r5, #1
   11996:	dc00      	bgt.n	1199a <__aeabi_dsub+0x26a>
   11998:	e0f2      	b.n	11b80 <__aeabi_dsub+0x450>
   1199a:	4650      	mov	r0, sl
   1199c:	1a80      	subs	r0, r0, r2
   1199e:	4582      	cmp	sl, r0
   119a0:	41bf      	sbcs	r7, r7
   119a2:	1a65      	subs	r5, r4, r1
   119a4:	427f      	negs	r7, r7
   119a6:	1bed      	subs	r5, r5, r7
   119a8:	4684      	mov	ip, r0
   119aa:	0228      	lsls	r0, r5, #8
   119ac:	d400      	bmi.n	119b0 <__aeabi_dsub+0x280>
   119ae:	e08c      	b.n	11aca <__aeabi_dsub+0x39a>
   119b0:	4650      	mov	r0, sl
   119b2:	1a17      	subs	r7, r2, r0
   119b4:	42ba      	cmp	r2, r7
   119b6:	4192      	sbcs	r2, r2
   119b8:	1b0c      	subs	r4, r1, r4
   119ba:	4255      	negs	r5, r2
   119bc:	1b65      	subs	r5, r4, r5
   119be:	4698      	mov	r8, r3
   119c0:	e714      	b.n	117ec <__aeabi_dsub+0xbc>
   119c2:	2501      	movs	r5, #1
   119c4:	4643      	mov	r3, r8
   119c6:	2400      	movs	r4, #0
   119c8:	401d      	ands	r5, r3
   119ca:	2700      	movs	r7, #0
   119cc:	e755      	b.n	1187a <__aeabi_dsub+0x14a>
   119ce:	4c2a      	ldr	r4, [pc, #168]	; (11a78 <__aeabi_dsub+0x348>)
   119d0:	1af6      	subs	r6, r6, r3
   119d2:	402c      	ands	r4, r5
   119d4:	e732      	b.n	1183c <__aeabi_dsub+0x10c>
   119d6:	003d      	movs	r5, r7
   119d8:	3828      	subs	r0, #40	; 0x28
   119da:	4085      	lsls	r5, r0
   119dc:	2700      	movs	r7, #0
   119de:	e717      	b.n	11810 <__aeabi_dsub+0xe0>
   119e0:	0038      	movs	r0, r7
   119e2:	f000 fa51 	bl	11e88 <__clzsi2>
   119e6:	3020      	adds	r0, #32
   119e8:	e706      	b.n	117f8 <__aeabi_dsub+0xc8>
   119ea:	430a      	orrs	r2, r1
   119ec:	0017      	movs	r7, r2
   119ee:	2100      	movs	r1, #0
   119f0:	1e7a      	subs	r2, r7, #1
   119f2:	4197      	sbcs	r7, r2
   119f4:	e6ee      	b.n	117d4 <__aeabi_dsub+0xa4>
   119f6:	2b00      	cmp	r3, #0
   119f8:	d000      	beq.n	119fc <__aeabi_dsub+0x2cc>
   119fa:	e0e5      	b.n	11bc8 <__aeabi_dsub+0x498>
   119fc:	1c73      	adds	r3, r6, #1
   119fe:	469c      	mov	ip, r3
   11a00:	055b      	lsls	r3, r3, #21
   11a02:	0d5b      	lsrs	r3, r3, #21
   11a04:	2b01      	cmp	r3, #1
   11a06:	dc00      	bgt.n	11a0a <__aeabi_dsub+0x2da>
   11a08:	e09f      	b.n	11b4a <__aeabi_dsub+0x41a>
   11a0a:	4b1a      	ldr	r3, [pc, #104]	; (11a74 <__aeabi_dsub+0x344>)
   11a0c:	459c      	cmp	ip, r3
   11a0e:	d100      	bne.n	11a12 <__aeabi_dsub+0x2e2>
   11a10:	e0c5      	b.n	11b9e <__aeabi_dsub+0x46e>
   11a12:	4452      	add	r2, sl
   11a14:	4552      	cmp	r2, sl
   11a16:	4180      	sbcs	r0, r0
   11a18:	1864      	adds	r4, r4, r1
   11a1a:	4240      	negs	r0, r0
   11a1c:	1824      	adds	r4, r4, r0
   11a1e:	07e7      	lsls	r7, r4, #31
   11a20:	0852      	lsrs	r2, r2, #1
   11a22:	4317      	orrs	r7, r2
   11a24:	0864      	lsrs	r4, r4, #1
   11a26:	4666      	mov	r6, ip
   11a28:	e708      	b.n	1183c <__aeabi_dsub+0x10c>
   11a2a:	4812      	ldr	r0, [pc, #72]	; (11a74 <__aeabi_dsub+0x344>)
   11a2c:	4285      	cmp	r5, r0
   11a2e:	d100      	bne.n	11a32 <__aeabi_dsub+0x302>
   11a30:	e085      	b.n	11b3e <__aeabi_dsub+0x40e>
   11a32:	001d      	movs	r5, r3
   11a34:	e6bc      	b.n	117b0 <__aeabi_dsub+0x80>
   11a36:	0029      	movs	r1, r5
   11a38:	3e1f      	subs	r6, #31
   11a3a:	40f1      	lsrs	r1, r6
   11a3c:	2b20      	cmp	r3, #32
   11a3e:	d100      	bne.n	11a42 <__aeabi_dsub+0x312>
   11a40:	e07f      	b.n	11b42 <__aeabi_dsub+0x412>
   11a42:	2240      	movs	r2, #64	; 0x40
   11a44:	1ad3      	subs	r3, r2, r3
   11a46:	409d      	lsls	r5, r3
   11a48:	432f      	orrs	r7, r5
   11a4a:	1e7d      	subs	r5, r7, #1
   11a4c:	41af      	sbcs	r7, r5
   11a4e:	2400      	movs	r4, #0
   11a50:	430f      	orrs	r7, r1
   11a52:	2600      	movs	r6, #0
   11a54:	e78e      	b.n	11974 <__aeabi_dsub+0x244>
   11a56:	002b      	movs	r3, r5
   11a58:	000f      	movs	r7, r1
   11a5a:	3b20      	subs	r3, #32
   11a5c:	40df      	lsrs	r7, r3
   11a5e:	2d20      	cmp	r5, #32
   11a60:	d071      	beq.n	11b46 <__aeabi_dsub+0x416>
   11a62:	2340      	movs	r3, #64	; 0x40
   11a64:	1b5d      	subs	r5, r3, r5
   11a66:	40a9      	lsls	r1, r5
   11a68:	430a      	orrs	r2, r1
   11a6a:	1e51      	subs	r1, r2, #1
   11a6c:	418a      	sbcs	r2, r1
   11a6e:	2100      	movs	r1, #0
   11a70:	4317      	orrs	r7, r2
   11a72:	e6af      	b.n	117d4 <__aeabi_dsub+0xa4>
   11a74:	000007ff 	.word	0x000007ff
   11a78:	ff7fffff 	.word	0xff7fffff
   11a7c:	800fffff 	.word	0x800fffff
   11a80:	2e00      	cmp	r6, #0
   11a82:	d03e      	beq.n	11b02 <__aeabi_dsub+0x3d2>
   11a84:	4eb3      	ldr	r6, [pc, #716]	; (11d54 <__aeabi_dsub+0x624>)
   11a86:	45b4      	cmp	ip, r6
   11a88:	d045      	beq.n	11b16 <__aeabi_dsub+0x3e6>
   11a8a:	2680      	movs	r6, #128	; 0x80
   11a8c:	0436      	lsls	r6, r6, #16
   11a8e:	426d      	negs	r5, r5
   11a90:	4334      	orrs	r4, r6
   11a92:	2d38      	cmp	r5, #56	; 0x38
   11a94:	dd00      	ble.n	11a98 <__aeabi_dsub+0x368>
   11a96:	e0a8      	b.n	11bea <__aeabi_dsub+0x4ba>
   11a98:	2d1f      	cmp	r5, #31
   11a9a:	dd00      	ble.n	11a9e <__aeabi_dsub+0x36e>
   11a9c:	e11f      	b.n	11cde <__aeabi_dsub+0x5ae>
   11a9e:	2620      	movs	r6, #32
   11aa0:	0027      	movs	r7, r4
   11aa2:	4650      	mov	r0, sl
   11aa4:	1b76      	subs	r6, r6, r5
   11aa6:	40b7      	lsls	r7, r6
   11aa8:	40e8      	lsrs	r0, r5
   11aaa:	4307      	orrs	r7, r0
   11aac:	4650      	mov	r0, sl
   11aae:	40b0      	lsls	r0, r6
   11ab0:	1e46      	subs	r6, r0, #1
   11ab2:	41b0      	sbcs	r0, r6
   11ab4:	40ec      	lsrs	r4, r5
   11ab6:	4338      	orrs	r0, r7
   11ab8:	1a17      	subs	r7, r2, r0
   11aba:	42ba      	cmp	r2, r7
   11abc:	4192      	sbcs	r2, r2
   11abe:	1b0c      	subs	r4, r1, r4
   11ac0:	4252      	negs	r2, r2
   11ac2:	1aa4      	subs	r4, r4, r2
   11ac4:	4666      	mov	r6, ip
   11ac6:	4698      	mov	r8, r3
   11ac8:	e68b      	b.n	117e2 <__aeabi_dsub+0xb2>
   11aca:	4664      	mov	r4, ip
   11acc:	4667      	mov	r7, ip
   11ace:	432c      	orrs	r4, r5
   11ad0:	d000      	beq.n	11ad4 <__aeabi_dsub+0x3a4>
   11ad2:	e68b      	b.n	117ec <__aeabi_dsub+0xbc>
   11ad4:	2500      	movs	r5, #0
   11ad6:	2600      	movs	r6, #0
   11ad8:	2700      	movs	r7, #0
   11ada:	e6ea      	b.n	118b2 <__aeabi_dsub+0x182>
   11adc:	001e      	movs	r6, r3
   11ade:	e6ad      	b.n	1183c <__aeabi_dsub+0x10c>
   11ae0:	2b1f      	cmp	r3, #31
   11ae2:	dc60      	bgt.n	11ba6 <__aeabi_dsub+0x476>
   11ae4:	2720      	movs	r7, #32
   11ae6:	1af8      	subs	r0, r7, r3
   11ae8:	000f      	movs	r7, r1
   11aea:	4684      	mov	ip, r0
   11aec:	4087      	lsls	r7, r0
   11aee:	0010      	movs	r0, r2
   11af0:	40d8      	lsrs	r0, r3
   11af2:	4307      	orrs	r7, r0
   11af4:	4660      	mov	r0, ip
   11af6:	4082      	lsls	r2, r0
   11af8:	1e50      	subs	r0, r2, #1
   11afa:	4182      	sbcs	r2, r0
   11afc:	40d9      	lsrs	r1, r3
   11afe:	4317      	orrs	r7, r2
   11b00:	e6f5      	b.n	118ee <__aeabi_dsub+0x1be>
   11b02:	0026      	movs	r6, r4
   11b04:	4650      	mov	r0, sl
   11b06:	4306      	orrs	r6, r0
   11b08:	d005      	beq.n	11b16 <__aeabi_dsub+0x3e6>
   11b0a:	43ed      	mvns	r5, r5
   11b0c:	2d00      	cmp	r5, #0
   11b0e:	d0d3      	beq.n	11ab8 <__aeabi_dsub+0x388>
   11b10:	4e90      	ldr	r6, [pc, #576]	; (11d54 <__aeabi_dsub+0x624>)
   11b12:	45b4      	cmp	ip, r6
   11b14:	d1bd      	bne.n	11a92 <__aeabi_dsub+0x362>
   11b16:	000c      	movs	r4, r1
   11b18:	0017      	movs	r7, r2
   11b1a:	4666      	mov	r6, ip
   11b1c:	4698      	mov	r8, r3
   11b1e:	e68d      	b.n	1183c <__aeabi_dsub+0x10c>
   11b20:	488c      	ldr	r0, [pc, #560]	; (11d54 <__aeabi_dsub+0x624>)
   11b22:	4283      	cmp	r3, r0
   11b24:	d00b      	beq.n	11b3e <__aeabi_dsub+0x40e>
   11b26:	4663      	mov	r3, ip
   11b28:	e6d9      	b.n	118de <__aeabi_dsub+0x1ae>
   11b2a:	2d00      	cmp	r5, #0
   11b2c:	d000      	beq.n	11b30 <__aeabi_dsub+0x400>
   11b2e:	e096      	b.n	11c5e <__aeabi_dsub+0x52e>
   11b30:	0008      	movs	r0, r1
   11b32:	4310      	orrs	r0, r2
   11b34:	d100      	bne.n	11b38 <__aeabi_dsub+0x408>
   11b36:	e0e2      	b.n	11cfe <__aeabi_dsub+0x5ce>
   11b38:	000c      	movs	r4, r1
   11b3a:	0017      	movs	r7, r2
   11b3c:	4698      	mov	r8, r3
   11b3e:	4e85      	ldr	r6, [pc, #532]	; (11d54 <__aeabi_dsub+0x624>)
   11b40:	e67c      	b.n	1183c <__aeabi_dsub+0x10c>
   11b42:	2500      	movs	r5, #0
   11b44:	e780      	b.n	11a48 <__aeabi_dsub+0x318>
   11b46:	2100      	movs	r1, #0
   11b48:	e78e      	b.n	11a68 <__aeabi_dsub+0x338>
   11b4a:	0023      	movs	r3, r4
   11b4c:	4650      	mov	r0, sl
   11b4e:	4303      	orrs	r3, r0
   11b50:	2e00      	cmp	r6, #0
   11b52:	d000      	beq.n	11b56 <__aeabi_dsub+0x426>
   11b54:	e0a8      	b.n	11ca8 <__aeabi_dsub+0x578>
   11b56:	2b00      	cmp	r3, #0
   11b58:	d100      	bne.n	11b5c <__aeabi_dsub+0x42c>
   11b5a:	e0de      	b.n	11d1a <__aeabi_dsub+0x5ea>
   11b5c:	000b      	movs	r3, r1
   11b5e:	4313      	orrs	r3, r2
   11b60:	d100      	bne.n	11b64 <__aeabi_dsub+0x434>
   11b62:	e66b      	b.n	1183c <__aeabi_dsub+0x10c>
   11b64:	4452      	add	r2, sl
   11b66:	4552      	cmp	r2, sl
   11b68:	4180      	sbcs	r0, r0
   11b6a:	1864      	adds	r4, r4, r1
   11b6c:	4240      	negs	r0, r0
   11b6e:	1824      	adds	r4, r4, r0
   11b70:	0017      	movs	r7, r2
   11b72:	0223      	lsls	r3, r4, #8
   11b74:	d400      	bmi.n	11b78 <__aeabi_dsub+0x448>
   11b76:	e6fd      	b.n	11974 <__aeabi_dsub+0x244>
   11b78:	4b77      	ldr	r3, [pc, #476]	; (11d58 <__aeabi_dsub+0x628>)
   11b7a:	4666      	mov	r6, ip
   11b7c:	401c      	ands	r4, r3
   11b7e:	e65d      	b.n	1183c <__aeabi_dsub+0x10c>
   11b80:	0025      	movs	r5, r4
   11b82:	4650      	mov	r0, sl
   11b84:	4305      	orrs	r5, r0
   11b86:	2e00      	cmp	r6, #0
   11b88:	d1cf      	bne.n	11b2a <__aeabi_dsub+0x3fa>
   11b8a:	2d00      	cmp	r5, #0
   11b8c:	d14f      	bne.n	11c2e <__aeabi_dsub+0x4fe>
   11b8e:	000c      	movs	r4, r1
   11b90:	4314      	orrs	r4, r2
   11b92:	d100      	bne.n	11b96 <__aeabi_dsub+0x466>
   11b94:	e0a0      	b.n	11cd8 <__aeabi_dsub+0x5a8>
   11b96:	000c      	movs	r4, r1
   11b98:	0017      	movs	r7, r2
   11b9a:	4698      	mov	r8, r3
   11b9c:	e64e      	b.n	1183c <__aeabi_dsub+0x10c>
   11b9e:	4666      	mov	r6, ip
   11ba0:	2400      	movs	r4, #0
   11ba2:	2700      	movs	r7, #0
   11ba4:	e685      	b.n	118b2 <__aeabi_dsub+0x182>
   11ba6:	001f      	movs	r7, r3
   11ba8:	0008      	movs	r0, r1
   11baa:	3f20      	subs	r7, #32
   11bac:	40f8      	lsrs	r0, r7
   11bae:	0007      	movs	r7, r0
   11bb0:	2b20      	cmp	r3, #32
   11bb2:	d100      	bne.n	11bb6 <__aeabi_dsub+0x486>
   11bb4:	e08e      	b.n	11cd4 <__aeabi_dsub+0x5a4>
   11bb6:	2040      	movs	r0, #64	; 0x40
   11bb8:	1ac3      	subs	r3, r0, r3
   11bba:	4099      	lsls	r1, r3
   11bbc:	430a      	orrs	r2, r1
   11bbe:	1e51      	subs	r1, r2, #1
   11bc0:	418a      	sbcs	r2, r1
   11bc2:	2100      	movs	r1, #0
   11bc4:	4317      	orrs	r7, r2
   11bc6:	e692      	b.n	118ee <__aeabi_dsub+0x1be>
   11bc8:	2e00      	cmp	r6, #0
   11bca:	d114      	bne.n	11bf6 <__aeabi_dsub+0x4c6>
   11bcc:	0026      	movs	r6, r4
   11bce:	4650      	mov	r0, sl
   11bd0:	4306      	orrs	r6, r0
   11bd2:	d062      	beq.n	11c9a <__aeabi_dsub+0x56a>
   11bd4:	43db      	mvns	r3, r3
   11bd6:	2b00      	cmp	r3, #0
   11bd8:	d15c      	bne.n	11c94 <__aeabi_dsub+0x564>
   11bda:	1887      	adds	r7, r0, r2
   11bdc:	4297      	cmp	r7, r2
   11bde:	4192      	sbcs	r2, r2
   11be0:	1864      	adds	r4, r4, r1
   11be2:	4252      	negs	r2, r2
   11be4:	18a4      	adds	r4, r4, r2
   11be6:	4666      	mov	r6, ip
   11be8:	e687      	b.n	118fa <__aeabi_dsub+0x1ca>
   11bea:	4650      	mov	r0, sl
   11bec:	4320      	orrs	r0, r4
   11bee:	1e44      	subs	r4, r0, #1
   11bf0:	41a0      	sbcs	r0, r4
   11bf2:	2400      	movs	r4, #0
   11bf4:	e760      	b.n	11ab8 <__aeabi_dsub+0x388>
   11bf6:	4e57      	ldr	r6, [pc, #348]	; (11d54 <__aeabi_dsub+0x624>)
   11bf8:	45b4      	cmp	ip, r6
   11bfa:	d04e      	beq.n	11c9a <__aeabi_dsub+0x56a>
   11bfc:	2680      	movs	r6, #128	; 0x80
   11bfe:	0436      	lsls	r6, r6, #16
   11c00:	425b      	negs	r3, r3
   11c02:	4334      	orrs	r4, r6
   11c04:	2b38      	cmp	r3, #56	; 0x38
   11c06:	dd00      	ble.n	11c0a <__aeabi_dsub+0x4da>
   11c08:	e07f      	b.n	11d0a <__aeabi_dsub+0x5da>
   11c0a:	2b1f      	cmp	r3, #31
   11c0c:	dd00      	ble.n	11c10 <__aeabi_dsub+0x4e0>
   11c0e:	e08b      	b.n	11d28 <__aeabi_dsub+0x5f8>
   11c10:	2620      	movs	r6, #32
   11c12:	0027      	movs	r7, r4
   11c14:	4650      	mov	r0, sl
   11c16:	1af6      	subs	r6, r6, r3
   11c18:	40b7      	lsls	r7, r6
   11c1a:	40d8      	lsrs	r0, r3
   11c1c:	4307      	orrs	r7, r0
   11c1e:	4650      	mov	r0, sl
   11c20:	40b0      	lsls	r0, r6
   11c22:	1e46      	subs	r6, r0, #1
   11c24:	41b0      	sbcs	r0, r6
   11c26:	4307      	orrs	r7, r0
   11c28:	40dc      	lsrs	r4, r3
   11c2a:	18bf      	adds	r7, r7, r2
   11c2c:	e7d6      	b.n	11bdc <__aeabi_dsub+0x4ac>
   11c2e:	000d      	movs	r5, r1
   11c30:	4315      	orrs	r5, r2
   11c32:	d100      	bne.n	11c36 <__aeabi_dsub+0x506>
   11c34:	e602      	b.n	1183c <__aeabi_dsub+0x10c>
   11c36:	4650      	mov	r0, sl
   11c38:	1a80      	subs	r0, r0, r2
   11c3a:	4582      	cmp	sl, r0
   11c3c:	41bf      	sbcs	r7, r7
   11c3e:	1a65      	subs	r5, r4, r1
   11c40:	427f      	negs	r7, r7
   11c42:	1bed      	subs	r5, r5, r7
   11c44:	4684      	mov	ip, r0
   11c46:	0228      	lsls	r0, r5, #8
   11c48:	d400      	bmi.n	11c4c <__aeabi_dsub+0x51c>
   11c4a:	e68d      	b.n	11968 <__aeabi_dsub+0x238>
   11c4c:	4650      	mov	r0, sl
   11c4e:	1a17      	subs	r7, r2, r0
   11c50:	42ba      	cmp	r2, r7
   11c52:	4192      	sbcs	r2, r2
   11c54:	1b0c      	subs	r4, r1, r4
   11c56:	4252      	negs	r2, r2
   11c58:	1aa4      	subs	r4, r4, r2
   11c5a:	4698      	mov	r8, r3
   11c5c:	e5ee      	b.n	1183c <__aeabi_dsub+0x10c>
   11c5e:	000d      	movs	r5, r1
   11c60:	4315      	orrs	r5, r2
   11c62:	d100      	bne.n	11c66 <__aeabi_dsub+0x536>
   11c64:	e76b      	b.n	11b3e <__aeabi_dsub+0x40e>
   11c66:	4650      	mov	r0, sl
   11c68:	0767      	lsls	r7, r4, #29
   11c6a:	08c0      	lsrs	r0, r0, #3
   11c6c:	4307      	orrs	r7, r0
   11c6e:	2080      	movs	r0, #128	; 0x80
   11c70:	08e4      	lsrs	r4, r4, #3
   11c72:	0300      	lsls	r0, r0, #12
   11c74:	4204      	tst	r4, r0
   11c76:	d007      	beq.n	11c88 <__aeabi_dsub+0x558>
   11c78:	08cd      	lsrs	r5, r1, #3
   11c7a:	4205      	tst	r5, r0
   11c7c:	d104      	bne.n	11c88 <__aeabi_dsub+0x558>
   11c7e:	002c      	movs	r4, r5
   11c80:	4698      	mov	r8, r3
   11c82:	08d7      	lsrs	r7, r2, #3
   11c84:	0749      	lsls	r1, r1, #29
   11c86:	430f      	orrs	r7, r1
   11c88:	0f7b      	lsrs	r3, r7, #29
   11c8a:	00e4      	lsls	r4, r4, #3
   11c8c:	431c      	orrs	r4, r3
   11c8e:	00ff      	lsls	r7, r7, #3
   11c90:	4e30      	ldr	r6, [pc, #192]	; (11d54 <__aeabi_dsub+0x624>)
   11c92:	e5d3      	b.n	1183c <__aeabi_dsub+0x10c>
   11c94:	4e2f      	ldr	r6, [pc, #188]	; (11d54 <__aeabi_dsub+0x624>)
   11c96:	45b4      	cmp	ip, r6
   11c98:	d1b4      	bne.n	11c04 <__aeabi_dsub+0x4d4>
   11c9a:	000c      	movs	r4, r1
   11c9c:	0017      	movs	r7, r2
   11c9e:	4666      	mov	r6, ip
   11ca0:	e5cc      	b.n	1183c <__aeabi_dsub+0x10c>
   11ca2:	2700      	movs	r7, #0
   11ca4:	2400      	movs	r4, #0
   11ca6:	e5e8      	b.n	1187a <__aeabi_dsub+0x14a>
   11ca8:	2b00      	cmp	r3, #0
   11caa:	d039      	beq.n	11d20 <__aeabi_dsub+0x5f0>
   11cac:	000b      	movs	r3, r1
   11cae:	4313      	orrs	r3, r2
   11cb0:	d100      	bne.n	11cb4 <__aeabi_dsub+0x584>
   11cb2:	e744      	b.n	11b3e <__aeabi_dsub+0x40e>
   11cb4:	08c0      	lsrs	r0, r0, #3
   11cb6:	0767      	lsls	r7, r4, #29
   11cb8:	4307      	orrs	r7, r0
   11cba:	2080      	movs	r0, #128	; 0x80
   11cbc:	08e4      	lsrs	r4, r4, #3
   11cbe:	0300      	lsls	r0, r0, #12
   11cc0:	4204      	tst	r4, r0
   11cc2:	d0e1      	beq.n	11c88 <__aeabi_dsub+0x558>
   11cc4:	08cb      	lsrs	r3, r1, #3
   11cc6:	4203      	tst	r3, r0
   11cc8:	d1de      	bne.n	11c88 <__aeabi_dsub+0x558>
   11cca:	08d7      	lsrs	r7, r2, #3
   11ccc:	0749      	lsls	r1, r1, #29
   11cce:	430f      	orrs	r7, r1
   11cd0:	001c      	movs	r4, r3
   11cd2:	e7d9      	b.n	11c88 <__aeabi_dsub+0x558>
   11cd4:	2100      	movs	r1, #0
   11cd6:	e771      	b.n	11bbc <__aeabi_dsub+0x48c>
   11cd8:	2500      	movs	r5, #0
   11cda:	2700      	movs	r7, #0
   11cdc:	e5e9      	b.n	118b2 <__aeabi_dsub+0x182>
   11cde:	002e      	movs	r6, r5
   11ce0:	0027      	movs	r7, r4
   11ce2:	3e20      	subs	r6, #32
   11ce4:	40f7      	lsrs	r7, r6
   11ce6:	2d20      	cmp	r5, #32
   11ce8:	d02f      	beq.n	11d4a <__aeabi_dsub+0x61a>
   11cea:	2640      	movs	r6, #64	; 0x40
   11cec:	1b75      	subs	r5, r6, r5
   11cee:	40ac      	lsls	r4, r5
   11cf0:	4650      	mov	r0, sl
   11cf2:	4320      	orrs	r0, r4
   11cf4:	1e44      	subs	r4, r0, #1
   11cf6:	41a0      	sbcs	r0, r4
   11cf8:	2400      	movs	r4, #0
   11cfa:	4338      	orrs	r0, r7
   11cfc:	e6dc      	b.n	11ab8 <__aeabi_dsub+0x388>
   11cfe:	2480      	movs	r4, #128	; 0x80
   11d00:	2500      	movs	r5, #0
   11d02:	0324      	lsls	r4, r4, #12
   11d04:	4e13      	ldr	r6, [pc, #76]	; (11d54 <__aeabi_dsub+0x624>)
   11d06:	2700      	movs	r7, #0
   11d08:	e5d3      	b.n	118b2 <__aeabi_dsub+0x182>
   11d0a:	4650      	mov	r0, sl
   11d0c:	4320      	orrs	r0, r4
   11d0e:	0007      	movs	r7, r0
   11d10:	1e78      	subs	r0, r7, #1
   11d12:	4187      	sbcs	r7, r0
   11d14:	2400      	movs	r4, #0
   11d16:	18bf      	adds	r7, r7, r2
   11d18:	e760      	b.n	11bdc <__aeabi_dsub+0x4ac>
   11d1a:	000c      	movs	r4, r1
   11d1c:	0017      	movs	r7, r2
   11d1e:	e58d      	b.n	1183c <__aeabi_dsub+0x10c>
   11d20:	000c      	movs	r4, r1
   11d22:	0017      	movs	r7, r2
   11d24:	4e0b      	ldr	r6, [pc, #44]	; (11d54 <__aeabi_dsub+0x624>)
   11d26:	e589      	b.n	1183c <__aeabi_dsub+0x10c>
   11d28:	001e      	movs	r6, r3
   11d2a:	0027      	movs	r7, r4
   11d2c:	3e20      	subs	r6, #32
   11d2e:	40f7      	lsrs	r7, r6
   11d30:	2b20      	cmp	r3, #32
   11d32:	d00c      	beq.n	11d4e <__aeabi_dsub+0x61e>
   11d34:	2640      	movs	r6, #64	; 0x40
   11d36:	1af3      	subs	r3, r6, r3
   11d38:	409c      	lsls	r4, r3
   11d3a:	4650      	mov	r0, sl
   11d3c:	4320      	orrs	r0, r4
   11d3e:	1e44      	subs	r4, r0, #1
   11d40:	41a0      	sbcs	r0, r4
   11d42:	4307      	orrs	r7, r0
   11d44:	2400      	movs	r4, #0
   11d46:	18bf      	adds	r7, r7, r2
   11d48:	e748      	b.n	11bdc <__aeabi_dsub+0x4ac>
   11d4a:	2400      	movs	r4, #0
   11d4c:	e7d0      	b.n	11cf0 <__aeabi_dsub+0x5c0>
   11d4e:	2400      	movs	r4, #0
   11d50:	e7f3      	b.n	11d3a <__aeabi_dsub+0x60a>
   11d52:	46c0      	nop			; (mov r8, r8)
   11d54:	000007ff 	.word	0x000007ff
   11d58:	ff7fffff 	.word	0xff7fffff

00011d5c <__aeabi_dcmpun>:
   11d5c:	b570      	push	{r4, r5, r6, lr}
   11d5e:	4e0e      	ldr	r6, [pc, #56]	; (11d98 <__aeabi_dcmpun+0x3c>)
   11d60:	030d      	lsls	r5, r1, #12
   11d62:	031c      	lsls	r4, r3, #12
   11d64:	0049      	lsls	r1, r1, #1
   11d66:	005b      	lsls	r3, r3, #1
   11d68:	0b2d      	lsrs	r5, r5, #12
   11d6a:	0d49      	lsrs	r1, r1, #21
   11d6c:	0b24      	lsrs	r4, r4, #12
   11d6e:	0d5b      	lsrs	r3, r3, #21
   11d70:	42b1      	cmp	r1, r6
   11d72:	d004      	beq.n	11d7e <__aeabi_dcmpun+0x22>
   11d74:	4908      	ldr	r1, [pc, #32]	; (11d98 <__aeabi_dcmpun+0x3c>)
   11d76:	2000      	movs	r0, #0
   11d78:	428b      	cmp	r3, r1
   11d7a:	d008      	beq.n	11d8e <__aeabi_dcmpun+0x32>
   11d7c:	bd70      	pop	{r4, r5, r6, pc}
   11d7e:	4305      	orrs	r5, r0
   11d80:	2001      	movs	r0, #1
   11d82:	2d00      	cmp	r5, #0
   11d84:	d1fa      	bne.n	11d7c <__aeabi_dcmpun+0x20>
   11d86:	4904      	ldr	r1, [pc, #16]	; (11d98 <__aeabi_dcmpun+0x3c>)
   11d88:	2000      	movs	r0, #0
   11d8a:	428b      	cmp	r3, r1
   11d8c:	d1f6      	bne.n	11d7c <__aeabi_dcmpun+0x20>
   11d8e:	4314      	orrs	r4, r2
   11d90:	0020      	movs	r0, r4
   11d92:	1e44      	subs	r4, r0, #1
   11d94:	41a0      	sbcs	r0, r4
   11d96:	e7f1      	b.n	11d7c <__aeabi_dcmpun+0x20>
   11d98:	000007ff 	.word	0x000007ff

00011d9c <__aeabi_d2iz>:
   11d9c:	b530      	push	{r4, r5, lr}
   11d9e:	4d13      	ldr	r5, [pc, #76]	; (11dec <__aeabi_d2iz+0x50>)
   11da0:	030a      	lsls	r2, r1, #12
   11da2:	004b      	lsls	r3, r1, #1
   11da4:	0b12      	lsrs	r2, r2, #12
   11da6:	0d5b      	lsrs	r3, r3, #21
   11da8:	0fc9      	lsrs	r1, r1, #31
   11daa:	2400      	movs	r4, #0
   11dac:	42ab      	cmp	r3, r5
   11dae:	dd10      	ble.n	11dd2 <__aeabi_d2iz+0x36>
   11db0:	4c0f      	ldr	r4, [pc, #60]	; (11df0 <__aeabi_d2iz+0x54>)
   11db2:	42a3      	cmp	r3, r4
   11db4:	dc0f      	bgt.n	11dd6 <__aeabi_d2iz+0x3a>
   11db6:	2480      	movs	r4, #128	; 0x80
   11db8:	4d0e      	ldr	r5, [pc, #56]	; (11df4 <__aeabi_d2iz+0x58>)
   11dba:	0364      	lsls	r4, r4, #13
   11dbc:	4322      	orrs	r2, r4
   11dbe:	1aed      	subs	r5, r5, r3
   11dc0:	2d1f      	cmp	r5, #31
   11dc2:	dd0b      	ble.n	11ddc <__aeabi_d2iz+0x40>
   11dc4:	480c      	ldr	r0, [pc, #48]	; (11df8 <__aeabi_d2iz+0x5c>)
   11dc6:	1ac3      	subs	r3, r0, r3
   11dc8:	40da      	lsrs	r2, r3
   11dca:	4254      	negs	r4, r2
   11dcc:	2900      	cmp	r1, #0
   11dce:	d100      	bne.n	11dd2 <__aeabi_d2iz+0x36>
   11dd0:	0014      	movs	r4, r2
   11dd2:	0020      	movs	r0, r4
   11dd4:	bd30      	pop	{r4, r5, pc}
   11dd6:	4b09      	ldr	r3, [pc, #36]	; (11dfc <__aeabi_d2iz+0x60>)
   11dd8:	18cc      	adds	r4, r1, r3
   11dda:	e7fa      	b.n	11dd2 <__aeabi_d2iz+0x36>
   11ddc:	4c08      	ldr	r4, [pc, #32]	; (11e00 <__aeabi_d2iz+0x64>)
   11dde:	40e8      	lsrs	r0, r5
   11de0:	46a4      	mov	ip, r4
   11de2:	4463      	add	r3, ip
   11de4:	409a      	lsls	r2, r3
   11de6:	4302      	orrs	r2, r0
   11de8:	e7ef      	b.n	11dca <__aeabi_d2iz+0x2e>
   11dea:	46c0      	nop			; (mov r8, r8)
   11dec:	000003fe 	.word	0x000003fe
   11df0:	0000041d 	.word	0x0000041d
   11df4:	00000433 	.word	0x00000433
   11df8:	00000413 	.word	0x00000413
   11dfc:	7fffffff 	.word	0x7fffffff
   11e00:	fffffbed 	.word	0xfffffbed

00011e04 <__aeabi_i2d>:
   11e04:	b570      	push	{r4, r5, r6, lr}
   11e06:	2800      	cmp	r0, #0
   11e08:	d030      	beq.n	11e6c <__aeabi_i2d+0x68>
   11e0a:	17c3      	asrs	r3, r0, #31
   11e0c:	18c4      	adds	r4, r0, r3
   11e0e:	405c      	eors	r4, r3
   11e10:	0fc5      	lsrs	r5, r0, #31
   11e12:	0020      	movs	r0, r4
   11e14:	f000 f838 	bl	11e88 <__clzsi2>
   11e18:	4b17      	ldr	r3, [pc, #92]	; (11e78 <__aeabi_i2d+0x74>)
   11e1a:	4a18      	ldr	r2, [pc, #96]	; (11e7c <__aeabi_i2d+0x78>)
   11e1c:	1a1b      	subs	r3, r3, r0
   11e1e:	1ad2      	subs	r2, r2, r3
   11e20:	2a1f      	cmp	r2, #31
   11e22:	dd18      	ble.n	11e56 <__aeabi_i2d+0x52>
   11e24:	4a16      	ldr	r2, [pc, #88]	; (11e80 <__aeabi_i2d+0x7c>)
   11e26:	1ad2      	subs	r2, r2, r3
   11e28:	4094      	lsls	r4, r2
   11e2a:	2200      	movs	r2, #0
   11e2c:	0324      	lsls	r4, r4, #12
   11e2e:	055b      	lsls	r3, r3, #21
   11e30:	0b24      	lsrs	r4, r4, #12
   11e32:	0d5b      	lsrs	r3, r3, #21
   11e34:	2100      	movs	r1, #0
   11e36:	0010      	movs	r0, r2
   11e38:	0324      	lsls	r4, r4, #12
   11e3a:	0d0a      	lsrs	r2, r1, #20
   11e3c:	0b24      	lsrs	r4, r4, #12
   11e3e:	0512      	lsls	r2, r2, #20
   11e40:	4322      	orrs	r2, r4
   11e42:	4c10      	ldr	r4, [pc, #64]	; (11e84 <__aeabi_i2d+0x80>)
   11e44:	051b      	lsls	r3, r3, #20
   11e46:	4022      	ands	r2, r4
   11e48:	4313      	orrs	r3, r2
   11e4a:	005b      	lsls	r3, r3, #1
   11e4c:	07ed      	lsls	r5, r5, #31
   11e4e:	085b      	lsrs	r3, r3, #1
   11e50:	432b      	orrs	r3, r5
   11e52:	0019      	movs	r1, r3
   11e54:	bd70      	pop	{r4, r5, r6, pc}
   11e56:	0021      	movs	r1, r4
   11e58:	4091      	lsls	r1, r2
   11e5a:	000a      	movs	r2, r1
   11e5c:	210b      	movs	r1, #11
   11e5e:	1a08      	subs	r0, r1, r0
   11e60:	40c4      	lsrs	r4, r0
   11e62:	055b      	lsls	r3, r3, #21
   11e64:	0324      	lsls	r4, r4, #12
   11e66:	0b24      	lsrs	r4, r4, #12
   11e68:	0d5b      	lsrs	r3, r3, #21
   11e6a:	e7e3      	b.n	11e34 <__aeabi_i2d+0x30>
   11e6c:	2500      	movs	r5, #0
   11e6e:	2300      	movs	r3, #0
   11e70:	2400      	movs	r4, #0
   11e72:	2200      	movs	r2, #0
   11e74:	e7de      	b.n	11e34 <__aeabi_i2d+0x30>
   11e76:	46c0      	nop			; (mov r8, r8)
   11e78:	0000041e 	.word	0x0000041e
   11e7c:	00000433 	.word	0x00000433
   11e80:	00000413 	.word	0x00000413
   11e84:	800fffff 	.word	0x800fffff

00011e88 <__clzsi2>:
   11e88:	211c      	movs	r1, #28
   11e8a:	2301      	movs	r3, #1
   11e8c:	041b      	lsls	r3, r3, #16
   11e8e:	4298      	cmp	r0, r3
   11e90:	d301      	bcc.n	11e96 <__clzsi2+0xe>
   11e92:	0c00      	lsrs	r0, r0, #16
   11e94:	3910      	subs	r1, #16
   11e96:	0a1b      	lsrs	r3, r3, #8
   11e98:	4298      	cmp	r0, r3
   11e9a:	d301      	bcc.n	11ea0 <__clzsi2+0x18>
   11e9c:	0a00      	lsrs	r0, r0, #8
   11e9e:	3908      	subs	r1, #8
   11ea0:	091b      	lsrs	r3, r3, #4
   11ea2:	4298      	cmp	r0, r3
   11ea4:	d301      	bcc.n	11eaa <__clzsi2+0x22>
   11ea6:	0900      	lsrs	r0, r0, #4
   11ea8:	3904      	subs	r1, #4
   11eaa:	a202      	add	r2, pc, #8	; (adr r2, 11eb4 <__clzsi2+0x2c>)
   11eac:	5c10      	ldrb	r0, [r2, r0]
   11eae:	1840      	adds	r0, r0, r1
   11eb0:	4770      	bx	lr
   11eb2:	46c0      	nop			; (mov r8, r8)
   11eb4:	02020304 	.word	0x02020304
   11eb8:	01010101 	.word	0x01010101
	...

00011ec4 <atoi>:
   11ec4:	b510      	push	{r4, lr}
   11ec6:	220a      	movs	r2, #10
   11ec8:	2100      	movs	r1, #0
   11eca:	f000 fba5 	bl	12618 <strtol>
   11ece:	bd10      	pop	{r4, pc}

00011ed0 <__errno>:
   11ed0:	4b01      	ldr	r3, [pc, #4]	; (11ed8 <__errno+0x8>)
   11ed2:	6818      	ldr	r0, [r3, #0]
   11ed4:	4770      	bx	lr
   11ed6:	46c0      	nop			; (mov r8, r8)
   11ed8:	20000068 	.word	0x20000068

00011edc <__libc_init_array>:
   11edc:	b570      	push	{r4, r5, r6, lr}
   11ede:	2600      	movs	r6, #0
   11ee0:	4d0c      	ldr	r5, [pc, #48]	; (11f14 <__libc_init_array+0x38>)
   11ee2:	4c0d      	ldr	r4, [pc, #52]	; (11f18 <__libc_init_array+0x3c>)
   11ee4:	1b64      	subs	r4, r4, r5
   11ee6:	10a4      	asrs	r4, r4, #2
   11ee8:	42a6      	cmp	r6, r4
   11eea:	d109      	bne.n	11f00 <__libc_init_array+0x24>
   11eec:	2600      	movs	r6, #0
   11eee:	f003 fad5 	bl	1549c <_init>
   11ef2:	4d0a      	ldr	r5, [pc, #40]	; (11f1c <__libc_init_array+0x40>)
   11ef4:	4c0a      	ldr	r4, [pc, #40]	; (11f20 <__libc_init_array+0x44>)
   11ef6:	1b64      	subs	r4, r4, r5
   11ef8:	10a4      	asrs	r4, r4, #2
   11efa:	42a6      	cmp	r6, r4
   11efc:	d105      	bne.n	11f0a <__libc_init_array+0x2e>
   11efe:	bd70      	pop	{r4, r5, r6, pc}
   11f00:	00b3      	lsls	r3, r6, #2
   11f02:	58eb      	ldr	r3, [r5, r3]
   11f04:	4798      	blx	r3
   11f06:	3601      	adds	r6, #1
   11f08:	e7ee      	b.n	11ee8 <__libc_init_array+0xc>
   11f0a:	00b3      	lsls	r3, r6, #2
   11f0c:	58eb      	ldr	r3, [r5, r3]
   11f0e:	4798      	blx	r3
   11f10:	3601      	adds	r6, #1
   11f12:	e7f2      	b.n	11efa <__libc_init_array+0x1e>
   11f14:	000154a8 	.word	0x000154a8
   11f18:	000154a8 	.word	0x000154a8
   11f1c:	000154a8 	.word	0x000154a8
   11f20:	000154ac 	.word	0x000154ac

00011f24 <__locale_ctype_ptr_l>:
   11f24:	30ec      	adds	r0, #236	; 0xec
   11f26:	6800      	ldr	r0, [r0, #0]
   11f28:	4770      	bx	lr
	...

00011f2c <__locale_ctype_ptr>:
   11f2c:	4b04      	ldr	r3, [pc, #16]	; (11f40 <__locale_ctype_ptr+0x14>)
   11f2e:	681b      	ldr	r3, [r3, #0]
   11f30:	6a1b      	ldr	r3, [r3, #32]
   11f32:	2b00      	cmp	r3, #0
   11f34:	d100      	bne.n	11f38 <__locale_ctype_ptr+0xc>
   11f36:	4b03      	ldr	r3, [pc, #12]	; (11f44 <__locale_ctype_ptr+0x18>)
   11f38:	33ec      	adds	r3, #236	; 0xec
   11f3a:	6818      	ldr	r0, [r3, #0]
   11f3c:	4770      	bx	lr
   11f3e:	46c0      	nop			; (mov r8, r8)
   11f40:	20000068 	.word	0x20000068
   11f44:	200000cc 	.word	0x200000cc

00011f48 <malloc>:
   11f48:	b510      	push	{r4, lr}
   11f4a:	4b03      	ldr	r3, [pc, #12]	; (11f58 <malloc+0x10>)
   11f4c:	0001      	movs	r1, r0
   11f4e:	6818      	ldr	r0, [r3, #0]
   11f50:	f000 f88e 	bl	12070 <_malloc_r>
   11f54:	bd10      	pop	{r4, pc}
   11f56:	46c0      	nop			; (mov r8, r8)
   11f58:	20000068 	.word	0x20000068

00011f5c <free>:
   11f5c:	b510      	push	{r4, lr}
   11f5e:	4b03      	ldr	r3, [pc, #12]	; (11f6c <free+0x10>)
   11f60:	0001      	movs	r1, r0
   11f62:	6818      	ldr	r0, [r3, #0]
   11f64:	f000 f83a 	bl	11fdc <_free_r>
   11f68:	bd10      	pop	{r4, pc}
   11f6a:	46c0      	nop			; (mov r8, r8)
   11f6c:	20000068 	.word	0x20000068

00011f70 <__ascii_mbtowc>:
   11f70:	b082      	sub	sp, #8
   11f72:	2900      	cmp	r1, #0
   11f74:	d100      	bne.n	11f78 <__ascii_mbtowc+0x8>
   11f76:	a901      	add	r1, sp, #4
   11f78:	1e10      	subs	r0, r2, #0
   11f7a:	d006      	beq.n	11f8a <__ascii_mbtowc+0x1a>
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d006      	beq.n	11f8e <__ascii_mbtowc+0x1e>
   11f80:	7813      	ldrb	r3, [r2, #0]
   11f82:	600b      	str	r3, [r1, #0]
   11f84:	7810      	ldrb	r0, [r2, #0]
   11f86:	1e43      	subs	r3, r0, #1
   11f88:	4198      	sbcs	r0, r3
   11f8a:	b002      	add	sp, #8
   11f8c:	4770      	bx	lr
   11f8e:	2002      	movs	r0, #2
   11f90:	4240      	negs	r0, r0
   11f92:	e7fa      	b.n	11f8a <__ascii_mbtowc+0x1a>

00011f94 <memcpy>:
   11f94:	2300      	movs	r3, #0
   11f96:	b510      	push	{r4, lr}
   11f98:	429a      	cmp	r2, r3
   11f9a:	d100      	bne.n	11f9e <memcpy+0xa>
   11f9c:	bd10      	pop	{r4, pc}
   11f9e:	5ccc      	ldrb	r4, [r1, r3]
   11fa0:	54c4      	strb	r4, [r0, r3]
   11fa2:	3301      	adds	r3, #1
   11fa4:	e7f8      	b.n	11f98 <memcpy+0x4>

00011fa6 <memmove>:
   11fa6:	b510      	push	{r4, lr}
   11fa8:	4288      	cmp	r0, r1
   11faa:	d902      	bls.n	11fb2 <memmove+0xc>
   11fac:	188b      	adds	r3, r1, r2
   11fae:	4298      	cmp	r0, r3
   11fb0:	d308      	bcc.n	11fc4 <memmove+0x1e>
   11fb2:	2300      	movs	r3, #0
   11fb4:	429a      	cmp	r2, r3
   11fb6:	d007      	beq.n	11fc8 <memmove+0x22>
   11fb8:	5ccc      	ldrb	r4, [r1, r3]
   11fba:	54c4      	strb	r4, [r0, r3]
   11fbc:	3301      	adds	r3, #1
   11fbe:	e7f9      	b.n	11fb4 <memmove+0xe>
   11fc0:	5c8b      	ldrb	r3, [r1, r2]
   11fc2:	5483      	strb	r3, [r0, r2]
   11fc4:	3a01      	subs	r2, #1
   11fc6:	d2fb      	bcs.n	11fc0 <memmove+0x1a>
   11fc8:	bd10      	pop	{r4, pc}

00011fca <memset>:
   11fca:	0003      	movs	r3, r0
   11fcc:	1882      	adds	r2, r0, r2
   11fce:	4293      	cmp	r3, r2
   11fd0:	d100      	bne.n	11fd4 <memset+0xa>
   11fd2:	4770      	bx	lr
   11fd4:	7019      	strb	r1, [r3, #0]
   11fd6:	3301      	adds	r3, #1
   11fd8:	e7f9      	b.n	11fce <memset+0x4>
	...

00011fdc <_free_r>:
   11fdc:	b570      	push	{r4, r5, r6, lr}
   11fde:	0005      	movs	r5, r0
   11fe0:	2900      	cmp	r1, #0
   11fe2:	d010      	beq.n	12006 <_free_r+0x2a>
   11fe4:	1f0c      	subs	r4, r1, #4
   11fe6:	6823      	ldr	r3, [r4, #0]
   11fe8:	2b00      	cmp	r3, #0
   11fea:	da00      	bge.n	11fee <_free_r+0x12>
   11fec:	18e4      	adds	r4, r4, r3
   11fee:	0028      	movs	r0, r5
   11ff0:	f000 fdf8 	bl	12be4 <__malloc_lock>
   11ff4:	4a1d      	ldr	r2, [pc, #116]	; (1206c <_free_r+0x90>)
   11ff6:	6813      	ldr	r3, [r2, #0]
   11ff8:	2b00      	cmp	r3, #0
   11ffa:	d105      	bne.n	12008 <_free_r+0x2c>
   11ffc:	6063      	str	r3, [r4, #4]
   11ffe:	6014      	str	r4, [r2, #0]
   12000:	0028      	movs	r0, r5
   12002:	f000 fdf0 	bl	12be6 <__malloc_unlock>
   12006:	bd70      	pop	{r4, r5, r6, pc}
   12008:	42a3      	cmp	r3, r4
   1200a:	d909      	bls.n	12020 <_free_r+0x44>
   1200c:	6821      	ldr	r1, [r4, #0]
   1200e:	1860      	adds	r0, r4, r1
   12010:	4283      	cmp	r3, r0
   12012:	d1f3      	bne.n	11ffc <_free_r+0x20>
   12014:	6818      	ldr	r0, [r3, #0]
   12016:	685b      	ldr	r3, [r3, #4]
   12018:	1841      	adds	r1, r0, r1
   1201a:	6021      	str	r1, [r4, #0]
   1201c:	e7ee      	b.n	11ffc <_free_r+0x20>
   1201e:	0013      	movs	r3, r2
   12020:	685a      	ldr	r2, [r3, #4]
   12022:	2a00      	cmp	r2, #0
   12024:	d001      	beq.n	1202a <_free_r+0x4e>
   12026:	42a2      	cmp	r2, r4
   12028:	d9f9      	bls.n	1201e <_free_r+0x42>
   1202a:	6819      	ldr	r1, [r3, #0]
   1202c:	1858      	adds	r0, r3, r1
   1202e:	42a0      	cmp	r0, r4
   12030:	d10b      	bne.n	1204a <_free_r+0x6e>
   12032:	6820      	ldr	r0, [r4, #0]
   12034:	1809      	adds	r1, r1, r0
   12036:	1858      	adds	r0, r3, r1
   12038:	6019      	str	r1, [r3, #0]
   1203a:	4282      	cmp	r2, r0
   1203c:	d1e0      	bne.n	12000 <_free_r+0x24>
   1203e:	6810      	ldr	r0, [r2, #0]
   12040:	6852      	ldr	r2, [r2, #4]
   12042:	1841      	adds	r1, r0, r1
   12044:	6019      	str	r1, [r3, #0]
   12046:	605a      	str	r2, [r3, #4]
   12048:	e7da      	b.n	12000 <_free_r+0x24>
   1204a:	42a0      	cmp	r0, r4
   1204c:	d902      	bls.n	12054 <_free_r+0x78>
   1204e:	230c      	movs	r3, #12
   12050:	602b      	str	r3, [r5, #0]
   12052:	e7d5      	b.n	12000 <_free_r+0x24>
   12054:	6821      	ldr	r1, [r4, #0]
   12056:	1860      	adds	r0, r4, r1
   12058:	4282      	cmp	r2, r0
   1205a:	d103      	bne.n	12064 <_free_r+0x88>
   1205c:	6810      	ldr	r0, [r2, #0]
   1205e:	6852      	ldr	r2, [r2, #4]
   12060:	1841      	adds	r1, r0, r1
   12062:	6021      	str	r1, [r4, #0]
   12064:	6062      	str	r2, [r4, #4]
   12066:	605c      	str	r4, [r3, #4]
   12068:	e7ca      	b.n	12000 <_free_r+0x24>
   1206a:	46c0      	nop			; (mov r8, r8)
   1206c:	200003fc 	.word	0x200003fc

00012070 <_malloc_r>:
   12070:	2303      	movs	r3, #3
   12072:	b570      	push	{r4, r5, r6, lr}
   12074:	1ccd      	adds	r5, r1, #3
   12076:	439d      	bics	r5, r3
   12078:	3508      	adds	r5, #8
   1207a:	0006      	movs	r6, r0
   1207c:	2d0c      	cmp	r5, #12
   1207e:	d21e      	bcs.n	120be <_malloc_r+0x4e>
   12080:	250c      	movs	r5, #12
   12082:	42a9      	cmp	r1, r5
   12084:	d81d      	bhi.n	120c2 <_malloc_r+0x52>
   12086:	0030      	movs	r0, r6
   12088:	f000 fdac 	bl	12be4 <__malloc_lock>
   1208c:	4a25      	ldr	r2, [pc, #148]	; (12124 <_malloc_r+0xb4>)
   1208e:	6814      	ldr	r4, [r2, #0]
   12090:	0021      	movs	r1, r4
   12092:	2900      	cmp	r1, #0
   12094:	d119      	bne.n	120ca <_malloc_r+0x5a>
   12096:	4c24      	ldr	r4, [pc, #144]	; (12128 <_malloc_r+0xb8>)
   12098:	6823      	ldr	r3, [r4, #0]
   1209a:	2b00      	cmp	r3, #0
   1209c:	d103      	bne.n	120a6 <_malloc_r+0x36>
   1209e:	0030      	movs	r0, r6
   120a0:	f000 f8dc 	bl	1225c <_sbrk_r>
   120a4:	6020      	str	r0, [r4, #0]
   120a6:	0029      	movs	r1, r5
   120a8:	0030      	movs	r0, r6
   120aa:	f000 f8d7 	bl	1225c <_sbrk_r>
   120ae:	1c43      	adds	r3, r0, #1
   120b0:	d12c      	bne.n	1210c <_malloc_r+0x9c>
   120b2:	230c      	movs	r3, #12
   120b4:	0030      	movs	r0, r6
   120b6:	6033      	str	r3, [r6, #0]
   120b8:	f000 fd95 	bl	12be6 <__malloc_unlock>
   120bc:	e003      	b.n	120c6 <_malloc_r+0x56>
   120be:	2d00      	cmp	r5, #0
   120c0:	dadf      	bge.n	12082 <_malloc_r+0x12>
   120c2:	230c      	movs	r3, #12
   120c4:	6033      	str	r3, [r6, #0]
   120c6:	2000      	movs	r0, #0
   120c8:	bd70      	pop	{r4, r5, r6, pc}
   120ca:	680b      	ldr	r3, [r1, #0]
   120cc:	1b5b      	subs	r3, r3, r5
   120ce:	d41a      	bmi.n	12106 <_malloc_r+0x96>
   120d0:	2b0b      	cmp	r3, #11
   120d2:	d903      	bls.n	120dc <_malloc_r+0x6c>
   120d4:	600b      	str	r3, [r1, #0]
   120d6:	18cc      	adds	r4, r1, r3
   120d8:	6025      	str	r5, [r4, #0]
   120da:	e003      	b.n	120e4 <_malloc_r+0x74>
   120dc:	428c      	cmp	r4, r1
   120de:	d10e      	bne.n	120fe <_malloc_r+0x8e>
   120e0:	6863      	ldr	r3, [r4, #4]
   120e2:	6013      	str	r3, [r2, #0]
   120e4:	0030      	movs	r0, r6
   120e6:	f000 fd7e 	bl	12be6 <__malloc_unlock>
   120ea:	0020      	movs	r0, r4
   120ec:	2207      	movs	r2, #7
   120ee:	300b      	adds	r0, #11
   120f0:	1d23      	adds	r3, r4, #4
   120f2:	4390      	bics	r0, r2
   120f4:	1ac3      	subs	r3, r0, r3
   120f6:	d0e7      	beq.n	120c8 <_malloc_r+0x58>
   120f8:	425a      	negs	r2, r3
   120fa:	50e2      	str	r2, [r4, r3]
   120fc:	e7e4      	b.n	120c8 <_malloc_r+0x58>
   120fe:	684b      	ldr	r3, [r1, #4]
   12100:	6063      	str	r3, [r4, #4]
   12102:	000c      	movs	r4, r1
   12104:	e7ee      	b.n	120e4 <_malloc_r+0x74>
   12106:	000c      	movs	r4, r1
   12108:	6849      	ldr	r1, [r1, #4]
   1210a:	e7c2      	b.n	12092 <_malloc_r+0x22>
   1210c:	2303      	movs	r3, #3
   1210e:	1cc4      	adds	r4, r0, #3
   12110:	439c      	bics	r4, r3
   12112:	42a0      	cmp	r0, r4
   12114:	d0e0      	beq.n	120d8 <_malloc_r+0x68>
   12116:	1a21      	subs	r1, r4, r0
   12118:	0030      	movs	r0, r6
   1211a:	f000 f89f 	bl	1225c <_sbrk_r>
   1211e:	1c43      	adds	r3, r0, #1
   12120:	d1da      	bne.n	120d8 <_malloc_r+0x68>
   12122:	e7c6      	b.n	120b2 <_malloc_r+0x42>
   12124:	200003fc 	.word	0x200003fc
   12128:	20000400 	.word	0x20000400

0001212c <iprintf>:
   1212c:	b40f      	push	{r0, r1, r2, r3}
   1212e:	4b0b      	ldr	r3, [pc, #44]	; (1215c <iprintf+0x30>)
   12130:	b513      	push	{r0, r1, r4, lr}
   12132:	681c      	ldr	r4, [r3, #0]
   12134:	2c00      	cmp	r4, #0
   12136:	d005      	beq.n	12144 <iprintf+0x18>
   12138:	69a3      	ldr	r3, [r4, #24]
   1213a:	2b00      	cmp	r3, #0
   1213c:	d102      	bne.n	12144 <iprintf+0x18>
   1213e:	0020      	movs	r0, r4
   12140:	f000 fc4e 	bl	129e0 <__sinit>
   12144:	ab05      	add	r3, sp, #20
   12146:	9a04      	ldr	r2, [sp, #16]
   12148:	68a1      	ldr	r1, [r4, #8]
   1214a:	0020      	movs	r0, r4
   1214c:	9301      	str	r3, [sp, #4]
   1214e:	f000 fed9 	bl	12f04 <_vfiprintf_r>
   12152:	bc16      	pop	{r1, r2, r4}
   12154:	bc08      	pop	{r3}
   12156:	b004      	add	sp, #16
   12158:	4718      	bx	r3
   1215a:	46c0      	nop			; (mov r8, r8)
   1215c:	20000068 	.word	0x20000068

00012160 <putchar>:
   12160:	4b08      	ldr	r3, [pc, #32]	; (12184 <putchar+0x24>)
   12162:	b570      	push	{r4, r5, r6, lr}
   12164:	681c      	ldr	r4, [r3, #0]
   12166:	0005      	movs	r5, r0
   12168:	2c00      	cmp	r4, #0
   1216a:	d005      	beq.n	12178 <putchar+0x18>
   1216c:	69a3      	ldr	r3, [r4, #24]
   1216e:	2b00      	cmp	r3, #0
   12170:	d102      	bne.n	12178 <putchar+0x18>
   12172:	0020      	movs	r0, r4
   12174:	f000 fc34 	bl	129e0 <__sinit>
   12178:	0029      	movs	r1, r5
   1217a:	68a2      	ldr	r2, [r4, #8]
   1217c:	0020      	movs	r0, r4
   1217e:	f001 f965 	bl	1344c <_putc_r>
   12182:	bd70      	pop	{r4, r5, r6, pc}
   12184:	20000068 	.word	0x20000068

00012188 <_puts_r>:
   12188:	b570      	push	{r4, r5, r6, lr}
   1218a:	0005      	movs	r5, r0
   1218c:	000e      	movs	r6, r1
   1218e:	2800      	cmp	r0, #0
   12190:	d004      	beq.n	1219c <_puts_r+0x14>
   12192:	6983      	ldr	r3, [r0, #24]
   12194:	2b00      	cmp	r3, #0
   12196:	d101      	bne.n	1219c <_puts_r+0x14>
   12198:	f000 fc22 	bl	129e0 <__sinit>
   1219c:	69ab      	ldr	r3, [r5, #24]
   1219e:	68ac      	ldr	r4, [r5, #8]
   121a0:	2b00      	cmp	r3, #0
   121a2:	d102      	bne.n	121aa <_puts_r+0x22>
   121a4:	0028      	movs	r0, r5
   121a6:	f000 fc1b 	bl	129e0 <__sinit>
   121aa:	4b24      	ldr	r3, [pc, #144]	; (1223c <_puts_r+0xb4>)
   121ac:	429c      	cmp	r4, r3
   121ae:	d10f      	bne.n	121d0 <_puts_r+0x48>
   121b0:	686c      	ldr	r4, [r5, #4]
   121b2:	89a3      	ldrh	r3, [r4, #12]
   121b4:	071b      	lsls	r3, r3, #28
   121b6:	d502      	bpl.n	121be <_puts_r+0x36>
   121b8:	6923      	ldr	r3, [r4, #16]
   121ba:	2b00      	cmp	r3, #0
   121bc:	d120      	bne.n	12200 <_puts_r+0x78>
   121be:	0021      	movs	r1, r4
   121c0:	0028      	movs	r0, r5
   121c2:	f000 fa9f 	bl	12704 <__swsetup_r>
   121c6:	2800      	cmp	r0, #0
   121c8:	d01a      	beq.n	12200 <_puts_r+0x78>
   121ca:	2001      	movs	r0, #1
   121cc:	4240      	negs	r0, r0
   121ce:	bd70      	pop	{r4, r5, r6, pc}
   121d0:	4b1b      	ldr	r3, [pc, #108]	; (12240 <_puts_r+0xb8>)
   121d2:	429c      	cmp	r4, r3
   121d4:	d101      	bne.n	121da <_puts_r+0x52>
   121d6:	68ac      	ldr	r4, [r5, #8]
   121d8:	e7eb      	b.n	121b2 <_puts_r+0x2a>
   121da:	4b1a      	ldr	r3, [pc, #104]	; (12244 <_puts_r+0xbc>)
   121dc:	429c      	cmp	r4, r3
   121de:	d1e8      	bne.n	121b2 <_puts_r+0x2a>
   121e0:	68ec      	ldr	r4, [r5, #12]
   121e2:	e7e6      	b.n	121b2 <_puts_r+0x2a>
   121e4:	3b01      	subs	r3, #1
   121e6:	3601      	adds	r6, #1
   121e8:	60a3      	str	r3, [r4, #8]
   121ea:	2b00      	cmp	r3, #0
   121ec:	da04      	bge.n	121f8 <_puts_r+0x70>
   121ee:	69a2      	ldr	r2, [r4, #24]
   121f0:	4293      	cmp	r3, r2
   121f2:	db16      	blt.n	12222 <_puts_r+0x9a>
   121f4:	290a      	cmp	r1, #10
   121f6:	d014      	beq.n	12222 <_puts_r+0x9a>
   121f8:	6823      	ldr	r3, [r4, #0]
   121fa:	1c5a      	adds	r2, r3, #1
   121fc:	6022      	str	r2, [r4, #0]
   121fe:	7019      	strb	r1, [r3, #0]
   12200:	7831      	ldrb	r1, [r6, #0]
   12202:	68a3      	ldr	r3, [r4, #8]
   12204:	2900      	cmp	r1, #0
   12206:	d1ed      	bne.n	121e4 <_puts_r+0x5c>
   12208:	3b01      	subs	r3, #1
   1220a:	60a3      	str	r3, [r4, #8]
   1220c:	2b00      	cmp	r3, #0
   1220e:	da0f      	bge.n	12230 <_puts_r+0xa8>
   12210:	0022      	movs	r2, r4
   12212:	310a      	adds	r1, #10
   12214:	0028      	movs	r0, r5
   12216:	f000 fa13 	bl	12640 <__swbuf_r>
   1221a:	1c43      	adds	r3, r0, #1
   1221c:	d0d5      	beq.n	121ca <_puts_r+0x42>
   1221e:	200a      	movs	r0, #10
   12220:	e7d5      	b.n	121ce <_puts_r+0x46>
   12222:	0022      	movs	r2, r4
   12224:	0028      	movs	r0, r5
   12226:	f000 fa0b 	bl	12640 <__swbuf_r>
   1222a:	1c43      	adds	r3, r0, #1
   1222c:	d1e8      	bne.n	12200 <_puts_r+0x78>
   1222e:	e7cc      	b.n	121ca <_puts_r+0x42>
   12230:	200a      	movs	r0, #10
   12232:	6823      	ldr	r3, [r4, #0]
   12234:	1c5a      	adds	r2, r3, #1
   12236:	6022      	str	r2, [r4, #0]
   12238:	7018      	strb	r0, [r3, #0]
   1223a:	e7c8      	b.n	121ce <_puts_r+0x46>
   1223c:	00015428 	.word	0x00015428
   12240:	00015448 	.word	0x00015448
   12244:	00015408 	.word	0x00015408

00012248 <puts>:
   12248:	b510      	push	{r4, lr}
   1224a:	4b03      	ldr	r3, [pc, #12]	; (12258 <puts+0x10>)
   1224c:	0001      	movs	r1, r0
   1224e:	6818      	ldr	r0, [r3, #0]
   12250:	f7ff ff9a 	bl	12188 <_puts_r>
   12254:	bd10      	pop	{r4, pc}
   12256:	46c0      	nop			; (mov r8, r8)
   12258:	20000068 	.word	0x20000068

0001225c <_sbrk_r>:
   1225c:	2300      	movs	r3, #0
   1225e:	b570      	push	{r4, r5, r6, lr}
   12260:	4c06      	ldr	r4, [pc, #24]	; (1227c <_sbrk_r+0x20>)
   12262:	0005      	movs	r5, r0
   12264:	0008      	movs	r0, r1
   12266:	6023      	str	r3, [r4, #0]
   12268:	f7f9 ff26 	bl	c0b8 <_sbrk>
   1226c:	1c43      	adds	r3, r0, #1
   1226e:	d103      	bne.n	12278 <_sbrk_r+0x1c>
   12270:	6823      	ldr	r3, [r4, #0]
   12272:	2b00      	cmp	r3, #0
   12274:	d000      	beq.n	12278 <_sbrk_r+0x1c>
   12276:	602b      	str	r3, [r5, #0]
   12278:	bd70      	pop	{r4, r5, r6, pc}
   1227a:	46c0      	nop			; (mov r8, r8)
   1227c:	20000a80 	.word	0x20000a80

00012280 <setbuf>:
   12280:	424a      	negs	r2, r1
   12282:	414a      	adcs	r2, r1
   12284:	2380      	movs	r3, #128	; 0x80
   12286:	b510      	push	{r4, lr}
   12288:	0052      	lsls	r2, r2, #1
   1228a:	00db      	lsls	r3, r3, #3
   1228c:	f000 f802 	bl	12294 <setvbuf>
   12290:	bd10      	pop	{r4, pc}
	...

00012294 <setvbuf>:
   12294:	b5f0      	push	{r4, r5, r6, r7, lr}
   12296:	001d      	movs	r5, r3
   12298:	4b4f      	ldr	r3, [pc, #316]	; (123d8 <setvbuf+0x144>)
   1229a:	b085      	sub	sp, #20
   1229c:	681e      	ldr	r6, [r3, #0]
   1229e:	0004      	movs	r4, r0
   122a0:	000f      	movs	r7, r1
   122a2:	9200      	str	r2, [sp, #0]
   122a4:	2e00      	cmp	r6, #0
   122a6:	d005      	beq.n	122b4 <setvbuf+0x20>
   122a8:	69b3      	ldr	r3, [r6, #24]
   122aa:	2b00      	cmp	r3, #0
   122ac:	d102      	bne.n	122b4 <setvbuf+0x20>
   122ae:	0030      	movs	r0, r6
   122b0:	f000 fb96 	bl	129e0 <__sinit>
   122b4:	4b49      	ldr	r3, [pc, #292]	; (123dc <setvbuf+0x148>)
   122b6:	429c      	cmp	r4, r3
   122b8:	d150      	bne.n	1235c <setvbuf+0xc8>
   122ba:	6874      	ldr	r4, [r6, #4]
   122bc:	9b00      	ldr	r3, [sp, #0]
   122be:	2b02      	cmp	r3, #2
   122c0:	d005      	beq.n	122ce <setvbuf+0x3a>
   122c2:	2b01      	cmp	r3, #1
   122c4:	d900      	bls.n	122c8 <setvbuf+0x34>
   122c6:	e084      	b.n	123d2 <setvbuf+0x13e>
   122c8:	2d00      	cmp	r5, #0
   122ca:	da00      	bge.n	122ce <setvbuf+0x3a>
   122cc:	e081      	b.n	123d2 <setvbuf+0x13e>
   122ce:	0021      	movs	r1, r4
   122d0:	0030      	movs	r0, r6
   122d2:	f000 fb17 	bl	12904 <_fflush_r>
   122d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   122d8:	2900      	cmp	r1, #0
   122da:	d008      	beq.n	122ee <setvbuf+0x5a>
   122dc:	0023      	movs	r3, r4
   122de:	3344      	adds	r3, #68	; 0x44
   122e0:	4299      	cmp	r1, r3
   122e2:	d002      	beq.n	122ea <setvbuf+0x56>
   122e4:	0030      	movs	r0, r6
   122e6:	f7ff fe79 	bl	11fdc <_free_r>
   122ea:	2300      	movs	r3, #0
   122ec:	6363      	str	r3, [r4, #52]	; 0x34
   122ee:	2300      	movs	r3, #0
   122f0:	61a3      	str	r3, [r4, #24]
   122f2:	6063      	str	r3, [r4, #4]
   122f4:	89a3      	ldrh	r3, [r4, #12]
   122f6:	061b      	lsls	r3, r3, #24
   122f8:	d503      	bpl.n	12302 <setvbuf+0x6e>
   122fa:	6921      	ldr	r1, [r4, #16]
   122fc:	0030      	movs	r0, r6
   122fe:	f7ff fe6d 	bl	11fdc <_free_r>
   12302:	89a3      	ldrh	r3, [r4, #12]
   12304:	4a36      	ldr	r2, [pc, #216]	; (123e0 <setvbuf+0x14c>)
   12306:	4013      	ands	r3, r2
   12308:	81a3      	strh	r3, [r4, #12]
   1230a:	9b00      	ldr	r3, [sp, #0]
   1230c:	2b02      	cmp	r3, #2
   1230e:	d05a      	beq.n	123c6 <setvbuf+0x132>
   12310:	ab03      	add	r3, sp, #12
   12312:	aa02      	add	r2, sp, #8
   12314:	0021      	movs	r1, r4
   12316:	0030      	movs	r0, r6
   12318:	f000 fbf8 	bl	12b0c <__swhatbuf_r>
   1231c:	89a3      	ldrh	r3, [r4, #12]
   1231e:	4318      	orrs	r0, r3
   12320:	81a0      	strh	r0, [r4, #12]
   12322:	2d00      	cmp	r5, #0
   12324:	d124      	bne.n	12370 <setvbuf+0xdc>
   12326:	9d02      	ldr	r5, [sp, #8]
   12328:	0028      	movs	r0, r5
   1232a:	f7ff fe0d 	bl	11f48 <malloc>
   1232e:	9501      	str	r5, [sp, #4]
   12330:	1e07      	subs	r7, r0, #0
   12332:	d142      	bne.n	123ba <setvbuf+0x126>
   12334:	9b02      	ldr	r3, [sp, #8]
   12336:	9301      	str	r3, [sp, #4]
   12338:	42ab      	cmp	r3, r5
   1233a:	d139      	bne.n	123b0 <setvbuf+0x11c>
   1233c:	2001      	movs	r0, #1
   1233e:	4240      	negs	r0, r0
   12340:	2302      	movs	r3, #2
   12342:	89a2      	ldrh	r2, [r4, #12]
   12344:	4313      	orrs	r3, r2
   12346:	81a3      	strh	r3, [r4, #12]
   12348:	2300      	movs	r3, #0
   1234a:	60a3      	str	r3, [r4, #8]
   1234c:	0023      	movs	r3, r4
   1234e:	3347      	adds	r3, #71	; 0x47
   12350:	6023      	str	r3, [r4, #0]
   12352:	6123      	str	r3, [r4, #16]
   12354:	2301      	movs	r3, #1
   12356:	6163      	str	r3, [r4, #20]
   12358:	b005      	add	sp, #20
   1235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1235c:	4b21      	ldr	r3, [pc, #132]	; (123e4 <setvbuf+0x150>)
   1235e:	429c      	cmp	r4, r3
   12360:	d101      	bne.n	12366 <setvbuf+0xd2>
   12362:	68b4      	ldr	r4, [r6, #8]
   12364:	e7aa      	b.n	122bc <setvbuf+0x28>
   12366:	4b20      	ldr	r3, [pc, #128]	; (123e8 <setvbuf+0x154>)
   12368:	429c      	cmp	r4, r3
   1236a:	d1a7      	bne.n	122bc <setvbuf+0x28>
   1236c:	68f4      	ldr	r4, [r6, #12]
   1236e:	e7a5      	b.n	122bc <setvbuf+0x28>
   12370:	2f00      	cmp	r7, #0
   12372:	d0d9      	beq.n	12328 <setvbuf+0x94>
   12374:	69b3      	ldr	r3, [r6, #24]
   12376:	2b00      	cmp	r3, #0
   12378:	d102      	bne.n	12380 <setvbuf+0xec>
   1237a:	0030      	movs	r0, r6
   1237c:	f000 fb30 	bl	129e0 <__sinit>
   12380:	9b00      	ldr	r3, [sp, #0]
   12382:	2b01      	cmp	r3, #1
   12384:	d103      	bne.n	1238e <setvbuf+0xfa>
   12386:	89a3      	ldrh	r3, [r4, #12]
   12388:	9a00      	ldr	r2, [sp, #0]
   1238a:	431a      	orrs	r2, r3
   1238c:	81a2      	strh	r2, [r4, #12]
   1238e:	2008      	movs	r0, #8
   12390:	89a3      	ldrh	r3, [r4, #12]
   12392:	6027      	str	r7, [r4, #0]
   12394:	6127      	str	r7, [r4, #16]
   12396:	6165      	str	r5, [r4, #20]
   12398:	4018      	ands	r0, r3
   1239a:	d018      	beq.n	123ce <setvbuf+0x13a>
   1239c:	2001      	movs	r0, #1
   1239e:	4018      	ands	r0, r3
   123a0:	2300      	movs	r3, #0
   123a2:	4298      	cmp	r0, r3
   123a4:	d011      	beq.n	123ca <setvbuf+0x136>
   123a6:	426d      	negs	r5, r5
   123a8:	60a3      	str	r3, [r4, #8]
   123aa:	61a5      	str	r5, [r4, #24]
   123ac:	0018      	movs	r0, r3
   123ae:	e7d3      	b.n	12358 <setvbuf+0xc4>
   123b0:	9801      	ldr	r0, [sp, #4]
   123b2:	f7ff fdc9 	bl	11f48 <malloc>
   123b6:	1e07      	subs	r7, r0, #0
   123b8:	d0c0      	beq.n	1233c <setvbuf+0xa8>
   123ba:	2380      	movs	r3, #128	; 0x80
   123bc:	89a2      	ldrh	r2, [r4, #12]
   123be:	9d01      	ldr	r5, [sp, #4]
   123c0:	4313      	orrs	r3, r2
   123c2:	81a3      	strh	r3, [r4, #12]
   123c4:	e7d6      	b.n	12374 <setvbuf+0xe0>
   123c6:	2000      	movs	r0, #0
   123c8:	e7ba      	b.n	12340 <setvbuf+0xac>
   123ca:	60a5      	str	r5, [r4, #8]
   123cc:	e7c4      	b.n	12358 <setvbuf+0xc4>
   123ce:	60a0      	str	r0, [r4, #8]
   123d0:	e7c2      	b.n	12358 <setvbuf+0xc4>
   123d2:	2001      	movs	r0, #1
   123d4:	4240      	negs	r0, r0
   123d6:	e7bf      	b.n	12358 <setvbuf+0xc4>
   123d8:	20000068 	.word	0x20000068
   123dc:	00015428 	.word	0x00015428
   123e0:	fffff35c 	.word	0xfffff35c
   123e4:	00015448 	.word	0x00015448
   123e8:	00015408 	.word	0x00015408

000123ec <siprintf>:
   123ec:	b40e      	push	{r1, r2, r3}
   123ee:	b510      	push	{r4, lr}
   123f0:	b09d      	sub	sp, #116	; 0x74
   123f2:	a902      	add	r1, sp, #8
   123f4:	9002      	str	r0, [sp, #8]
   123f6:	6108      	str	r0, [r1, #16]
   123f8:	480b      	ldr	r0, [pc, #44]	; (12428 <siprintf+0x3c>)
   123fa:	2482      	movs	r4, #130	; 0x82
   123fc:	6088      	str	r0, [r1, #8]
   123fe:	6148      	str	r0, [r1, #20]
   12400:	2001      	movs	r0, #1
   12402:	4240      	negs	r0, r0
   12404:	ab1f      	add	r3, sp, #124	; 0x7c
   12406:	81c8      	strh	r0, [r1, #14]
   12408:	4808      	ldr	r0, [pc, #32]	; (1242c <siprintf+0x40>)
   1240a:	cb04      	ldmia	r3!, {r2}
   1240c:	00a4      	lsls	r4, r4, #2
   1240e:	6800      	ldr	r0, [r0, #0]
   12410:	9301      	str	r3, [sp, #4]
   12412:	818c      	strh	r4, [r1, #12]
   12414:	f000 fc4a 	bl	12cac <_svfiprintf_r>
   12418:	2300      	movs	r3, #0
   1241a:	9a02      	ldr	r2, [sp, #8]
   1241c:	7013      	strb	r3, [r2, #0]
   1241e:	b01d      	add	sp, #116	; 0x74
   12420:	bc10      	pop	{r4}
   12422:	bc08      	pop	{r3}
   12424:	b003      	add	sp, #12
   12426:	4718      	bx	r3
   12428:	7fffffff 	.word	0x7fffffff
   1242c:	20000068 	.word	0x20000068

00012430 <strchr>:
   12430:	b2c9      	uxtb	r1, r1
   12432:	7803      	ldrb	r3, [r0, #0]
   12434:	2b00      	cmp	r3, #0
   12436:	d004      	beq.n	12442 <strchr+0x12>
   12438:	4299      	cmp	r1, r3
   1243a:	d100      	bne.n	1243e <strchr+0xe>
   1243c:	4770      	bx	lr
   1243e:	3001      	adds	r0, #1
   12440:	e7f7      	b.n	12432 <strchr+0x2>
   12442:	424b      	negs	r3, r1
   12444:	4159      	adcs	r1, r3
   12446:	4249      	negs	r1, r1
   12448:	4008      	ands	r0, r1
   1244a:	e7f7      	b.n	1243c <strchr+0xc>

0001244c <strcmp>:
   1244c:	7802      	ldrb	r2, [r0, #0]
   1244e:	780b      	ldrb	r3, [r1, #0]
   12450:	2a00      	cmp	r2, #0
   12452:	d003      	beq.n	1245c <strcmp+0x10>
   12454:	3001      	adds	r0, #1
   12456:	3101      	adds	r1, #1
   12458:	429a      	cmp	r2, r3
   1245a:	d0f7      	beq.n	1244c <strcmp>
   1245c:	1ad0      	subs	r0, r2, r3
   1245e:	4770      	bx	lr

00012460 <strcpy>:
   12460:	1c03      	adds	r3, r0, #0
   12462:	780a      	ldrb	r2, [r1, #0]
   12464:	3101      	adds	r1, #1
   12466:	701a      	strb	r2, [r3, #0]
   12468:	3301      	adds	r3, #1
   1246a:	2a00      	cmp	r2, #0
   1246c:	d1f9      	bne.n	12462 <strcpy+0x2>
   1246e:	4770      	bx	lr

00012470 <strdup>:
   12470:	b510      	push	{r4, lr}
   12472:	4b03      	ldr	r3, [pc, #12]	; (12480 <strdup+0x10>)
   12474:	0001      	movs	r1, r0
   12476:	6818      	ldr	r0, [r3, #0]
   12478:	f000 f804 	bl	12484 <_strdup_r>
   1247c:	bd10      	pop	{r4, pc}
   1247e:	46c0      	nop			; (mov r8, r8)
   12480:	20000068 	.word	0x20000068

00012484 <_strdup_r>:
   12484:	b570      	push	{r4, r5, r6, lr}
   12486:	0005      	movs	r5, r0
   12488:	0008      	movs	r0, r1
   1248a:	000e      	movs	r6, r1
   1248c:	f000 f80d 	bl	124aa <strlen>
   12490:	1c44      	adds	r4, r0, #1
   12492:	0021      	movs	r1, r4
   12494:	0028      	movs	r0, r5
   12496:	f7ff fdeb 	bl	12070 <_malloc_r>
   1249a:	1e05      	subs	r5, r0, #0
   1249c:	d003      	beq.n	124a6 <_strdup_r+0x22>
   1249e:	0022      	movs	r2, r4
   124a0:	0031      	movs	r1, r6
   124a2:	f7ff fd77 	bl	11f94 <memcpy>
   124a6:	0028      	movs	r0, r5
   124a8:	bd70      	pop	{r4, r5, r6, pc}

000124aa <strlen>:
   124aa:	2300      	movs	r3, #0
   124ac:	5cc2      	ldrb	r2, [r0, r3]
   124ae:	3301      	adds	r3, #1
   124b0:	2a00      	cmp	r2, #0
   124b2:	d1fb      	bne.n	124ac <strlen+0x2>
   124b4:	1e58      	subs	r0, r3, #1
   124b6:	4770      	bx	lr

000124b8 <strncmp>:
   124b8:	2300      	movs	r3, #0
   124ba:	b530      	push	{r4, r5, lr}
   124bc:	429a      	cmp	r2, r3
   124be:	d00a      	beq.n	124d6 <strncmp+0x1e>
   124c0:	3a01      	subs	r2, #1
   124c2:	5cc4      	ldrb	r4, [r0, r3]
   124c4:	5ccd      	ldrb	r5, [r1, r3]
   124c6:	42ac      	cmp	r4, r5
   124c8:	d104      	bne.n	124d4 <strncmp+0x1c>
   124ca:	429a      	cmp	r2, r3
   124cc:	d002      	beq.n	124d4 <strncmp+0x1c>
   124ce:	3301      	adds	r3, #1
   124d0:	2c00      	cmp	r4, #0
   124d2:	d1f6      	bne.n	124c2 <strncmp+0xa>
   124d4:	1b63      	subs	r3, r4, r5
   124d6:	0018      	movs	r0, r3
   124d8:	bd30      	pop	{r4, r5, pc}

000124da <strstr>:
   124da:	b510      	push	{r4, lr}
   124dc:	0002      	movs	r2, r0
   124de:	7800      	ldrb	r0, [r0, #0]
   124e0:	2800      	cmp	r0, #0
   124e2:	d104      	bne.n	124ee <strstr+0x14>
   124e4:	7809      	ldrb	r1, [r1, #0]
   124e6:	2900      	cmp	r1, #0
   124e8:	d00d      	beq.n	12506 <strstr+0x2c>
   124ea:	bd10      	pop	{r4, pc}
   124ec:	3201      	adds	r2, #1
   124ee:	7810      	ldrb	r0, [r2, #0]
   124f0:	2800      	cmp	r0, #0
   124f2:	d0fa      	beq.n	124ea <strstr+0x10>
   124f4:	2300      	movs	r3, #0
   124f6:	5cc8      	ldrb	r0, [r1, r3]
   124f8:	2800      	cmp	r0, #0
   124fa:	d004      	beq.n	12506 <strstr+0x2c>
   124fc:	5cd4      	ldrb	r4, [r2, r3]
   124fe:	4284      	cmp	r4, r0
   12500:	d1f4      	bne.n	124ec <strstr+0x12>
   12502:	3301      	adds	r3, #1
   12504:	e7f7      	b.n	124f6 <strstr+0x1c>
   12506:	0010      	movs	r0, r2
   12508:	e7ef      	b.n	124ea <strstr+0x10>
	...

0001250c <_strtol_l.isra.0>:
   1250c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1250e:	001f      	movs	r7, r3
   12510:	000e      	movs	r6, r1
   12512:	b087      	sub	sp, #28
   12514:	9005      	str	r0, [sp, #20]
   12516:	9103      	str	r1, [sp, #12]
   12518:	9202      	str	r2, [sp, #8]
   1251a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1251c:	7834      	ldrb	r4, [r6, #0]
   1251e:	f7ff fd01 	bl	11f24 <__locale_ctype_ptr_l>
   12522:	2208      	movs	r2, #8
   12524:	1900      	adds	r0, r0, r4
   12526:	7843      	ldrb	r3, [r0, #1]
   12528:	1c75      	adds	r5, r6, #1
   1252a:	4013      	ands	r3, r2
   1252c:	d10c      	bne.n	12548 <_strtol_l.isra.0+0x3c>
   1252e:	2c2d      	cmp	r4, #45	; 0x2d
   12530:	d10c      	bne.n	1254c <_strtol_l.isra.0+0x40>
   12532:	3301      	adds	r3, #1
   12534:	782c      	ldrb	r4, [r5, #0]
   12536:	9301      	str	r3, [sp, #4]
   12538:	1cb5      	adds	r5, r6, #2
   1253a:	2f00      	cmp	r7, #0
   1253c:	d00c      	beq.n	12558 <_strtol_l.isra.0+0x4c>
   1253e:	2f10      	cmp	r7, #16
   12540:	d114      	bne.n	1256c <_strtol_l.isra.0+0x60>
   12542:	2c30      	cmp	r4, #48	; 0x30
   12544:	d00a      	beq.n	1255c <_strtol_l.isra.0+0x50>
   12546:	e011      	b.n	1256c <_strtol_l.isra.0+0x60>
   12548:	002e      	movs	r6, r5
   1254a:	e7e6      	b.n	1251a <_strtol_l.isra.0+0xe>
   1254c:	9301      	str	r3, [sp, #4]
   1254e:	2c2b      	cmp	r4, #43	; 0x2b
   12550:	d1f3      	bne.n	1253a <_strtol_l.isra.0+0x2e>
   12552:	782c      	ldrb	r4, [r5, #0]
   12554:	1cb5      	adds	r5, r6, #2
   12556:	e7f0      	b.n	1253a <_strtol_l.isra.0+0x2e>
   12558:	2c30      	cmp	r4, #48	; 0x30
   1255a:	d12f      	bne.n	125bc <_strtol_l.isra.0+0xb0>
   1255c:	2220      	movs	r2, #32
   1255e:	782b      	ldrb	r3, [r5, #0]
   12560:	4393      	bics	r3, r2
   12562:	2b58      	cmp	r3, #88	; 0x58
   12564:	d151      	bne.n	1260a <_strtol_l.isra.0+0xfe>
   12566:	2710      	movs	r7, #16
   12568:	786c      	ldrb	r4, [r5, #1]
   1256a:	3502      	adds	r5, #2
   1256c:	9b01      	ldr	r3, [sp, #4]
   1256e:	4a29      	ldr	r2, [pc, #164]	; (12614 <_strtol_l.isra.0+0x108>)
   12570:	0039      	movs	r1, r7
   12572:	189e      	adds	r6, r3, r2
   12574:	0030      	movs	r0, r6
   12576:	f7fd fda1 	bl	100bc <__aeabi_uidivmod>
   1257a:	0030      	movs	r0, r6
   1257c:	9104      	str	r1, [sp, #16]
   1257e:	0039      	movs	r1, r7
   12580:	f7fd fd16 	bl	ffb0 <__udivsi3>
   12584:	2101      	movs	r1, #1
   12586:	2300      	movs	r3, #0
   12588:	4249      	negs	r1, r1
   1258a:	0002      	movs	r2, r0
   1258c:	468c      	mov	ip, r1
   1258e:	0018      	movs	r0, r3
   12590:	0021      	movs	r1, r4
   12592:	3930      	subs	r1, #48	; 0x30
   12594:	2909      	cmp	r1, #9
   12596:	d813      	bhi.n	125c0 <_strtol_l.isra.0+0xb4>
   12598:	000c      	movs	r4, r1
   1259a:	42a7      	cmp	r7, r4
   1259c:	dd1c      	ble.n	125d8 <_strtol_l.isra.0+0xcc>
   1259e:	1c59      	adds	r1, r3, #1
   125a0:	d009      	beq.n	125b6 <_strtol_l.isra.0+0xaa>
   125a2:	4663      	mov	r3, ip
   125a4:	4282      	cmp	r2, r0
   125a6:	d306      	bcc.n	125b6 <_strtol_l.isra.0+0xaa>
   125a8:	d102      	bne.n	125b0 <_strtol_l.isra.0+0xa4>
   125aa:	9904      	ldr	r1, [sp, #16]
   125ac:	42a1      	cmp	r1, r4
   125ae:	db02      	blt.n	125b6 <_strtol_l.isra.0+0xaa>
   125b0:	2301      	movs	r3, #1
   125b2:	4378      	muls	r0, r7
   125b4:	1820      	adds	r0, r4, r0
   125b6:	782c      	ldrb	r4, [r5, #0]
   125b8:	3501      	adds	r5, #1
   125ba:	e7e9      	b.n	12590 <_strtol_l.isra.0+0x84>
   125bc:	270a      	movs	r7, #10
   125be:	e7d5      	b.n	1256c <_strtol_l.isra.0+0x60>
   125c0:	0021      	movs	r1, r4
   125c2:	3941      	subs	r1, #65	; 0x41
   125c4:	2919      	cmp	r1, #25
   125c6:	d801      	bhi.n	125cc <_strtol_l.isra.0+0xc0>
   125c8:	3c37      	subs	r4, #55	; 0x37
   125ca:	e7e6      	b.n	1259a <_strtol_l.isra.0+0x8e>
   125cc:	0021      	movs	r1, r4
   125ce:	3961      	subs	r1, #97	; 0x61
   125d0:	2919      	cmp	r1, #25
   125d2:	d801      	bhi.n	125d8 <_strtol_l.isra.0+0xcc>
   125d4:	3c57      	subs	r4, #87	; 0x57
   125d6:	e7e0      	b.n	1259a <_strtol_l.isra.0+0x8e>
   125d8:	1c5a      	adds	r2, r3, #1
   125da:	d108      	bne.n	125ee <_strtol_l.isra.0+0xe2>
   125dc:	9a05      	ldr	r2, [sp, #20]
   125de:	3323      	adds	r3, #35	; 0x23
   125e0:	6013      	str	r3, [r2, #0]
   125e2:	9b02      	ldr	r3, [sp, #8]
   125e4:	0030      	movs	r0, r6
   125e6:	2b00      	cmp	r3, #0
   125e8:	d10b      	bne.n	12602 <_strtol_l.isra.0+0xf6>
   125ea:	b007      	add	sp, #28
   125ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125ee:	9a01      	ldr	r2, [sp, #4]
   125f0:	2a00      	cmp	r2, #0
   125f2:	d000      	beq.n	125f6 <_strtol_l.isra.0+0xea>
   125f4:	4240      	negs	r0, r0
   125f6:	9a02      	ldr	r2, [sp, #8]
   125f8:	2a00      	cmp	r2, #0
   125fa:	d0f6      	beq.n	125ea <_strtol_l.isra.0+0xde>
   125fc:	9a03      	ldr	r2, [sp, #12]
   125fe:	2b00      	cmp	r3, #0
   12600:	d000      	beq.n	12604 <_strtol_l.isra.0+0xf8>
   12602:	1e6a      	subs	r2, r5, #1
   12604:	9b02      	ldr	r3, [sp, #8]
   12606:	601a      	str	r2, [r3, #0]
   12608:	e7ef      	b.n	125ea <_strtol_l.isra.0+0xde>
   1260a:	2430      	movs	r4, #48	; 0x30
   1260c:	2f00      	cmp	r7, #0
   1260e:	d1ad      	bne.n	1256c <_strtol_l.isra.0+0x60>
   12610:	3708      	adds	r7, #8
   12612:	e7ab      	b.n	1256c <_strtol_l.isra.0+0x60>
   12614:	7fffffff 	.word	0x7fffffff

00012618 <strtol>:
   12618:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1261a:	0013      	movs	r3, r2
   1261c:	4a06      	ldr	r2, [pc, #24]	; (12638 <strtol+0x20>)
   1261e:	0005      	movs	r5, r0
   12620:	6810      	ldr	r0, [r2, #0]
   12622:	6a04      	ldr	r4, [r0, #32]
   12624:	2c00      	cmp	r4, #0
   12626:	d100      	bne.n	1262a <strtol+0x12>
   12628:	4c04      	ldr	r4, [pc, #16]	; (1263c <strtol+0x24>)
   1262a:	000a      	movs	r2, r1
   1262c:	9400      	str	r4, [sp, #0]
   1262e:	0029      	movs	r1, r5
   12630:	f7ff ff6c 	bl	1250c <_strtol_l.isra.0>
   12634:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12636:	46c0      	nop			; (mov r8, r8)
   12638:	20000068 	.word	0x20000068
   1263c:	200000cc 	.word	0x200000cc

00012640 <__swbuf_r>:
   12640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12642:	0005      	movs	r5, r0
   12644:	000e      	movs	r6, r1
   12646:	0014      	movs	r4, r2
   12648:	2800      	cmp	r0, #0
   1264a:	d004      	beq.n	12656 <__swbuf_r+0x16>
   1264c:	6983      	ldr	r3, [r0, #24]
   1264e:	2b00      	cmp	r3, #0
   12650:	d101      	bne.n	12656 <__swbuf_r+0x16>
   12652:	f000 f9c5 	bl	129e0 <__sinit>
   12656:	4b22      	ldr	r3, [pc, #136]	; (126e0 <__swbuf_r+0xa0>)
   12658:	429c      	cmp	r4, r3
   1265a:	d12d      	bne.n	126b8 <__swbuf_r+0x78>
   1265c:	686c      	ldr	r4, [r5, #4]
   1265e:	69a3      	ldr	r3, [r4, #24]
   12660:	60a3      	str	r3, [r4, #8]
   12662:	89a3      	ldrh	r3, [r4, #12]
   12664:	071b      	lsls	r3, r3, #28
   12666:	d531      	bpl.n	126cc <__swbuf_r+0x8c>
   12668:	6923      	ldr	r3, [r4, #16]
   1266a:	2b00      	cmp	r3, #0
   1266c:	d02e      	beq.n	126cc <__swbuf_r+0x8c>
   1266e:	6823      	ldr	r3, [r4, #0]
   12670:	6922      	ldr	r2, [r4, #16]
   12672:	b2f7      	uxtb	r7, r6
   12674:	1a98      	subs	r0, r3, r2
   12676:	6963      	ldr	r3, [r4, #20]
   12678:	b2f6      	uxtb	r6, r6
   1267a:	4298      	cmp	r0, r3
   1267c:	db05      	blt.n	1268a <__swbuf_r+0x4a>
   1267e:	0021      	movs	r1, r4
   12680:	0028      	movs	r0, r5
   12682:	f000 f93f 	bl	12904 <_fflush_r>
   12686:	2800      	cmp	r0, #0
   12688:	d126      	bne.n	126d8 <__swbuf_r+0x98>
   1268a:	68a3      	ldr	r3, [r4, #8]
   1268c:	3001      	adds	r0, #1
   1268e:	3b01      	subs	r3, #1
   12690:	60a3      	str	r3, [r4, #8]
   12692:	6823      	ldr	r3, [r4, #0]
   12694:	1c5a      	adds	r2, r3, #1
   12696:	6022      	str	r2, [r4, #0]
   12698:	701f      	strb	r7, [r3, #0]
   1269a:	6963      	ldr	r3, [r4, #20]
   1269c:	4298      	cmp	r0, r3
   1269e:	d004      	beq.n	126aa <__swbuf_r+0x6a>
   126a0:	89a3      	ldrh	r3, [r4, #12]
   126a2:	07db      	lsls	r3, r3, #31
   126a4:	d51a      	bpl.n	126dc <__swbuf_r+0x9c>
   126a6:	2e0a      	cmp	r6, #10
   126a8:	d118      	bne.n	126dc <__swbuf_r+0x9c>
   126aa:	0021      	movs	r1, r4
   126ac:	0028      	movs	r0, r5
   126ae:	f000 f929 	bl	12904 <_fflush_r>
   126b2:	2800      	cmp	r0, #0
   126b4:	d012      	beq.n	126dc <__swbuf_r+0x9c>
   126b6:	e00f      	b.n	126d8 <__swbuf_r+0x98>
   126b8:	4b0a      	ldr	r3, [pc, #40]	; (126e4 <__swbuf_r+0xa4>)
   126ba:	429c      	cmp	r4, r3
   126bc:	d101      	bne.n	126c2 <__swbuf_r+0x82>
   126be:	68ac      	ldr	r4, [r5, #8]
   126c0:	e7cd      	b.n	1265e <__swbuf_r+0x1e>
   126c2:	4b09      	ldr	r3, [pc, #36]	; (126e8 <__swbuf_r+0xa8>)
   126c4:	429c      	cmp	r4, r3
   126c6:	d1ca      	bne.n	1265e <__swbuf_r+0x1e>
   126c8:	68ec      	ldr	r4, [r5, #12]
   126ca:	e7c8      	b.n	1265e <__swbuf_r+0x1e>
   126cc:	0021      	movs	r1, r4
   126ce:	0028      	movs	r0, r5
   126d0:	f000 f818 	bl	12704 <__swsetup_r>
   126d4:	2800      	cmp	r0, #0
   126d6:	d0ca      	beq.n	1266e <__swbuf_r+0x2e>
   126d8:	2601      	movs	r6, #1
   126da:	4276      	negs	r6, r6
   126dc:	0030      	movs	r0, r6
   126de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   126e0:	00015428 	.word	0x00015428
   126e4:	00015448 	.word	0x00015448
   126e8:	00015408 	.word	0x00015408

000126ec <__ascii_wctomb>:
   126ec:	1e0b      	subs	r3, r1, #0
   126ee:	d004      	beq.n	126fa <__ascii_wctomb+0xe>
   126f0:	2aff      	cmp	r2, #255	; 0xff
   126f2:	d904      	bls.n	126fe <__ascii_wctomb+0x12>
   126f4:	238a      	movs	r3, #138	; 0x8a
   126f6:	6003      	str	r3, [r0, #0]
   126f8:	3b8b      	subs	r3, #139	; 0x8b
   126fa:	0018      	movs	r0, r3
   126fc:	4770      	bx	lr
   126fe:	700a      	strb	r2, [r1, #0]
   12700:	2301      	movs	r3, #1
   12702:	e7fa      	b.n	126fa <__ascii_wctomb+0xe>

00012704 <__swsetup_r>:
   12704:	4b36      	ldr	r3, [pc, #216]	; (127e0 <__swsetup_r+0xdc>)
   12706:	b570      	push	{r4, r5, r6, lr}
   12708:	681d      	ldr	r5, [r3, #0]
   1270a:	0006      	movs	r6, r0
   1270c:	000c      	movs	r4, r1
   1270e:	2d00      	cmp	r5, #0
   12710:	d005      	beq.n	1271e <__swsetup_r+0x1a>
   12712:	69ab      	ldr	r3, [r5, #24]
   12714:	2b00      	cmp	r3, #0
   12716:	d102      	bne.n	1271e <__swsetup_r+0x1a>
   12718:	0028      	movs	r0, r5
   1271a:	f000 f961 	bl	129e0 <__sinit>
   1271e:	4b31      	ldr	r3, [pc, #196]	; (127e4 <__swsetup_r+0xe0>)
   12720:	429c      	cmp	r4, r3
   12722:	d10f      	bne.n	12744 <__swsetup_r+0x40>
   12724:	686c      	ldr	r4, [r5, #4]
   12726:	230c      	movs	r3, #12
   12728:	5ee2      	ldrsh	r2, [r4, r3]
   1272a:	b293      	uxth	r3, r2
   1272c:	0719      	lsls	r1, r3, #28
   1272e:	d42d      	bmi.n	1278c <__swsetup_r+0x88>
   12730:	06d9      	lsls	r1, r3, #27
   12732:	d411      	bmi.n	12758 <__swsetup_r+0x54>
   12734:	2309      	movs	r3, #9
   12736:	2001      	movs	r0, #1
   12738:	6033      	str	r3, [r6, #0]
   1273a:	3337      	adds	r3, #55	; 0x37
   1273c:	4313      	orrs	r3, r2
   1273e:	81a3      	strh	r3, [r4, #12]
   12740:	4240      	negs	r0, r0
   12742:	bd70      	pop	{r4, r5, r6, pc}
   12744:	4b28      	ldr	r3, [pc, #160]	; (127e8 <__swsetup_r+0xe4>)
   12746:	429c      	cmp	r4, r3
   12748:	d101      	bne.n	1274e <__swsetup_r+0x4a>
   1274a:	68ac      	ldr	r4, [r5, #8]
   1274c:	e7eb      	b.n	12726 <__swsetup_r+0x22>
   1274e:	4b27      	ldr	r3, [pc, #156]	; (127ec <__swsetup_r+0xe8>)
   12750:	429c      	cmp	r4, r3
   12752:	d1e8      	bne.n	12726 <__swsetup_r+0x22>
   12754:	68ec      	ldr	r4, [r5, #12]
   12756:	e7e6      	b.n	12726 <__swsetup_r+0x22>
   12758:	075b      	lsls	r3, r3, #29
   1275a:	d513      	bpl.n	12784 <__swsetup_r+0x80>
   1275c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1275e:	2900      	cmp	r1, #0
   12760:	d008      	beq.n	12774 <__swsetup_r+0x70>
   12762:	0023      	movs	r3, r4
   12764:	3344      	adds	r3, #68	; 0x44
   12766:	4299      	cmp	r1, r3
   12768:	d002      	beq.n	12770 <__swsetup_r+0x6c>
   1276a:	0030      	movs	r0, r6
   1276c:	f7ff fc36 	bl	11fdc <_free_r>
   12770:	2300      	movs	r3, #0
   12772:	6363      	str	r3, [r4, #52]	; 0x34
   12774:	2224      	movs	r2, #36	; 0x24
   12776:	89a3      	ldrh	r3, [r4, #12]
   12778:	4393      	bics	r3, r2
   1277a:	81a3      	strh	r3, [r4, #12]
   1277c:	2300      	movs	r3, #0
   1277e:	6063      	str	r3, [r4, #4]
   12780:	6923      	ldr	r3, [r4, #16]
   12782:	6023      	str	r3, [r4, #0]
   12784:	2308      	movs	r3, #8
   12786:	89a2      	ldrh	r2, [r4, #12]
   12788:	4313      	orrs	r3, r2
   1278a:	81a3      	strh	r3, [r4, #12]
   1278c:	6923      	ldr	r3, [r4, #16]
   1278e:	2b00      	cmp	r3, #0
   12790:	d10b      	bne.n	127aa <__swsetup_r+0xa6>
   12792:	21a0      	movs	r1, #160	; 0xa0
   12794:	2280      	movs	r2, #128	; 0x80
   12796:	89a3      	ldrh	r3, [r4, #12]
   12798:	0089      	lsls	r1, r1, #2
   1279a:	0092      	lsls	r2, r2, #2
   1279c:	400b      	ands	r3, r1
   1279e:	4293      	cmp	r3, r2
   127a0:	d003      	beq.n	127aa <__swsetup_r+0xa6>
   127a2:	0021      	movs	r1, r4
   127a4:	0030      	movs	r0, r6
   127a6:	f000 f9d9 	bl	12b5c <__smakebuf_r>
   127aa:	2301      	movs	r3, #1
   127ac:	89a2      	ldrh	r2, [r4, #12]
   127ae:	4013      	ands	r3, r2
   127b0:	d011      	beq.n	127d6 <__swsetup_r+0xd2>
   127b2:	2300      	movs	r3, #0
   127b4:	60a3      	str	r3, [r4, #8]
   127b6:	6963      	ldr	r3, [r4, #20]
   127b8:	425b      	negs	r3, r3
   127ba:	61a3      	str	r3, [r4, #24]
   127bc:	2000      	movs	r0, #0
   127be:	6923      	ldr	r3, [r4, #16]
   127c0:	4283      	cmp	r3, r0
   127c2:	d1be      	bne.n	12742 <__swsetup_r+0x3e>
   127c4:	230c      	movs	r3, #12
   127c6:	5ee2      	ldrsh	r2, [r4, r3]
   127c8:	0613      	lsls	r3, r2, #24
   127ca:	d5ba      	bpl.n	12742 <__swsetup_r+0x3e>
   127cc:	2340      	movs	r3, #64	; 0x40
   127ce:	4313      	orrs	r3, r2
   127d0:	81a3      	strh	r3, [r4, #12]
   127d2:	3801      	subs	r0, #1
   127d4:	e7b5      	b.n	12742 <__swsetup_r+0x3e>
   127d6:	0792      	lsls	r2, r2, #30
   127d8:	d400      	bmi.n	127dc <__swsetup_r+0xd8>
   127da:	6963      	ldr	r3, [r4, #20]
   127dc:	60a3      	str	r3, [r4, #8]
   127de:	e7ed      	b.n	127bc <__swsetup_r+0xb8>
   127e0:	20000068 	.word	0x20000068
   127e4:	00015428 	.word	0x00015428
   127e8:	00015448 	.word	0x00015448
   127ec:	00015408 	.word	0x00015408

000127f0 <__sflush_r>:
   127f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   127f2:	898a      	ldrh	r2, [r1, #12]
   127f4:	0005      	movs	r5, r0
   127f6:	000c      	movs	r4, r1
   127f8:	0713      	lsls	r3, r2, #28
   127fa:	d460      	bmi.n	128be <__sflush_r+0xce>
   127fc:	684b      	ldr	r3, [r1, #4]
   127fe:	2b00      	cmp	r3, #0
   12800:	dc04      	bgt.n	1280c <__sflush_r+0x1c>
   12802:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   12804:	2b00      	cmp	r3, #0
   12806:	dc01      	bgt.n	1280c <__sflush_r+0x1c>
   12808:	2000      	movs	r0, #0
   1280a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1280c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1280e:	2f00      	cmp	r7, #0
   12810:	d0fa      	beq.n	12808 <__sflush_r+0x18>
   12812:	2300      	movs	r3, #0
   12814:	682e      	ldr	r6, [r5, #0]
   12816:	602b      	str	r3, [r5, #0]
   12818:	2380      	movs	r3, #128	; 0x80
   1281a:	015b      	lsls	r3, r3, #5
   1281c:	401a      	ands	r2, r3
   1281e:	d034      	beq.n	1288a <__sflush_r+0x9a>
   12820:	6d60      	ldr	r0, [r4, #84]	; 0x54
   12822:	89a3      	ldrh	r3, [r4, #12]
   12824:	075b      	lsls	r3, r3, #29
   12826:	d506      	bpl.n	12836 <__sflush_r+0x46>
   12828:	6863      	ldr	r3, [r4, #4]
   1282a:	1ac0      	subs	r0, r0, r3
   1282c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1282e:	2b00      	cmp	r3, #0
   12830:	d001      	beq.n	12836 <__sflush_r+0x46>
   12832:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12834:	1ac0      	subs	r0, r0, r3
   12836:	0002      	movs	r2, r0
   12838:	6a21      	ldr	r1, [r4, #32]
   1283a:	2300      	movs	r3, #0
   1283c:	0028      	movs	r0, r5
   1283e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   12840:	47b8      	blx	r7
   12842:	89a1      	ldrh	r1, [r4, #12]
   12844:	1c43      	adds	r3, r0, #1
   12846:	d106      	bne.n	12856 <__sflush_r+0x66>
   12848:	682b      	ldr	r3, [r5, #0]
   1284a:	2b1d      	cmp	r3, #29
   1284c:	d831      	bhi.n	128b2 <__sflush_r+0xc2>
   1284e:	4a2c      	ldr	r2, [pc, #176]	; (12900 <__sflush_r+0x110>)
   12850:	40da      	lsrs	r2, r3
   12852:	07d3      	lsls	r3, r2, #31
   12854:	d52d      	bpl.n	128b2 <__sflush_r+0xc2>
   12856:	2300      	movs	r3, #0
   12858:	6063      	str	r3, [r4, #4]
   1285a:	6923      	ldr	r3, [r4, #16]
   1285c:	6023      	str	r3, [r4, #0]
   1285e:	04cb      	lsls	r3, r1, #19
   12860:	d505      	bpl.n	1286e <__sflush_r+0x7e>
   12862:	1c43      	adds	r3, r0, #1
   12864:	d102      	bne.n	1286c <__sflush_r+0x7c>
   12866:	682b      	ldr	r3, [r5, #0]
   12868:	2b00      	cmp	r3, #0
   1286a:	d100      	bne.n	1286e <__sflush_r+0x7e>
   1286c:	6560      	str	r0, [r4, #84]	; 0x54
   1286e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12870:	602e      	str	r6, [r5, #0]
   12872:	2900      	cmp	r1, #0
   12874:	d0c8      	beq.n	12808 <__sflush_r+0x18>
   12876:	0023      	movs	r3, r4
   12878:	3344      	adds	r3, #68	; 0x44
   1287a:	4299      	cmp	r1, r3
   1287c:	d002      	beq.n	12884 <__sflush_r+0x94>
   1287e:	0028      	movs	r0, r5
   12880:	f7ff fbac 	bl	11fdc <_free_r>
   12884:	2000      	movs	r0, #0
   12886:	6360      	str	r0, [r4, #52]	; 0x34
   12888:	e7bf      	b.n	1280a <__sflush_r+0x1a>
   1288a:	2301      	movs	r3, #1
   1288c:	6a21      	ldr	r1, [r4, #32]
   1288e:	0028      	movs	r0, r5
   12890:	47b8      	blx	r7
   12892:	1c43      	adds	r3, r0, #1
   12894:	d1c5      	bne.n	12822 <__sflush_r+0x32>
   12896:	682b      	ldr	r3, [r5, #0]
   12898:	2b00      	cmp	r3, #0
   1289a:	d0c2      	beq.n	12822 <__sflush_r+0x32>
   1289c:	2b1d      	cmp	r3, #29
   1289e:	d001      	beq.n	128a4 <__sflush_r+0xb4>
   128a0:	2b16      	cmp	r3, #22
   128a2:	d101      	bne.n	128a8 <__sflush_r+0xb8>
   128a4:	602e      	str	r6, [r5, #0]
   128a6:	e7af      	b.n	12808 <__sflush_r+0x18>
   128a8:	2340      	movs	r3, #64	; 0x40
   128aa:	89a2      	ldrh	r2, [r4, #12]
   128ac:	4313      	orrs	r3, r2
   128ae:	81a3      	strh	r3, [r4, #12]
   128b0:	e7ab      	b.n	1280a <__sflush_r+0x1a>
   128b2:	2340      	movs	r3, #64	; 0x40
   128b4:	430b      	orrs	r3, r1
   128b6:	2001      	movs	r0, #1
   128b8:	81a3      	strh	r3, [r4, #12]
   128ba:	4240      	negs	r0, r0
   128bc:	e7a5      	b.n	1280a <__sflush_r+0x1a>
   128be:	690f      	ldr	r7, [r1, #16]
   128c0:	2f00      	cmp	r7, #0
   128c2:	d0a1      	beq.n	12808 <__sflush_r+0x18>
   128c4:	680b      	ldr	r3, [r1, #0]
   128c6:	600f      	str	r7, [r1, #0]
   128c8:	1bdb      	subs	r3, r3, r7
   128ca:	9301      	str	r3, [sp, #4]
   128cc:	2300      	movs	r3, #0
   128ce:	0792      	lsls	r2, r2, #30
   128d0:	d100      	bne.n	128d4 <__sflush_r+0xe4>
   128d2:	694b      	ldr	r3, [r1, #20]
   128d4:	60a3      	str	r3, [r4, #8]
   128d6:	9b01      	ldr	r3, [sp, #4]
   128d8:	2b00      	cmp	r3, #0
   128da:	dc00      	bgt.n	128de <__sflush_r+0xee>
   128dc:	e794      	b.n	12808 <__sflush_r+0x18>
   128de:	9b01      	ldr	r3, [sp, #4]
   128e0:	003a      	movs	r2, r7
   128e2:	6a21      	ldr	r1, [r4, #32]
   128e4:	0028      	movs	r0, r5
   128e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   128e8:	47b0      	blx	r6
   128ea:	2800      	cmp	r0, #0
   128ec:	dc03      	bgt.n	128f6 <__sflush_r+0x106>
   128ee:	2340      	movs	r3, #64	; 0x40
   128f0:	89a2      	ldrh	r2, [r4, #12]
   128f2:	4313      	orrs	r3, r2
   128f4:	e7df      	b.n	128b6 <__sflush_r+0xc6>
   128f6:	9b01      	ldr	r3, [sp, #4]
   128f8:	183f      	adds	r7, r7, r0
   128fa:	1a1b      	subs	r3, r3, r0
   128fc:	9301      	str	r3, [sp, #4]
   128fe:	e7ea      	b.n	128d6 <__sflush_r+0xe6>
   12900:	20400001 	.word	0x20400001

00012904 <_fflush_r>:
   12904:	690b      	ldr	r3, [r1, #16]
   12906:	b570      	push	{r4, r5, r6, lr}
   12908:	0005      	movs	r5, r0
   1290a:	000c      	movs	r4, r1
   1290c:	2b00      	cmp	r3, #0
   1290e:	d101      	bne.n	12914 <_fflush_r+0x10>
   12910:	2000      	movs	r0, #0
   12912:	bd70      	pop	{r4, r5, r6, pc}
   12914:	2800      	cmp	r0, #0
   12916:	d004      	beq.n	12922 <_fflush_r+0x1e>
   12918:	6983      	ldr	r3, [r0, #24]
   1291a:	2b00      	cmp	r3, #0
   1291c:	d101      	bne.n	12922 <_fflush_r+0x1e>
   1291e:	f000 f85f 	bl	129e0 <__sinit>
   12922:	4b0b      	ldr	r3, [pc, #44]	; (12950 <_fflush_r+0x4c>)
   12924:	429c      	cmp	r4, r3
   12926:	d109      	bne.n	1293c <_fflush_r+0x38>
   12928:	686c      	ldr	r4, [r5, #4]
   1292a:	220c      	movs	r2, #12
   1292c:	5ea3      	ldrsh	r3, [r4, r2]
   1292e:	2b00      	cmp	r3, #0
   12930:	d0ee      	beq.n	12910 <_fflush_r+0xc>
   12932:	0021      	movs	r1, r4
   12934:	0028      	movs	r0, r5
   12936:	f7ff ff5b 	bl	127f0 <__sflush_r>
   1293a:	e7ea      	b.n	12912 <_fflush_r+0xe>
   1293c:	4b05      	ldr	r3, [pc, #20]	; (12954 <_fflush_r+0x50>)
   1293e:	429c      	cmp	r4, r3
   12940:	d101      	bne.n	12946 <_fflush_r+0x42>
   12942:	68ac      	ldr	r4, [r5, #8]
   12944:	e7f1      	b.n	1292a <_fflush_r+0x26>
   12946:	4b04      	ldr	r3, [pc, #16]	; (12958 <_fflush_r+0x54>)
   12948:	429c      	cmp	r4, r3
   1294a:	d1ee      	bne.n	1292a <_fflush_r+0x26>
   1294c:	68ec      	ldr	r4, [r5, #12]
   1294e:	e7ec      	b.n	1292a <_fflush_r+0x26>
   12950:	00015428 	.word	0x00015428
   12954:	00015448 	.word	0x00015448
   12958:	00015408 	.word	0x00015408

0001295c <_cleanup_r>:
   1295c:	b510      	push	{r4, lr}
   1295e:	4902      	ldr	r1, [pc, #8]	; (12968 <_cleanup_r+0xc>)
   12960:	f000 f8b2 	bl	12ac8 <_fwalk_reent>
   12964:	bd10      	pop	{r4, pc}
   12966:	46c0      	nop			; (mov r8, r8)
   12968:	00012905 	.word	0x00012905

0001296c <std.isra.0>:
   1296c:	2300      	movs	r3, #0
   1296e:	b510      	push	{r4, lr}
   12970:	0004      	movs	r4, r0
   12972:	6003      	str	r3, [r0, #0]
   12974:	6043      	str	r3, [r0, #4]
   12976:	6083      	str	r3, [r0, #8]
   12978:	8181      	strh	r1, [r0, #12]
   1297a:	6643      	str	r3, [r0, #100]	; 0x64
   1297c:	81c2      	strh	r2, [r0, #14]
   1297e:	6103      	str	r3, [r0, #16]
   12980:	6143      	str	r3, [r0, #20]
   12982:	6183      	str	r3, [r0, #24]
   12984:	0019      	movs	r1, r3
   12986:	2208      	movs	r2, #8
   12988:	305c      	adds	r0, #92	; 0x5c
   1298a:	f7ff fb1e 	bl	11fca <memset>
   1298e:	4b05      	ldr	r3, [pc, #20]	; (129a4 <std.isra.0+0x38>)
   12990:	6224      	str	r4, [r4, #32]
   12992:	6263      	str	r3, [r4, #36]	; 0x24
   12994:	4b04      	ldr	r3, [pc, #16]	; (129a8 <std.isra.0+0x3c>)
   12996:	62a3      	str	r3, [r4, #40]	; 0x28
   12998:	4b04      	ldr	r3, [pc, #16]	; (129ac <std.isra.0+0x40>)
   1299a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1299c:	4b04      	ldr	r3, [pc, #16]	; (129b0 <std.isra.0+0x44>)
   1299e:	6323      	str	r3, [r4, #48]	; 0x30
   129a0:	bd10      	pop	{r4, pc}
   129a2:	46c0      	nop			; (mov r8, r8)
   129a4:	000134b9 	.word	0x000134b9
   129a8:	000134e1 	.word	0x000134e1
   129ac:	00013519 	.word	0x00013519
   129b0:	00013545 	.word	0x00013545

000129b4 <__sfmoreglue>:
   129b4:	b570      	push	{r4, r5, r6, lr}
   129b6:	2568      	movs	r5, #104	; 0x68
   129b8:	1e4a      	subs	r2, r1, #1
   129ba:	4355      	muls	r5, r2
   129bc:	000e      	movs	r6, r1
   129be:	0029      	movs	r1, r5
   129c0:	3174      	adds	r1, #116	; 0x74
   129c2:	f7ff fb55 	bl	12070 <_malloc_r>
   129c6:	1e04      	subs	r4, r0, #0
   129c8:	d008      	beq.n	129dc <__sfmoreglue+0x28>
   129ca:	2100      	movs	r1, #0
   129cc:	002a      	movs	r2, r5
   129ce:	6001      	str	r1, [r0, #0]
   129d0:	6046      	str	r6, [r0, #4]
   129d2:	300c      	adds	r0, #12
   129d4:	60a0      	str	r0, [r4, #8]
   129d6:	3268      	adds	r2, #104	; 0x68
   129d8:	f7ff faf7 	bl	11fca <memset>
   129dc:	0020      	movs	r0, r4
   129de:	bd70      	pop	{r4, r5, r6, pc}

000129e0 <__sinit>:
   129e0:	6983      	ldr	r3, [r0, #24]
   129e2:	b513      	push	{r0, r1, r4, lr}
   129e4:	0004      	movs	r4, r0
   129e6:	2b00      	cmp	r3, #0
   129e8:	d128      	bne.n	12a3c <__sinit+0x5c>
   129ea:	6483      	str	r3, [r0, #72]	; 0x48
   129ec:	64c3      	str	r3, [r0, #76]	; 0x4c
   129ee:	6503      	str	r3, [r0, #80]	; 0x50
   129f0:	4b13      	ldr	r3, [pc, #76]	; (12a40 <__sinit+0x60>)
   129f2:	4a14      	ldr	r2, [pc, #80]	; (12a44 <__sinit+0x64>)
   129f4:	681b      	ldr	r3, [r3, #0]
   129f6:	6282      	str	r2, [r0, #40]	; 0x28
   129f8:	9301      	str	r3, [sp, #4]
   129fa:	4298      	cmp	r0, r3
   129fc:	d101      	bne.n	12a02 <__sinit+0x22>
   129fe:	2301      	movs	r3, #1
   12a00:	6183      	str	r3, [r0, #24]
   12a02:	0020      	movs	r0, r4
   12a04:	f000 f820 	bl	12a48 <__sfp>
   12a08:	6060      	str	r0, [r4, #4]
   12a0a:	0020      	movs	r0, r4
   12a0c:	f000 f81c 	bl	12a48 <__sfp>
   12a10:	60a0      	str	r0, [r4, #8]
   12a12:	0020      	movs	r0, r4
   12a14:	f000 f818 	bl	12a48 <__sfp>
   12a18:	2200      	movs	r2, #0
   12a1a:	60e0      	str	r0, [r4, #12]
   12a1c:	2104      	movs	r1, #4
   12a1e:	6860      	ldr	r0, [r4, #4]
   12a20:	f7ff ffa4 	bl	1296c <std.isra.0>
   12a24:	2201      	movs	r2, #1
   12a26:	2109      	movs	r1, #9
   12a28:	68a0      	ldr	r0, [r4, #8]
   12a2a:	f7ff ff9f 	bl	1296c <std.isra.0>
   12a2e:	2202      	movs	r2, #2
   12a30:	2112      	movs	r1, #18
   12a32:	68e0      	ldr	r0, [r4, #12]
   12a34:	f7ff ff9a 	bl	1296c <std.isra.0>
   12a38:	2301      	movs	r3, #1
   12a3a:	61a3      	str	r3, [r4, #24]
   12a3c:	bd13      	pop	{r0, r1, r4, pc}
   12a3e:	46c0      	nop			; (mov r8, r8)
   12a40:	000152f8 	.word	0x000152f8
   12a44:	0001295d 	.word	0x0001295d

00012a48 <__sfp>:
   12a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a4a:	4b1e      	ldr	r3, [pc, #120]	; (12ac4 <__sfp+0x7c>)
   12a4c:	0007      	movs	r7, r0
   12a4e:	681e      	ldr	r6, [r3, #0]
   12a50:	69b3      	ldr	r3, [r6, #24]
   12a52:	2b00      	cmp	r3, #0
   12a54:	d102      	bne.n	12a5c <__sfp+0x14>
   12a56:	0030      	movs	r0, r6
   12a58:	f7ff ffc2 	bl	129e0 <__sinit>
   12a5c:	3648      	adds	r6, #72	; 0x48
   12a5e:	68b4      	ldr	r4, [r6, #8]
   12a60:	6873      	ldr	r3, [r6, #4]
   12a62:	3b01      	subs	r3, #1
   12a64:	d504      	bpl.n	12a70 <__sfp+0x28>
   12a66:	6833      	ldr	r3, [r6, #0]
   12a68:	2b00      	cmp	r3, #0
   12a6a:	d007      	beq.n	12a7c <__sfp+0x34>
   12a6c:	6836      	ldr	r6, [r6, #0]
   12a6e:	e7f6      	b.n	12a5e <__sfp+0x16>
   12a70:	220c      	movs	r2, #12
   12a72:	5ea5      	ldrsh	r5, [r4, r2]
   12a74:	2d00      	cmp	r5, #0
   12a76:	d00d      	beq.n	12a94 <__sfp+0x4c>
   12a78:	3468      	adds	r4, #104	; 0x68
   12a7a:	e7f2      	b.n	12a62 <__sfp+0x1a>
   12a7c:	2104      	movs	r1, #4
   12a7e:	0038      	movs	r0, r7
   12a80:	f7ff ff98 	bl	129b4 <__sfmoreglue>
   12a84:	6030      	str	r0, [r6, #0]
   12a86:	2800      	cmp	r0, #0
   12a88:	d1f0      	bne.n	12a6c <__sfp+0x24>
   12a8a:	230c      	movs	r3, #12
   12a8c:	0004      	movs	r4, r0
   12a8e:	603b      	str	r3, [r7, #0]
   12a90:	0020      	movs	r0, r4
   12a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a94:	2301      	movs	r3, #1
   12a96:	0020      	movs	r0, r4
   12a98:	425b      	negs	r3, r3
   12a9a:	81e3      	strh	r3, [r4, #14]
   12a9c:	3302      	adds	r3, #2
   12a9e:	81a3      	strh	r3, [r4, #12]
   12aa0:	6665      	str	r5, [r4, #100]	; 0x64
   12aa2:	6025      	str	r5, [r4, #0]
   12aa4:	60a5      	str	r5, [r4, #8]
   12aa6:	6065      	str	r5, [r4, #4]
   12aa8:	6125      	str	r5, [r4, #16]
   12aaa:	6165      	str	r5, [r4, #20]
   12aac:	61a5      	str	r5, [r4, #24]
   12aae:	2208      	movs	r2, #8
   12ab0:	0029      	movs	r1, r5
   12ab2:	305c      	adds	r0, #92	; 0x5c
   12ab4:	f7ff fa89 	bl	11fca <memset>
   12ab8:	6365      	str	r5, [r4, #52]	; 0x34
   12aba:	63a5      	str	r5, [r4, #56]	; 0x38
   12abc:	64a5      	str	r5, [r4, #72]	; 0x48
   12abe:	64e5      	str	r5, [r4, #76]	; 0x4c
   12ac0:	e7e6      	b.n	12a90 <__sfp+0x48>
   12ac2:	46c0      	nop			; (mov r8, r8)
   12ac4:	000152f8 	.word	0x000152f8

00012ac8 <_fwalk_reent>:
   12ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12aca:	0004      	movs	r4, r0
   12acc:	0007      	movs	r7, r0
   12ace:	2600      	movs	r6, #0
   12ad0:	9101      	str	r1, [sp, #4]
   12ad2:	3448      	adds	r4, #72	; 0x48
   12ad4:	2c00      	cmp	r4, #0
   12ad6:	d101      	bne.n	12adc <_fwalk_reent+0x14>
   12ad8:	0030      	movs	r0, r6
   12ada:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12adc:	6863      	ldr	r3, [r4, #4]
   12ade:	68a5      	ldr	r5, [r4, #8]
   12ae0:	9300      	str	r3, [sp, #0]
   12ae2:	9b00      	ldr	r3, [sp, #0]
   12ae4:	3b01      	subs	r3, #1
   12ae6:	9300      	str	r3, [sp, #0]
   12ae8:	d501      	bpl.n	12aee <_fwalk_reent+0x26>
   12aea:	6824      	ldr	r4, [r4, #0]
   12aec:	e7f2      	b.n	12ad4 <_fwalk_reent+0xc>
   12aee:	89ab      	ldrh	r3, [r5, #12]
   12af0:	2b01      	cmp	r3, #1
   12af2:	d908      	bls.n	12b06 <_fwalk_reent+0x3e>
   12af4:	220e      	movs	r2, #14
   12af6:	5eab      	ldrsh	r3, [r5, r2]
   12af8:	3301      	adds	r3, #1
   12afa:	d004      	beq.n	12b06 <_fwalk_reent+0x3e>
   12afc:	0029      	movs	r1, r5
   12afe:	0038      	movs	r0, r7
   12b00:	9b01      	ldr	r3, [sp, #4]
   12b02:	4798      	blx	r3
   12b04:	4306      	orrs	r6, r0
   12b06:	3568      	adds	r5, #104	; 0x68
   12b08:	e7eb      	b.n	12ae2 <_fwalk_reent+0x1a>
	...

00012b0c <__swhatbuf_r>:
   12b0c:	b570      	push	{r4, r5, r6, lr}
   12b0e:	000e      	movs	r6, r1
   12b10:	001d      	movs	r5, r3
   12b12:	230e      	movs	r3, #14
   12b14:	5ec9      	ldrsh	r1, [r1, r3]
   12b16:	b090      	sub	sp, #64	; 0x40
   12b18:	0014      	movs	r4, r2
   12b1a:	2900      	cmp	r1, #0
   12b1c:	da07      	bge.n	12b2e <__swhatbuf_r+0x22>
   12b1e:	2300      	movs	r3, #0
   12b20:	602b      	str	r3, [r5, #0]
   12b22:	89b3      	ldrh	r3, [r6, #12]
   12b24:	061b      	lsls	r3, r3, #24
   12b26:	d411      	bmi.n	12b4c <__swhatbuf_r+0x40>
   12b28:	2380      	movs	r3, #128	; 0x80
   12b2a:	00db      	lsls	r3, r3, #3
   12b2c:	e00f      	b.n	12b4e <__swhatbuf_r+0x42>
   12b2e:	aa01      	add	r2, sp, #4
   12b30:	f000 fd34 	bl	1359c <_fstat_r>
   12b34:	2800      	cmp	r0, #0
   12b36:	dbf2      	blt.n	12b1e <__swhatbuf_r+0x12>
   12b38:	22f0      	movs	r2, #240	; 0xf0
   12b3a:	9b02      	ldr	r3, [sp, #8]
   12b3c:	0212      	lsls	r2, r2, #8
   12b3e:	4013      	ands	r3, r2
   12b40:	4a05      	ldr	r2, [pc, #20]	; (12b58 <__swhatbuf_r+0x4c>)
   12b42:	189b      	adds	r3, r3, r2
   12b44:	425a      	negs	r2, r3
   12b46:	4153      	adcs	r3, r2
   12b48:	602b      	str	r3, [r5, #0]
   12b4a:	e7ed      	b.n	12b28 <__swhatbuf_r+0x1c>
   12b4c:	2340      	movs	r3, #64	; 0x40
   12b4e:	2000      	movs	r0, #0
   12b50:	6023      	str	r3, [r4, #0]
   12b52:	b010      	add	sp, #64	; 0x40
   12b54:	bd70      	pop	{r4, r5, r6, pc}
   12b56:	46c0      	nop			; (mov r8, r8)
   12b58:	ffffe000 	.word	0xffffe000

00012b5c <__smakebuf_r>:
   12b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12b5e:	2602      	movs	r6, #2
   12b60:	898b      	ldrh	r3, [r1, #12]
   12b62:	0005      	movs	r5, r0
   12b64:	000c      	movs	r4, r1
   12b66:	4233      	tst	r3, r6
   12b68:	d006      	beq.n	12b78 <__smakebuf_r+0x1c>
   12b6a:	0023      	movs	r3, r4
   12b6c:	3347      	adds	r3, #71	; 0x47
   12b6e:	6023      	str	r3, [r4, #0]
   12b70:	6123      	str	r3, [r4, #16]
   12b72:	2301      	movs	r3, #1
   12b74:	6163      	str	r3, [r4, #20]
   12b76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   12b78:	ab01      	add	r3, sp, #4
   12b7a:	466a      	mov	r2, sp
   12b7c:	f7ff ffc6 	bl	12b0c <__swhatbuf_r>
   12b80:	9900      	ldr	r1, [sp, #0]
   12b82:	0007      	movs	r7, r0
   12b84:	0028      	movs	r0, r5
   12b86:	f7ff fa73 	bl	12070 <_malloc_r>
   12b8a:	2800      	cmp	r0, #0
   12b8c:	d108      	bne.n	12ba0 <__smakebuf_r+0x44>
   12b8e:	220c      	movs	r2, #12
   12b90:	5ea3      	ldrsh	r3, [r4, r2]
   12b92:	059a      	lsls	r2, r3, #22
   12b94:	d4ef      	bmi.n	12b76 <__smakebuf_r+0x1a>
   12b96:	2203      	movs	r2, #3
   12b98:	4393      	bics	r3, r2
   12b9a:	431e      	orrs	r6, r3
   12b9c:	81a6      	strh	r6, [r4, #12]
   12b9e:	e7e4      	b.n	12b6a <__smakebuf_r+0xe>
   12ba0:	4b0f      	ldr	r3, [pc, #60]	; (12be0 <__smakebuf_r+0x84>)
   12ba2:	62ab      	str	r3, [r5, #40]	; 0x28
   12ba4:	2380      	movs	r3, #128	; 0x80
   12ba6:	89a2      	ldrh	r2, [r4, #12]
   12ba8:	6020      	str	r0, [r4, #0]
   12baa:	4313      	orrs	r3, r2
   12bac:	81a3      	strh	r3, [r4, #12]
   12bae:	9b00      	ldr	r3, [sp, #0]
   12bb0:	6120      	str	r0, [r4, #16]
   12bb2:	6163      	str	r3, [r4, #20]
   12bb4:	9b01      	ldr	r3, [sp, #4]
   12bb6:	2b00      	cmp	r3, #0
   12bb8:	d00d      	beq.n	12bd6 <__smakebuf_r+0x7a>
   12bba:	230e      	movs	r3, #14
   12bbc:	5ee1      	ldrsh	r1, [r4, r3]
   12bbe:	0028      	movs	r0, r5
   12bc0:	f000 fcfe 	bl	135c0 <_isatty_r>
   12bc4:	2800      	cmp	r0, #0
   12bc6:	d006      	beq.n	12bd6 <__smakebuf_r+0x7a>
   12bc8:	2203      	movs	r2, #3
   12bca:	89a3      	ldrh	r3, [r4, #12]
   12bcc:	4393      	bics	r3, r2
   12bce:	001a      	movs	r2, r3
   12bd0:	2301      	movs	r3, #1
   12bd2:	4313      	orrs	r3, r2
   12bd4:	81a3      	strh	r3, [r4, #12]
   12bd6:	89a0      	ldrh	r0, [r4, #12]
   12bd8:	4338      	orrs	r0, r7
   12bda:	81a0      	strh	r0, [r4, #12]
   12bdc:	e7cb      	b.n	12b76 <__smakebuf_r+0x1a>
   12bde:	46c0      	nop			; (mov r8, r8)
   12be0:	0001295d 	.word	0x0001295d

00012be4 <__malloc_lock>:
   12be4:	4770      	bx	lr

00012be6 <__malloc_unlock>:
   12be6:	4770      	bx	lr

00012be8 <__ssputs_r>:
   12be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bea:	688e      	ldr	r6, [r1, #8]
   12bec:	b085      	sub	sp, #20
   12bee:	0007      	movs	r7, r0
   12bf0:	000c      	movs	r4, r1
   12bf2:	9203      	str	r2, [sp, #12]
   12bf4:	9301      	str	r3, [sp, #4]
   12bf6:	429e      	cmp	r6, r3
   12bf8:	d839      	bhi.n	12c6e <__ssputs_r+0x86>
   12bfa:	2390      	movs	r3, #144	; 0x90
   12bfc:	898a      	ldrh	r2, [r1, #12]
   12bfe:	00db      	lsls	r3, r3, #3
   12c00:	421a      	tst	r2, r3
   12c02:	d034      	beq.n	12c6e <__ssputs_r+0x86>
   12c04:	2503      	movs	r5, #3
   12c06:	6909      	ldr	r1, [r1, #16]
   12c08:	6823      	ldr	r3, [r4, #0]
   12c0a:	1a5b      	subs	r3, r3, r1
   12c0c:	9302      	str	r3, [sp, #8]
   12c0e:	6963      	ldr	r3, [r4, #20]
   12c10:	9802      	ldr	r0, [sp, #8]
   12c12:	435d      	muls	r5, r3
   12c14:	0feb      	lsrs	r3, r5, #31
   12c16:	195d      	adds	r5, r3, r5
   12c18:	9b01      	ldr	r3, [sp, #4]
   12c1a:	106d      	asrs	r5, r5, #1
   12c1c:	3301      	adds	r3, #1
   12c1e:	181b      	adds	r3, r3, r0
   12c20:	42ab      	cmp	r3, r5
   12c22:	d900      	bls.n	12c26 <__ssputs_r+0x3e>
   12c24:	001d      	movs	r5, r3
   12c26:	0553      	lsls	r3, r2, #21
   12c28:	d532      	bpl.n	12c90 <__ssputs_r+0xa8>
   12c2a:	0029      	movs	r1, r5
   12c2c:	0038      	movs	r0, r7
   12c2e:	f7ff fa1f 	bl	12070 <_malloc_r>
   12c32:	1e06      	subs	r6, r0, #0
   12c34:	d109      	bne.n	12c4a <__ssputs_r+0x62>
   12c36:	230c      	movs	r3, #12
   12c38:	603b      	str	r3, [r7, #0]
   12c3a:	2340      	movs	r3, #64	; 0x40
   12c3c:	2001      	movs	r0, #1
   12c3e:	89a2      	ldrh	r2, [r4, #12]
   12c40:	4240      	negs	r0, r0
   12c42:	4313      	orrs	r3, r2
   12c44:	81a3      	strh	r3, [r4, #12]
   12c46:	b005      	add	sp, #20
   12c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c4a:	9a02      	ldr	r2, [sp, #8]
   12c4c:	6921      	ldr	r1, [r4, #16]
   12c4e:	f7ff f9a1 	bl	11f94 <memcpy>
   12c52:	89a3      	ldrh	r3, [r4, #12]
   12c54:	4a14      	ldr	r2, [pc, #80]	; (12ca8 <__ssputs_r+0xc0>)
   12c56:	401a      	ands	r2, r3
   12c58:	2380      	movs	r3, #128	; 0x80
   12c5a:	4313      	orrs	r3, r2
   12c5c:	81a3      	strh	r3, [r4, #12]
   12c5e:	9b02      	ldr	r3, [sp, #8]
   12c60:	6126      	str	r6, [r4, #16]
   12c62:	18f6      	adds	r6, r6, r3
   12c64:	6026      	str	r6, [r4, #0]
   12c66:	6165      	str	r5, [r4, #20]
   12c68:	9e01      	ldr	r6, [sp, #4]
   12c6a:	1aed      	subs	r5, r5, r3
   12c6c:	60a5      	str	r5, [r4, #8]
   12c6e:	9b01      	ldr	r3, [sp, #4]
   12c70:	42b3      	cmp	r3, r6
   12c72:	d200      	bcs.n	12c76 <__ssputs_r+0x8e>
   12c74:	001e      	movs	r6, r3
   12c76:	0032      	movs	r2, r6
   12c78:	9903      	ldr	r1, [sp, #12]
   12c7a:	6820      	ldr	r0, [r4, #0]
   12c7c:	f7ff f993 	bl	11fa6 <memmove>
   12c80:	68a3      	ldr	r3, [r4, #8]
   12c82:	2000      	movs	r0, #0
   12c84:	1b9b      	subs	r3, r3, r6
   12c86:	60a3      	str	r3, [r4, #8]
   12c88:	6823      	ldr	r3, [r4, #0]
   12c8a:	199e      	adds	r6, r3, r6
   12c8c:	6026      	str	r6, [r4, #0]
   12c8e:	e7da      	b.n	12c46 <__ssputs_r+0x5e>
   12c90:	002a      	movs	r2, r5
   12c92:	0038      	movs	r0, r7
   12c94:	f000 fcc5 	bl	13622 <_realloc_r>
   12c98:	1e06      	subs	r6, r0, #0
   12c9a:	d1e0      	bne.n	12c5e <__ssputs_r+0x76>
   12c9c:	6921      	ldr	r1, [r4, #16]
   12c9e:	0038      	movs	r0, r7
   12ca0:	f7ff f99c 	bl	11fdc <_free_r>
   12ca4:	e7c7      	b.n	12c36 <__ssputs_r+0x4e>
   12ca6:	46c0      	nop			; (mov r8, r8)
   12ca8:	fffffb7f 	.word	0xfffffb7f

00012cac <_svfiprintf_r>:
   12cac:	b5f0      	push	{r4, r5, r6, r7, lr}
   12cae:	b09f      	sub	sp, #124	; 0x7c
   12cb0:	9002      	str	r0, [sp, #8]
   12cb2:	9305      	str	r3, [sp, #20]
   12cb4:	898b      	ldrh	r3, [r1, #12]
   12cb6:	000f      	movs	r7, r1
   12cb8:	0016      	movs	r6, r2
   12cba:	061b      	lsls	r3, r3, #24
   12cbc:	d511      	bpl.n	12ce2 <_svfiprintf_r+0x36>
   12cbe:	690b      	ldr	r3, [r1, #16]
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d10e      	bne.n	12ce2 <_svfiprintf_r+0x36>
   12cc4:	2140      	movs	r1, #64	; 0x40
   12cc6:	f7ff f9d3 	bl	12070 <_malloc_r>
   12cca:	6038      	str	r0, [r7, #0]
   12ccc:	6138      	str	r0, [r7, #16]
   12cce:	2800      	cmp	r0, #0
   12cd0:	d105      	bne.n	12cde <_svfiprintf_r+0x32>
   12cd2:	230c      	movs	r3, #12
   12cd4:	9a02      	ldr	r2, [sp, #8]
   12cd6:	3801      	subs	r0, #1
   12cd8:	6013      	str	r3, [r2, #0]
   12cda:	b01f      	add	sp, #124	; 0x7c
   12cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cde:	2340      	movs	r3, #64	; 0x40
   12ce0:	617b      	str	r3, [r7, #20]
   12ce2:	2300      	movs	r3, #0
   12ce4:	ad06      	add	r5, sp, #24
   12ce6:	616b      	str	r3, [r5, #20]
   12ce8:	3320      	adds	r3, #32
   12cea:	766b      	strb	r3, [r5, #25]
   12cec:	3310      	adds	r3, #16
   12cee:	76ab      	strb	r3, [r5, #26]
   12cf0:	0034      	movs	r4, r6
   12cf2:	7823      	ldrb	r3, [r4, #0]
   12cf4:	2b00      	cmp	r3, #0
   12cf6:	d147      	bne.n	12d88 <_svfiprintf_r+0xdc>
   12cf8:	1ba3      	subs	r3, r4, r6
   12cfa:	9304      	str	r3, [sp, #16]
   12cfc:	d00d      	beq.n	12d1a <_svfiprintf_r+0x6e>
   12cfe:	1ba3      	subs	r3, r4, r6
   12d00:	0032      	movs	r2, r6
   12d02:	0039      	movs	r1, r7
   12d04:	9802      	ldr	r0, [sp, #8]
   12d06:	f7ff ff6f 	bl	12be8 <__ssputs_r>
   12d0a:	1c43      	adds	r3, r0, #1
   12d0c:	d100      	bne.n	12d10 <_svfiprintf_r+0x64>
   12d0e:	e0b5      	b.n	12e7c <_svfiprintf_r+0x1d0>
   12d10:	696a      	ldr	r2, [r5, #20]
   12d12:	9b04      	ldr	r3, [sp, #16]
   12d14:	4694      	mov	ip, r2
   12d16:	4463      	add	r3, ip
   12d18:	616b      	str	r3, [r5, #20]
   12d1a:	7823      	ldrb	r3, [r4, #0]
   12d1c:	2b00      	cmp	r3, #0
   12d1e:	d100      	bne.n	12d22 <_svfiprintf_r+0x76>
   12d20:	e0ac      	b.n	12e7c <_svfiprintf_r+0x1d0>
   12d22:	2201      	movs	r2, #1
   12d24:	2300      	movs	r3, #0
   12d26:	4252      	negs	r2, r2
   12d28:	606a      	str	r2, [r5, #4]
   12d2a:	a902      	add	r1, sp, #8
   12d2c:	3254      	adds	r2, #84	; 0x54
   12d2e:	1852      	adds	r2, r2, r1
   12d30:	3401      	adds	r4, #1
   12d32:	602b      	str	r3, [r5, #0]
   12d34:	60eb      	str	r3, [r5, #12]
   12d36:	60ab      	str	r3, [r5, #8]
   12d38:	7013      	strb	r3, [r2, #0]
   12d3a:	65ab      	str	r3, [r5, #88]	; 0x58
   12d3c:	4e58      	ldr	r6, [pc, #352]	; (12ea0 <_svfiprintf_r+0x1f4>)
   12d3e:	2205      	movs	r2, #5
   12d40:	7821      	ldrb	r1, [r4, #0]
   12d42:	0030      	movs	r0, r6
   12d44:	f000 fc62 	bl	1360c <memchr>
   12d48:	1c62      	adds	r2, r4, #1
   12d4a:	2800      	cmp	r0, #0
   12d4c:	d120      	bne.n	12d90 <_svfiprintf_r+0xe4>
   12d4e:	6829      	ldr	r1, [r5, #0]
   12d50:	06cb      	lsls	r3, r1, #27
   12d52:	d504      	bpl.n	12d5e <_svfiprintf_r+0xb2>
   12d54:	2353      	movs	r3, #83	; 0x53
   12d56:	ae02      	add	r6, sp, #8
   12d58:	3020      	adds	r0, #32
   12d5a:	199b      	adds	r3, r3, r6
   12d5c:	7018      	strb	r0, [r3, #0]
   12d5e:	070b      	lsls	r3, r1, #28
   12d60:	d504      	bpl.n	12d6c <_svfiprintf_r+0xc0>
   12d62:	2353      	movs	r3, #83	; 0x53
   12d64:	202b      	movs	r0, #43	; 0x2b
   12d66:	ae02      	add	r6, sp, #8
   12d68:	199b      	adds	r3, r3, r6
   12d6a:	7018      	strb	r0, [r3, #0]
   12d6c:	7823      	ldrb	r3, [r4, #0]
   12d6e:	2b2a      	cmp	r3, #42	; 0x2a
   12d70:	d016      	beq.n	12da0 <_svfiprintf_r+0xf4>
   12d72:	2000      	movs	r0, #0
   12d74:	210a      	movs	r1, #10
   12d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12d78:	7822      	ldrb	r2, [r4, #0]
   12d7a:	3a30      	subs	r2, #48	; 0x30
   12d7c:	2a09      	cmp	r2, #9
   12d7e:	d955      	bls.n	12e2c <_svfiprintf_r+0x180>
   12d80:	2800      	cmp	r0, #0
   12d82:	d015      	beq.n	12db0 <_svfiprintf_r+0x104>
   12d84:	9309      	str	r3, [sp, #36]	; 0x24
   12d86:	e013      	b.n	12db0 <_svfiprintf_r+0x104>
   12d88:	2b25      	cmp	r3, #37	; 0x25
   12d8a:	d0b5      	beq.n	12cf8 <_svfiprintf_r+0x4c>
   12d8c:	3401      	adds	r4, #1
   12d8e:	e7b0      	b.n	12cf2 <_svfiprintf_r+0x46>
   12d90:	2301      	movs	r3, #1
   12d92:	1b80      	subs	r0, r0, r6
   12d94:	4083      	lsls	r3, r0
   12d96:	6829      	ldr	r1, [r5, #0]
   12d98:	0014      	movs	r4, r2
   12d9a:	430b      	orrs	r3, r1
   12d9c:	602b      	str	r3, [r5, #0]
   12d9e:	e7cd      	b.n	12d3c <_svfiprintf_r+0x90>
   12da0:	9b05      	ldr	r3, [sp, #20]
   12da2:	1d18      	adds	r0, r3, #4
   12da4:	681b      	ldr	r3, [r3, #0]
   12da6:	9005      	str	r0, [sp, #20]
   12da8:	2b00      	cmp	r3, #0
   12daa:	db39      	blt.n	12e20 <_svfiprintf_r+0x174>
   12dac:	9309      	str	r3, [sp, #36]	; 0x24
   12dae:	0014      	movs	r4, r2
   12db0:	7823      	ldrb	r3, [r4, #0]
   12db2:	2b2e      	cmp	r3, #46	; 0x2e
   12db4:	d10b      	bne.n	12dce <_svfiprintf_r+0x122>
   12db6:	7863      	ldrb	r3, [r4, #1]
   12db8:	1c62      	adds	r2, r4, #1
   12dba:	2b2a      	cmp	r3, #42	; 0x2a
   12dbc:	d13e      	bne.n	12e3c <_svfiprintf_r+0x190>
   12dbe:	9b05      	ldr	r3, [sp, #20]
   12dc0:	3402      	adds	r4, #2
   12dc2:	1d1a      	adds	r2, r3, #4
   12dc4:	681b      	ldr	r3, [r3, #0]
   12dc6:	9205      	str	r2, [sp, #20]
   12dc8:	2b00      	cmp	r3, #0
   12dca:	db34      	blt.n	12e36 <_svfiprintf_r+0x18a>
   12dcc:	9307      	str	r3, [sp, #28]
   12dce:	4e35      	ldr	r6, [pc, #212]	; (12ea4 <_svfiprintf_r+0x1f8>)
   12dd0:	7821      	ldrb	r1, [r4, #0]
   12dd2:	2203      	movs	r2, #3
   12dd4:	0030      	movs	r0, r6
   12dd6:	f000 fc19 	bl	1360c <memchr>
   12dda:	2800      	cmp	r0, #0
   12ddc:	d006      	beq.n	12dec <_svfiprintf_r+0x140>
   12dde:	2340      	movs	r3, #64	; 0x40
   12de0:	1b80      	subs	r0, r0, r6
   12de2:	4083      	lsls	r3, r0
   12de4:	682a      	ldr	r2, [r5, #0]
   12de6:	3401      	adds	r4, #1
   12de8:	4313      	orrs	r3, r2
   12dea:	602b      	str	r3, [r5, #0]
   12dec:	7821      	ldrb	r1, [r4, #0]
   12dee:	2206      	movs	r2, #6
   12df0:	482d      	ldr	r0, [pc, #180]	; (12ea8 <_svfiprintf_r+0x1fc>)
   12df2:	1c66      	adds	r6, r4, #1
   12df4:	7629      	strb	r1, [r5, #24]
   12df6:	f000 fc09 	bl	1360c <memchr>
   12dfa:	2800      	cmp	r0, #0
   12dfc:	d046      	beq.n	12e8c <_svfiprintf_r+0x1e0>
   12dfe:	4b2b      	ldr	r3, [pc, #172]	; (12eac <_svfiprintf_r+0x200>)
   12e00:	2b00      	cmp	r3, #0
   12e02:	d12f      	bne.n	12e64 <_svfiprintf_r+0x1b8>
   12e04:	6829      	ldr	r1, [r5, #0]
   12e06:	9b05      	ldr	r3, [sp, #20]
   12e08:	2207      	movs	r2, #7
   12e0a:	05c9      	lsls	r1, r1, #23
   12e0c:	d528      	bpl.n	12e60 <_svfiprintf_r+0x1b4>
   12e0e:	189b      	adds	r3, r3, r2
   12e10:	4393      	bics	r3, r2
   12e12:	3308      	adds	r3, #8
   12e14:	9305      	str	r3, [sp, #20]
   12e16:	696b      	ldr	r3, [r5, #20]
   12e18:	9a03      	ldr	r2, [sp, #12]
   12e1a:	189b      	adds	r3, r3, r2
   12e1c:	616b      	str	r3, [r5, #20]
   12e1e:	e767      	b.n	12cf0 <_svfiprintf_r+0x44>
   12e20:	425b      	negs	r3, r3
   12e22:	60eb      	str	r3, [r5, #12]
   12e24:	2302      	movs	r3, #2
   12e26:	430b      	orrs	r3, r1
   12e28:	602b      	str	r3, [r5, #0]
   12e2a:	e7c0      	b.n	12dae <_svfiprintf_r+0x102>
   12e2c:	434b      	muls	r3, r1
   12e2e:	3401      	adds	r4, #1
   12e30:	189b      	adds	r3, r3, r2
   12e32:	2001      	movs	r0, #1
   12e34:	e7a0      	b.n	12d78 <_svfiprintf_r+0xcc>
   12e36:	2301      	movs	r3, #1
   12e38:	425b      	negs	r3, r3
   12e3a:	e7c7      	b.n	12dcc <_svfiprintf_r+0x120>
   12e3c:	2300      	movs	r3, #0
   12e3e:	0014      	movs	r4, r2
   12e40:	200a      	movs	r0, #10
   12e42:	001a      	movs	r2, r3
   12e44:	606b      	str	r3, [r5, #4]
   12e46:	7821      	ldrb	r1, [r4, #0]
   12e48:	3930      	subs	r1, #48	; 0x30
   12e4a:	2909      	cmp	r1, #9
   12e4c:	d903      	bls.n	12e56 <_svfiprintf_r+0x1aa>
   12e4e:	2b00      	cmp	r3, #0
   12e50:	d0bd      	beq.n	12dce <_svfiprintf_r+0x122>
   12e52:	9207      	str	r2, [sp, #28]
   12e54:	e7bb      	b.n	12dce <_svfiprintf_r+0x122>
   12e56:	4342      	muls	r2, r0
   12e58:	3401      	adds	r4, #1
   12e5a:	1852      	adds	r2, r2, r1
   12e5c:	2301      	movs	r3, #1
   12e5e:	e7f2      	b.n	12e46 <_svfiprintf_r+0x19a>
   12e60:	3307      	adds	r3, #7
   12e62:	e7d5      	b.n	12e10 <_svfiprintf_r+0x164>
   12e64:	ab05      	add	r3, sp, #20
   12e66:	9300      	str	r3, [sp, #0]
   12e68:	003a      	movs	r2, r7
   12e6a:	4b11      	ldr	r3, [pc, #68]	; (12eb0 <_svfiprintf_r+0x204>)
   12e6c:	0029      	movs	r1, r5
   12e6e:	9802      	ldr	r0, [sp, #8]
   12e70:	e000      	b.n	12e74 <_svfiprintf_r+0x1c8>
   12e72:	bf00      	nop
   12e74:	9003      	str	r0, [sp, #12]
   12e76:	9b03      	ldr	r3, [sp, #12]
   12e78:	3301      	adds	r3, #1
   12e7a:	d1cc      	bne.n	12e16 <_svfiprintf_r+0x16a>
   12e7c:	89bb      	ldrh	r3, [r7, #12]
   12e7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12e80:	065b      	lsls	r3, r3, #25
   12e82:	d400      	bmi.n	12e86 <_svfiprintf_r+0x1da>
   12e84:	e729      	b.n	12cda <_svfiprintf_r+0x2e>
   12e86:	2001      	movs	r0, #1
   12e88:	4240      	negs	r0, r0
   12e8a:	e726      	b.n	12cda <_svfiprintf_r+0x2e>
   12e8c:	ab05      	add	r3, sp, #20
   12e8e:	9300      	str	r3, [sp, #0]
   12e90:	003a      	movs	r2, r7
   12e92:	4b07      	ldr	r3, [pc, #28]	; (12eb0 <_svfiprintf_r+0x204>)
   12e94:	0029      	movs	r1, r5
   12e96:	9802      	ldr	r0, [sp, #8]
   12e98:	f000 f9be 	bl	13218 <_printf_i>
   12e9c:	e7ea      	b.n	12e74 <_svfiprintf_r+0x1c8>
   12e9e:	46c0      	nop			; (mov r8, r8)
   12ea0:	00015468 	.word	0x00015468
   12ea4:	0001546e 	.word	0x0001546e
   12ea8:	00015472 	.word	0x00015472
   12eac:	00000000 	.word	0x00000000
   12eb0:	00012be9 	.word	0x00012be9

00012eb4 <__sfputc_r>:
   12eb4:	6893      	ldr	r3, [r2, #8]
   12eb6:	b510      	push	{r4, lr}
   12eb8:	3b01      	subs	r3, #1
   12eba:	6093      	str	r3, [r2, #8]
   12ebc:	2b00      	cmp	r3, #0
   12ebe:	da05      	bge.n	12ecc <__sfputc_r+0x18>
   12ec0:	6994      	ldr	r4, [r2, #24]
   12ec2:	42a3      	cmp	r3, r4
   12ec4:	db08      	blt.n	12ed8 <__sfputc_r+0x24>
   12ec6:	b2cb      	uxtb	r3, r1
   12ec8:	2b0a      	cmp	r3, #10
   12eca:	d005      	beq.n	12ed8 <__sfputc_r+0x24>
   12ecc:	6813      	ldr	r3, [r2, #0]
   12ece:	1c58      	adds	r0, r3, #1
   12ed0:	6010      	str	r0, [r2, #0]
   12ed2:	7019      	strb	r1, [r3, #0]
   12ed4:	b2c8      	uxtb	r0, r1
   12ed6:	bd10      	pop	{r4, pc}
   12ed8:	f7ff fbb2 	bl	12640 <__swbuf_r>
   12edc:	e7fb      	b.n	12ed6 <__sfputc_r+0x22>

00012ede <__sfputs_r>:
   12ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ee0:	0006      	movs	r6, r0
   12ee2:	000f      	movs	r7, r1
   12ee4:	0014      	movs	r4, r2
   12ee6:	18d5      	adds	r5, r2, r3
   12ee8:	42ac      	cmp	r4, r5
   12eea:	d101      	bne.n	12ef0 <__sfputs_r+0x12>
   12eec:	2000      	movs	r0, #0
   12eee:	e007      	b.n	12f00 <__sfputs_r+0x22>
   12ef0:	7821      	ldrb	r1, [r4, #0]
   12ef2:	003a      	movs	r2, r7
   12ef4:	0030      	movs	r0, r6
   12ef6:	f7ff ffdd 	bl	12eb4 <__sfputc_r>
   12efa:	3401      	adds	r4, #1
   12efc:	1c43      	adds	r3, r0, #1
   12efe:	d1f3      	bne.n	12ee8 <__sfputs_r+0xa>
   12f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00012f04 <_vfiprintf_r>:
   12f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f06:	b09f      	sub	sp, #124	; 0x7c
   12f08:	0006      	movs	r6, r0
   12f0a:	000f      	movs	r7, r1
   12f0c:	0014      	movs	r4, r2
   12f0e:	9305      	str	r3, [sp, #20]
   12f10:	2800      	cmp	r0, #0
   12f12:	d004      	beq.n	12f1e <_vfiprintf_r+0x1a>
   12f14:	6983      	ldr	r3, [r0, #24]
   12f16:	2b00      	cmp	r3, #0
   12f18:	d101      	bne.n	12f1e <_vfiprintf_r+0x1a>
   12f1a:	f7ff fd61 	bl	129e0 <__sinit>
   12f1e:	4b7f      	ldr	r3, [pc, #508]	; (1311c <_vfiprintf_r+0x218>)
   12f20:	429f      	cmp	r7, r3
   12f22:	d15c      	bne.n	12fde <_vfiprintf_r+0xda>
   12f24:	6877      	ldr	r7, [r6, #4]
   12f26:	89bb      	ldrh	r3, [r7, #12]
   12f28:	071b      	lsls	r3, r3, #28
   12f2a:	d562      	bpl.n	12ff2 <_vfiprintf_r+0xee>
   12f2c:	693b      	ldr	r3, [r7, #16]
   12f2e:	2b00      	cmp	r3, #0
   12f30:	d05f      	beq.n	12ff2 <_vfiprintf_r+0xee>
   12f32:	2300      	movs	r3, #0
   12f34:	ad06      	add	r5, sp, #24
   12f36:	616b      	str	r3, [r5, #20]
   12f38:	3320      	adds	r3, #32
   12f3a:	766b      	strb	r3, [r5, #25]
   12f3c:	3310      	adds	r3, #16
   12f3e:	76ab      	strb	r3, [r5, #26]
   12f40:	9402      	str	r4, [sp, #8]
   12f42:	9c02      	ldr	r4, [sp, #8]
   12f44:	7823      	ldrb	r3, [r4, #0]
   12f46:	2b00      	cmp	r3, #0
   12f48:	d15d      	bne.n	13006 <_vfiprintf_r+0x102>
   12f4a:	9b02      	ldr	r3, [sp, #8]
   12f4c:	1ae3      	subs	r3, r4, r3
   12f4e:	9304      	str	r3, [sp, #16]
   12f50:	d00d      	beq.n	12f6e <_vfiprintf_r+0x6a>
   12f52:	9b04      	ldr	r3, [sp, #16]
   12f54:	9a02      	ldr	r2, [sp, #8]
   12f56:	0039      	movs	r1, r7
   12f58:	0030      	movs	r0, r6
   12f5a:	f7ff ffc0 	bl	12ede <__sfputs_r>
   12f5e:	1c43      	adds	r3, r0, #1
   12f60:	d100      	bne.n	12f64 <_vfiprintf_r+0x60>
   12f62:	e0cc      	b.n	130fe <_vfiprintf_r+0x1fa>
   12f64:	696a      	ldr	r2, [r5, #20]
   12f66:	9b04      	ldr	r3, [sp, #16]
   12f68:	4694      	mov	ip, r2
   12f6a:	4463      	add	r3, ip
   12f6c:	616b      	str	r3, [r5, #20]
   12f6e:	7823      	ldrb	r3, [r4, #0]
   12f70:	2b00      	cmp	r3, #0
   12f72:	d100      	bne.n	12f76 <_vfiprintf_r+0x72>
   12f74:	e0c3      	b.n	130fe <_vfiprintf_r+0x1fa>
   12f76:	2201      	movs	r2, #1
   12f78:	2300      	movs	r3, #0
   12f7a:	4252      	negs	r2, r2
   12f7c:	606a      	str	r2, [r5, #4]
   12f7e:	a902      	add	r1, sp, #8
   12f80:	3254      	adds	r2, #84	; 0x54
   12f82:	1852      	adds	r2, r2, r1
   12f84:	3401      	adds	r4, #1
   12f86:	602b      	str	r3, [r5, #0]
   12f88:	60eb      	str	r3, [r5, #12]
   12f8a:	60ab      	str	r3, [r5, #8]
   12f8c:	7013      	strb	r3, [r2, #0]
   12f8e:	65ab      	str	r3, [r5, #88]	; 0x58
   12f90:	7821      	ldrb	r1, [r4, #0]
   12f92:	2205      	movs	r2, #5
   12f94:	4862      	ldr	r0, [pc, #392]	; (13120 <_vfiprintf_r+0x21c>)
   12f96:	f000 fb39 	bl	1360c <memchr>
   12f9a:	1c63      	adds	r3, r4, #1
   12f9c:	469c      	mov	ip, r3
   12f9e:	2800      	cmp	r0, #0
   12fa0:	d135      	bne.n	1300e <_vfiprintf_r+0x10a>
   12fa2:	6829      	ldr	r1, [r5, #0]
   12fa4:	06cb      	lsls	r3, r1, #27
   12fa6:	d504      	bpl.n	12fb2 <_vfiprintf_r+0xae>
   12fa8:	2353      	movs	r3, #83	; 0x53
   12faa:	aa02      	add	r2, sp, #8
   12fac:	3020      	adds	r0, #32
   12fae:	189b      	adds	r3, r3, r2
   12fb0:	7018      	strb	r0, [r3, #0]
   12fb2:	070b      	lsls	r3, r1, #28
   12fb4:	d504      	bpl.n	12fc0 <_vfiprintf_r+0xbc>
   12fb6:	2353      	movs	r3, #83	; 0x53
   12fb8:	202b      	movs	r0, #43	; 0x2b
   12fba:	aa02      	add	r2, sp, #8
   12fbc:	189b      	adds	r3, r3, r2
   12fbe:	7018      	strb	r0, [r3, #0]
   12fc0:	7823      	ldrb	r3, [r4, #0]
   12fc2:	2b2a      	cmp	r3, #42	; 0x2a
   12fc4:	d02c      	beq.n	13020 <_vfiprintf_r+0x11c>
   12fc6:	2000      	movs	r0, #0
   12fc8:	210a      	movs	r1, #10
   12fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12fcc:	7822      	ldrb	r2, [r4, #0]
   12fce:	3a30      	subs	r2, #48	; 0x30
   12fd0:	2a09      	cmp	r2, #9
   12fd2:	d800      	bhi.n	12fd6 <_vfiprintf_r+0xd2>
   12fd4:	e06b      	b.n	130ae <_vfiprintf_r+0x1aa>
   12fd6:	2800      	cmp	r0, #0
   12fd8:	d02a      	beq.n	13030 <_vfiprintf_r+0x12c>
   12fda:	9309      	str	r3, [sp, #36]	; 0x24
   12fdc:	e028      	b.n	13030 <_vfiprintf_r+0x12c>
   12fde:	4b51      	ldr	r3, [pc, #324]	; (13124 <_vfiprintf_r+0x220>)
   12fe0:	429f      	cmp	r7, r3
   12fe2:	d101      	bne.n	12fe8 <_vfiprintf_r+0xe4>
   12fe4:	68b7      	ldr	r7, [r6, #8]
   12fe6:	e79e      	b.n	12f26 <_vfiprintf_r+0x22>
   12fe8:	4b4f      	ldr	r3, [pc, #316]	; (13128 <_vfiprintf_r+0x224>)
   12fea:	429f      	cmp	r7, r3
   12fec:	d19b      	bne.n	12f26 <_vfiprintf_r+0x22>
   12fee:	68f7      	ldr	r7, [r6, #12]
   12ff0:	e799      	b.n	12f26 <_vfiprintf_r+0x22>
   12ff2:	0039      	movs	r1, r7
   12ff4:	0030      	movs	r0, r6
   12ff6:	f7ff fb85 	bl	12704 <__swsetup_r>
   12ffa:	2800      	cmp	r0, #0
   12ffc:	d099      	beq.n	12f32 <_vfiprintf_r+0x2e>
   12ffe:	2001      	movs	r0, #1
   13000:	4240      	negs	r0, r0
   13002:	b01f      	add	sp, #124	; 0x7c
   13004:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13006:	2b25      	cmp	r3, #37	; 0x25
   13008:	d09f      	beq.n	12f4a <_vfiprintf_r+0x46>
   1300a:	3401      	adds	r4, #1
   1300c:	e79a      	b.n	12f44 <_vfiprintf_r+0x40>
   1300e:	4b44      	ldr	r3, [pc, #272]	; (13120 <_vfiprintf_r+0x21c>)
   13010:	6829      	ldr	r1, [r5, #0]
   13012:	1ac0      	subs	r0, r0, r3
   13014:	2301      	movs	r3, #1
   13016:	4083      	lsls	r3, r0
   13018:	430b      	orrs	r3, r1
   1301a:	602b      	str	r3, [r5, #0]
   1301c:	4664      	mov	r4, ip
   1301e:	e7b7      	b.n	12f90 <_vfiprintf_r+0x8c>
   13020:	9b05      	ldr	r3, [sp, #20]
   13022:	1d18      	adds	r0, r3, #4
   13024:	681b      	ldr	r3, [r3, #0]
   13026:	9005      	str	r0, [sp, #20]
   13028:	2b00      	cmp	r3, #0
   1302a:	db3a      	blt.n	130a2 <_vfiprintf_r+0x19e>
   1302c:	9309      	str	r3, [sp, #36]	; 0x24
   1302e:	4664      	mov	r4, ip
   13030:	7823      	ldrb	r3, [r4, #0]
   13032:	2b2e      	cmp	r3, #46	; 0x2e
   13034:	d10b      	bne.n	1304e <_vfiprintf_r+0x14a>
   13036:	7863      	ldrb	r3, [r4, #1]
   13038:	1c62      	adds	r2, r4, #1
   1303a:	2b2a      	cmp	r3, #42	; 0x2a
   1303c:	d13f      	bne.n	130be <_vfiprintf_r+0x1ba>
   1303e:	9b05      	ldr	r3, [sp, #20]
   13040:	3402      	adds	r4, #2
   13042:	1d1a      	adds	r2, r3, #4
   13044:	681b      	ldr	r3, [r3, #0]
   13046:	9205      	str	r2, [sp, #20]
   13048:	2b00      	cmp	r3, #0
   1304a:	db35      	blt.n	130b8 <_vfiprintf_r+0x1b4>
   1304c:	9307      	str	r3, [sp, #28]
   1304e:	7821      	ldrb	r1, [r4, #0]
   13050:	2203      	movs	r2, #3
   13052:	4836      	ldr	r0, [pc, #216]	; (1312c <_vfiprintf_r+0x228>)
   13054:	f000 fada 	bl	1360c <memchr>
   13058:	2800      	cmp	r0, #0
   1305a:	d007      	beq.n	1306c <_vfiprintf_r+0x168>
   1305c:	4b33      	ldr	r3, [pc, #204]	; (1312c <_vfiprintf_r+0x228>)
   1305e:	682a      	ldr	r2, [r5, #0]
   13060:	1ac0      	subs	r0, r0, r3
   13062:	2340      	movs	r3, #64	; 0x40
   13064:	4083      	lsls	r3, r0
   13066:	4313      	orrs	r3, r2
   13068:	602b      	str	r3, [r5, #0]
   1306a:	3401      	adds	r4, #1
   1306c:	7821      	ldrb	r1, [r4, #0]
   1306e:	1c63      	adds	r3, r4, #1
   13070:	2206      	movs	r2, #6
   13072:	482f      	ldr	r0, [pc, #188]	; (13130 <_vfiprintf_r+0x22c>)
   13074:	9302      	str	r3, [sp, #8]
   13076:	7629      	strb	r1, [r5, #24]
   13078:	f000 fac8 	bl	1360c <memchr>
   1307c:	2800      	cmp	r0, #0
   1307e:	d044      	beq.n	1310a <_vfiprintf_r+0x206>
   13080:	4b2c      	ldr	r3, [pc, #176]	; (13134 <_vfiprintf_r+0x230>)
   13082:	2b00      	cmp	r3, #0
   13084:	d12f      	bne.n	130e6 <_vfiprintf_r+0x1e2>
   13086:	6829      	ldr	r1, [r5, #0]
   13088:	9b05      	ldr	r3, [sp, #20]
   1308a:	2207      	movs	r2, #7
   1308c:	05c9      	lsls	r1, r1, #23
   1308e:	d528      	bpl.n	130e2 <_vfiprintf_r+0x1de>
   13090:	189b      	adds	r3, r3, r2
   13092:	4393      	bics	r3, r2
   13094:	3308      	adds	r3, #8
   13096:	9305      	str	r3, [sp, #20]
   13098:	696b      	ldr	r3, [r5, #20]
   1309a:	9a03      	ldr	r2, [sp, #12]
   1309c:	189b      	adds	r3, r3, r2
   1309e:	616b      	str	r3, [r5, #20]
   130a0:	e74f      	b.n	12f42 <_vfiprintf_r+0x3e>
   130a2:	425b      	negs	r3, r3
   130a4:	60eb      	str	r3, [r5, #12]
   130a6:	2302      	movs	r3, #2
   130a8:	430b      	orrs	r3, r1
   130aa:	602b      	str	r3, [r5, #0]
   130ac:	e7bf      	b.n	1302e <_vfiprintf_r+0x12a>
   130ae:	434b      	muls	r3, r1
   130b0:	3401      	adds	r4, #1
   130b2:	189b      	adds	r3, r3, r2
   130b4:	2001      	movs	r0, #1
   130b6:	e789      	b.n	12fcc <_vfiprintf_r+0xc8>
   130b8:	2301      	movs	r3, #1
   130ba:	425b      	negs	r3, r3
   130bc:	e7c6      	b.n	1304c <_vfiprintf_r+0x148>
   130be:	2300      	movs	r3, #0
   130c0:	0014      	movs	r4, r2
   130c2:	200a      	movs	r0, #10
   130c4:	001a      	movs	r2, r3
   130c6:	606b      	str	r3, [r5, #4]
   130c8:	7821      	ldrb	r1, [r4, #0]
   130ca:	3930      	subs	r1, #48	; 0x30
   130cc:	2909      	cmp	r1, #9
   130ce:	d903      	bls.n	130d8 <_vfiprintf_r+0x1d4>
   130d0:	2b00      	cmp	r3, #0
   130d2:	d0bc      	beq.n	1304e <_vfiprintf_r+0x14a>
   130d4:	9207      	str	r2, [sp, #28]
   130d6:	e7ba      	b.n	1304e <_vfiprintf_r+0x14a>
   130d8:	4342      	muls	r2, r0
   130da:	3401      	adds	r4, #1
   130dc:	1852      	adds	r2, r2, r1
   130de:	2301      	movs	r3, #1
   130e0:	e7f2      	b.n	130c8 <_vfiprintf_r+0x1c4>
   130e2:	3307      	adds	r3, #7
   130e4:	e7d5      	b.n	13092 <_vfiprintf_r+0x18e>
   130e6:	ab05      	add	r3, sp, #20
   130e8:	9300      	str	r3, [sp, #0]
   130ea:	003a      	movs	r2, r7
   130ec:	4b12      	ldr	r3, [pc, #72]	; (13138 <_vfiprintf_r+0x234>)
   130ee:	0029      	movs	r1, r5
   130f0:	0030      	movs	r0, r6
   130f2:	e000      	b.n	130f6 <_vfiprintf_r+0x1f2>
   130f4:	bf00      	nop
   130f6:	9003      	str	r0, [sp, #12]
   130f8:	9b03      	ldr	r3, [sp, #12]
   130fa:	3301      	adds	r3, #1
   130fc:	d1cc      	bne.n	13098 <_vfiprintf_r+0x194>
   130fe:	89bb      	ldrh	r3, [r7, #12]
   13100:	065b      	lsls	r3, r3, #25
   13102:	d500      	bpl.n	13106 <_vfiprintf_r+0x202>
   13104:	e77b      	b.n	12ffe <_vfiprintf_r+0xfa>
   13106:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13108:	e77b      	b.n	13002 <_vfiprintf_r+0xfe>
   1310a:	ab05      	add	r3, sp, #20
   1310c:	9300      	str	r3, [sp, #0]
   1310e:	003a      	movs	r2, r7
   13110:	4b09      	ldr	r3, [pc, #36]	; (13138 <_vfiprintf_r+0x234>)
   13112:	0029      	movs	r1, r5
   13114:	0030      	movs	r0, r6
   13116:	f000 f87f 	bl	13218 <_printf_i>
   1311a:	e7ec      	b.n	130f6 <_vfiprintf_r+0x1f2>
   1311c:	00015428 	.word	0x00015428
   13120:	00015468 	.word	0x00015468
   13124:	00015448 	.word	0x00015448
   13128:	00015408 	.word	0x00015408
   1312c:	0001546e 	.word	0x0001546e
   13130:	00015472 	.word	0x00015472
   13134:	00000000 	.word	0x00000000
   13138:	00012edf 	.word	0x00012edf

0001313c <_printf_common>:
   1313c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1313e:	0015      	movs	r5, r2
   13140:	9301      	str	r3, [sp, #4]
   13142:	688a      	ldr	r2, [r1, #8]
   13144:	690b      	ldr	r3, [r1, #16]
   13146:	9000      	str	r0, [sp, #0]
   13148:	000c      	movs	r4, r1
   1314a:	4293      	cmp	r3, r2
   1314c:	da00      	bge.n	13150 <_printf_common+0x14>
   1314e:	0013      	movs	r3, r2
   13150:	0022      	movs	r2, r4
   13152:	602b      	str	r3, [r5, #0]
   13154:	3243      	adds	r2, #67	; 0x43
   13156:	7812      	ldrb	r2, [r2, #0]
   13158:	2a00      	cmp	r2, #0
   1315a:	d001      	beq.n	13160 <_printf_common+0x24>
   1315c:	3301      	adds	r3, #1
   1315e:	602b      	str	r3, [r5, #0]
   13160:	6823      	ldr	r3, [r4, #0]
   13162:	069b      	lsls	r3, r3, #26
   13164:	d502      	bpl.n	1316c <_printf_common+0x30>
   13166:	682b      	ldr	r3, [r5, #0]
   13168:	3302      	adds	r3, #2
   1316a:	602b      	str	r3, [r5, #0]
   1316c:	2706      	movs	r7, #6
   1316e:	6823      	ldr	r3, [r4, #0]
   13170:	401f      	ands	r7, r3
   13172:	d027      	beq.n	131c4 <_printf_common+0x88>
   13174:	0023      	movs	r3, r4
   13176:	3343      	adds	r3, #67	; 0x43
   13178:	781b      	ldrb	r3, [r3, #0]
   1317a:	1e5a      	subs	r2, r3, #1
   1317c:	4193      	sbcs	r3, r2
   1317e:	6822      	ldr	r2, [r4, #0]
   13180:	0692      	lsls	r2, r2, #26
   13182:	d430      	bmi.n	131e6 <_printf_common+0xaa>
   13184:	0022      	movs	r2, r4
   13186:	9901      	ldr	r1, [sp, #4]
   13188:	3243      	adds	r2, #67	; 0x43
   1318a:	9800      	ldr	r0, [sp, #0]
   1318c:	9e08      	ldr	r6, [sp, #32]
   1318e:	47b0      	blx	r6
   13190:	1c43      	adds	r3, r0, #1
   13192:	d025      	beq.n	131e0 <_printf_common+0xa4>
   13194:	2306      	movs	r3, #6
   13196:	6820      	ldr	r0, [r4, #0]
   13198:	682a      	ldr	r2, [r5, #0]
   1319a:	68e1      	ldr	r1, [r4, #12]
   1319c:	4003      	ands	r3, r0
   1319e:	2500      	movs	r5, #0
   131a0:	2b04      	cmp	r3, #4
   131a2:	d103      	bne.n	131ac <_printf_common+0x70>
   131a4:	1a8d      	subs	r5, r1, r2
   131a6:	43eb      	mvns	r3, r5
   131a8:	17db      	asrs	r3, r3, #31
   131aa:	401d      	ands	r5, r3
   131ac:	68a3      	ldr	r3, [r4, #8]
   131ae:	6922      	ldr	r2, [r4, #16]
   131b0:	4293      	cmp	r3, r2
   131b2:	dd01      	ble.n	131b8 <_printf_common+0x7c>
   131b4:	1a9b      	subs	r3, r3, r2
   131b6:	18ed      	adds	r5, r5, r3
   131b8:	2700      	movs	r7, #0
   131ba:	42bd      	cmp	r5, r7
   131bc:	d120      	bne.n	13200 <_printf_common+0xc4>
   131be:	2000      	movs	r0, #0
   131c0:	e010      	b.n	131e4 <_printf_common+0xa8>
   131c2:	3701      	adds	r7, #1
   131c4:	68e3      	ldr	r3, [r4, #12]
   131c6:	682a      	ldr	r2, [r5, #0]
   131c8:	1a9b      	subs	r3, r3, r2
   131ca:	429f      	cmp	r7, r3
   131cc:	dad2      	bge.n	13174 <_printf_common+0x38>
   131ce:	0022      	movs	r2, r4
   131d0:	2301      	movs	r3, #1
   131d2:	3219      	adds	r2, #25
   131d4:	9901      	ldr	r1, [sp, #4]
   131d6:	9800      	ldr	r0, [sp, #0]
   131d8:	9e08      	ldr	r6, [sp, #32]
   131da:	47b0      	blx	r6
   131dc:	1c43      	adds	r3, r0, #1
   131de:	d1f0      	bne.n	131c2 <_printf_common+0x86>
   131e0:	2001      	movs	r0, #1
   131e2:	4240      	negs	r0, r0
   131e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   131e6:	2030      	movs	r0, #48	; 0x30
   131e8:	18e1      	adds	r1, r4, r3
   131ea:	3143      	adds	r1, #67	; 0x43
   131ec:	7008      	strb	r0, [r1, #0]
   131ee:	0021      	movs	r1, r4
   131f0:	1c5a      	adds	r2, r3, #1
   131f2:	3145      	adds	r1, #69	; 0x45
   131f4:	7809      	ldrb	r1, [r1, #0]
   131f6:	18a2      	adds	r2, r4, r2
   131f8:	3243      	adds	r2, #67	; 0x43
   131fa:	3302      	adds	r3, #2
   131fc:	7011      	strb	r1, [r2, #0]
   131fe:	e7c1      	b.n	13184 <_printf_common+0x48>
   13200:	0022      	movs	r2, r4
   13202:	2301      	movs	r3, #1
   13204:	321a      	adds	r2, #26
   13206:	9901      	ldr	r1, [sp, #4]
   13208:	9800      	ldr	r0, [sp, #0]
   1320a:	9e08      	ldr	r6, [sp, #32]
   1320c:	47b0      	blx	r6
   1320e:	1c43      	adds	r3, r0, #1
   13210:	d0e6      	beq.n	131e0 <_printf_common+0xa4>
   13212:	3701      	adds	r7, #1
   13214:	e7d1      	b.n	131ba <_printf_common+0x7e>
	...

00013218 <_printf_i>:
   13218:	b5f0      	push	{r4, r5, r6, r7, lr}
   1321a:	b08b      	sub	sp, #44	; 0x2c
   1321c:	9206      	str	r2, [sp, #24]
   1321e:	000a      	movs	r2, r1
   13220:	3243      	adds	r2, #67	; 0x43
   13222:	9307      	str	r3, [sp, #28]
   13224:	9005      	str	r0, [sp, #20]
   13226:	9204      	str	r2, [sp, #16]
   13228:	7e0a      	ldrb	r2, [r1, #24]
   1322a:	000c      	movs	r4, r1
   1322c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1322e:	2a6e      	cmp	r2, #110	; 0x6e
   13230:	d100      	bne.n	13234 <_printf_i+0x1c>
   13232:	e08f      	b.n	13354 <_printf_i+0x13c>
   13234:	d817      	bhi.n	13266 <_printf_i+0x4e>
   13236:	2a63      	cmp	r2, #99	; 0x63
   13238:	d02c      	beq.n	13294 <_printf_i+0x7c>
   1323a:	d808      	bhi.n	1324e <_printf_i+0x36>
   1323c:	2a00      	cmp	r2, #0
   1323e:	d100      	bne.n	13242 <_printf_i+0x2a>
   13240:	e099      	b.n	13376 <_printf_i+0x15e>
   13242:	2a58      	cmp	r2, #88	; 0x58
   13244:	d054      	beq.n	132f0 <_printf_i+0xd8>
   13246:	0026      	movs	r6, r4
   13248:	3642      	adds	r6, #66	; 0x42
   1324a:	7032      	strb	r2, [r6, #0]
   1324c:	e029      	b.n	132a2 <_printf_i+0x8a>
   1324e:	2a64      	cmp	r2, #100	; 0x64
   13250:	d001      	beq.n	13256 <_printf_i+0x3e>
   13252:	2a69      	cmp	r2, #105	; 0x69
   13254:	d1f7      	bne.n	13246 <_printf_i+0x2e>
   13256:	6821      	ldr	r1, [r4, #0]
   13258:	681a      	ldr	r2, [r3, #0]
   1325a:	0608      	lsls	r0, r1, #24
   1325c:	d523      	bpl.n	132a6 <_printf_i+0x8e>
   1325e:	1d11      	adds	r1, r2, #4
   13260:	6019      	str	r1, [r3, #0]
   13262:	6815      	ldr	r5, [r2, #0]
   13264:	e025      	b.n	132b2 <_printf_i+0x9a>
   13266:	2a73      	cmp	r2, #115	; 0x73
   13268:	d100      	bne.n	1326c <_printf_i+0x54>
   1326a:	e088      	b.n	1337e <_printf_i+0x166>
   1326c:	d808      	bhi.n	13280 <_printf_i+0x68>
   1326e:	2a6f      	cmp	r2, #111	; 0x6f
   13270:	d029      	beq.n	132c6 <_printf_i+0xae>
   13272:	2a70      	cmp	r2, #112	; 0x70
   13274:	d1e7      	bne.n	13246 <_printf_i+0x2e>
   13276:	2220      	movs	r2, #32
   13278:	6809      	ldr	r1, [r1, #0]
   1327a:	430a      	orrs	r2, r1
   1327c:	6022      	str	r2, [r4, #0]
   1327e:	e003      	b.n	13288 <_printf_i+0x70>
   13280:	2a75      	cmp	r2, #117	; 0x75
   13282:	d020      	beq.n	132c6 <_printf_i+0xae>
   13284:	2a78      	cmp	r2, #120	; 0x78
   13286:	d1de      	bne.n	13246 <_printf_i+0x2e>
   13288:	0022      	movs	r2, r4
   1328a:	2178      	movs	r1, #120	; 0x78
   1328c:	3245      	adds	r2, #69	; 0x45
   1328e:	7011      	strb	r1, [r2, #0]
   13290:	4a6c      	ldr	r2, [pc, #432]	; (13444 <_printf_i+0x22c>)
   13292:	e030      	b.n	132f6 <_printf_i+0xde>
   13294:	000e      	movs	r6, r1
   13296:	681a      	ldr	r2, [r3, #0]
   13298:	3642      	adds	r6, #66	; 0x42
   1329a:	1d11      	adds	r1, r2, #4
   1329c:	6019      	str	r1, [r3, #0]
   1329e:	6813      	ldr	r3, [r2, #0]
   132a0:	7033      	strb	r3, [r6, #0]
   132a2:	2301      	movs	r3, #1
   132a4:	e079      	b.n	1339a <_printf_i+0x182>
   132a6:	0649      	lsls	r1, r1, #25
   132a8:	d5d9      	bpl.n	1325e <_printf_i+0x46>
   132aa:	1d11      	adds	r1, r2, #4
   132ac:	6019      	str	r1, [r3, #0]
   132ae:	2300      	movs	r3, #0
   132b0:	5ed5      	ldrsh	r5, [r2, r3]
   132b2:	2d00      	cmp	r5, #0
   132b4:	da03      	bge.n	132be <_printf_i+0xa6>
   132b6:	232d      	movs	r3, #45	; 0x2d
   132b8:	9a04      	ldr	r2, [sp, #16]
   132ba:	426d      	negs	r5, r5
   132bc:	7013      	strb	r3, [r2, #0]
   132be:	4b62      	ldr	r3, [pc, #392]	; (13448 <_printf_i+0x230>)
   132c0:	270a      	movs	r7, #10
   132c2:	9303      	str	r3, [sp, #12]
   132c4:	e02f      	b.n	13326 <_printf_i+0x10e>
   132c6:	6820      	ldr	r0, [r4, #0]
   132c8:	6819      	ldr	r1, [r3, #0]
   132ca:	0605      	lsls	r5, r0, #24
   132cc:	d503      	bpl.n	132d6 <_printf_i+0xbe>
   132ce:	1d08      	adds	r0, r1, #4
   132d0:	6018      	str	r0, [r3, #0]
   132d2:	680d      	ldr	r5, [r1, #0]
   132d4:	e005      	b.n	132e2 <_printf_i+0xca>
   132d6:	0640      	lsls	r0, r0, #25
   132d8:	d5f9      	bpl.n	132ce <_printf_i+0xb6>
   132da:	680d      	ldr	r5, [r1, #0]
   132dc:	1d08      	adds	r0, r1, #4
   132de:	6018      	str	r0, [r3, #0]
   132e0:	b2ad      	uxth	r5, r5
   132e2:	4b59      	ldr	r3, [pc, #356]	; (13448 <_printf_i+0x230>)
   132e4:	2708      	movs	r7, #8
   132e6:	9303      	str	r3, [sp, #12]
   132e8:	2a6f      	cmp	r2, #111	; 0x6f
   132ea:	d018      	beq.n	1331e <_printf_i+0x106>
   132ec:	270a      	movs	r7, #10
   132ee:	e016      	b.n	1331e <_printf_i+0x106>
   132f0:	3145      	adds	r1, #69	; 0x45
   132f2:	700a      	strb	r2, [r1, #0]
   132f4:	4a54      	ldr	r2, [pc, #336]	; (13448 <_printf_i+0x230>)
   132f6:	9203      	str	r2, [sp, #12]
   132f8:	681a      	ldr	r2, [r3, #0]
   132fa:	6821      	ldr	r1, [r4, #0]
   132fc:	1d10      	adds	r0, r2, #4
   132fe:	6018      	str	r0, [r3, #0]
   13300:	6815      	ldr	r5, [r2, #0]
   13302:	0608      	lsls	r0, r1, #24
   13304:	d522      	bpl.n	1334c <_printf_i+0x134>
   13306:	07cb      	lsls	r3, r1, #31
   13308:	d502      	bpl.n	13310 <_printf_i+0xf8>
   1330a:	2320      	movs	r3, #32
   1330c:	4319      	orrs	r1, r3
   1330e:	6021      	str	r1, [r4, #0]
   13310:	2710      	movs	r7, #16
   13312:	2d00      	cmp	r5, #0
   13314:	d103      	bne.n	1331e <_printf_i+0x106>
   13316:	2320      	movs	r3, #32
   13318:	6822      	ldr	r2, [r4, #0]
   1331a:	439a      	bics	r2, r3
   1331c:	6022      	str	r2, [r4, #0]
   1331e:	0023      	movs	r3, r4
   13320:	2200      	movs	r2, #0
   13322:	3343      	adds	r3, #67	; 0x43
   13324:	701a      	strb	r2, [r3, #0]
   13326:	6863      	ldr	r3, [r4, #4]
   13328:	60a3      	str	r3, [r4, #8]
   1332a:	2b00      	cmp	r3, #0
   1332c:	db5c      	blt.n	133e8 <_printf_i+0x1d0>
   1332e:	2204      	movs	r2, #4
   13330:	6821      	ldr	r1, [r4, #0]
   13332:	4391      	bics	r1, r2
   13334:	6021      	str	r1, [r4, #0]
   13336:	2d00      	cmp	r5, #0
   13338:	d158      	bne.n	133ec <_printf_i+0x1d4>
   1333a:	9e04      	ldr	r6, [sp, #16]
   1333c:	2b00      	cmp	r3, #0
   1333e:	d064      	beq.n	1340a <_printf_i+0x1f2>
   13340:	0026      	movs	r6, r4
   13342:	9b03      	ldr	r3, [sp, #12]
   13344:	3642      	adds	r6, #66	; 0x42
   13346:	781b      	ldrb	r3, [r3, #0]
   13348:	7033      	strb	r3, [r6, #0]
   1334a:	e05e      	b.n	1340a <_printf_i+0x1f2>
   1334c:	0648      	lsls	r0, r1, #25
   1334e:	d5da      	bpl.n	13306 <_printf_i+0xee>
   13350:	b2ad      	uxth	r5, r5
   13352:	e7d8      	b.n	13306 <_printf_i+0xee>
   13354:	6809      	ldr	r1, [r1, #0]
   13356:	681a      	ldr	r2, [r3, #0]
   13358:	0608      	lsls	r0, r1, #24
   1335a:	d505      	bpl.n	13368 <_printf_i+0x150>
   1335c:	1d11      	adds	r1, r2, #4
   1335e:	6019      	str	r1, [r3, #0]
   13360:	6813      	ldr	r3, [r2, #0]
   13362:	6962      	ldr	r2, [r4, #20]
   13364:	601a      	str	r2, [r3, #0]
   13366:	e006      	b.n	13376 <_printf_i+0x15e>
   13368:	0649      	lsls	r1, r1, #25
   1336a:	d5f7      	bpl.n	1335c <_printf_i+0x144>
   1336c:	1d11      	adds	r1, r2, #4
   1336e:	6019      	str	r1, [r3, #0]
   13370:	6813      	ldr	r3, [r2, #0]
   13372:	8aa2      	ldrh	r2, [r4, #20]
   13374:	801a      	strh	r2, [r3, #0]
   13376:	2300      	movs	r3, #0
   13378:	9e04      	ldr	r6, [sp, #16]
   1337a:	6123      	str	r3, [r4, #16]
   1337c:	e054      	b.n	13428 <_printf_i+0x210>
   1337e:	681a      	ldr	r2, [r3, #0]
   13380:	1d11      	adds	r1, r2, #4
   13382:	6019      	str	r1, [r3, #0]
   13384:	6816      	ldr	r6, [r2, #0]
   13386:	2100      	movs	r1, #0
   13388:	6862      	ldr	r2, [r4, #4]
   1338a:	0030      	movs	r0, r6
   1338c:	f000 f93e 	bl	1360c <memchr>
   13390:	2800      	cmp	r0, #0
   13392:	d001      	beq.n	13398 <_printf_i+0x180>
   13394:	1b80      	subs	r0, r0, r6
   13396:	6060      	str	r0, [r4, #4]
   13398:	6863      	ldr	r3, [r4, #4]
   1339a:	6123      	str	r3, [r4, #16]
   1339c:	2300      	movs	r3, #0
   1339e:	9a04      	ldr	r2, [sp, #16]
   133a0:	7013      	strb	r3, [r2, #0]
   133a2:	e041      	b.n	13428 <_printf_i+0x210>
   133a4:	6923      	ldr	r3, [r4, #16]
   133a6:	0032      	movs	r2, r6
   133a8:	9906      	ldr	r1, [sp, #24]
   133aa:	9805      	ldr	r0, [sp, #20]
   133ac:	9d07      	ldr	r5, [sp, #28]
   133ae:	47a8      	blx	r5
   133b0:	1c43      	adds	r3, r0, #1
   133b2:	d043      	beq.n	1343c <_printf_i+0x224>
   133b4:	6823      	ldr	r3, [r4, #0]
   133b6:	2500      	movs	r5, #0
   133b8:	079b      	lsls	r3, r3, #30
   133ba:	d40f      	bmi.n	133dc <_printf_i+0x1c4>
   133bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   133be:	68e0      	ldr	r0, [r4, #12]
   133c0:	4298      	cmp	r0, r3
   133c2:	da3d      	bge.n	13440 <_printf_i+0x228>
   133c4:	0018      	movs	r0, r3
   133c6:	e03b      	b.n	13440 <_printf_i+0x228>
   133c8:	0022      	movs	r2, r4
   133ca:	2301      	movs	r3, #1
   133cc:	3219      	adds	r2, #25
   133ce:	9906      	ldr	r1, [sp, #24]
   133d0:	9805      	ldr	r0, [sp, #20]
   133d2:	9e07      	ldr	r6, [sp, #28]
   133d4:	47b0      	blx	r6
   133d6:	1c43      	adds	r3, r0, #1
   133d8:	d030      	beq.n	1343c <_printf_i+0x224>
   133da:	3501      	adds	r5, #1
   133dc:	68e3      	ldr	r3, [r4, #12]
   133de:	9a09      	ldr	r2, [sp, #36]	; 0x24
   133e0:	1a9b      	subs	r3, r3, r2
   133e2:	429d      	cmp	r5, r3
   133e4:	dbf0      	blt.n	133c8 <_printf_i+0x1b0>
   133e6:	e7e9      	b.n	133bc <_printf_i+0x1a4>
   133e8:	2d00      	cmp	r5, #0
   133ea:	d0a9      	beq.n	13340 <_printf_i+0x128>
   133ec:	9e04      	ldr	r6, [sp, #16]
   133ee:	0028      	movs	r0, r5
   133f0:	0039      	movs	r1, r7
   133f2:	f7fc fe63 	bl	100bc <__aeabi_uidivmod>
   133f6:	9b03      	ldr	r3, [sp, #12]
   133f8:	3e01      	subs	r6, #1
   133fa:	5c5b      	ldrb	r3, [r3, r1]
   133fc:	0028      	movs	r0, r5
   133fe:	7033      	strb	r3, [r6, #0]
   13400:	0039      	movs	r1, r7
   13402:	f7fc fdd5 	bl	ffb0 <__udivsi3>
   13406:	1e05      	subs	r5, r0, #0
   13408:	d1f1      	bne.n	133ee <_printf_i+0x1d6>
   1340a:	2f08      	cmp	r7, #8
   1340c:	d109      	bne.n	13422 <_printf_i+0x20a>
   1340e:	6823      	ldr	r3, [r4, #0]
   13410:	07db      	lsls	r3, r3, #31
   13412:	d506      	bpl.n	13422 <_printf_i+0x20a>
   13414:	6863      	ldr	r3, [r4, #4]
   13416:	6922      	ldr	r2, [r4, #16]
   13418:	4293      	cmp	r3, r2
   1341a:	dc02      	bgt.n	13422 <_printf_i+0x20a>
   1341c:	2330      	movs	r3, #48	; 0x30
   1341e:	3e01      	subs	r6, #1
   13420:	7033      	strb	r3, [r6, #0]
   13422:	9b04      	ldr	r3, [sp, #16]
   13424:	1b9b      	subs	r3, r3, r6
   13426:	6123      	str	r3, [r4, #16]
   13428:	9b07      	ldr	r3, [sp, #28]
   1342a:	aa09      	add	r2, sp, #36	; 0x24
   1342c:	9300      	str	r3, [sp, #0]
   1342e:	0021      	movs	r1, r4
   13430:	9b06      	ldr	r3, [sp, #24]
   13432:	9805      	ldr	r0, [sp, #20]
   13434:	f7ff fe82 	bl	1313c <_printf_common>
   13438:	1c43      	adds	r3, r0, #1
   1343a:	d1b3      	bne.n	133a4 <_printf_i+0x18c>
   1343c:	2001      	movs	r0, #1
   1343e:	4240      	negs	r0, r0
   13440:	b00b      	add	sp, #44	; 0x2c
   13442:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13444:	0001548a 	.word	0x0001548a
   13448:	00015479 	.word	0x00015479

0001344c <_putc_r>:
   1344c:	b570      	push	{r4, r5, r6, lr}
   1344e:	0006      	movs	r6, r0
   13450:	000d      	movs	r5, r1
   13452:	0014      	movs	r4, r2
   13454:	2800      	cmp	r0, #0
   13456:	d004      	beq.n	13462 <_putc_r+0x16>
   13458:	6983      	ldr	r3, [r0, #24]
   1345a:	2b00      	cmp	r3, #0
   1345c:	d101      	bne.n	13462 <_putc_r+0x16>
   1345e:	f7ff fabf 	bl	129e0 <__sinit>
   13462:	4b12      	ldr	r3, [pc, #72]	; (134ac <_putc_r+0x60>)
   13464:	429c      	cmp	r4, r3
   13466:	d111      	bne.n	1348c <_putc_r+0x40>
   13468:	6874      	ldr	r4, [r6, #4]
   1346a:	68a3      	ldr	r3, [r4, #8]
   1346c:	3b01      	subs	r3, #1
   1346e:	60a3      	str	r3, [r4, #8]
   13470:	2b00      	cmp	r3, #0
   13472:	da05      	bge.n	13480 <_putc_r+0x34>
   13474:	69a2      	ldr	r2, [r4, #24]
   13476:	4293      	cmp	r3, r2
   13478:	db12      	blt.n	134a0 <_putc_r+0x54>
   1347a:	b2eb      	uxtb	r3, r5
   1347c:	2b0a      	cmp	r3, #10
   1347e:	d00f      	beq.n	134a0 <_putc_r+0x54>
   13480:	6823      	ldr	r3, [r4, #0]
   13482:	b2e8      	uxtb	r0, r5
   13484:	1c5a      	adds	r2, r3, #1
   13486:	6022      	str	r2, [r4, #0]
   13488:	701d      	strb	r5, [r3, #0]
   1348a:	bd70      	pop	{r4, r5, r6, pc}
   1348c:	4b08      	ldr	r3, [pc, #32]	; (134b0 <_putc_r+0x64>)
   1348e:	429c      	cmp	r4, r3
   13490:	d101      	bne.n	13496 <_putc_r+0x4a>
   13492:	68b4      	ldr	r4, [r6, #8]
   13494:	e7e9      	b.n	1346a <_putc_r+0x1e>
   13496:	4b07      	ldr	r3, [pc, #28]	; (134b4 <_putc_r+0x68>)
   13498:	429c      	cmp	r4, r3
   1349a:	d1e6      	bne.n	1346a <_putc_r+0x1e>
   1349c:	68f4      	ldr	r4, [r6, #12]
   1349e:	e7e4      	b.n	1346a <_putc_r+0x1e>
   134a0:	0022      	movs	r2, r4
   134a2:	0029      	movs	r1, r5
   134a4:	0030      	movs	r0, r6
   134a6:	f7ff f8cb 	bl	12640 <__swbuf_r>
   134aa:	e7ee      	b.n	1348a <_putc_r+0x3e>
   134ac:	00015428 	.word	0x00015428
   134b0:	00015448 	.word	0x00015448
   134b4:	00015408 	.word	0x00015408

000134b8 <__sread>:
   134b8:	b570      	push	{r4, r5, r6, lr}
   134ba:	000c      	movs	r4, r1
   134bc:	250e      	movs	r5, #14
   134be:	5f49      	ldrsh	r1, [r1, r5]
   134c0:	f000 f8d6 	bl	13670 <_read_r>
   134c4:	2800      	cmp	r0, #0
   134c6:	db03      	blt.n	134d0 <__sread+0x18>
   134c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   134ca:	181b      	adds	r3, r3, r0
   134cc:	6563      	str	r3, [r4, #84]	; 0x54
   134ce:	bd70      	pop	{r4, r5, r6, pc}
   134d0:	89a3      	ldrh	r3, [r4, #12]
   134d2:	4a02      	ldr	r2, [pc, #8]	; (134dc <__sread+0x24>)
   134d4:	4013      	ands	r3, r2
   134d6:	81a3      	strh	r3, [r4, #12]
   134d8:	e7f9      	b.n	134ce <__sread+0x16>
   134da:	46c0      	nop			; (mov r8, r8)
   134dc:	ffffefff 	.word	0xffffefff

000134e0 <__swrite>:
   134e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   134e2:	001f      	movs	r7, r3
   134e4:	898b      	ldrh	r3, [r1, #12]
   134e6:	0005      	movs	r5, r0
   134e8:	000c      	movs	r4, r1
   134ea:	0016      	movs	r6, r2
   134ec:	05db      	lsls	r3, r3, #23
   134ee:	d505      	bpl.n	134fc <__swrite+0x1c>
   134f0:	230e      	movs	r3, #14
   134f2:	5ec9      	ldrsh	r1, [r1, r3]
   134f4:	2200      	movs	r2, #0
   134f6:	2302      	movs	r3, #2
   134f8:	f000 f874 	bl	135e4 <_lseek_r>
   134fc:	89a3      	ldrh	r3, [r4, #12]
   134fe:	4a05      	ldr	r2, [pc, #20]	; (13514 <__swrite+0x34>)
   13500:	0028      	movs	r0, r5
   13502:	4013      	ands	r3, r2
   13504:	81a3      	strh	r3, [r4, #12]
   13506:	0032      	movs	r2, r6
   13508:	230e      	movs	r3, #14
   1350a:	5ee1      	ldrsh	r1, [r4, r3]
   1350c:	003b      	movs	r3, r7
   1350e:	f000 f81f 	bl	13550 <_write_r>
   13512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13514:	ffffefff 	.word	0xffffefff

00013518 <__sseek>:
   13518:	b570      	push	{r4, r5, r6, lr}
   1351a:	000c      	movs	r4, r1
   1351c:	250e      	movs	r5, #14
   1351e:	5f49      	ldrsh	r1, [r1, r5]
   13520:	f000 f860 	bl	135e4 <_lseek_r>
   13524:	89a3      	ldrh	r3, [r4, #12]
   13526:	1c42      	adds	r2, r0, #1
   13528:	d103      	bne.n	13532 <__sseek+0x1a>
   1352a:	4a05      	ldr	r2, [pc, #20]	; (13540 <__sseek+0x28>)
   1352c:	4013      	ands	r3, r2
   1352e:	81a3      	strh	r3, [r4, #12]
   13530:	bd70      	pop	{r4, r5, r6, pc}
   13532:	2280      	movs	r2, #128	; 0x80
   13534:	0152      	lsls	r2, r2, #5
   13536:	4313      	orrs	r3, r2
   13538:	81a3      	strh	r3, [r4, #12]
   1353a:	6560      	str	r0, [r4, #84]	; 0x54
   1353c:	e7f8      	b.n	13530 <__sseek+0x18>
   1353e:	46c0      	nop			; (mov r8, r8)
   13540:	ffffefff 	.word	0xffffefff

00013544 <__sclose>:
   13544:	b510      	push	{r4, lr}
   13546:	230e      	movs	r3, #14
   13548:	5ec9      	ldrsh	r1, [r1, r3]
   1354a:	f000 f815 	bl	13578 <_close_r>
   1354e:	bd10      	pop	{r4, pc}

00013550 <_write_r>:
   13550:	b570      	push	{r4, r5, r6, lr}
   13552:	0005      	movs	r5, r0
   13554:	0008      	movs	r0, r1
   13556:	0011      	movs	r1, r2
   13558:	2200      	movs	r2, #0
   1355a:	4c06      	ldr	r4, [pc, #24]	; (13574 <_write_r+0x24>)
   1355c:	6022      	str	r2, [r4, #0]
   1355e:	001a      	movs	r2, r3
   13560:	f7f8 fd74 	bl	c04c <_write>
   13564:	1c43      	adds	r3, r0, #1
   13566:	d103      	bne.n	13570 <_write_r+0x20>
   13568:	6823      	ldr	r3, [r4, #0]
   1356a:	2b00      	cmp	r3, #0
   1356c:	d000      	beq.n	13570 <_write_r+0x20>
   1356e:	602b      	str	r3, [r5, #0]
   13570:	bd70      	pop	{r4, r5, r6, pc}
   13572:	46c0      	nop			; (mov r8, r8)
   13574:	20000a80 	.word	0x20000a80

00013578 <_close_r>:
   13578:	2300      	movs	r3, #0
   1357a:	b570      	push	{r4, r5, r6, lr}
   1357c:	4c06      	ldr	r4, [pc, #24]	; (13598 <_close_r+0x20>)
   1357e:	0005      	movs	r5, r0
   13580:	0008      	movs	r0, r1
   13582:	6023      	str	r3, [r4, #0]
   13584:	f7f8 fdb6 	bl	c0f4 <_close>
   13588:	1c43      	adds	r3, r0, #1
   1358a:	d103      	bne.n	13594 <_close_r+0x1c>
   1358c:	6823      	ldr	r3, [r4, #0]
   1358e:	2b00      	cmp	r3, #0
   13590:	d000      	beq.n	13594 <_close_r+0x1c>
   13592:	602b      	str	r3, [r5, #0]
   13594:	bd70      	pop	{r4, r5, r6, pc}
   13596:	46c0      	nop			; (mov r8, r8)
   13598:	20000a80 	.word	0x20000a80

0001359c <_fstat_r>:
   1359c:	2300      	movs	r3, #0
   1359e:	b570      	push	{r4, r5, r6, lr}
   135a0:	4c06      	ldr	r4, [pc, #24]	; (135bc <_fstat_r+0x20>)
   135a2:	0005      	movs	r5, r0
   135a4:	0008      	movs	r0, r1
   135a6:	0011      	movs	r1, r2
   135a8:	6023      	str	r3, [r4, #0]
   135aa:	f7f8 fdad 	bl	c108 <_fstat>
   135ae:	1c43      	adds	r3, r0, #1
   135b0:	d103      	bne.n	135ba <_fstat_r+0x1e>
   135b2:	6823      	ldr	r3, [r4, #0]
   135b4:	2b00      	cmp	r3, #0
   135b6:	d000      	beq.n	135ba <_fstat_r+0x1e>
   135b8:	602b      	str	r3, [r5, #0]
   135ba:	bd70      	pop	{r4, r5, r6, pc}
   135bc:	20000a80 	.word	0x20000a80

000135c0 <_isatty_r>:
   135c0:	2300      	movs	r3, #0
   135c2:	b570      	push	{r4, r5, r6, lr}
   135c4:	4c06      	ldr	r4, [pc, #24]	; (135e0 <_isatty_r+0x20>)
   135c6:	0005      	movs	r5, r0
   135c8:	0008      	movs	r0, r1
   135ca:	6023      	str	r3, [r4, #0]
   135cc:	f7f8 fdaa 	bl	c124 <_isatty>
   135d0:	1c43      	adds	r3, r0, #1
   135d2:	d103      	bne.n	135dc <_isatty_r+0x1c>
   135d4:	6823      	ldr	r3, [r4, #0]
   135d6:	2b00      	cmp	r3, #0
   135d8:	d000      	beq.n	135dc <_isatty_r+0x1c>
   135da:	602b      	str	r3, [r5, #0]
   135dc:	bd70      	pop	{r4, r5, r6, pc}
   135de:	46c0      	nop			; (mov r8, r8)
   135e0:	20000a80 	.word	0x20000a80

000135e4 <_lseek_r>:
   135e4:	b570      	push	{r4, r5, r6, lr}
   135e6:	0005      	movs	r5, r0
   135e8:	0008      	movs	r0, r1
   135ea:	0011      	movs	r1, r2
   135ec:	2200      	movs	r2, #0
   135ee:	4c06      	ldr	r4, [pc, #24]	; (13608 <_lseek_r+0x24>)
   135f0:	6022      	str	r2, [r4, #0]
   135f2:	001a      	movs	r2, r3
   135f4:	f7f8 fd9f 	bl	c136 <_lseek>
   135f8:	1c43      	adds	r3, r0, #1
   135fa:	d103      	bne.n	13604 <_lseek_r+0x20>
   135fc:	6823      	ldr	r3, [r4, #0]
   135fe:	2b00      	cmp	r3, #0
   13600:	d000      	beq.n	13604 <_lseek_r+0x20>
   13602:	602b      	str	r3, [r5, #0]
   13604:	bd70      	pop	{r4, r5, r6, pc}
   13606:	46c0      	nop			; (mov r8, r8)
   13608:	20000a80 	.word	0x20000a80

0001360c <memchr>:
   1360c:	b2c9      	uxtb	r1, r1
   1360e:	1882      	adds	r2, r0, r2
   13610:	4290      	cmp	r0, r2
   13612:	d101      	bne.n	13618 <memchr+0xc>
   13614:	2000      	movs	r0, #0
   13616:	4770      	bx	lr
   13618:	7803      	ldrb	r3, [r0, #0]
   1361a:	428b      	cmp	r3, r1
   1361c:	d0fb      	beq.n	13616 <memchr+0xa>
   1361e:	3001      	adds	r0, #1
   13620:	e7f6      	b.n	13610 <memchr+0x4>

00013622 <_realloc_r>:
   13622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13624:	0007      	movs	r7, r0
   13626:	000d      	movs	r5, r1
   13628:	0016      	movs	r6, r2
   1362a:	2900      	cmp	r1, #0
   1362c:	d105      	bne.n	1363a <_realloc_r+0x18>
   1362e:	0011      	movs	r1, r2
   13630:	f7fe fd1e 	bl	12070 <_malloc_r>
   13634:	0004      	movs	r4, r0
   13636:	0020      	movs	r0, r4
   13638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1363a:	2a00      	cmp	r2, #0
   1363c:	d103      	bne.n	13646 <_realloc_r+0x24>
   1363e:	f7fe fccd 	bl	11fdc <_free_r>
   13642:	0034      	movs	r4, r6
   13644:	e7f7      	b.n	13636 <_realloc_r+0x14>
   13646:	f000 f827 	bl	13698 <_malloc_usable_size_r>
   1364a:	002c      	movs	r4, r5
   1364c:	4286      	cmp	r6, r0
   1364e:	d9f2      	bls.n	13636 <_realloc_r+0x14>
   13650:	0031      	movs	r1, r6
   13652:	0038      	movs	r0, r7
   13654:	f7fe fd0c 	bl	12070 <_malloc_r>
   13658:	1e04      	subs	r4, r0, #0
   1365a:	d0ec      	beq.n	13636 <_realloc_r+0x14>
   1365c:	0029      	movs	r1, r5
   1365e:	0032      	movs	r2, r6
   13660:	f7fe fc98 	bl	11f94 <memcpy>
   13664:	0029      	movs	r1, r5
   13666:	0038      	movs	r0, r7
   13668:	f7fe fcb8 	bl	11fdc <_free_r>
   1366c:	e7e3      	b.n	13636 <_realloc_r+0x14>
	...

00013670 <_read_r>:
   13670:	b570      	push	{r4, r5, r6, lr}
   13672:	0005      	movs	r5, r0
   13674:	0008      	movs	r0, r1
   13676:	0011      	movs	r1, r2
   13678:	2200      	movs	r2, #0
   1367a:	4c06      	ldr	r4, [pc, #24]	; (13694 <_read_r+0x24>)
   1367c:	6022      	str	r2, [r4, #0]
   1367e:	001a      	movs	r2, r3
   13680:	f7f8 fcba 	bl	bff8 <_read>
   13684:	1c43      	adds	r3, r0, #1
   13686:	d103      	bne.n	13690 <_read_r+0x20>
   13688:	6823      	ldr	r3, [r4, #0]
   1368a:	2b00      	cmp	r3, #0
   1368c:	d000      	beq.n	13690 <_read_r+0x20>
   1368e:	602b      	str	r3, [r5, #0]
   13690:	bd70      	pop	{r4, r5, r6, pc}
   13692:	46c0      	nop			; (mov r8, r8)
   13694:	20000a80 	.word	0x20000a80

00013698 <_malloc_usable_size_r>:
   13698:	1f0b      	subs	r3, r1, #4
   1369a:	681b      	ldr	r3, [r3, #0]
   1369c:	1f18      	subs	r0, r3, #4
   1369e:	2b00      	cmp	r3, #0
   136a0:	da01      	bge.n	136a6 <_malloc_usable_size_r+0xe>
   136a2:	580b      	ldr	r3, [r1, r0]
   136a4:	18c0      	adds	r0, r0, r3
   136a6:	4770      	bx	lr
   136a8:	50504128 	.word	0x50504128
   136ac:	52452829 	.word	0x52452829
   136b0:	255b2952 	.word	0x255b2952
   136b4:	255b5d73 	.word	0x255b5d73
   136b8:	00005d64 	.word	0x00005d64
   136bc:	61766e69 	.word	0x61766e69
   136c0:	6564696c 	.word	0x6564696c
   136c4:	636f6920 	.word	0x636f6920
   136c8:	6320746c 	.word	0x6320746c
   136cc:	0000646d 	.word	0x0000646d

000136d0 <__FUNCTION__.14184>:
   136d0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   136e0:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   136f0:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   13700:	20544547 00000000 54534f50 00000020     GET ....POST ...
   13710:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   13720:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   13730:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   13740:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   13750:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   13760:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   13770:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   13780:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   13790:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   137a0:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   137b0:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   137c0:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   137d0:	676e654c 203a6874 00000000 33323130     Length: ....0123
   137e0:	37363534 62613938 66656463 6e617254     456789abcdefTran
   137f0:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   13800:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   13810:	50545448 0000002f 00000d31 000009aa     HTTP/...1.......
   13820:	000009a4 0000099e 00000998 000009b0     ................
   13830:	00000992 000009b0 0000098c 00000986     ................
   13840:	000009b0 00000980 00000980 0000097a     ............z...
   13850:	00000974 0000096e 42002000 42002400     t...n.... .B.$.B
   13860:	42002800 50504128 52452829 255b2952     .(.B(APP)(ERR)[%
   13870:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   13880:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   13890:	00706968 66696828 49572029 485f4946     hip.(hif) WIFI_H
   138a0:	5f54534f 5f564352 4c525443 6220305f     OST_RCV_CTRL_0 b
   138b0:	66207375 006c6961 66696828 49572029     us fail.(hif) WI
   138c0:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   138d0:	6220315f 66207375 006c6961 66696828     _1 bus fail.(hif
   138e0:	64612029 73657264 75622073 61662073     ) address bus fa
   138f0:	00006c69 66696828 6f432029 70757272     il..(hif) Corrup
   13900:	20646574 6b636170 53207465 20657a69     ted packet Size 
   13910:	7525203d 204c3c20 7525203d 2047202c     = %u <L = %u, G 
   13920:	7525203d 504f202c 25203d20 3e583230     = %u, OP = %02X>
   13930:	0000000a 66696828 6e692029 696c6176     ....(hif) invali
   13940:	72672064 2070756f 00004449 66696828     d group ID..(hif
   13950:	6f682029 61207473 64207070 276e6469     ) host app didn'
   13960:	65732074 58522074 6e6f4420 00000065     t set RX Done...
   13970:	66696828 72572029 20676e6f 657a6953     (hif) Wrong Size
   13980:	00000000 66696828 61462029 2065736c     ....(hif) False 
   13990:	65746e69 70757272 6c252074 00000078     interrupt %lx...
   139a0:	66696828 61462029 74206c69 6552206f     (hif) Fail to Re
   139b0:	69206461 7265746e 74707572 67657220     ad interrupt reg
   139c0:	00000000 66696828 41462029 74204c49     ....(hif) FAIL t
   139d0:	6177206f 7075656b 65687420 69686320     o wakeup the chi
   139e0:	00000070 46494828 61462029 74206c69     p...(HIF) Fail t
   139f0:	6168206f 656c646e 746e6920 75727265     o handle interru
   13a00:	25207470 72742064 67412079 2e6e6961     pt %d try Again.
   13a10:	00000a2e 66696820 6365725f 65766965     .... hif_receive
   13a20:	6e49203a 696c6176 72612064 656d7567     : Invalid argume
   13a30:	0000746e 20505041 75716552 65747365     nt..APP Requeste
   13a40:	69532064 6920657a 616c2073 72656772     d Size is larger
   13a50:	61687420 6874206e 65722065 65766963      than the recive
   13a60:	75622064 72656666 7a697320 253c2065     d buffer size <%
   13a70:	253c3e64 000a3e64 20505041 75716552     d><%d>..APP Requ
   13a80:	65747365 64412064 73657264 65622073     ested Address be
   13a90:	646e6f79 65687420 63657220 64657669     yond the recived
   13aa0:	66756220 20726566 72646461 20737365      buffer address 
   13ab0:	20646e61 676e656c 00006874 20705247     and length..GRp 
   13ac0:	6425203f 0000000a                       ? %d....

00013ac8 <__FUNCTION__.12417>:
   13ac8:	5f666968 646e6573 00000000              hif_send....

00013ad4 <__FUNCTION__.12426>:
   13ad4:	5f666968 00727369                       hif_isr.

00013adc <__FUNCTION__.12433>:
   13adc:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00013aec <__FUNCTION__.12448>:
   13aec:	5f666968 65636572 00657669              hif_receive.

00013af8 <__FUNCTION__.12461>:
   13af8:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   13b08:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   13b18:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   13b28:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   13b38:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13b48:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   13b58:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   13b68:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   13b78:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   13b88:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   13b98:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   13ba8:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   13bb8:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
   13bc8:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
   13bd8:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   13be8:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   13bf8:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   13c08:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
   13c18:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
   13c28:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
   13c38:	2065626f 75716572 73747365 72657020     obe requests per
   13c48:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
   13c58:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
   13c68:	2520646c 000a2064 2079654b 6e207369     ld %d ..Key is n
   13c78:	7620746f 64696c61 00000000 44495353     ot valid....SSID
   13c88:	4e454c20 564e4920 44494c41 00000000      LEN INVALID....
   13c98:	49204843 4c41564e 00004449 61766e49     CH INVALID..Inva
   13ca8:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   13cb8:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   13cc8:	20706557 2079656b 676e656c 25206874     Wep key length %
   13cd8:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   13ce8:	656b204b 656c2079 6874676e 00000000     K key length....
   13cf8:	65646e75 656e6966 65732064 79742063     undefined sec ty
   13d08:	00006570 5f53505f 56524553 205f5245     pe.._PS_SERVER_ 
   13d18:	6e207369 6420746f 6e696665 00006465     is not defined..
   13d28:	7473694c 63206e65 6e6e6168 73206c65     Listen channel s
   13d38:	6c756f68 6e6f2064 6220796c 2c312065     hould only be 1,
   13d48:	6f203620 31312072 00000000 45574f50      6 or 11....POWE
   13d58:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   13d68:	2044494c 414d4f44 4e204e49 00454d41     LID DOMAIN NAME.

00013d78 <__FUNCTION__.12385>:
   13d78:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00013d84 <__FUNCTION__.12434>:
   13d84:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   13d94:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   13da4:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   13db4:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
   13dc4:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
   13dd4:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
   13de4:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
   13df4:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
   13e04:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
   13e14:	61747320 3a5d7472 69616620 6572206c      start]: fail re
   13e24:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
   13e34:	0000002e 6c696166 74206465 6564206f     ....failed to de
   13e44:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
   13e54:	68772072 20656c69 74697277 20676e69     r while writing 
   13e64:	00676572 6f727245 68772072 20656c69     reg.Error while 
   13e74:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
   13e84:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   13e94:	6f742064 61657220 00000064 6c75705b     d to read...[pul
   13ea4:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   13eb4:	6f742064 69727720 00006574              d to write..

00013ec0 <__FUNCTION__.11794>:
   13ec0:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00013ed0 <__FUNCTION__.11883>:
   13ed0:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   13ee0:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13ef0:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   13f00:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   13f10:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   13f20:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   13f30:	6e65206f 656c6261 746e6920 75727265     o enable interru
   13f40:	2e737470 0000002e 6d726946 65726177     pts.....Firmware
   13f50:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
   13f60:	00000a75 206e694d 76697264 76207265     u...Min driver v
   13f70:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
   13f80:	72727543 69726420 20726576 3a726576     Curr driver ver:
   13f90:	2e752520 252e7525 00000a75 6d726946      %u.%u.%u...Firm
   13fa0:	65726177 72657620 6e6f6973 73696d20     ware version mis
   13fb0:	6374616d 00002168 696d6e5b 6f747320     match!..[nmi sto
   13fc0:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   13fd0:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   13fe0:	203a5d70 6c696166 696e6920 75622074     p]: fail init bu
   13ff0:	00000073                                s...

00013ff4 <__FUNCTION__.12275>:
   13ff4:	645f6d6e 695f7672 0074696e              nm_drv_init.

00014000 <__FUNCTION__.12282>:
   14000:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00014010 <crc7_syndrome_table>:
   14010:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   14020:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   14030:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   14040:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   14050:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   14060:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   14070:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   14080:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   14090:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   140a0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   140b0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   140c0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   140d0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   140e0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   140f0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   14100:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   14110:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   14120:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   14130:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   14140:	73756220 72726520 2e2e726f 0000002e      bus error......
   14150:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   14160:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   14170:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   14180:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14190:	656c6961 61642064 72206174 6f707365     ailed data respo
   141a0:	2065736e 64616572 7562202c 72652073     nse read, bus er
   141b0:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   141c0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   141d0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   141e0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   141f0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   14200:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   14210:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   14220:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   14230:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   14240:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   14250:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   14260:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   14270:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   14280:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14290:	656c6961 61642064 62206174 6b636f6c     ailed data block
   142a0:	69727720 202c6574 20737562 6f727265      write, bus erro
   142b0:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   142c0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   142d0:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   142e0:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   142f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   14300:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   14310:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   14320:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   14330:	65722064 6e6f7073 202c6573 74697277     d response, writ
   14340:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   14350:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14360:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   14370:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   14380:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
   14390:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
   143a0:	2c65736e 69727720 62206574 6b636f6c     nse, write block
   143b0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   143c0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   143d0:	206b636f 61746164 69727720 2e2e6574     ock data write..
   143e0:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   143f0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   14400:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   14410:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   14420:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   14430:	64616572 67657220 30252820 2e297838     read reg (%08x).
   14440:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14450:	656c6961 61642064 72206174 2e646165     ailed data read.
   14460:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14470:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   14480:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   14490:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   144a0:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   144b0:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   144c0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   144d0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   144e0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   144f0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14500:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   14510:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   14520:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   14530:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   14540:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   14550:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   14560:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   14570:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   14580:	6e692064 6e726574 77206c61 65746972     d internal write
   14590:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   145a0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   145b0:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   145c0:	64692070 002e2e2e 00004d94 00004d94     p id.....M...M..
   145d0:	00004e24 00004ce8 00004d2e 00004d50     $N...L...M..PM..
   145e0:	00004dd6 00004dd6 00004e90 00004cbc     .M...M...N...L..
   145f0:	00004eea 00004eea 00004eea 00004eea     .N...N...N...N..
   14600:	00004d72                                rM..

00014604 <__FUNCTION__.11772>:
   14604:	5f697073 00646d63                       spi_cmd.

0001460c <__FUNCTION__.11780>:
   1460c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00014618 <__FUNCTION__.11796>:
   14618:	5f697073 61746164 6165725f 00000064     spi_data_read...

00014628 <__FUNCTION__.11811>:
   14628:	5f697073 61746164 6972775f 00006574     spi_data_write..

00014638 <__FUNCTION__.11821>:
   14638:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00014648 <__FUNCTION__.11829>:
   14648:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00014658 <__FUNCTION__.11838>:
   14658:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00014668 <__FUNCTION__.11846>:
   14668:	735f6d6e 725f6970 00646165              nm_spi_read.

00014674 <__FUNCTION__.11863>:
   14674:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   14684:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   14694:	6e657272 253c2074 000a3e64 50504128     rrent <%d>..(APP
   146a4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   146b4:	20494e53 65637845 20736465 2078614d     SNI Exceeds Max 
   146c4:	676e654c 00006874 6e6b6e55 206e776f     Length..Unknown 
   146d4:	204c5353 6b636f53 4f207465 6f697470     SSL Socket Optio
   146e4:	6425206e 0000000a 20746f4e 204c5353     n %d....Not SSL 
   146f4:	6b636f53 00007465 00000002 00000003     Socket..........
   14704:	00000028 00000029 00000004 00000005     (...)...........
   14714:	00000006 00000007 0000ffff 0000ffff     ................
   14724:	00000022 00000023 0000ffff 0000ffff     "...#...........
   14734:	0000ffff 0000ffff 00000008 00000009     ................
   14744:	0000000a 0000000b 0000712a 00007130     ........*q..0q..
   14754:	00007130 00007130 00007130 00007130     0q..0q..0q..0q..
   14764:	00007130 00007130 00007130 00007130     0q..0q..0q..0q..
   14774:	00007130 00007130 00007130 00007130     0q..0q..0q..0q..
   14784:	00007130 00007130 00007108 00007130     0q..0q...q..0q..
   14794:	00007130 00007130 00007130 00007130     0q..0q..0q..0q..
   147a4:	00007130 00007130 00007130 00007130     0q..0q..0q..0q..
   147b4:	00007130 00007130 00007130 00007130     0q..0q..0q..0q..
   147c4:	00007130 00007130 00007124 00007130     0q..0q..$q..0q..
   147d4:	00007130 00007130 00007130 00007130     0q..0q..0q..0q..
   147e4:	00007130 00007130 00007130 00007130     0q..0q..0q..0q..
   147f4:	00007130 00007130 00007130 00007130     0q..0q..0q..0q..
   14804:	00007130 00007130 0000711e 000070c6     0q..0q...q...p..
   14814:	000070dc 000070f2 000070ac 42000800     .p...p...p.....B
   14824:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   14834:	42001c00 0c0b0a09 00000e0d 0000a4f2     ...B............
   14844:	0000a56a 0000a56a 0000a510 0000a50a     j...j...........
   14854:	0000a516 0000a4f8 0000a51c 0000a550     ............P...
   14864:	0000a7e0 0000a830 0000a830 0000a82c     ....0...0...,...
   14874:	0000a7d2 0000a7f2 0000a7c2 0000a804     ................
   14884:	0000a816 0000a87e 0000a8ac 0000a8ac     ....~...........
   14894:	0000a8a8 0000a878 0000a884 0000a872     ....x.......r...
   148a4:	0000a88a 0000a890                       ........

000148ac <tcc_modules>:
   148ac:	42002000 42002400 42002800              . .B.$.B.(.B

000148b8 <_tcc_gclk_ids>:
   148b8:	001b1a1a                                ....

000148bc <_tcc_apbcmasks>:
   148bc:	00000100 00000200 00000400              ............

000148c8 <_tcc_maxs>:
   148c8:	00ffffff 00ffffff 0000ffff              ............

000148d4 <_tcc_cc_nums>:
   148d4:	00020204                                ....

000148d8 <_tcc_ow_nums>:
   148d8:	00020408                                ....

000148dc <_tcc_intflag>:
   148dc:	00000001 00000002 00000004 00000008     ................
   148ec:	00001000 00002000 00004000 00008000     ..... ...@......
   148fc:	00010000 00020000 00040000 00080000     ................

0001490c <main_mqtt_broker>:
   1490c:	2e34316d 756f6c63 74716d64 6f632e74     m14.cloudmqtt.co
   1491c:	0000006d 706c6568 00000000 5f726576     m...help....ver_
   1492c:	00006c62 5f726576 00707061 6f697067     bl..ver_app.gpio
   1493c:	7465735f 00000000 6f697067 656c635f     _set....gpio_cle
   1494c:	00007261 6f697067 7465675f 00000000     ar..gpio_get....
   1495c:	0063616d 00007069 786f7270 00000000     mac.ip..prox....
   1496c:	6e697250 74207374 62206568 6c746f6f     Prints the bootl
   1497c:	6564616f 69662072 61776d72 76206572     oader firmware v
   1498c:	69737265 00006e6f 6e697250 74207374     ersion..Prints t
   1499c:	61206568 696c7070 69746163 63206e6f     he application c
   149ac:	2065646f 6d726966 65726177 72657620     ode firmware ver
   149bc:	6e6f6973 00000000 20746553 50472061     sion....Set a GP
   149cc:	70204f49 74206e69 6968206f 2f206867     IO pin to high /
   149dc:	00003120 20746553 50472061 70204f49      1..Set a GPIO p
   149ec:	74206e69 6f6c206f 202f2077 00000030     in to low / 0...
   149fc:	20746547 74617473 666f2065 65707320     Get state of spe
   14a0c:	69666963 47206465 204f4950 006e6970     cified GPIO pin.
   14a1c:	75746572 20736e72 20656874 2063616d     returns the mac 
   14a2c:	72646461 20737365 7420666f 64206568     address of the d
   14a3c:	63697665 00000065 75746572 20736e72     evice...returns 
   14a4c:	20656874 61207069 65726464 6f207373     the ip address o
   14a5c:	68742066 65642065 65636976 206e6920     f the device in 
   14a6c:	20656874 6e617473 64726164 726f6620     the standard for
   14a7c:	3a74616d 2e786520 35353220 3535322e     mat: ex. 255.255
   14a8c:	3535322e 3535322e 00000000 67697254     .255.255....Trig
   14a9c:	20726567 72702061 6d69786f 20797469     ger a proximity 
   14aac:	736e6573 6420726f 61747369 2065636e     sensor distance 
   14abc:	64616572 00676e69 0000000d 746f6f42     reading.....Boot
   14acc:	64616f6c 76207265 69737265 31206e6f     loader version 1
   14adc:	302e302e 0000000d 6c707041 74616369     .0.0....Applicat
   14aec:	206e6f69 6d726966 65726177 72657620     ion firmware ver
   14afc:	6e6f6973 302e3120 000d302e 3a43414d     sion 1.0.0..MAC:
   14b0c:	2e666620 662e6666 66662e66 2e66662e      ff.ff.ff.ff.ff.
   14b1c:	000d6666 203a5049 2e353532 2e353532     ff..IP: 255.255.
   14b2c:	2e353532 0d353532 00000000 696b6154     255.255.....Taki
   14b3c:	7020676e 69786f72 7974696d 6e657320     ng proximity sen
   14b4c:	20726f73 64616572 73676e69 00000000     sor readings....
   14b5c:	4f525245 6e202c52 7573206f 63206863     ERROR, no such c
   14b6c:	616d6d6f 6120646e 6c696176 656c6261     ommand available
   14b7c:	7325203a 00000a0d 00000062 00003031     : %s....b...10..
   14b8c:	00000061 00003931 72656854 73692065     a...19..There is
   14b9c:	206f6e20 68637573 6e697020 61766120      no such pin ava
   14bac:	62616c69 202e656c 20797254 30312042     ilable. Try B 10
   14bbc:	726f202c 31204120 00000d39 206e6950     , or A 19...Pin 
   14bcc:	30314250 20736920 20746573 68676968     PB10 is set high
   14bdc:	0000000d 206e6950 39314150 20736920     ....Pin PA19 is 
   14bec:	20746573 68676968 0000000d 206e6950     set high....Pin 
   14bfc:	30314250 20736920 20746573 0d776f6c     PB10 is set low.
   14c0c:	00000000 206e6950 39314150 20736920     ....Pin PA19 is 
   14c1c:	20746573 0d776f6c 00000000 204e4950     set low.....PIN 
   14c2c:	73736170 202c6465 65646e75 656e6966     passed, undefine
   14c3c:	00000064 6f727245 41203a72 44353254     d...Error: AT25D
   14c4c:	00005846 72617473 6f645f74 6f6c6e77     FX..start_downlo
   14c5c:	203a6461 462d6957 73692069 746f6e20     ad: Wi-Fi is not
   14c6c:	6e6f6320 7463656e 0d2e6465 00000000      connected......
   14c7c:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   14c8c:	75716572 20747365 73207369 20746e65     request is sent 
   14c9c:	65726c61 2e796461 0000000d 72617473     already.....star
   14cac:	6f645f74 6f6c6e77 203a6461 6e6e7572     t_download: runn
   14cbc:	20676e69 6e776f64 64616f6c 726c6120     ing download alr
   14ccc:	79646165 00000d2e 72617473 6f645f74     eady....start_do
   14cdc:	6f6c6e77 203a6461 646e6573 20676e69     wnload: sending 
   14cec:	50545448 71657220 74736575 0d2e2e2e     HTTP request....
   14cfc:	00000000 70747468 2f2f3a73 2e777777     ....https://www.
   14d0c:	73616573 6570752e 652e6e6e 7e2f7564     seas.upenn.edu/~
   14d1c:	63696d6a 72542f6b 42687361 5f7a696f     jmick/TrashBoiz_
   14d2c:	63707061 2e65646f 006e6962 70747468     appcode.bin.http
   14d3c:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   14d4c:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
   14d5c:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
   14d6c:	00000000 70747468 696c635f 5f746e65     ....http_client_
   14d7c:	6c6c6163 6b636162 6572203a 73657571     callback: reques
   14d8c:	6f632074 656c706d 2e646574 0000000d     t completed.....
   14d9c:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   14dac:	6b636162 6572203a 76696563 72206465     back: received r
   14dbc:	6f707365 2065736e 64207525 20617461     esponse %u data 
   14dcc:	657a6973 0d752520 0000000a 70747468     size %u.....http
   14ddc:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   14dec:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   14dfc:	73616572 253a6e6f 000a0d64 6f736572     reason:%d...reso
   14e0c:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
   14e1c:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
   14e2c:	64252e64 0a0d0a0d 00000000 4177747a     d.%d........ztwA
   14e3c:	6768764f 7156394f 00000000 796a7874     OvhgO9Vq....txjy
   14e4c:	6b6d746f 00000000 6e6e6f43 20746365     otmk....Connect 
   14e5c:	6c696166 206f7420 76726573 25287265     fail to server(%
   14e6c:	20212973 72746572 74692079 74756120     s)! retry it aut
   14e7c:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   14e8c:	35657365 672f3631 00232f32 5454514d     ese516/g2/#.MQTT
   14e9c:	6f726220 2072656b 6c636564 20656e69      broker decline 
   14eac:	72756f79 63636120 21737365 72726520     your access! err
   14ebc:	6320726f 2065646f 0a0d6425 00000000     or code %d......
   14ecc:	203e3e20 00000000 69736e69 69206564      >> ....inside i
   14edc:	00000d66 5454514d 73696420 6e6e6f63     f...MQTT disconn
   14eec:	65746365 00000d64 69666977 3a62635f     ected...wifi_cb:
   14efc:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   14f0c:	0d444554 00000000 69666977 3a62635f     TED.....wifi_cb:
   14f1c:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   14f2c:	5443454e 000d4445 6e6e6570 30343731     NECTED..penn1740
   14f3c:	69666977 00000000 50726941 4e6e6e65     wifi....AirPennN
   14f4c:	442d7465 63697665 00000065 69666977     et-Device...wifi
   14f5c:	3a62635f 20504920 72646461 20737365     _cb: IP address 
   14f6c:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
   14f7c:	00000000 666e6f63 72756769 74685f65     ....configure_ht
   14f8c:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   14f9c:	65696c63 6920746e 6974696e 7a696c61     client initializ
   14fac:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   14fbc:	25207365 0a0d2964 00000000 5454514d     es %d)......MQTT
   14fcc:	696e6920 6c616974 74617a69 206e6f69      initialization 
   14fdc:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   14fec:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   14ffc:	5454514d 67657220 65747369 61632072     MQTT register ca
   1500c:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   1501c:	726f7272 646f6320 73692065 64252820     rror code is (%d
   1502c:	000a0d29 6e69616d 326d203a 69775f6d     )...main: m2m_wi
   1503c:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
   1504c:	2021726f 73657228 29642520 00000a0d     or! (res %d)....
   1505c:	6e69616d 6f63203a 63656e6e 676e6974     main: connecting
   1506c:	206f7420 69466957 20504120 2e2e7325      to WiFi AP %s..
   1507c:	000a0d2e 74747562 00006e6f 00006425     ....button..%d..
   1508c:	35657365 672f3631 72702f32 0000786f     ese516/g2/prox..
   1509c:	00000000 20656854 74736964 65636e61     ....The distance
   150ac:	20736920 63206425 6e61206d 68742064      is %d cm and th
   150bc:	65722065 69206461 64252073 000a0d20     e read is %d ...
   150cc:	6e696f50 74612074 6d6f7320 69687465     Point at somethi
   150dc:	6220676e 65777465 31206e65 30382d30     ng between 10-80
   150ec:	0d6d6320 00000000 0d206425 0000000a      cm.....%d .....
   150fc:	786f7250 61655220 676e6964 6f432073     Prox Readings Co
   1510c:	656c706d 000d6574 35657365 672f3631     mplete..ese516/g
   1511c:	6c622f32 72706575 00746e69 70747468     2/blueprint.http
   1512c:	2f2f3a73 2e777777 73616573 6570752e     s://www.seas.upe
   1513c:	652e6e6e 7e2f7564 63696d6a 72742f6b     nn.edu/~jmick/tr
   1514c:	5f687361 00000000 64257325 00007325     ash_....%s%d%s..
   1515c:	67706a2e 00000000 5454514d 44505520     .jpg....MQTT UPD
   1516c:	0d455441 00000000 35657365 672f3631     ATE.....ese516/g
   1517c:	6c612f32 00747265 73617254 61632068     2/alert.Trash ca
   1518c:	4449206e 3030203a 73692031 6c756620     n ID: 001 is ful
   1519c:	4c202e6c 7461636f 6f206465 69737475     l. Located outsi
   151ac:	6f206564 6f542066 20656e77 2e333231     de of Towne 123.
   151bc:	726f4620 726f6d20 6e692065 6d726f66      For more inform
   151cc:	6f697461 76202c6e 74697369 74746820     ation, visit htt
   151dc:	2f3a7370 6f6f672f 2f6c672e 67715944     ps://goo.gl/DYqg
   151ec:	00004755 666e6f43 72756769 6f697461     UG..Configuratio
   151fc:	6f43206e 656c706d 00006574 74697257     n Complete..Writ
   1520c:	68272065 27706c65 206f7420 20656573     e 'help' to see 
   1521c:	206c6c61 20656874 636e7566 6e6f6974     all the function
   1522c:	000a0d73 0000cb3c 0000cb7e 0000cb88     s...<...~.......
   1523c:	0000cb92 0000cb98 0000cb9e 0000cba4     ................
   1524c:	0000cbae 0000cbb8 00776f70 00000000     ........pow.....
   1525c:	00000000                                ....

00015260 <TWO52>:
   15260:	00000000 43300000 00000000 c3300000     ......0C......0.
   15270:	7349514d 00007064 00010bc0 00010ba2     MQIsdp..........
   15280:	00010b5c 00010a7a 00010b5c 00010b94     \...z...\.......
   15290:	00010b5c 00010a7a 00010ba2 00010ba2     \...z...........
   152a0:	00010b94 00010a7a 00010a72 00010a72     ....z...r...r...
   152b0:	00010a72 00010dd8 00011420 000112e0     r....... .......
   152c0:	000112e0 000112dc 000113f8 000113f8     ................
   152d0:	000113ea 000112dc 000113f8 000113ea     ................
   152e0:	000113f8 000112dc 00011400 00011400     ................
   152f0:	00011400 00011604                       ........

000152f8 <_global_impure_ptr>:
   152f8:	2000006c 4f500043 00584953 2000002e              l.. C.POSIX...

00015306 <_ctype_>:
   15306:	20202000 20202020 28282020 20282828     .         ((((( 
   15316:	20202020 20202020 20202020 20202020                     
   15326:	10108820 10101010 10101010 10101010      ...............
   15336:	04040410 04040404 10040404 10101010     ................
   15346:	41411010 41414141 01010101 01010101     ..AAAAAA........
   15356:	01010101 01010101 01010101 10101010     ................
   15366:	42421010 42424242 02020202 02020202     ..BBBBBB........
   15376:	02020202 02020202 02020202 10101010     ................
   15386:	00000020 00000000 00000000 00000000      ...............
	...

00015408 <__sf_fake_stderr>:
	...

00015428 <__sf_fake_stdin>:
	...

00015448 <__sf_fake_stdout>:
	...
   15468:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   15478:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   15488:	31300046 35343332 39383736 64636261     F.0123456789abcd
   15498:	00006665                                ef..

0001549c <_init>:
   1549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1549e:	46c0      	nop			; (mov r8, r8)
   154a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   154a2:	bc08      	pop	{r3}
   154a4:	469e      	mov	lr, r3
   154a6:	4770      	bx	lr

000154a8 <__init_array_start>:
   154a8:	000000dd 	.word	0x000000dd

000154ac <_fini>:
   154ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154ae:	46c0      	nop			; (mov r8, r8)
   154b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   154b2:	bc08      	pop	{r3}
   154b4:	469e      	mov	lr, r3
   154b6:	4770      	bx	lr

000154b8 <__fini_array_start>:
   154b8:	000000b5 	.word	0x000000b5
